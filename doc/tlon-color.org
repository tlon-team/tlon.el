#+title: tlon - Color Palette Management
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

* Color Palette Management (=tlon-color.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-color
:END:

This module provides functions to manage color palettes for the Tl√∂n frontend projects (specifically =uqbar-front=). It allows loading predefined palettes into CSS and JavaScript files, storing palettes derived from CSS, deleting palettes, and interactively manipulating color values (hue, saturation, lightness) within the CSS file.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-dependencies
:END:

+ =tlon-core=
+ =transient=
+ =color-extras= (external package, likely required for color manipulation and conversion)

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-options
:END:

#+vindex: tlon-color-format-in-frontend-files
+ ~tlon-color-format-in-frontend-files~ :: Specifies the preferred color format ("hex" or "hsl") to use when writing color values to the frontend CSS file (~globals.css~). Defaults to "hex". Note: The JavaScript file (~theme-colors.js~) currently always uses "hsl".

#+vindex: tlon-colors-change-step
+ ~tlon-colors-change-step~ :: The default step value (integer) used when increasing or decreasing hue, saturation, or lightness using the interactive commands. Defaults to 1.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-commands
:END:

This section details the interactive commands provided by =tlon-color.el=.

*** Open Global CSS File
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-open-globals-file
:END:
#+findex: tlon-color-open-globals-file
The command ~tlon-color-open-globals-file~ simply opens the main CSS file (~globals.css~) where color palettes are defined for the frontend.

*** Load Color Palette
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-load-palette
:END:
#+findex: tlon-color-load-palette
The command ~tlon-color-load-palette~ loads a specified, previously stored color =PALETTE= into the frontend files.

1. Prompts the user to select a =PALETTE= name from the list stored in ~tlon-color-palettes~.
2. Optionally takes a =LANGUAGE= argument (`css` or `js`). If nil, it loads the palette into both the CSS and JS files.
3. For each specified language:
   - Removes the existing color sections using ~tlon-color-remove-colors-section~.
   - Inserts the new color sections for the selected =PALETTE= using ~tlon-color-insert-colors-section~.

*** Save Frontend Files
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-save-frontend-files
:END:
#+findex: tlon-color-save-frontend-files
The command ~tlon-color-save-frontend-files~ is a convenience command designed to synchronize color changes made in the CSS file with the JavaScript file.

1. Saves the current state of the ~globals.css~ buffer.
2. Parses the current colors in ~globals.css~ and temporarily stores them under the name "temp-palette" using ~tlon-color-store-palette~ (overwriting if it exists).
3. Loads this "temp-palette" into the ~theme-colors.js~ file using ~tlon-color-load-palette~ with the `js` language argument.

*** Store Color Palette
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-store-palette
:END:
#+findex: tlon-color-store-palette
The command ~tlon-color-store-palette~ parses the current color definitions in ~globals.css~ and saves them as a named palette in the ~tlon-color-palettes~ variable and persists them to ~tlon-color-palette-file~.

1. Prompts the user for a =PALETTE-NAME=.
2. Parses the CSS file using ~tlon-color-parse-css~ to extract light and dark theme colors.
3. Checks if a palette with the given name already exists.
4. If it exists, asks for confirmation to overwrite (unless the optional =OVERWRITE= argument is non-nil). Updates the existing entry.
5. If it doesn't exist, adds the new palette to ~tlon-color-palettes~.
6. Saves the updated ~tlon-color-palettes~ list to ~tlon-color-palette-file~ using ~tlon-color-save-palettes-to-file~.
7. Messages the user about the success (added or updated).

*** Delete Color Palette
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-delete-palette
:END:
#+findex: tlon-color-delete-palette
The command ~tlon-color-delete-palette~ removes a stored color palette.

1. Prompts the user to select a =PALETTE= name from the existing palettes in ~tlon-color-palettes~.
2. Removes all entries matching the selected name from the ~tlon-color-palettes~ list.
3. Saves the updated list back to ~tlon-color-palette-file~ using ~tlon-color-save-palettes-to-file~.
4. Messages the user about the successful removal.

*** Color Manipulation Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-manipulation-commands
:END:
These commands allow interactive modification of color values (HSL) directly within the ~globals.css~ file. They operate on the color string at point, replace it with the modified value, and then call ~tlon-color-save-frontend-files~ to synchronize the change with the JS file. They rely on functions from the =color-extras= package.

+ *Hue*:
  #+findex: tlon-color-increase-hue-at-point
  + ~tlon-color-increase-hue-at-point~ :: Increases hue by ~tlon-colors-change-step~.
  #+findex: tlon-color-decrease-hue-at-point
  + ~tlon-color-decrease-hue-at-point~ :: Decreases hue by ~tlon-colors-change-step~.
  #+findex: tlon-color-change-hue-at-point
  + ~tlon-color-change-hue-at-point~ :: Prompts for a change amount (e.g., "+5", "-10") and applies it to the hue.
+ *Saturation*:
  #+findex: tlon-color-increase-saturation-at-point
  + ~tlon-color-increase-saturation-at-point~ :: Increases saturation by ~tlon-colors-change-step~.
  #+findex: tlon-color-decrease-saturation-at-point
  + ~tlon-color-decrease-saturation-at-point~ :: Decreases saturation by ~tlon-colors-change-step~.
  #+findex: tlon-color-change-saturation-at-point
  + ~tlon-color-change-saturation-at-point~ :: Prompts for a change amount and applies it to the saturation.
+ *Lightness*:
  #+findex: tlon-color-increase-lightness-at-point
  + ~tlon-color-increase-lightness-at-point~ :: Increases lightness by ~tlon-colors-change-step~.
  #+findex: tlon-color-decrease-lightness-at-point
  + ~tlon-color-decrease-lightness-at-point~ :: Decreases lightness by ~tlon-colors-change-step~.
  #+findex: tlon-color-change-lightness-at-point
  + ~tlon-color-change-lightness-at-point~ :: Prompts for a change amount and applies it to the lightness.

*** Color Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-menu
:END:
#+findex: tlon-color-menu
The command ~tlon-color-menu~ activates a =transient= menu interface providing access to most of the color management and manipulation commands.

It includes sections for:
+ *Change colors*: Access to the hue, saturation, and lightness increase/decrease/change commands. Includes an option to set the change step.
+ *Palette*: Access to load, store, and delete palettes. Includes commands to open the CSS file, save frontend files, and invoke color conversion/contrast functions from =color-extras=. Includes an option to set the frontend format preference.

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-internals
:END:

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization.

*** Constants and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-constants-vars
:END:

#+vindex: tlon-color-palettes
+ ~tlon-color-palettes~ :: The central variable holding the list of defined color palettes. It's an alist where the key is the palette name (string) and the value is another alist representing the colors. Each color entry is =(CSS-VARIABLE . (LIGHT-VALUE . DARK-VALUE))=. Loaded from and saved to ~tlon-color-palette-file~.
#+vindex: tlon-color-palette-file
+ ~tlon-color-palette-file~ :: Path to the Elisp file where ~tlon-color-palettes~ is persisted.
#+vindex: tlon-color-globals-css-file
+ ~tlon-color-globals-css-file~ :: Path to the main CSS file in the =uqbar-front= repository.
#+vindex: tlon-color-theme-colors-js-file
+ ~tlon-color-theme-colors-js-file~ :: Path to the JavaScript theme colors file in the =uqbar-front= repository.
#+vindex: tlon-color-globals-css-header
+ ~tlon-color-globals-css-header~ :: Format string for the start of a theme section in CSS.
#+vindex: tlon-color-globals-css-footer
+ ~tlon-color-globals-css-footer~ :: String marking the end of a theme section in CSS.
#+vindex: tlon-color-globals-css-remove-pattern
+ ~tlon-color-globals-css-remove-pattern~ :: Regex pattern used to remove entire theme sections from the CSS file.
#+vindex: tlon-color-theme-colors-js-header
+ ~tlon-color-theme-colors-js-header~ :: Format string for the start of a theme section in JS.
#+vindex: tlon-color-theme-colors-js-footer
+ ~tlon-color-theme-colors-js-footer~ :: String marking the end of a theme section in JS.

*** Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-helpers
:END:

#+findex: tlon-color-read-palette
+ ~tlon-color-read-palette~ :: Prompts the user to select an existing palette name using completion based on ~tlon-color-palettes~. Returns the selected name as a list (for interactive use).
#+findex: tlon-color-load-palettes
+ ~tlon-color-load-palettes~ :: Loads the palettes from ~tlon-color-palette-file~ into the ~tlon-color-palettes~ variable if the file exists. Called automatically when =tlon-color.el= is loaded.
#+findex: tlon-color-save-palettes-to-file
+ ~tlon-color-save-palettes-to-file~ :: Saves the current value of ~tlon-color-palettes~ to ~tlon-color-palette-file~ in Elisp format.
#+findex: tlon-color-remove-colors-section
+ ~tlon-color-remove-colors-section~ :: Removes the color definition sections from the specified =LANGUAGE= file (CSS or JS) using the appropriate patterns.
#+findex: tlon-color-insert-colors-section
+ ~tlon-color-insert-colors-section~ :: Inserts the color definitions for a given =PALETTE= into the specified =LANGUAGE= file. It encodes the palette using ~tlon-color-encode~, inserts the result, converts colors to the desired format using =color-extras-convert-all= (respecting ~tlon-color-format-in-frontend-files~ for CSS, forcing HSL for JS), and saves the buffer.
#+findex: tlon-color-encode
+ ~tlon-color-encode~ :: Top-level function to encode a =PALETTE= for a specific =LANGUAGE=. Calls the appropriate CSS or JS encoding function for both light and dark themes and concatenates the results.
#+findex: tlon-color-encode-globals-css
+ ~tlon-color-encode-globals-css~ :: Generates the CSS string for a specific =THEME= (light/dark) of a =PALETTE=. Uses ~tlon-color-encode-frontend-variables~.
#+findex: tlon-color-encode-theme-colors-js
+ ~tlon-color-encode-theme-colors-js~ :: Generates the JS string for a specific =THEME= (light/dark) of a =PALETTE=. Uses ~tlon-color-encode-frontend-variables~.
#+findex: tlon-color-encode-frontend-variables
+ ~tlon-color-encode-frontend-variables~ :: Iterates through the color definitions in a =PALETTE=, extracts the correct value for the given =THEME=, and formats it as a CSS variable declaration or a JS key-value pair based on the =LANGUAGE=.
#+findex: tlon-color-parse-css
+ ~tlon-color-parse-css~ :: Parses the ~globals.css~ file to extract the current color definitions for both light and dark themes. Calls ~tlon-color-parse-css-theme~ for each theme and combines the results into the standard palette alist format.
#+findex: tlon-color-parse-css-theme
+ ~tlon-color-parse-css-theme~ :: Parses a specific =THEME= section within the =CSS-BUFFER=. It temporarily converts all colors in the buffer to hex format using =color-extras-convert-all=, finds the theme section, extracts all CSS variable definitions (=--variable: #value;=), and returns them as an alist.
#+findex: tlon-color-change-value-at-point
+ ~tlon-color-change-value-at-point~ :: Core function for interactive color manipulation. Takes the =COMPONENT= ("h", "s", or "l"), =DIRECTION= ("+" or "-"), and optional =STEP=. Finds the color at point, calls the appropriate =ct-edit-hsluv-*= function from =color-extras=, inserts the result, and calls ~tlon-color-save-frontend-files~.

*** Transient Infix Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-transient-infixes
:END:
These functions define the behavior of the options within the ~tlon-color-menu~.

#+findex: tlon-color-format-in-frontend-files-infix
+ ~tlon-color-format-in-frontend-files-infix~ :: Reads the desired format ("hex" or "hsl") from the user to set the local value of ~tlon-color-format-in-frontend-files~ for the current menu invocation.
#+findex: tlon-color-change-step-infix
+ ~tlon-color-change-step-infix~ :: Reads a number from the user to set the local value of ~tlon-colors-change-step~ for the current menu invocation.
