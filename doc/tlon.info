This is tlon.info, produced by makeinfo version 7.2 from tlon.texi.

INFO-DIR-SECTION Emacs misc features
START-INFO-DIR-ENTRY
* Tlon: (tlon).         Companion Emacs package for Tlön.
END-INFO-DIR-ENTRY


File: tlon.info,  Node: Top,  Next: AI Functionality (tlon-aiel),  Up: (dir)

tlon
****

‘tlon’ provides all the Emacs functionality used by the Tlön team.

* Menu:

* AI Functionality (‘tlon-ai.el’): AI Functionality (tlon-aiel).
* API Interaction (‘tlon-api.el’): API Interaction (tlon-apiel).
* BibTeX Functionality (‘tlon-tex.el’): BibTeX Functionality (tlon-texel).
* Clock Functionality (‘tlon-clock.el’): Clock Functionality (tlon-clockel).
* Color Palette Management (‘tlon-color.el’): Color Palette Management (tlon-colorel).
* Contact Management (‘tlon-contacts.el’): Contact Management (tlon-contactsel).
* Counterpart Navigation and Comparison (‘tlon-counterpart.el’): Counterpart Navigation and Comparison (tlon-counterpartel).
* DeepL Integration (‘tlon-deepl.el’): DeepL Integration (tlon-deeplel).
* Dictionary Functionality (‘tlon-dict.el’): Dictionary Functionality (tlon-dictel).
* Forge Integration (‘tlon-forg.el’): Forge Integration (tlon-forgel).
* Glossary Management (‘tlon-glossary.el’): Glossary Management (tlon-glossaryel).
* Image Processing (‘tlon-images.el’): Image Processing (tlon-imagesel).
* Job Management (‘tlon-jobs.el’): Job Management (tlon-jobsel).
* Markdown Functionality (‘tlon-md.el’): Markdown Functionality (tlon-mdel).
* Meeting Management (‘tlon-meet.el’): Meeting Management (tlon-meetel).
* Repository Management (‘tlon-repos.el’): Repository Management (tlon-reposel).
* Search Functionality (‘tlon-search.el’): Search Functionality (tlon-searchel).
* Split Window Alignment (‘tlon-split.el’): Split Window Alignment (tlon-splitel).
* Text-to-Speech (‘tlon-tts.el’): Text-to-Speech (tlon-ttsel).
* URL Handling (‘tlon-url.el’): URL Handling (tlon-urlel).
* Word Counting and Statistics (‘tlon-count.el’): Word Counting and Statistics (tlon-countel).
* Indices::

-- The Detailed Node Listing --

AI Functionality (‘tlon-ai.el’)

* User Options::
* Commands::
* Internal Functions and Variables::

User Options

* Batch Processing Function::
* Overwrite Image Alt Text::
* Edit Prompt Before Sending::
* Auto Proofread Reference Articles::
* Custom Models::

Commands

* Translation Variants::
* Writing Reference Articles::
* Proofreading Reference Articles::
* Rewriting Text::
* Image Description::
* Setting Image Alt Text::
* Fixing Markdown Formatting::
* Generating Abstracts and Synopses::
* Setting Language in BibTeX Entries::
* Phonetic Transcription::
* Audio Transcription::
* Mathematical Expression Handling::
* Fixing Encoding Errors::
* Propagating Changes Across Repositories::
* Transient Menu::

API Interaction (‘tlon-api.el’)

* Dependencies::
* Configuration::
* Commands: Commands (1).
* Internal Functions and Variables: Internal Functions and Variables (1).

Configuration

* API Routes::
* Local API URL::
* Log Buffer Variable::

Commands

* Make API Request::
* Authentication Token::
* Log Handling::
* File Upload::
* Transient Menu: Transient Menu (1).

Internal Functions and Variables

* Authentication::
* Route Handling::
* Response and Log Processing::
* Citation Retrieval::

BibTeX Functionality (‘tlon-tex.el’)

* Dependencies: Dependencies (1).
* User Options: User Options (1).
* Configuration: Configuration (1).
* Commands: Commands (2).
* Internal Functions and Variables: Internal Functions and Variables (2).

Configuration

* Constants::
* Variables::

Commands

* Abstract Management::
* Entry Management::
* URL Management::
* Translation Entry Creation::
* Citation Conversion and Replacement::
* Reporting and Field Finding::
* Transient Menu: Transient Menu (2).

Internal Functions and Variables

* Abstract Fetching Helpers::
* Entry Management Helpers::
* Autokey Generation::
* URL and Bibliography Helpers::
* Citation Replacement Helpers::
* Abstract Translation Helpers::
* Reporting Helpers::
* Field Modification Advice::

Clock Functionality (‘tlon-clock.el’)

* Commands: Commands (3).
* Internal Functions and Variables: Internal Functions and Variables (3).

Commands

* Open Clocked Task's File::
* Open Clocked Task's Issue::
* Copy Region or Buffer::

Internal Functions and Variables

* Getting Clock Information::
* Utility Functions::
* Variables: Variables (1).

Color Palette Management (‘tlon-color.el’)

* Dependencies: Dependencies (2).
* User Options: User Options (2).
* Commands: Commands (4).
* Internal Functions and Variables: Internal Functions and Variables (4).

Commands

* Open Global CSS File::
* Load Color Palette::
* Save Frontend Files::
* Store Color Palette::
* Delete Color Palette::
* Color Manipulation Commands::
* Color Menu::

Internal Functions and Variables

* Constants and Variables::
* Helper Functions::
* Transient Infix Commands::

Contact Management (‘tlon-contacts.el’)

* Dependencies: Dependencies (3).
* Configuration: Configuration (2).
* Commands: Commands (5).
* Internal Functions and Variables: Internal Functions and Variables (5).

Configuration

* Constants: Constants (1).
* Variables: Variables (2).

Commands

* Create Contact::
* Edit Contact Properties::
* Copy Property Value::
* Edit Single Property::
* Dynamically Defined Edit Commands::
* Transient Menu: Transient Menu (3).

Counterpart Navigation and Comparison (‘tlon-counterpart.el’)

* Dependencies: Dependencies (4).
* Commands: Commands (6).
* Internal Functions and Variables: Internal Functions and Variables (6).

Commands

* Finding Counterparts::
* Opening Counterparts::
* Paragraph Operations::
* Transient Menu: Transient Menu (4).

Internal Functions and Variables

* Counterpart Finding Logic::
* Paragraph Handling Logic::
* Temporary Utility Functions::

DeepL Integration (‘tlon-deepl.el’)

* Dependencies: Dependencies (5).
* Configuration: Configuration (3).
* Commands: Commands (7).
* Internal Functions and Variables: Internal Functions and Variables (7).

Configuration

* API Key and URL::
* API Call Parameters::
* Supported Glossary Languages::
* Internal State Variables::

Commands

* Translation::
* Glossaries::
* Utility Commands::
* Transient Menu: Transient Menu (5).

Internal Functions and Variables

* API Request Handling::
* Callbacks::
* Payload Encoders & Formatters::
* Helper Functions: Helper Functions (1).

Dictionary Functionality (‘tlon-dict.el’)

* Dependencies: Dependencies (6).
* Commands: Commands (8).
* Transient Menu: Transient Menu (6).

Commands

* Get Synonyms via Reverso::

Forge Integration (‘tlon-forg.el’)

* Dependencies: Dependencies (7).
* User Options: User Options (3).
* Commands: Commands (9).
* Internal Functions and Variables: Internal Functions and Variables (8).

Commands

* Visiting Issues and TODOs::
* Capturing Issues as TODOs::
* Reconciling Issues and TODOs::
* Counterpart Navigation::
* Creating Issues and TODOs::
* Closing Issues and TODOs::
* Sorting Org Entries::
* File Handling (Associated with Issues)::
* Miscellaneous::
* Transient Menu: Transient Menu (7).

Internal Functions and Variables

* Constants: Constants (2).
* File Path Management::
* Issue and TODO Data Retrieval::
* Issue and TODO Modification::
* Capture and Reconciliation Helpers::
* Validation and Checks::
* GitHub Project Integration (Experimental)::
* Miscellaneous Helpers::

Glossary Management (‘tlon-glossary.el’)

* Configuration: Configuration (4).
* Commands: Commands (10).
* Internal Functions and Variables: Internal Functions and Variables (9).

Configuration

* Glossary Source File::
* Glossary Recipients::

Commands

* Edit Glossary Entry::
* Extract Glossary::
* Share Glossary::
* Glossary Menu::

Internal Functions and Variables

* Glossary Data Handling::
* Glossary Extraction Formatting::
* Git Integration (Currently Unused/TODO)::

Image Processing (‘tlon-images.el’)

* Dependencies: Dependencies (8).
* User Options: User Options (4).
* Commands: Commands (11).
* Internal Functions and Variables: Internal Functions and Variables (10).

Commands

* Auto Process Image::
* Reduce Image Brightness::
* Invert Image Colors::
* Make Image Non-Transparent::
* Transient Menu: Transient Menu (8).

Internal Functions and Variables

* ImageMagick Command Constants::
* InvertOrNot API Integration::
* Helper Functions: Helper Functions (2).
* Transient Infix Commands: Transient Infix Commands (1).

Job Management (‘tlon-jobs.el’)

* Configuration: Configuration (5).
* Commands: Commands (12).
* Internal Functions and Variables: Internal Functions and Variables (11).

Configuration

* Job Labels and Phases::
* Org ID Constants::
* Jobs File Variable::

Commands

* Start or Finish Job Phase::
* Create Job::
* Create Job Record::
* Create Heading in jobs.org: Create Heading in jobsorg.
* Transient Menu: Transient Menu (9).

Internal Functions and Variables

* File and Path Management::
* Job Phase Logic::
* Issue and TODO Interaction::
* jobs.org Helpers: jobsorg Helpers.

Markdown Functionality (‘tlon-md.el’)

* Dependencies: Dependencies (9).
* User Options: User Options (5).
* Commands: Commands (13).
* Internal Functions and Variables: Internal Functions and Variables (12).

Commands

* YAML Front Matter::
* Links and Sorting::
* Tag Insertion/Editing (HTML, MDX, SSML): Tag Insertion/Editing (HTML MDX SSML).
* Note Classification::
* Miscellaneous Commands::

Internal Functions and Variables

* Constants: Constants (3).
* Tag Section Handling::
* Link and Sorting Helpers::
* Tag Handling Logic::
* Attribute Readers::
* Note Handling::
* Miscellaneous Helpers: Miscellaneous Helpers (1).

Meeting Management (‘tlon-meet.el’)

* Dependencies: Dependencies (10).
* User Options: User Options (6).
* Commands: Commands (14).
* Org Mode Integration::
* Internal Functions and Variables: Internal Functions and Variables (13).

Commands

* Create or Visit Meeting Issues::
* Linking Issues for Discussion::
* Recording Processing::
* Transient Menu: Transient Menu (10).

Internal Functions and Variables

* Issue Handling Helpers::
* Diarize and Summarize Helpers::
* Repository and User Helpers::

Repository Management (‘tlon-repos.el’)

* Dependencies: Dependencies (11).
* Commands: Commands (15).
* Internal Functions and Variables: Internal Functions and Variables (14).

Commands

* Version Control (VC) Operations::
* Forge Integration::
* Git Crypt::
* Transient Menu: Transient Menu (11).

Search Functionality (‘tlon-search.el’)

* Dependencies: Dependencies (12).
* Commands: Commands (16).
* Internal Functions and Variables: Internal Functions and Variables (15).

Commands

* Search Commits::
* Search Commit Diffs::
* Search Files (Ripgrep)::
* Search for Translation::
* Search Menu::

Split Window Alignment (‘tlon-split.el’)

* Dependencies: Dependencies (13).
* User Options: User Options (7).
* Commands: Commands (17).
* Internal Functions and Variables: Internal Functions and Variables (16).

Commands

* Toggle Split Mode::
* Manual Alignment::
* Reset Split Mode Hook::
* Sentence Highlighting (Experimental/Unused)::
* Transient Menu: Transient Menu (12).

Internal Functions and Variables

* State Variables::
* Helper Functions: Helper Functions (3).

Text-to-Speech (‘tlon-tts.el’)

* Dependencies: Dependencies (14).
* User Options: User Options (8).
* Commands: Commands (18).
* Internal Functions and Variables: Internal Functions and Variables (17).

User Options

* General TTS Settings::
* Engine-Specific Settings::

Commands

* Core Workflow::
* Audio File Management::
* Reporting and Data Editing::
* Transient Menu: Transient Menu (13).

Internal Functions and Variables

* Configuration and Constants::
* Staging Buffer and Preparation::
* Chunking and Processing::
* Engine Request Functions::
* SSML and Text Processing Helpers::
* Audio File Helpers::

URL Handling (‘tlon-url.el’)

* Dependencies: Dependencies (15).
* Commands: Commands (19).
* Internal Functions and Variables: Internal Functions and Variables (18).

Commands

* Check URLs in File::
* Get Archived URL::
* Replace URL Across Projects::
* Transient Menu: Transient Menu (14).

Word Counting and Statistics (‘tlon-count.el’)

* Dependencies: Dependencies (16).
* Configuration: Configuration (6).
* Commands: Commands (20).
* Internal Functions and Variables: Internal Functions and Variables (19).

Commands

* Word Counting::
* Org Table Generation and Export::
* BibTeX Key Counting::
* Historic Word Count::
* Transient Menu: Transient Menu (15).

Internal Functions and Variables

* Word Count Filtering::
* Org Table and Export Helpers::
* BibTeX Key Counting Helpers::

Indices

* Function index::
* Variable index::
* Concept index::


File: tlon.info,  Node: AI Functionality (tlon-aiel),  Next: API Interaction (tlon-apiel),  Prev: Top,  Up: Top

1 AI Functionality (‘tlon-ai.el’)
*********************************

This module provides integration with AI models for various tasks such
as summarization, translation, image description, and code manipulation
within the Tlön ecosystem.  It leverages the ‘gptel’ package and its
extensions.

* Menu:

* User Options::
* Commands::
* Internal Functions and Variables::


File: tlon.info,  Node: User Options,  Next: Commands,  Up: AI Functionality (tlon-aiel)

1.1 User Options
================

This section describes the user-configurable options available in
‘tlon-ai.el’.

* Menu:

* Batch Processing Function::
* Overwrite Image Alt Text::
* Edit Prompt Before Sending::
* Auto Proofread Reference Articles::
* Custom Models::


File: tlon.info,  Node: Batch Processing Function,  Next: Overwrite Image Alt Text,  Up: User Options

1.1.1 Batch Processing Function
-------------------------------

The user option ‘tlon-ai-batch-fun’ specifies a function to be run when
‘tlon’ operates in batch mode.  This allows for automated processing of
multiple items using AI functions.  Set this to the symbol of the
desired function.

     (setq tlon-ai-batch-fun 'my-batch-processing-function)


File: tlon.info,  Node: Overwrite Image Alt Text,  Next: Edit Prompt Before Sending,  Prev: Batch Processing Function,  Up: User Options

1.1.2 Overwrite Image Alt Text
------------------------------

The user option ‘tlon-ai-overwrite-alt-text’ controls whether existing
alt text in image tags should be overwritten when generating new
descriptions.

   • If non-nil, existing alt text will be replaced by the newly
     generated text when using ‘tlon-ai-set-image-alt-text-in-buffer’.
   • If nil (the default), existing alt text will be preserved.

   Note: The command ‘tlon-ai-set-image-alt-text’ (operating on a single
image tag at point) *always* overwrites existing alt text, regardless of
this option's setting.


File: tlon.info,  Node: Edit Prompt Before Sending,  Next: Auto Proofread Reference Articles,  Prev: Overwrite Image Alt Text,  Up: User Options

1.1.3 Edit Prompt Before Sending
--------------------------------

When the user option ‘tlon-ai-edit-prompt’ is non-nil, ‘tlon’ will
prompt the user to edit the generated prompt string before sending it to
the AI model.  This allows for on-the-fly customization of AI requests.

     (setq tlon-ai-edit-prompt t)


File: tlon.info,  Node: Auto Proofread Reference Articles,  Next: Custom Models,  Prev: Edit Prompt Before Sending,  Up: User Options

1.1.4 Auto Proofread Reference Articles
---------------------------------------

If the user option ‘tlon-ai-auto-proofread’ is set to a non-nil value,
‘tlon’ will automatically initiate the proofreading process using the
configured AI model after a reference article has been generated via
‘tlon-ai-create-reference-article’.


File: tlon.info,  Node: Custom Models,  Prev: Auto Proofread Reference Articles,  Up: User Options

1.1.5 Custom Models
-------------------

‘tlon’ allows specifying different AI models for specific tasks,
overriding the default ‘gptel’ model configuration.  This enables using
models optimized for particular capabilities (e.g., large context window
for summarization, advanced reasoning for proofreading).

   Each option takes a cons cell ‘(BACKEND . MODEL)’, where ‘BACKEND’ is
a string (e.g., ‘"ChatGPT"’, ‘"Gemini"’) and ‘MODEL’ is a symbol
representing the specific model (e.g., ‘gpt-4.5-preview’,
‘gemini-2.0-flash-thinking-exp-01-21’).  Refer to
‘gptel-extras-ai-models’ for available options.  If an option is nil,
the default ‘gptel’ model is used for that task.

‘tlon-ai-summarization-model’
     Model for summarizing text (e.g., generating abstracts, synopses).
     It's recommended to use a model with a large context window.
          (setq tlon-ai-summarization-model '("Gemini" . gemini-2.0-flash-thinking-exp-01-21))

‘tlon-ai-markdown-fix-model’
     Model for fixing Markdown formatting issues, especially when
     comparing original and translated documents.
          (setq tlon-ai-markdown-fix-model '("Gemini" . gemini-2.0-flash-thinking-exp-01-21))

‘tlon-ai-create-reference-article-model’
     Model used by ‘tlon-ai-create-reference-article’ to draft
     encyclopedia-style articles based on provided source materials.
          (setq tlon-ai-create-reference-article-model nil) ; Use default gptel model

‘tlon-ai-proofread-reference-article-model’
     Model used by ‘tlon-ai-proofread-reference-article’ for correcting
     factual errors, calculation mistakes, etc., in generated reference
     articles.  Often benefits from a more powerful model.
          (setq tlon-ai-proofread-reference-article-model '("ChatGPT" . gpt-4.5-preview))


File: tlon.info,  Node: Commands,  Next: Internal Functions and Variables,  Prev: User Options,  Up: AI Functionality (tlon-aiel)

1.2 Commands
============

This section details the interactive commands provided by ‘tlon-ai.el’.

* Menu:

* Translation Variants::
* Writing Reference Articles::
* Proofreading Reference Articles::
* Rewriting Text::
* Image Description::
* Setting Image Alt Text::
* Fixing Markdown Formatting::
* Generating Abstracts and Synopses::
* Setting Language in BibTeX Entries::
* Phonetic Transcription::
* Audio Transcription::
* Mathematical Expression Handling::
* Fixing Encoding Errors::
* Propagating Changes Across Repositories::
* Transient Menu::


File: tlon.info,  Node: Translation Variants,  Next: Writing Reference Articles,  Up: Commands

1.2.1 Translation Variants
--------------------------

The command ‘tlon-ai-translate’ prompts for text and returns ten
alternative Spanish translations using the configured AI model.  The
user can then select the preferred translation from the minibuffer,
which is copied to the kill ring.


File: tlon.info,  Node: Writing Reference Articles,  Next: Proofreading Reference Articles,  Prev: Translation Variants,  Up: Commands

1.2.2 Writing Reference Articles
--------------------------------

The command ‘tlon-ai-create-reference-article’ generates a new
encyclopedia-style article based on the current buffer's content and
linked sources.

   It extracts the title from the buffer's front matter (‘title’ key).
It determines the language of the article from the current file.  It
constructs a prompt using ‘tlon-ai-write-reference-article-prompt’,
instructing the AI to synthesize information primarily from attached
source files (added to the ‘gptel’ context via
‘tlon-add-add-sources-to-context’) and an optional glossary (added via
‘tlon-add-glossary-to-context’).

   The AI response (the generated article) is placed in a new buffer.
If the user confirms, it can then be proofread using
‘tlon-ai-proofread-reference-article’.  The model used can be customized
via ‘tlon-ai-create-reference-article-model’.


File: tlon.info,  Node: Proofreading Reference Articles,  Next: Rewriting Text,  Prev: Writing Reference Articles,  Up: Commands

1.2.3 Proofreading Reference Articles
-------------------------------------

The command ‘tlon-ai-proofread-reference-article’ sends the content of
the current buffer (assumed to be a reference article) to the AI for
proofreading.

   It uses the prompt defined in
‘tlon-ai-proofread-reference-article-prompt’, instructing the AI to act
as an expert proofreader, focusing on factual errors, calculation
mistakes, and other important issues within the context of an
encyclopedia of effective altruism.  The language is determined from the
current file.

   The AI's response, containing the proofread version or comments, is
displayed in a new buffer named "*Comments on [Article Title]*".  The
model used can be customized via
‘tlon-ai-proofread-reference-article-model’.


File: tlon.info,  Node: Rewriting Text,  Next: Image Description,  Prev: Proofreading Reference Articles,  Up: Commands

1.2.4 Rewriting Text
--------------------

The command ‘tlon-ai-rewrite’ prompts for text (defaulting to the active
region) and requests ten alternative Spanish rewrites from the AI using
the prompt ‘tlon-ai-rewrite-prompt’.

   The user selects one of the suggested variants from the minibuffer.
If a region was active, it is deleted and replaced with the selected
variant.  The selected variant is also copied to the kill ring.


File: tlon.info,  Node: Image Description,  Next: Setting Image Alt Text,  Prev: Rewriting Text,  Up: Commands

1.2.5 Image Description
-----------------------

The command ‘tlon-ai-describe-image’ generates a concise description
(alt text) for an image file.

   It prompts the user to select an image file if one isn't
automatically detected (e.g., from a ‘Figure’ tag at point or the file
at point in Dired).  It determines the desired language for the
description based on the context (e.g., the language of the current
buffer).

   It uses the prompt from ‘tlon-ai-describe-image-prompt’ for the
determined language, instructing the AI to provide a one- or
two-sentence description under 50 words.  The image file is added to the
‘gptel’ context for the request.

   By default, the resulting description is displayed as a message.  An
optional CALLBACK argument can be provided programmatically to handle
the response differently.


File: tlon.info,  Node: Setting Image Alt Text,  Next: Fixing Markdown Formatting,  Prev: Image Description,  Up: Commands

1.2.6 Setting Image Alt Text
----------------------------

The command ‘tlon-ai-set-image-alt-text’ automatically generates and
inserts an alt text description for an image tag (‘Figure’ or
‘OurWorldInData’) at point.

   It extracts the image source (‘src’) attribute from the tag, locates
the corresponding image file (handling local paths and Our World In Data
URLs), and then calls ‘tlon-ai-describe-image’ to get the description.
The generated alt text is then inserted into the ‘alt’ attribute of the
image tag at point.  This command *always* overwrites any existing alt
text.

   The command ‘tlon-ai-set-image-alt-text-in-buffer’ iterates through
all ‘Figure’ and ‘OurWorldInData’ tags in the current buffer and calls
‘tlon-ai-set-image-alt-text’ for each one.

   Whether it overwrites existing alt text depends on the value of the
user option ‘tlon-ai-overwrite-alt-text’.


File: tlon.info,  Node: Fixing Markdown Formatting,  Next: Generating Abstracts and Synopses,  Prev: Setting Image Alt Text,  Up: Commands

1.2.7 Fixing Markdown Formatting
--------------------------------

The command ‘tlon-ai-fix-markdown-format’ attempts to restore lost or
altered formatting in a translated Markdown file by comparing it
paragraph by paragraph with its original counterpart.

   It identifies the original file using ‘tlon-get-counterpart’.  It
retrieves corresponding paragraphs from both files using
‘tlon-get-corresponding-paragraphs’.  For each pair of paragraphs, it
sends a request to the AI using the prompt
‘tlon-ai-fix-markdown-format-prompt’, asking it to apply the formatting
from the original paragraph to the translated text.

   The command processes paragraphs concurrently (up to a limit defined
internally) and includes a retry mechanism with exponential backoff for
failed requests.  If a paragraph fails permanently after 3 retries, the
process aborts.

   Upon successful completion of all paragraphs, the reconstructed
content is saved to a new file named ‘[original-filename]--fixed.md’.
The user is then prompted to optionally start an ‘ediff’ session between
the original translation and the newly fixed file.  The model used can
be customized via ‘tlon-ai-markdown-fix-model’.


File: tlon.info,  Node: Generating Abstracts and Synopses,  Next: Setting Language in BibTeX Entries,  Prev: Fixing Markdown Formatting,  Up: Commands

1.2.8 Generating Abstracts and Synopses
---------------------------------------

These commands generate summaries of documents using AI.

‘tlon-get-abstract-with-or-without-ai’
     This command first attempts to extract an abstract using non-AI
     methods via ‘tlon-fetch-and-set-abstract’.  If that fails (e.g., no
     abstract found in metadata or the file), it falls back to
     generating one using AI via ‘tlon-get-abstract-with-ai’.

‘tlon-get-abstract-with-ai’
     Generates a standard abstract (typically 100-250 words) for the
     specified content (file, region, PDF/HTML associated with BibTeX
     entry, etc.).  It first asks the AI to check if an abstract already
     exists in the text using the prompt ‘tlon-ai-get-abstract-prompts’.
     If found, the AI returns it; otherwise, the AI generates a new
     abstract following the guidelines in
     ‘tlon-ai-how-to-write-abstract-prompt’.  The language is either
     detected automatically or selected by the user.  The result is
     typically inserted into the ‘abstract’ field of the corresponding
     BibTeX entry or copied to the kill ring.  The model used can be
     customized via ‘tlon-ai-summarization-model’.

‘tlon-shorten-abstract-with-ai’
     Takes an existing abstract (typically from the ‘abstract’ field of
     the BibTeX entry at point) and asks the AI to shorten it to meet
     the length requirements specified in
     ‘tlon-tex-max-abstract-length’, using the prompt
     ‘tlon-ai-shorten-abstract-prompts’.  The shortened abstract
     replaces the original one in the BibTeX entry.

‘tlon-get-synopsis-with-ai’
     Generates a more detailed summary (synopsis, typically 1000-2000
     words) of the specified content.  It uses the prompt
     ‘tlon-ai-get-synopsis-prompts’.  The resulting synopsis is copied
     to the kill ring.  The model used can be customized via
     ‘tlon-ai-summarization-model’.

‘tlon-get-abstract-with-ai-from-pdf’
     A convenience command that specifically targets the PDF file
     associated with the BibTeX entry at point and calls
     ‘tlon-get-abstract-with-ai’ on it.

‘tlon-get-abstract-with-ai-from-html’
     A convenience command that specifically targets the HTML file
     associated with the BibTeX entry at point and calls
     ‘tlon-get-abstract-with-ai’ on it.


File: tlon.info,  Node: Setting Language in BibTeX Entries,  Next: Phonetic Transcription,  Prev: Generating Abstracts and Synopses,  Up: Commands

1.2.9 Setting Language in BibTeX Entries
----------------------------------------

The command ‘tlon-ai-set-language-bibtex’ automatically detects and sets
the ‘langid’ field for the BibTeX entry at point.

   It sends the BibTeX entry text to the AI using the prompt
‘tlon-ai-detect-language-bibtex-prompt’.

   • If the entry already has a ‘langid’ field:
        • If the detected language matches the existing ‘langid’, no
          change is made (unless the existing ‘langid’ needs
          validation/standardization).
        • If they conflict, the user is prompted to choose which
          language to use.
   • If the entry has no ‘langid’ field, the detected language is added.

   The language code is validated and standardized using ‘tlon’'s
language functions before being set.


File: tlon.info,  Node: Phonetic Transcription,  Next: Audio Transcription,  Prev: Setting Language in BibTeX Entries,  Up: Commands

1.2.10 Phonetic Transcription
-----------------------------

The command ‘tlon-ai-phonetically-transcribe’ generates the
International Phonetic Alphabet (IPA) transcription for a given text
string.

   It prompts for the text to transcribe (defaulting to the active
region or word at point) and determines the language (from the file or
user selection).  It uses the prompt
‘tlon-ai-transcribe-phonetically-prompt’ for the specified language.
The resulting IPA transcription is copied to the kill ring.

   The command ‘tlon-phonetically-transcribe-in-buffer’ iterates through
each line in the current buffer, calls ‘tlon-ai-phonetically-transcribe’
on the line's content, and inserts the resulting IPA transcription after
the original line, separated by a comma.


File: tlon.info,  Node: Audio Transcription,  Next: Mathematical Expression Handling,  Prev: Phonetic Transcription,  Up: Commands

1.2.11 Audio Transcription
--------------------------

The command ‘tlon-transcribe-audio’ transcribes an audio file using
OpenAI's Whisper API.

   It prompts the user to select an audio file.  It retrieves the OpenAI
API key (prompting to set it if necessary via
‘tlon-tts-openai-get-or-set-key’).  It then makes an asynchronous
request to the OpenAI API endpoint using ‘curl’, uploading the audio
file.

   A CALLBACK function must be provided programmatically to handle the
result.  The callback receives the transcript text on success, or nil on
failure.


File: tlon.info,  Node: Mathematical Expression Handling,  Next: Fixing Encoding Errors,  Prev: Audio Transcription,  Up: Commands

1.2.12 Mathematical Expression Handling
---------------------------------------

‘tlon-ai-convert-math’
     Converts a natural language mathematical expression into LaTeX
     format.  It prompts for the expression (defaulting to the region or
     ‘Math’ tag content) and language.  It uses the prompt
     ‘tlon-ai-convert-math-prompt’.  If point is on a ‘Math’ tag, the
     LaTeX result is inserted as the second value in the ‘alt’ attribute
     (preserving the original expression as the first value).
     Otherwise, the result is copied to the kill ring and messaged.

‘tlon-ai-translate-math’
     Converts a LaTeX mathematical expression into a natural language
     description (alt text).  It prompts for the expression (defaulting
     to the region or ‘Math’ tag content) and language.  It uses the
     prompt ‘tlon-ai-translate-math-prompt’.  If point is on a ‘Math’
     tag, the natural language result is inserted as the first value in
     the ‘alt’ attribute (preserving the LaTeX expression as the second
     value).  Otherwise, the result is copied to the kill ring and
     messaged.


File: tlon.info,  Node: Fixing Encoding Errors,  Next: Propagating Changes Across Repositories,  Prev: Mathematical Expression Handling,  Up: Commands

1.2.13 Fixing Encoding Errors
-----------------------------

The command ‘tlon-ai-fix-encoding-in-string’ attempts to correct
encoding errors within a given string.

   It typically operates on a JSON value identified at point using
helper functions.  It determines the language associated with the JSON
key.  It sends the string to the AI using the prompt
‘tlon-ai-fix-encoding-prompt’, asking it to correct encoding issues like
‘cuýn’ or ‘pronosticaci¾3\263n’.  The corrected string is then copied to
the kill ring.

   The command ‘tlon-ai-fix-encoding-in-buffer’ is a specialized command
designed to process a large JSON buffer containing potentially many
encoding errors, chunk by chunk.  It saves the corrected chunks to
separate files.  (This seems highly specific to a particular data
processing task).

   The command ‘tlon-ai-join-files’ concatenates the content of chunk
files (e.g., ‘chunk0.json’, ‘chunk1.json’, ...) generated by
‘tlon-ai-fix-encoding-in-buffer’ back into a single output file (e.g.,
‘fixed.json’).


File: tlon.info,  Node: Propagating Changes Across Repositories,  Next: Transient Menu,  Prev: Fixing Encoding Errors,  Up: Commands

1.2.14 Propagating Changes Across Repositories
----------------------------------------------

The command ‘tlon-ai-propagate-changes’ attempts to automatically apply
changes made in the latest commit of the current file to its
corresponding files in other ‘tlon’ content repositories (originals and
translations).

  1. It identifies the current file, its repository, language, and the
     latest commit affecting it using ‘tlon’ and Git functions.
  2. It retrieves the diff for the file from that commit using ‘git
     show’.
  3. It identifies all other ‘tlon’ content repositories (excluding the
     source repo).
  4. For each target repository:
        • It determines the corresponding target file using metadata
          lookups (‘tlon-ai--find-target-file’), handling different
          scenarios (original to translation, translation to original,
          translation to translation).
        • If a target file is found and exists, it constructs a prompt
          asking the AI to apply the *semantic equivalent* of the source
          diff to the target file's content (provided in the prompt).
        • It sends the request to the AI.
        • The callback function (‘tlon-ai--propagate-changes-callback’)
          receives the AI's response (the modified target content).
        • If the AI response is valid, the callback overwrites the
          target file with the new content.
        • It then stages and commits the changes in the target
          repository using Git, with a commit message indicating the
          source commit and repository.

   This command relies heavily on accurate metadata (‘original_path’)
and consistent file structures across repositories.


File: tlon.info,  Node: Transient Menu,  Prev: Propagating Changes Across Repositories,  Up: Commands

1.2.15 Transient Menu
---------------------

The command ‘tlon-ai-menu’ displays a ‘transient’ menu interface,
providing quick access to most of the AI-related commands and options
described above.  It allows toggling options like
‘tlon-ai-overwrite-alt-text’ and ‘tlon-ai-edit-prompt’, selecting models
for specific tasks, setting batch functions, and invoking the various AI
operations (summarization, image description, translation, etc.).


File: tlon.info,  Node: Internal Functions and Variables,  Prev: Commands,  Up: AI Functionality (tlon-aiel)

1.3 Internal Functions and Variables
====================================

This section lists some non-interactive functions and variables used
internally by ‘tlon-ai.el’.  While not intended for direct user
interaction, understanding them can be helpful for customization or
debugging.

   • ‘tlon-make-gptel-request’: Core function for sending requests to
     the AI model via ‘gptel’.  Handles prompt formatting, model
     selection, context checks, and callbacks.
   • ‘tlon-ai-maybe-edit-prompt’: Conditionally allows editing the
     prompt based on ‘tlon-ai-edit-prompt’.
   • ‘tlon-warn-if-gptel-context’: Checks if the ‘gptel’ context is
     empty and warns the user if not.
   • Callback functions (e.g., ‘tlon-ai-callback-return’,
     ‘tlon-ai-callback-copy’, ‘tlon-ai-callback-save’,
     ‘tlon-ai-callback-insert’, ‘tlon-ai-callback-fail’): Handle
     responses from AI requests in various ways (returning value,
     copying, saving, inserting, error handling).
   • ‘tlon-ai-batch-continue’: Helper for batch processing, moves to the
     next item and calls the batch function.
   • ‘tlon-get-string-dwim’: Retrieves text content from various sources
     (file, region, buffer, PDF/HTML associated with BibTeX entry) for
     AI processing.
   • ‘tlon-get-file-as-string’: Reads the content of a file (handling
     PDF conversion) into a string.
   • Prompt constants (e.g., ‘tlon-ai-detect-language-prompt’,
     ‘tlon-ai-translate-prompt’,
     ‘tlon-ai-write-reference-article-prompt’, etc.): Store the various
     prompt templates used for different AI tasks, often including
     language-specific versions.
   • Change propagation helpers (‘tlon-ai--get-commit-diff’,
     ‘tlon-ai--find-target-file’, ‘tlon-ai--commit-in-repo’,
     ‘tlon-ai--propagate-changes-callback’): Internal functions used by
     ‘tlon-ai-propagate-changes’.
   • Transient infix definitions (e.g.,
     ‘tlon-ai-infix-toggle-overwrite-alt-text’,
     ‘tlon-ai-batch-fun-infix’, model selection infixes): Define the
     interactive elements within the ‘tlon-ai-menu’.


File: tlon.info,  Node: API Interaction (tlon-apiel),  Next: BibTeX Functionality (tlon-texel),  Prev: AI Functionality (tlon-aiel),  Up: Top

2 API Interaction (‘tlon-api.el’)
*********************************

This module facilitates interaction with the Tlön Babel APIs,
specifically the ‘uqbar’ API.  It handles authentication (token
retrieval), making requests to various API endpoints, processing
responses (especially logs), retrieving citations, and uploading files.

* Menu:

* Dependencies::
* Configuration::
* Commands: Commands (1).
* Internal Functions and Variables: Internal Functions and Variables (1).


File: tlon.info,  Node: Dependencies,  Next: Configuration,  Up: API Interaction (tlon-apiel)

2.1 Dependencies
================

   • ‘request’ (for making HTTP requests)
   • ‘tlon-core’
   • ‘transient’ (for the menu)
   • ‘json’ (for parsing responses)
   • ‘auth-source’ (for credentials)
   • ‘url’ (for URL encoding)


File: tlon.info,  Node: Configuration,  Next: Commands (1),  Prev: Dependencies,  Up: API Interaction (tlon-apiel)

2.2 Configuration
=================

* Menu:

* API Routes::
* Local API URL::
* Log Buffer Variable::


File: tlon.info,  Node: API Routes,  Next: Local API URL,  Up: Configuration

2.2.1 API Routes
----------------

The constant ‘tlon-uqbar-api-routes’ defines the available endpoints for
the ‘uqbar’ API.  Each entry is a plist specifying the ‘:route’ (URL
path, potentially with ‘%s’ for language), ‘:type’ (HTTP method, e.g.,
"GET", "POST"), and a ‘:docstring’ explaining the endpoint's purpose.
The ‘%s’ in routes is dynamically replaced with the current
‘tlon-translation-language’ by ‘tlon-api-get-routes’.


File: tlon.info,  Node: Local API URL,  Next: Log Buffer Variable,  Prev: API Routes,  Up: Configuration

2.2.2 Local API URL
-------------------

The constant ‘tlon-api-local-url’ defines the base URL for the local
development instance of the ‘uqbar’ API.


File: tlon.info,  Node: Log Buffer Variable,  Prev: Local API URL,  Up: Configuration

2.2.3 Log Buffer Variable
-------------------------

The variable ‘tlon-api-most-recent-log-buffer’ stores the name
(typically the route) of the buffer containing the most recently
received API log response.  Used by ‘tlon-api-open-most-recent-log’.


File: tlon.info,  Node: Commands (1),  Next: Internal Functions and Variables (1),  Prev: Configuration,  Up: API Interaction (tlon-apiel)

2.3 Commands
============

This section details the interactive commands provided by ‘tlon-api.el’.

* Menu:

* Make API Request::
* Authentication Token::
* Log Handling::
* File Upload::
* Transient Menu: Transient Menu (1).


File: tlon.info,  Node: Make API Request,  Next: Authentication Token,  Up: Commands (1)

2.3.1 Make API Request
----------------------

The command ‘tlon-api-request’ makes a request to a specified ‘ROUTE’ on
the ‘uqbar’ API.
  1. Prompts the user to select the ‘ROUTE’ using
     ‘tlon-select-api-route’.
  2. Optionally takes ‘FORCE-UPDATE’ (non-nil or prefix argument) to
     append ‘?force=true’ to the URL.
  3. Optionally takes ‘POP-TO-BUFFER’ (non-nil) to display the log
     response buffer immediately.
  4. Retrieves an authentication token using ‘tlon-api-get-token’.
  5. Makes the HTTP request using the ‘request’ library, specifying the
     method (‘:type’) and headers (including the bearer token).
  6. Parses the JSON response.
  7. On success, calls ‘tlon-api-print-response’ to process and display
     the log data, and messages the user about completion.

‘tlon-api-request-force’
     A convenience command that calls ‘tlon-api-request’ with the
     ‘FORCE-UPDATE’ argument set to ‘t’.


File: tlon.info,  Node: Authentication Token,  Next: Log Handling,  Prev: Make API Request,  Up: Commands (1)

2.3.2 Authentication Token
--------------------------

The command ‘tlon-api-copy-token’ retrieves an authentication token for
the local API using ‘tlon-api-get-token’ and copies it to the kill ring.


File: tlon.info,  Node: Log Handling,  Next: File Upload,  Prev: Authentication Token,  Up: Commands (1)

2.3.3 Log Handling
------------------

‘tlon-api-open-most-recent-log’
     Opens the buffer associated with the most recent API log response
     (whose name is stored in ‘tlon-api-most-recent-log-buffer’).  If
     the buffer doesn't exist, it re-requests the log from the API using
     ‘tlon-api-request’ with ‘POP-TO-BUFFER’ set.

‘tlon-api-open-local-log’
     Opens the local log file maintained by the ‘uqbar-api’ backend
     itself (typically ‘logs/uqbar-api.log’ within the ‘uqbar-api’
     repository).


File: tlon.info,  Node: File Upload,  Next: Transient Menu (1),  Prev: Log Handling,  Up: Commands (1)

2.3.4 File Upload
-----------------

The command ‘tlon-upload-file-to-server’ uploads a local ‘FILE’ to a
remote ‘DESTINATION’ using the ‘scp’ command asynchronously.
  1. Prompts for the ‘FILE’ to upload (using ‘files-extras-read-file’).

  2. Prompts for the remote ‘DESTINATION’ directory.
  3. Optionally takes ‘DELETE-AFTER-UPLOAD’ (non-nil) to delete the
     local file upon successful upload.
  4. Starts the ‘scp’ process in the background.
  5. Sets a process sentinel to monitor the upload status, displaying
     messages for success or failure.  If successful and requested,
     deletes the local file.  If failed, displays the error and the
     ‘*scp-upload*’ buffer.
  6. If called from Dired, reverts the buffer after initiating the
     upload.


File: tlon.info,  Node: Transient Menu (1),  Prev: File Upload,  Up: Commands (1)

2.3.5 Transient Menu
--------------------

The command ‘tlon-api-menu’ activates a ‘transient’ menu interface for
API operations.

   It provides the following groups and commands:
   • *Requests*:
     ‘q’
          Make request (‘tlon-api-request’)
     ‘Q’
          Make force request (‘tlon-api-request-force’)
   • *Logs*:
     ‘l’
          Open most recent log (‘tlon-api-open-most-recent-log’)
     ‘L’
          Open local log (‘tlon-api-open-local-log’)
   • *Misc*:
     ‘t’
          Copy access token (‘tlon-api-copy-token’)


File: tlon.info,  Node: Internal Functions and Variables (1),  Prev: Commands (1),  Up: API Interaction (tlon-apiel)

2.4 Internal Functions and Variables
====================================

This section lists non-interactive functions used internally or
potentially useful for advanced customization.

* Menu:

* Authentication::
* Route Handling::
* Response and Log Processing::
* Citation Retrieval::


File: tlon.info,  Node: Authentication,  Next: Route Handling,  Up: Internal Functions and Variables (1)

2.4.1 Authentication
--------------------

‘tlon-api-get-token’
     Retrieves an authentication token for a given ‘SITE’ (URL). It gets
     credentials using ‘tlon-api-get-credentials’, makes a POST request
     to the ‘/api/auth/login’ endpoint, parses the JSON response, and
     calls the provided ‘CALLBACK’ function with the extracted
     ‘access_token’.

‘tlon-api-get-credentials’
     Constructs the data string for the authentication request.  It
     retrieves the username (based on ‘user-full-name’ via
     ‘tlon-user-lookup’) and the password (from ‘auth-source’ using a
     specific key format) and URL-encodes them into the required
     ‘application/x-www-form-urlencoded’ format.


File: tlon.info,  Node: Route Handling,  Next: Response and Log Processing,  Prev: Authentication,  Up: Internal Functions and Variables (1)

2.4.2 Route Handling
--------------------

‘tlon-api-get-routes’
     Returns a processed version of ‘tlon-uqbar-api-routes’ where any
     ‘%s’ placeholder in the ‘:route’ property is replaced with the
     current value of ‘tlon-translation-language’.

‘tlon-select-api-route’
     Prompts the user to select an API route using completion.  It
     formats the choices from ‘tlon-api-get-routes’ to include the route
     path and its docstring.  Returns the selected route path string.


File: tlon.info,  Node: Response and Log Processing,  Next: Citation Retrieval,  Prev: Route Handling,  Up: Internal Functions and Variables (1)

2.4.3 Response and Log Processing
---------------------------------

‘tlon-api-print-response’
     Processes the ‘DATA’ (parsed JSON) received from an API request for
     a given ‘ROUTE’.
       1. Sets ‘tlon-api-most-recent-log-buffer’ to the ‘ROUTE’.
       2. Creates or clears the buffer named after the ‘ROUTE’.
       3. Inserts the JSON ‘DATA’ into the buffer.
       4. Pretty-prints the JSON using ‘json-pretty-print-buffer’.
       5. Fixes any relative ‘:source_filename’ paths within the JSON to
          be absolute paths based on ‘paths-dir-tlon-repos’ using
          ‘tlon-fix-source-filename-paths’.
       6. Makes file paths within the buffer clickable using
          ‘tlon-make-paths-clickable’.
       7. If ‘POP-TO-BUFFER’ is non-nil, displays the buffer.

‘tlon-fix-source-filename-paths’
     Parses the JSON content of the current (or specified) ‘BUFFER’,
     finds all ‘source_filename’ keys, prepends the Tlön repository base
     path (‘paths-dir-tlon-repos’) to their values, re-encodes the
     modified JSON, inserts it back, and re-formats/modes the buffer.

‘tlon-make-paths-clickable’
     Searches the current (or specified) ‘BUFFER’ for quoted strings
     that represent existing file paths.  For each valid path found, it
     creates an Emacs button overlay that allows opening the file with
     mouse clicks or RET.  It also enables ‘goto-address-mode’ and binds
     RET locally to ‘ffap’ (find file at point).


File: tlon.info,  Node: Citation Retrieval,  Prev: Response and Log Processing,  Up: Internal Functions and Variables (1)

2.4.4 Citation Retrieval
------------------------

‘tlon-api-get-citation’
     Retrieves a formatted citation for a BibTeX ‘KEY’ from the Babel
     API.  Takes an optional ‘CSL’ style argument ('long, 'short,
     'audio-long, 'audio-short).  Constructs the URL using
     ‘tlon-api-get-citation-url’, fetches the JSON using
     ‘tlon-api-get-citation-json’, and extracts the relevant citation
     string based on the ‘CSL’ style.  Returns nil if not found.

‘tlon-api-get-citation-url’
     Constructs the specific API URL for retrieving a citation based on
     the ‘KEY’ and ‘CSL’ style (determining text/audio endpoint).

‘tlon-api-get-citation-json’
     Fetches the JSON response from a given citation ‘URL’ using an
     external ‘curl’ command.  Includes basic error handling for host
     resolution issues.  Parses the JSON response using ‘json-read’.


File: tlon.info,  Node: BibTeX Functionality (tlon-texel),  Next: Clock Functionality (tlon-clockel),  Prev: API Interaction (tlon-apiel),  Up: Top

3 BibTeX Functionality (‘tlon-tex.el’)
**************************************

This module provides a wide range of functions for interacting with
BibTeX files and related data sources.  It covers fetching and managing
abstracts, moving entries between different BibTeX files (e.g., fluid
vs.  stable), adding and updating fields, cleaning entries, generating
citation keys (autokey), finding and adding missing URLs, handling
translations of abstracts, converting Markdown links to citations,
replacing citation keys with formatted citations, and generating reports
on BibTeX entries.

* Menu:

* Dependencies: Dependencies (1).
* User Options: User Options (1).
* Configuration: Configuration (1).
* Commands: Commands (2).
* Internal Functions and Variables: Internal Functions and Variables (2).


File: tlon.info,  Node: Dependencies (1),  Next: User Options (1),  Up: BibTeX Functionality (tlon-texel)

3.1 Dependencies
================

   • ‘bibtex-extras’
   • ‘paths’
   • ‘shut-up’
   • ‘tlon-core’
   • ‘transient’
   • ‘doi-utils’ (for ‘tlon-fetch-url-from-doi’)
   • ‘url’ (for fetching data)
   • ‘json’ (for parsing API responses and translations)
   • ‘citar-cache’ (for bibliography lookups)
   • ‘zotra-extras’ (for fetching abstracts/fields)
   • ‘simple-extras’ (for URL simplification)
   • ‘tlon-ai’ (for AI-assisted abstract fetching)
   • ‘tlon-api’ (for fetching formatted citations)
   • ‘tlon-deepl’ (for abstract translation)
   • ‘tlon-md’ (for Markdown link/tag handling)
   • ‘citar-extras’ (for opening entries in Ebib)
   • ‘files-extras’ (for writing lists to files)


File: tlon.info,  Node: User Options (1),  Next: Configuration (1),  Prev: Dependencies (1),  Up: BibTeX Functionality (tlon-texel)

3.2 User Options
================

‘tlon-abstract-overwrite’
     Controls behavior when fetching an abstract for an entry that
     already has one.
        • ‘always’: Always overwrite the existing abstract.
        • ‘never’: Never overwrite the existing abstract.
        • ‘ask’ (default): Prompt the user whether to overwrite.


File: tlon.info,  Node: Configuration (1),  Next: Commands (2),  Prev: User Options (1),  Up: BibTeX Functionality (tlon-texel)

3.3 Configuration
=================

* Menu:

* Constants::
* Variables::


File: tlon.info,  Node: Constants,  Next: Variables,  Up: Configuration (1)

3.3.1 Constants
---------------

‘tlon-file-abstract-translations’
     Path to the JSON file storing abstract translations.
‘tlon-tex-excluded-keys-file’
     Path to the Elisp file where excluded BibTeX keys (for abstract
     reporting) are persisted.
‘tlon-locators’
     Alist mapping citation locators (e.g., "page", "chapter") to their
     abbreviations (e.g., "p.", "chap.").  Used for regex generation.
‘tlon-tex-pandoc-cite-pattern-long’
     Regex for matching "long" Pandoc citation keys (e.g., '[@key]',
     '[@key, p.  5]').  Captures key and locator(s).
‘tlon-tex-pandoc-cite-pattern-short’
     Regex for matching "short" Pandoc citation keys (e.g.,
     '<cite>[@key]</cite>').  Captures key and locator(s).
‘tlon-tex-pandoc-cite-pattern’
     Combined regex for matching both long and short Pandoc citation
     keys.
‘tlon-regexp-locator-in-citation’
     Regex fragment specifically matching one or more locators within a
     citation, based on ‘tlon-locators’.
‘tlon-regexp-expanded-citation-formatter-with-locators’
     (Note: Marked as not working correctly) Formatter string for a
     regex to match expanded citations, attempting to handle locators.
‘tlon-regexp-expanded-citation-formatter’
     Formatter string for a regex to match expanded citations (e.g.,
     "Author, Title (Year) ...").
‘tlon-regexp-expanded-citation-with-link’
     Regex derived from ‘tlon-regexp-expanded-citation-formatter’ to
     match an expanded citation where the title is a Tlön-style Markdown
     link.  Captures the title.
‘tlon-regexp-expanded-citation-with-no-link’
     Regex derived from ‘tlon-regexp-expanded-citation-formatter’ to
     match an expanded citation where the title is enclosed in quotes or
     asterisks but is not a link.  Captures the title.
‘tlon-tex-max-abstract-length’
     Maximum recommended word count for an abstract.  Used in reports.
‘tlon-tex-min-abstract-length’
     Minimum recommended word count for an abstract.  Used in reports.
‘tlon-tex-synopsis-length’
     Maximum recommended word count for a synopsis (generated via AI).


File: tlon.info,  Node: Variables,  Prev: Constants,  Up: Configuration (1)

3.3.2 Variables
---------------

‘tlon-tex-excluded-keys’
     List of BibTeX keys for entries that do not require an abstract.
     Loaded from ‘tlon-tex-excluded-keys-file’ and used by
     ‘tlon-tex-entries-report’.


File: tlon.info,  Node: Commands (2),  Next: Internal Functions and Variables (2),  Prev: Configuration (1),  Up: BibTeX Functionality (tlon-texel)

3.4 Commands
============

This section details the interactive commands provided by ‘tlon-tex.el’.

* Menu:

* Abstract Management::
* Entry Management::
* URL Management::
* Translation Entry Creation::
* Citation Conversion and Replacement::
* Reporting and Field Finding::
* Transient Menu: Transient Menu (2).


File: tlon.info,  Node: Abstract Management,  Next: Entry Management,  Up: Commands (2)

3.4.1 Abstract Management
-------------------------

‘tlon-fetch-and-set-abstract’
     (Autoloaded) Attempts to fetch an abstract for the BibTeX entry at
     point and set its ‘abstract’ field.
       1. Checks if proceeding is allowed based on
          ‘tlon-abstract-overwrite’ and existing abstract.
       2. Retrieves DOI, ISBN, and URL from the entry.
       3. Tries fetching from CrossRef (using DOI), Google Books (using
          ISBN), and Zotero/Zotra (using URL/DOI) in that order.
       4. If an abstract is found, cleans it using
          ‘tlon-abstract-cleanup’ and sets the field using the
          appropriate mode-specific function (Ebib or BibTeX).
       5. If no abstract is found via these methods, messages the user.

       6. Calls ‘tlon-ai-batch-continue’ for potential batch processing
          integration.

‘tlon-translate-abstract’
     Translates the abstract of the BibTeX entry at point (or specified
     ‘KEY’) from its ‘langid’ to a selected ‘TARGET-LANG’ using DeepL.
       1. Determines the BibTeX key, abstract text, and source language.

       2. Prompts for the ‘TARGET-LANG’ using ‘tlon-select-language’.
       3. Calls ‘tlon-deepl-translate’ with the abstract text and
          languages.
       4. Uses the callback ‘tlon-translate-abstract-callback’ to save
          the translation to the JSON file
          (‘tlon-file-abstract-translations’) or a specified variable
          ‘VAR’.

‘tlon-translate-abstracts’
     Translates abstracts for multiple entries in the current BibTeX
     buffer.  Iterates through entries (up to 2000 times per call),
     calling ‘tlon-translate-abstract’ for each entry that doesn't
     already have a translation (unless ‘OVERWRITE’ is non-nil).  Useful
     for batch translation, especially when saving to a variable ‘VAR’
     to avoid file I/O contention.


File: tlon.info,  Node: Entry Management,  Next: URL Management,  Prev: Abstract Management,  Up: Commands (2)

3.4.2 Entry Management
----------------------

‘tlon-move-entry-to-fluid’
     (Autoloaded) Moves the BibTeX entry at point (or specified ‘KEY’)
     from its current file to the fluid BibTeX file (‘tlon-file-fluid’).

       1. Determines the key.
       2. Uses ‘bibtex-extras-move-entry’ to move the entry.
       3. Adds or updates the ‘database’ field to "Tlön" in the fluid
          file using ‘tlon-add-or-update-tlon-field-in-file’.
       4. Copies the key to the kill ring.

‘tlon-move-all-fluid-entries-to-stable’
     (Autoloaded) Moves all entries from the fluid BibTeX file
     (‘tlon-file-fluid’) to the stable BibTeX file (‘tlon-file-stable’).
     Checks for unsaved buffers first.

‘tlon-add-database-field’
     Iterates through all entries in a specified BibTeX ‘FILE’ and adds
     or updates the ‘database’ field to "Tlön" using
     ‘tlon-add-or-update-tlon-field’.  Saves the buffer.

‘tlon-auto-add-database-field’
     Hook function intended for ‘after-save-hook’ in BibTeX mode.
     Automatically calls ‘tlon-add-database-field’ on the fluid BibTeX
     file (‘tlon-file-fluid’) whenever it's saved.

‘tlon-auto-clean-entry’
     Hook function intended for ‘after-save-hook’ in BibTeX mode.
     Performs cleanup actions on save: removes trailing spaces in fields
     (‘tlon-remove-empty-spaces’), escapes special characters
     (‘bibtex-extras-escape-special-characters’), and runs
     ‘bibtex-clean-entry’ if point is at the start of an entry.

‘tlon-add-lang-id-to-entries’
     Iterates through entries in the current BibTeX buffer.  If an entry
     lacks a ‘langid’ field, prompts the user to select a language using
     ‘tlon-select-language’ and sets the field.

‘bibtex-extras-escape-special-characters’
     Escapes special characters ($, %, #, &) with a backslash within the
     current BibTeX buffer, excluding ‘url’ and ‘file’ fields.


File: tlon.info,  Node: URL Management,  Next: Translation Entry Creation,  Prev: Entry Management,  Up: Commands (2)

3.4.3 URL Management
--------------------

‘tlon-prompt-to-add-missing-urls’
     (Autoloaded) Finds URLs present in the current Markdown buffer but
     missing from the Tlön bibliography.
       1. Gets missing URLs using ‘tlon-get-missing-urls’.
       2. Iterates through missing URLs, highlighting each one.
       3. Prompts the user ("Add?  y/n") for each URL.
       4. Saves the URLs the user wants to add to the file specified by
          ‘zotra-extras-add-multiple-urls-filename’ using
          ‘files-extras-list-to-lines’.
       5. Messages the user about the saved file and the next step
          (using ‘zotra-extras-add-multiple-urls’).


File: tlon.info,  Node: Translation Entry Creation,  Next: Citation Conversion and Replacement,  Prev: URL Management,  Up: Commands (2)

3.4.4 Translation Entry Creation
--------------------------------

‘tlon-tex-create-translation-entry’
     (Autoloaded) Creates a new BibTeX entry representing a translation
     of the entry currently open in ‘ebib-entry-mode’.
       1. Prompts for the target language using ‘tlon-select-language’.

       2. Gathers fields from the original entry (‘translation’
          (original key), ‘type’, ‘author’, ‘database’).
       3. Prompts for the new ‘title’ and ‘translator’.
       4. Sets the ‘langid’ based on the selected language and ‘date’ to
          the current year.
       5. Switches to the translations BibTeX database (database 3).
       6. Creates a new entry (‘ebib-add-entry’).
       7. Sets the gathered/prompted fields in the new entry.
       8. Generates a citation key for the new entry
          (‘ebib-generate-autokey’).


File: tlon.info,  Node: Citation Conversion and Replacement,  Next: Reporting and Field Finding,  Prev: Translation Entry Creation,  Up: Commands (2)

3.4.5 Citation Conversion and Replacement
-----------------------------------------

‘tlon-convert-links-to-cite’
     (Autoloaded) Iterates through standard Markdown links in the
     current buffer.  If a link's URL matches a ‘url’ field in the Tlön
     bibliography (found via ‘tlon-bibliography-lookup’), prompts the
     user to convert the link to a ‘<Cite>’ tag using the corresponding
     BibTeX key.

‘tlon-convert-bibliography-to-cite’
     (Autoloaded) Converts plain text bibliography entries (matching
     ‘tlon-regexp-expanded-citation-with-link’ or
     ‘tlon-regexp-expanded-citation-with-no-link’) within the current
     region/buffer into ‘<Cite>’ tags.  Looks up the BibTeX key based on
     the ‘title’ using ‘tlon-bibliography-lookup’.  Assumes one work per
     line and no locators.

‘tlon-tex-replace-keys-with-citations’
     Replaces all ‘<Cite key’"..." ...>= tags in a ‘FILE’ (or current
     buffer) with formatted citations retrieved from the Tlön API.
       1. Calls ‘tlon-tex-do-replace-keys-with-citations’.
       2. Optionally takes an ‘AUDIO’ flag.  If non-nil, requests
          audio-specific citation styles ('short-audio', 'long-audio')
          from the API.  Otherwise, requests 'short' or 'long' based on
          the ‘length’ attribute in the ‘<Cite>’ tag.

‘tlon-tex-replace-keys-with-citations-in-dir’
     Recursively applies ‘tlon-tex-replace-keys-with-citations’ to all
     Markdown files in the current directory.  Takes optional ‘AUDIO’
     flag.


File: tlon.info,  Node: Reporting and Field Finding,  Next: Transient Menu (2),  Prev: Citation Conversion and Replacement,  Up: Commands (2)

3.4.6 Reporting and Field Finding
---------------------------------

‘tlon-tex-entries-report’
     (Autoloaded) Generates a report buffer listing BibTeX entries in
     the current buffer that:
        • Have no abstract (excluding those in ‘tlon-tex-excluded-keys’
          or with a ‘crossref’ field).
        • Have abstracts longer than ‘tlon-tex-max-abstract-length’
          words.
        • Have abstracts shorter than ‘tlon-tex-min-abstract-length’
          words.
        • Have abstracts with fewer than 10 words.
     Filters out entries that are translations (have a ‘translation’
     field) using ‘tlon-text-remove-translated-entries’.

‘tlon-tex-add-to-excluded-keys’
     Adds one or more BibTeX keys (provided as a space-separated string)
     to the ‘tlon-tex-excluded-keys’ list and saves the list to
     ‘tlon-tex-excluded-keys-file’.

‘tlon-tex-find-next-entry-with-missing-field’
     Moves point to the next BibTeX entry in the buffer that is missing
     a specified ‘FIELD’ (prompting for the field name with completion).
     Skips entries that have a ‘crossref’ field.


File: tlon.info,  Node: Transient Menu (2),  Prev: Reporting and Field Finding,  Up: Commands (2)

3.4.7 Transient Menu
--------------------

The command ‘tlon-tex-menu’ (Autoloaded) activates a ‘transient’ menu
interface for BibTeX-related operations.

   It provides the following groups and commands:
   • *Markdown*:
        • *URLs missing from database*:
          ‘f’
               Find in file (‘tlon-prompt-to-add-missing-urls’)
          ‘z’
               Add with Zotra (‘zotra-extras-add-multiple-urls’)
        • *Convert to 'Cite'*:
          ‘b’
               Convert bibliography
               (‘tlon-convert-bibliography-to-cite’)
          ‘l’
               Convert links (‘tlon-convert-links-to-cite’)
   • *Ebib*:
     ‘a’
          Fetch abstract (‘tlon-fetch-and-set-abstract’)
     ‘c’
          Create translation entry (‘tlon-tex-create-translation-entry’)

   • *BibTeX*:
        • *Report*:
          ‘r r’
               Generate report (‘tlon-tex-entries-report’)
          ‘r x’
               Add key to exclude from report
               (‘tlon-tex-add-to-excluded-keys’)
        • *Move*:
          ‘t’
               Move this entry to Tlön database
               (‘tlon-move-entry-to-fluid’)
          ‘s’
               Move all entries to stable
               (‘tlon-move-all-fluid-entries-to-stable’)


File: tlon.info,  Node: Internal Functions and Variables (2),  Prev: Commands (2),  Up: BibTeX Functionality (tlon-texel)

3.5 Internal Functions and Variables
====================================

This section lists non-interactive functions and variables used
internally or potentially useful for advanced customization.

* Menu:

* Abstract Fetching Helpers::
* Entry Management Helpers::
* Autokey Generation::
* URL and Bibliography Helpers::
* Citation Replacement Helpers::
* Abstract Translation Helpers::
* Reporting Helpers::
* Field Modification Advice::


File: tlon.info,  Node: Abstract Fetching Helpers,  Next: Entry Management Helpers,  Up: Internal Functions and Variables (2)

3.5.1 Abstract Fetching Helpers
-------------------------------

‘tlon-fetch-abstract-with-zotra’
     Attempts to fetch the abstract using ‘zotra-extras-fetch-field’ for
     a given ‘URL’ or ‘DOI’.  Tries both the original URL and the
     resolved URL from the DOI (via ‘tlon-fetch-url-from-doi’).  Handles
     PDF URLs and timeouts.
‘tlon-fetch-url-from-doi’
     Fetches the final redirected URL for a given ‘DOI’ using ‘curl
     -ILs’.
‘tlon-fetch-abstract-from-crossref’
     Fetches abstract data from the CrossRef API using a ‘DOI’.  Parses
     the JSON response.
‘tlon-fetch-abstract-from-google-books’
     Fetches abstract (description) data from the Google Books API using
     an ‘ISBN’.  Parses the JSON response.  Includes a 5-second timeout.

‘tlon-abstract-may-proceed-p’
     Checks if the abstract fetching/setting process should proceed
     based on the current mode, the value of ‘tlon-abstract-overwrite’,
     and whether an abstract already exists.  Prompts the user if
     ‘tlon-abstract-overwrite’ is 'ask.
‘tlon-fetch-field-with-zotra’
     Wrapper around ‘zotra-extras-fetch-field’, potentially fetching the
     ID/URL first using ‘ebib-extras-get-or-fetch-id-or-url’.
‘tlon-abstract-cleanup’
     Cleans up a raw abstract string by removing XML/HTML tags, specific
     LaTeX tags, leading "summary" or "abstract" words, and ensuring it
     ends with a period.


File: tlon.info,  Node: Entry Management Helpers,  Next: Autokey Generation,  Prev: Abstract Fetching Helpers,  Up: Internal Functions and Variables (2)

3.5.2 Entry Management Helpers
------------------------------

‘tlon-add-or-update-tlon-field’
     Uses ‘bibtex-extras-add-or-update-field’ to set the ‘database’
     field to "Tlön" in the current entry.
‘tlon-add-or-update-tlon-field-in-file’
     Finds the entry with ‘KEY’ in ‘FILE’ and calls
     ‘tlon-add-or-update-tlon-field’ on it.  Saves the buffer.
‘tlon-remove-empty-spaces’
     Removes spaces immediately preceding a closing brace ‘}’ within
     BibTeX fields in the current buffer.


File: tlon.info,  Node: Autokey Generation,  Next: URL and Bibliography Helpers,  Prev: Entry Management Helpers,  Up: Internal Functions and Variables (2)

3.5.3 Autokey Generation
------------------------

These functions customize the BibTeX autokey generation process, likely
used as replacements or advice for standard ‘bibtex-generate-autokey’
behavior.

‘tlon-generate-autokey’
     Generates a BibTeX key based on ‘AUTHOR’, ‘YEAR’, and ‘TITLE’
     strings, following customizable BibTeX autokey settings
     (separators, lengths, etc.).  Calls helper functions
     ‘tlon-autokey-get-names’, ‘tlon-autokey-get-year’,
     ‘tlon-autokey-get-title’.
‘tlon-autokey-get-names’
     Formats the author ‘NAME’ string according to BibTeX autokey
     settings (number of names, separator, handling "and").
‘tlon-autokey-get-year’
     Extracts the relevant part of the ‘YEAR’ string based on
     ‘bibtex-autokey-year-length’.
‘tlon-autokey-get-title’
     Formats the ‘TITLE’ string according to BibTeX autokey settings
     (number of words, ignored words, separator, handling terminators).


File: tlon.info,  Node: URL and Bibliography Helpers,  Next: Citation Replacement Helpers,  Prev: Autokey Generation,  Up: Internal Functions and Variables (2)

3.5.4 URL and Bibliography Helpers
----------------------------------

‘tlon-get-missing-urls’
     Finds URLs present in a ‘FILE’ (using ‘tlon-get-urls-in-file’) but
     not found in the ‘url’ field of any entry in the Tlön bibliography
     (using ‘tlon-get-field-in-bibliography’).  Uses simplified URLs for
     comparison.
‘tlon-get-urls-in-file’
     Extracts all unique URLs found within Markdown links
     (‘markdown-regex-link-inline’) in a ‘FILE’ (or current buffer).
     Uses ‘ffap-url-p’ for validation.
‘tlon-bibliography-lookup’
     Searches the cached Tlön bibliography
     (‘citar-cache--bibliographies’) for an entry where ‘FIELD’ matches
     ‘VALUE’ (optionally as a substring).  Returns the value of
     ‘ASSOC-FIELD’ for the matching entry.
‘tlon-get-field-in-bibliography’
     Returns a list of all values for a specific ‘FIELD’ found across
     all entries in the cached Tlön bibliography.


File: tlon.info,  Node: Citation Replacement Helpers,  Next: Abstract Translation Helpers,  Prev: URL and Bibliography Helpers,  Up: Internal Functions and Variables (2)

3.5.5 Citation Replacement Helpers
----------------------------------

‘tlon-tex-do-replace-keys-with-citations’
     The core logic for replacing ‘<Cite>’ tags.  Iterates through tags,
     extracts the key and length attribute, determines the required CSL
     style (based on length and optional ‘AUDIO’ flag), fetches the
     formatted citation from the API using ‘tlon-api-get-citation’, and
     replaces the tag with the result.


File: tlon.info,  Node: Abstract Translation Helpers,  Next: Reporting Helpers,  Prev: Citation Replacement Helpers,  Up: Internal Functions and Variables (2)

3.5.6 Abstract Translation Helpers
----------------------------------

‘tlon-read-abstract-translations’
     Reads and parses the JSON data from
     ‘tlon-file-abstract-translations’ using ‘tlon-read-json’.
‘tlon-write-abstract-translations’
     Writes the provided ‘DATA’ (alist) to
     ‘tlon-file-abstract-translations’ using ‘tlon-write-data’.
‘tlon-add-abstract-translation’
     Adds or updates a ‘TRANSLATION’ for a given ‘KEY’ and ‘TARGET-LANG’
     in the abstract translations ‘DATA’ (read from file or passed as
     ‘VAR’).  Handles existing entries and overwriting based on the
     ‘OVERWRITE’ flag.  Writes back to file or updates the variable.
‘tlon-translate-abstract-callback’
     Callback function used by ‘tlon-translate-abstract’.  Takes the
     DeepL translation result, the ‘KEY’, ‘TARGET-LANG’, and optional
     ‘OVERWRITE’ and ‘VAR’ flags, and calls
     ‘tlon-add-abstract-translation’ to save the result.


File: tlon.info,  Node: Reporting Helpers,  Next: Field Modification Advice,  Prev: Abstract Translation Helpers,  Up: Internal Functions and Variables (2)

3.5.7 Reporting Helpers
-----------------------

‘tlon-tex-load-excluded-keys’
     Loads the list of excluded keys from ‘tlon-tex-excluded-keys-file’
     into the ‘tlon-tex-excluded-keys’ variable.
‘tlon-tex-save-excluded-keys’
     Saves the current value of ‘tlon-tex-excluded-keys’ back to
     ‘tlon-tex-excluded-keys-file’.
‘tlon-text-remove-translated-entries’
     Filters a ‘LIST’ of BibTeX keys, removing any key that corresponds
     to an entry having a ‘translation’ field (checked by temporarily
     opening the entry in Ebib).


File: tlon.info,  Node: Field Modification Advice,  Prev: Reporting Helpers,  Up: Internal Functions and Variables (2)

3.5.8 Field Modification Advice
-------------------------------

‘tlon-tex-field-modified’
     Central function called when a BibTeX field is modified.
     Currently, if the modified ‘FIELD’ is "abstract", it triggers DeepL
     translation via ‘tlon-deepl-translate-abstract’.
‘tlon-tex-remove-braces’
     Removes curly braces ‘{} = from a =STRING’.  Used before sending
     abstract text to DeepL.
‘tlon-tex-bibtex-set-field-advice’
     :around advice for ‘bibtex-set-field’.  Calls the original function
     and then calls ‘tlon-tex-field-modified’ with the field name,
     value, and entry key.
‘tlon-tex-ebib-set-field-advice’
     :around advice for ‘ebib-set-field-value’.  Calls the original
     function and then calls ‘tlon-tex-field-modified’ with the field
     name, value, and entry key.


File: tlon.info,  Node: Clock Functionality (tlon-clockel),  Next: Color Palette Management (tlon-colorel),  Prev: BibTeX Functionality (tlon-texel),  Up: Top

4 Clock Functionality (‘tlon-clock.el’)
***************************************

This module provides functions for interacting with Org mode's clocking
mechanism (‘org-clock’), specifically tailored for the Tlön workflow.
It allows retrieving information about the currently clocked task, such
as associated files or issues, and performing actions based on that
information.

* Menu:

* Commands: Commands (3).
* Internal Functions and Variables: Internal Functions and Variables (3).


File: tlon.info,  Node: Commands (3),  Next: Internal Functions and Variables (3),  Up: Clock Functionality (tlon-clockel)

4.1 Commands
============

This section details the interactive commands provided by
‘tlon-clock.el’.

* Menu:

* Open Clocked Task's File::
* Open Clocked Task's Issue::
* Copy Region or Buffer::


File: tlon.info,  Node: Open Clocked Task's File,  Next: Open Clocked Task's Issue,  Up: Commands (3)

4.1.1 Open Clocked Task's File
------------------------------

The command ‘tlon-open-clock-file’ identifies the BibTeX key associated
with the currently running Org clock task (using ‘tlon-get-clock-key’)
and opens the corresponding file (located via ‘tlon-get-file-from-key’).
This provides quick access to the primary document related to the
clocked task.


File: tlon.info,  Node: Open Clocked Task's Issue,  Next: Copy Region or Buffer,  Prev: Open Clocked Task's File,  Up: Commands (3)

4.1.2 Open Clocked Task's Issue
-------------------------------

The command ‘tlon-open-clock-issue’ finds an ‘orgit-forge’ link within
the currently clocked heading, extracts the issue identifier (GID), and
opens the corresponding issue using ‘forge-visit-issue’.  This requires
the clocked heading to contain a link like
‘[[orgit-topic:ISSUE_GID][...]]’ and for the ‘forge’ package to be
configured.


File: tlon.info,  Node: Copy Region or Buffer,  Prev: Open Clocked Task's Issue,  Up: Commands (3)

4.1.3 Copy Region or Buffer
---------------------------

The command ‘tlon-copy-dwim’ ("Do What I Mean") copies text to the kill
ring.  If a region is active, it copies the region's content.  If no
region is active, it copies the entire content of the current buffer.
This is a general utility command included in this module.


File: tlon.info,  Node: Internal Functions and Variables (3),  Prev: Commands (3),  Up: Clock Functionality (tlon-clockel)

4.2 Internal Functions and Variables
====================================

This section lists non-interactive functions and variables used
internally or potentially useful for advanced customization.

* Menu:

* Getting Clock Information::
* Utility Functions::
* Variables: Variables (1).


File: tlon.info,  Node: Getting Clock Information,  Next: Utility Functions,  Up: Internal Functions and Variables (3)

4.2.1 Getting Clock Information
-------------------------------

‘tlon-get-clock’
     Returns the raw string of the currently clocked heading
     (‘org-clock-current-task’).  Errors if no clock is running.

‘tlon-get-clock-key’
     Extracts the BibTeX key from the clocked heading string.  It
     assumes the key is enclosed in backticks (e.g., "key") and uses the
     regular expression ‘tlon-key-regexp’ to find it.

‘tlon-get-clock-file’
     Retrieves the full file path associated with the BibTeX key found
     in the clocked heading.  Uses ‘tlon-get-clock-key’ and
     ‘tlon-get-file-from-key’.

‘tlon-get-clock-issue’
     Finds the first ‘orgit-forge’ link in the clocked heading
     (‘org-clock-heading’) and returns the issue identifier (GID) part
     of the link (e.g., the part after ‘orgit-topic:’).

‘tlon-get-clock-action’
     Extracts the assumed "action" from the clocked heading.  It expects
     the action to be the second word in the heading string (after the
     first word, often a verb like "Translate").  It validates this word
     against the list of known actions defined in the Tlön labels
     configuration (‘tlon-label-lookup-all :action’).

‘tlon-get-clock-label’
     Retrieves the label associated with the action identified by
     ‘tlon-get-clock-action’, using the Tlön labels configuration
     (‘tlon-label-lookup’).

‘tlon-get-clock-next-label’
     Determines the "next" label in the sequence defined by
     ‘tlon-job-labels’, based on the label of the currently clocked
     action (‘tlon-get-clock-label’).  This relies on the order within
     the ‘tlon-job-labels’ alist.


File: tlon.info,  Node: Utility Functions,  Next: Variables (1),  Prev: Getting Clock Information,  Up: Internal Functions and Variables (3)

4.2.2 Utility Functions
-----------------------

‘tlon-next-value’
     A generic helper function to find the value associated with a
     ‘PROPERTY’ that comes *after* the item with the specified ‘VALUE’
     in an ‘ALIST’.  Used by ‘tlon-get-clock-next-label’.

‘tlon-copy-buffer’
     Copies the entire content of a specified ‘FILE’ (or the current
     buffer) to the kill ring.

‘tlon-copy-region’
     Copies the text between positions ‘BEG’ and ‘END’ to the kill ring.

‘tlon-set-paths-from-clock’
     Retrieves the BibTeX key from the clocked task and uses Tlön
     metadata to find the file paths for both the original document and
     its corresponding translation.  Returns these paths and the key as
     multiple values.

‘tlon-set-windows’
     A utility function (likely requiring ‘window-extras’ and ‘winum’
     packages) to open two specified files (‘ORIGINAL-PATH’ and
     ‘TRANSLATION-PATH’) in specific windows (window 1 and window 2,
     respectively), splitting the frame if necessary.


File: tlon.info,  Node: Variables (1),  Prev: Utility Functions,  Up: Internal Functions and Variables (3)

4.2.3 Variables
---------------

‘tlon-key-regexp’
     The constant regular expression used by ‘tlon-get-clock-key’ to
     identify BibTeX keys within clocked task headings.  It specifically
     looks for text enclosed in backticks, optionally followed by ‘.md’.


File: tlon.info,  Node: Color Palette Management (tlon-colorel),  Next: Contact Management (tlon-contactsel),  Prev: Clock Functionality (tlon-clockel),  Up: Top

5 Color Palette Management (‘tlon-color.el’)
********************************************

This module provides functions to manage color palettes for the Tlön
frontend projects (specifically ‘uqbar-front’).  It allows loading
predefined palettes into CSS and JavaScript files, storing palettes
derived from CSS, deleting palettes, and interactively manipulating
color values (hue, saturation, lightness) within the CSS file.

* Menu:

* Dependencies: Dependencies (2).
* User Options: User Options (2).
* Commands: Commands (4).
* Internal Functions and Variables: Internal Functions and Variables (4).


File: tlon.info,  Node: Dependencies (2),  Next: User Options (2),  Up: Color Palette Management (tlon-colorel)

5.1 Dependencies
================

   • ‘tlon-core’
   • ‘transient’
   • ‘color-extras’ (external package, likely required for color
     manipulation and conversion)


File: tlon.info,  Node: User Options (2),  Next: Commands (4),  Prev: Dependencies (2),  Up: Color Palette Management (tlon-colorel)

5.2 User Options
================

‘tlon-color-format-in-frontend-files’
     Specifies the preferred color format ("hex" or "hsl") to use when
     writing color values to the frontend CSS file (‘globals.css’).
     Defaults to "hex".  Note: The JavaScript file (‘theme-colors.js’)
     currently always uses "hsl".

‘tlon-colors-change-step’
     The default step value (integer) used when increasing or decreasing
     hue, saturation, or lightness using the interactive commands.
     Defaults to 1.


File: tlon.info,  Node: Commands (4),  Next: Internal Functions and Variables (4),  Prev: User Options (2),  Up: Color Palette Management (tlon-colorel)

5.3 Commands
============

This section details the interactive commands provided by
‘tlon-color.el’.

* Menu:

* Open Global CSS File::
* Load Color Palette::
* Save Frontend Files::
* Store Color Palette::
* Delete Color Palette::
* Color Manipulation Commands::
* Color Menu::


File: tlon.info,  Node: Open Global CSS File,  Next: Load Color Palette,  Up: Commands (4)

5.3.1 Open Global CSS File
--------------------------

The command ‘tlon-color-open-globals-file’ simply opens the main CSS
file (‘globals.css’) where color palettes are defined for the frontend.


File: tlon.info,  Node: Load Color Palette,  Next: Save Frontend Files,  Prev: Open Global CSS File,  Up: Commands (4)

5.3.2 Load Color Palette
------------------------

The command ‘tlon-color-load-palette’ loads a specified, previously
stored color ‘PALETTE’ into the frontend files.

  1. Prompts the user to select a ‘PALETTE’ name from the list stored in
     ‘tlon-color-palettes’.
  2. Optionally takes a ‘LANGUAGE’ argument ('css' or 'js').  If nil, it
     loads the palette into both the CSS and JS files.
  3. For each specified language:
        • Removes the existing color sections using
          ‘tlon-color-remove-colors-section’.
        • Inserts the new color sections for the selected ‘PALETTE’
          using ‘tlon-color-insert-colors-section’.


File: tlon.info,  Node: Save Frontend Files,  Next: Store Color Palette,  Prev: Load Color Palette,  Up: Commands (4)

5.3.3 Save Frontend Files
-------------------------

The command ‘tlon-color-save-frontend-files’ is a convenience command
designed to synchronize color changes made in the CSS file with the
JavaScript file.

  1. Saves the current state of the ‘globals.css’ buffer.
  2. Parses the current colors in ‘globals.css’ and temporarily stores
     them under the name "temp-palette" using ‘tlon-color-store-palette’
     (overwriting if it exists).
  3. Loads this "temp-palette" into the ‘theme-colors.js’ file using
     ‘tlon-color-load-palette’ with the 'js' language argument.


File: tlon.info,  Node: Store Color Palette,  Next: Delete Color Palette,  Prev: Save Frontend Files,  Up: Commands (4)

5.3.4 Store Color Palette
-------------------------

The command ‘tlon-color-store-palette’ parses the current color
definitions in ‘globals.css’ and saves them as a named palette in the
‘tlon-color-palettes’ variable and persists them to
‘tlon-color-palette-file’.

  1. Prompts the user for a ‘PALETTE-NAME’.
  2. Parses the CSS file using ‘tlon-color-parse-css’ to extract light
     and dark theme colors.
  3. Checks if a palette with the given name already exists.
  4. If it exists, asks for confirmation to overwrite (unless the
     optional ‘OVERWRITE’ argument is non-nil).  Updates the existing
     entry.
  5. If it doesn't exist, adds the new palette to ‘tlon-color-palettes’.

  6. Saves the updated ‘tlon-color-palettes’ list to
     ‘tlon-color-palette-file’ using ‘tlon-color-save-palettes-to-file’.

  7. Messages the user about the success (added or updated).


File: tlon.info,  Node: Delete Color Palette,  Next: Color Manipulation Commands,  Prev: Store Color Palette,  Up: Commands (4)

5.3.5 Delete Color Palette
--------------------------

The command ‘tlon-color-delete-palette’ removes a stored color palette.

  1. Prompts the user to select a ‘PALETTE’ name from the existing
     palettes in ‘tlon-color-palettes’.
  2. Removes all entries matching the selected name from the
     ‘tlon-color-palettes’ list.
  3. Saves the updated list back to ‘tlon-color-palette-file’ using
     ‘tlon-color-save-palettes-to-file’.
  4. Messages the user about the successful removal.


File: tlon.info,  Node: Color Manipulation Commands,  Next: Color Menu,  Prev: Delete Color Palette,  Up: Commands (4)

5.3.6 Color Manipulation Commands
---------------------------------

These commands allow interactive modification of color values (HSL)
directly within the ‘globals.css’ file.  They operate on the color
string at point, replace it with the modified value, and then call
‘tlon-color-save-frontend-files’ to synchronize the change with the JS
file.  They rely on functions from the ‘color-extras’ package.

   • *Hue*:
     ‘tlon-color-increase-hue-at-point’
          Increases hue by ‘tlon-colors-change-step’.
     ‘tlon-color-decrease-hue-at-point’
          Decreases hue by ‘tlon-colors-change-step’.
     ‘tlon-color-change-hue-at-point’
          Prompts for a change amount (e.g., "+5", "-10") and applies it
          to the hue.
   • *Saturation*:
     ‘tlon-color-increase-saturation-at-point’
          Increases saturation by ‘tlon-colors-change-step’.
     ‘tlon-color-decrease-saturation-at-point’
          Decreases saturation by ‘tlon-colors-change-step’.
     ‘tlon-color-change-saturation-at-point’
          Prompts for a change amount and applies it to the saturation.

   • *Lightness*:
     ‘tlon-color-increase-lightness-at-point’
          Increases lightness by ‘tlon-colors-change-step’.
     ‘tlon-color-decrease-lightness-at-point’
          Decreases lightness by ‘tlon-colors-change-step’.
     ‘tlon-color-change-lightness-at-point’
          Prompts for a change amount and applies it to the lightness.


File: tlon.info,  Node: Color Menu,  Prev: Color Manipulation Commands,  Up: Commands (4)

5.3.7 Color Menu
----------------

The command ‘tlon-color-menu’ activates a ‘transient’ menu interface
providing access to most of the color management and manipulation
commands.

   It includes sections for:
   • *Change colors*: Access to the hue, saturation, and lightness
     increase/decrease/change commands.  Includes an option to set the
     change step.
   • *Palette*: Access to load, store, and delete palettes.  Includes
     commands to open the CSS file, save frontend files, and invoke
     color conversion/contrast functions from ‘color-extras’.  Includes
     an option to set the frontend format preference.


File: tlon.info,  Node: Internal Functions and Variables (4),  Prev: Commands (4),  Up: Color Palette Management (tlon-colorel)

5.4 Internal Functions and Variables
====================================

This section lists non-interactive functions, variables, and constants
used internally or potentially useful for advanced customization.

* Menu:

* Constants and Variables::
* Helper Functions::
* Transient Infix Commands::


File: tlon.info,  Node: Constants and Variables,  Next: Helper Functions,  Up: Internal Functions and Variables (4)

5.4.1 Constants and Variables
-----------------------------

‘tlon-color-palettes’
     The central variable holding the list of defined color palettes.
     It's an alist where the key is the palette name (string) and the
     value is another alist representing the colors.  Each color entry
     is ‘(CSS-VARIABLE . (LIGHT-VALUE . DARK-VALUE))’.  Loaded from and
     saved to ‘tlon-color-palette-file’.
‘tlon-color-palette-file’
     Path to the Elisp file where ‘tlon-color-palettes’ is persisted.
‘tlon-color-globals-css-file’
     Path to the main CSS file in the ‘uqbar-front’ repository.
‘tlon-color-theme-colors-js-file’
     Path to the JavaScript theme colors file in the ‘uqbar-front’
     repository.
‘tlon-color-globals-css-header’
     Format string for the start of a theme section in CSS.
‘tlon-color-globals-css-footer’
     String marking the end of a theme section in CSS.
‘tlon-color-globals-css-remove-pattern’
     Regex pattern used to remove entire theme sections from the CSS
     file.
‘tlon-color-theme-colors-js-header’
     Format string for the start of a theme section in JS.
‘tlon-color-theme-colors-js-footer’
     String marking the end of a theme section in JS.


File: tlon.info,  Node: Helper Functions,  Next: Transient Infix Commands,  Prev: Constants and Variables,  Up: Internal Functions and Variables (4)

5.4.2 Helper Functions
----------------------

‘tlon-color-read-palette’
     Prompts the user to select an existing palette name using
     completion based on ‘tlon-color-palettes’.  Returns the selected
     name as a list (for interactive use).
‘tlon-color-load-palettes’
     Loads the palettes from ‘tlon-color-palette-file’ into the
     ‘tlon-color-palettes’ variable if the file exists.  Called
     automatically when ‘tlon-color.el’ is loaded.
‘tlon-color-save-palettes-to-file’
     Saves the current value of ‘tlon-color-palettes’ to
     ‘tlon-color-palette-file’ in Elisp format.
‘tlon-color-remove-colors-section’
     Removes the color definition sections from the specified ‘LANGUAGE’
     file (CSS or JS) using the appropriate patterns.
‘tlon-color-insert-colors-section’
     Inserts the color definitions for a given ‘PALETTE’ into the
     specified ‘LANGUAGE’ file.  It encodes the palette using
     ‘tlon-color-encode’, inserts the result, converts colors to the
     desired format using ‘color-extras-convert-all’ (respecting
     ‘tlon-color-format-in-frontend-files’ for CSS, forcing HSL for JS),
     and saves the buffer.
‘tlon-color-encode’
     Top-level function to encode a ‘PALETTE’ for a specific ‘LANGUAGE’.
     Calls the appropriate CSS or JS encoding function for both light
     and dark themes and concatenates the results.
‘tlon-color-encode-globals-css’
     Generates the CSS string for a specific ‘THEME’ (light/dark) of a
     ‘PALETTE’.  Uses ‘tlon-color-encode-frontend-variables’.
‘tlon-color-encode-theme-colors-js’
     Generates the JS string for a specific ‘THEME’ (light/dark) of a
     ‘PALETTE’.  Uses ‘tlon-color-encode-frontend-variables’.
‘tlon-color-encode-frontend-variables’
     Iterates through the color definitions in a ‘PALETTE’, extracts the
     correct value for the given ‘THEME’, and formats it as a CSS
     variable declaration or a JS key-value pair based on the
     ‘LANGUAGE’.
‘tlon-color-parse-css’
     Parses the ‘globals.css’ file to extract the current color
     definitions for both light and dark themes.  Calls
     ‘tlon-color-parse-css-theme’ for each theme and combines the
     results into the standard palette alist format.
‘tlon-color-parse-css-theme’
     Parses a specific ‘THEME’ section within the ‘CSS-BUFFER’.  It
     temporarily converts all colors in the buffer to hex format using
     ‘color-extras-convert-all’, finds the theme section, extracts all
     CSS variable definitions (‘--variable: #value;’), and returns them
     as an alist.
‘tlon-color-change-value-at-point’
     Core function for interactive color manipulation.  Takes the
     ‘COMPONENT’ ("h", "s", or "l"), ‘DIRECTION’ ("+" or "-"), and
     optional ‘STEP’.  Finds the color at point, calls the appropriate
     ‘ct-edit-hsluv-*’ function from ‘color-extras’, inserts the result,
     and calls ‘tlon-color-save-frontend-files’.


File: tlon.info,  Node: Transient Infix Commands,  Prev: Helper Functions,  Up: Internal Functions and Variables (4)

5.4.3 Transient Infix Commands
------------------------------

These functions define the behavior of the options within the
‘tlon-color-menu’.

‘tlon-color-format-in-frontend-files-infix’
     Reads the desired format ("hex" or "hsl") from the user to set the
     local value of ‘tlon-color-format-in-frontend-files’ for the
     current menu invocation.
‘tlon-color-change-step-infix’
     Reads a number from the user to set the local value of
     ‘tlon-colors-change-step’ for the current menu invocation.


File: tlon.info,  Node: Contact Management (tlon-contactsel),  Next: Counterpart Navigation and Comparison (tlon-counterpartel),  Prev: Color Palette Management (tlon-colorel),  Up: Top

6 Contact Management (‘tlon-contacts.el’)
*****************************************

This module provides functionality for managing contacts stored within
an Org mode file.  It allows creating new contact entries, editing their
properties based on predefined roles, and retrieving contact
information.

* Menu:

* Dependencies: Dependencies (3).
* Configuration: Configuration (2).
* Commands: Commands (5).
* Internal Functions and Variables: Internal Functions and Variables (5).


File: tlon.info,  Node: Dependencies (3),  Next: Configuration (2),  Up: Contact Management (tlon-contactsel)

6.1 Dependencies
================

   • ‘tlon-core’
   • ‘transient’
   • ‘org’
   • ‘org-id’
   • ‘org-contacts’


File: tlon.info,  Node: Configuration (2),  Next: Commands (5),  Prev: Dependencies (3),  Up: Contact Management (tlon-contactsel)

6.2 Configuration
=================

* Menu:

* Constants: Constants (1).
* Variables: Variables (2).


File: tlon.info,  Node: Constants (1),  Next: Variables (2),  Up: Configuration (2)

6.2.1 Constants
---------------

‘tlon-contacts-id’
     The Org mode ID ("F874E332-47AF-436F-997E-1A6791DEE0BE") used to
     identify the main heading under which contacts are stored.  This ID
     is crucial for locating the contacts section within the Org file.

‘tlon-contacts-properties’
     An alist defining the expected Org mode properties associated with
     different contact roles.  The key is the role name (string, e.g.,
     "creator", "translator"), and the value is a list of property names
     (strings, e.g., "EMAIL", "URL", "GENDER"). This structure dictates
     which properties are prompted for when editing a contact of a
     specific role.

‘tlon-contacts-property-values’
     A list defining the properties that can be edited, along with their
     transient menu shortcuts and potential completion candidates.  Each
     element is a list ‘(PROPERTY :shortcut SHORTCUT :candidates
     COMPLETION-LIST)’.
        • ‘PROPERTY’ (string): The name of the Org property (e.g.,
          "EMAIL", "GENDER").
        • ‘SHORTCUT’ (string): The single-character key used in the
          transient menu (‘tlon-contacts-menu’) to edit this property.
        • ‘COMPLETION-LIST’ (list of strings or nil): If a list is
          provided, ‘completing-read’ will be used when editing this
          property, offering these values as candidates.  If nil,
          ‘read-string’ is used.  Language candidates are dynamically
          fetched using ‘tlon-get-language-candidates’.


File: tlon.info,  Node: Variables (2),  Prev: Constants (1),  Up: Configuration (2)

6.2.2 Variables
---------------

‘tlon-contacts-file’
     Holds the path to the Org file containing the contacts.  This
     variable is set dynamically by ‘tlon-contacts-get-file’ using the
     ‘tlon-contacts-id’ and should not be set manually by the user.


File: tlon.info,  Node: Commands (5),  Next: Internal Functions and Variables (5),  Prev: Configuration (2),  Up: Contact Management (tlon-contactsel)

6.3 Commands
============

* Menu:

* Create Contact::
* Edit Contact Properties::
* Copy Property Value::
* Edit Single Property::
* Dynamically Defined Edit Commands::
* Transient Menu: Transient Menu (3).


File: tlon.info,  Node: Create Contact,  Next: Edit Contact Properties,  Up: Commands (5)

6.3.1 Create Contact
--------------------

The command ‘tlon-contacts-create’ creates a new contact entry in the
designated contacts Org file.
  1. Finds or opens the contacts file (‘tlon-contacts-get-file’).
  2. Navigates to the main contacts heading using ‘tlon-contacts-id’.
  3. Inserts a new level 2 heading at the end of the subtree.
  4. Prompts for the first and last name using
     ‘tlon-contacts-insert-name’ and inserts them.
  5. Calls ‘tlon-contacts-edit-properties’ to prompt for the role and
     set initial properties.
  6. Sorts the contact headings alphabetically within the file using
     ‘tlon-sort-headings’.


File: tlon.info,  Node: Edit Contact Properties,  Next: Copy Property Value,  Prev: Create Contact,  Up: Commands (5)

6.3.2 Edit Contact Properties
-----------------------------

The command ‘tlon-contacts-edit-properties’ allows editing the Org
properties of the contact entry at point.
  1. Ensures the buffer is in Org mode.
  2. Retrieves the contact's current "ROLE" property using
     ‘tlon-contacts-get-role’.
  3. If an optional ‘ROLE’ argument is provided, checks if it matches
     the current role.
  4. If no role exists or no ‘ROLE’ argument is given, prompts the user
     to select a role using ‘tlon-contacts-select-role’.  If a role is
     newly selected, sets the "ROLE" property.
  5. Iterates through the properties defined for the selected role in
     ‘tlon-contacts-properties’.
  6. For each property:
        • Looks up its definition in ‘tlon-contacts-property-values’ to
          find completion candidates.
        • Gets the current value using ‘org-entry-get’.
        • Prompts the user for the new value using ‘completing-read’ (if
          candidates exist) or ‘read-string’.
        • Sets the property using ‘org-set-property’.
  7. Saves the buffer.


File: tlon.info,  Node: Copy Property Value,  Next: Edit Single Property,  Prev: Edit Contact Properties,  Up: Commands (5)

6.3.3 Copy Property Value
-------------------------

The command ‘tlon-contacts-copy-property-value’ copies the value of a
specified property for the contact at point to the kill ring.
  1. Calls ‘tlon-contacts-get-property-value’, which prompts the user to
     select a property from the non-empty properties of the current
     contact.
  2. Copies the retrieved value (or an empty string if nil) to the kill
     ring using ‘kill-new’.
  3. Displays a confirmation message.


File: tlon.info,  Node: Edit Single Property,  Next: Dynamically Defined Edit Commands,  Prev: Copy Property Value,  Up: Commands (5)

6.3.4 Edit Single Property
--------------------------

The command ‘tlon-contacts-edit-one-property’ provides a way to edit a
single, specific property of the contact at point, using completion if
available.
  1. Prompts the user to select the ‘PROPERTY’ to edit, offering
     completion based on the properties defined in
     ‘tlon-contacts-property-values’.
  2. Ensures the buffer is in Org mode.
  3. Looks up the property's definition in
     ‘tlon-contacts-property-values’ to find completion candidates.
  4. Gets the current value using ‘org-entry-get’.
  5. Prompts the user for the new value using ‘completing-read’ (if
     candidates exist) or ‘read-string’.
  6. Sets the property using ‘org-set-property’.
  7. Saves the buffer and displays a confirmation message.


File: tlon.info,  Node: Dynamically Defined Edit Commands,  Next: Transient Menu (3),  Prev: Edit Single Property,  Up: Commands (5)

6.3.5 Dynamically Defined Edit Commands
---------------------------------------

The macro ‘tlon-contacts-define-property-edit-commands’ automatically
generates individual interactive commands for editing each property
listed in ‘tlon-contacts-property-values’.
   • For each property (e.g., "EMAIL"), it defines a command named
     ‘tlon-contacts-edit-email’ (lowercase).
   • Each generated command simply calls
     ‘tlon-contacts-edit-one-property’ with the corresponding property
     name.
   • This macro also defines (or redefines) the ‘tlon-contacts-menu’
     transient prefix.


File: tlon.info,  Node: Transient Menu (3),  Prev: Dynamically Defined Edit Commands,  Up: Commands (5)

6.3.6 Transient Menu
--------------------

The command ‘tlon-contacts-menu’ activates a ‘transient’ menu interface
for contact management.  This menu is defined by the
‘tlon-contacts-define-property-edit-commands’ macro.

   It typically includes:
   • General commands:
     ‘S’
          Search contacts (‘org-contacts’)
     ‘c’
          Create contact (‘tlon-contacts-create’)
     ‘e’
          Edit all properties (‘tlon-contacts-edit-properties’)
     ‘y’
          Copy property value (‘tlon-contacts-copy-property-value’)
   • Edit specific properties:
        • One entry for each property defined in
          ‘tlon-contacts-property-values’, using the specified
          ‘:shortcut’ key (e.g., ‘m’ for "email", ‘g’ for "gender").
          Each shortcut calls the corresponding dynamically generated
          edit command (e.g., ‘tlon-contacts-edit-email’).


File: tlon.info,  Node: Internal Functions and Variables (5),  Prev: Commands (5),  Up: Contact Management (tlon-contactsel)

6.4 Internal Functions and Variables
====================================

This section lists non-interactive functions used internally or
potentially useful for advanced customization.

‘tlon-contacts-get-file’
     Retrieves the path to the contacts Org file.  It uses
     ‘tlon-get-or-set-org-var’ to find the file containing the Org ID
     ‘tlon-contacts-id’ and caches the result in the
     ‘tlon-contacts-file’ variable.

‘tlon-contacts-insert-name’
     Prompts the user for "First name: " and "Last name: ", then inserts
     the name formatted as "Last name, First name" at point.  Saves the
     buffer afterwards.

‘tlon-contacts-get-property-value’
     Retrieves the value of a specific ‘PROP’ for the contact entry at
     point.  If ‘PROP’ is nil, it prompts the user to select a property
     from the list of non-empty properties (obtained via
     ‘tlon-contacts-get-nonempty-properties’).  Returns the property
     value string.

‘tlon-contacts-get-property-value-of-contact’
     Prompts the user to select a contact using ‘org-contacts’, then
     calls ‘tlon-contacts-get-property-value’ in the context of the
     selected contact's buffer to retrieve the value of ‘PROP’
     (prompting for ‘PROP’ if nil).

‘tlon-contacts-get-nonempty-properties’
     Returns an alist of non-empty properties for the contact entry at
     point.  It gets the contact's role, finds the associated properties
     from ‘tlon-contacts-properties’, and retrieves the value for each
     using ‘org-entry-get’.

‘tlon-contacts-get-contact-name’
     Retrieves the first and last name from the heading of the contact
     entry at point.  Assumes the format "Last, First".  Returns a cons
     cell ‘(FIRST . LAST)’.

‘tlon-contacts-get-role’
     Returns the value of the "ROLE" property for the contact entry at
     point using ‘org-entry-get’.

‘tlon-contacts-select-role’
     Prompts the user to select a role using completion.  The candidates
     are the keys (roles) from the ‘tlon-contacts-properties’ alist.
     Returns the selected role string.


File: tlon.info,  Node: Counterpart Navigation and Comparison (tlon-counterpartel),  Next: DeepL Integration (tlon-deeplel),  Prev: Contact Management (tlon-contactsel),  Up: Top

7 Counterpart Navigation and Comparison (‘tlon-counterpart.el’)
***************************************************************

This module provides functionality for finding, opening, and comparing
"counterpart" files.  In the Tlön context, a counterpart is typically
the original version of a translated document, or a translation in a
specific language if the current file is the original.  It also includes
tools for working with paragraphs within these files.

* Menu:

* Dependencies: Dependencies (4).
* Commands: Commands (6).
* Internal Functions and Variables: Internal Functions and Variables (6).


File: tlon.info,  Node: Dependencies (4),  Next: Commands (6),  Up: Counterpart Navigation and Comparison (tlon-counterpartel)

7.1 Dependencies
================

   • ‘tlon-core’
   • ‘tlon-md’
   • ‘tlon-yaml’
   • ‘files-extras’
   • ‘transient’
   • ‘dired’ (optional, for Dired integration)


File: tlon.info,  Node: Commands (6),  Next: Internal Functions and Variables (6),  Prev: Dependencies (4),  Up: Counterpart Navigation and Comparison (tlon-counterpartel)

7.2 Commands
============

* Menu:

* Finding Counterparts::
* Opening Counterparts::
* Paragraph Operations::
* Transient Menu: Transient Menu (4).


File: tlon.info,  Node: Finding Counterparts,  Next: Opening Counterparts,  Up: Commands (6)

7.2.1 Finding Counterparts
--------------------------

‘tlon-get-counterpart’
     (Autoloaded) Calculates and returns the full path to the
     counterpart file of ‘FILE’ (or the current buffer's file).
        • If the file is in a repository marked as ‘translations’ (based
          on its ‘:subtype’ property), it looks for the ‘original_path’
          key in the file's YAML front matter and combines it with the
          counterpart directory (‘tlon-get-counterpart-dir’).
        • If the file is in a repository marked as ‘originals’, it
          prompts the user to select a target language, finds the
          corresponding translations repository, and looks up the file's
          entry in the target repository's metadata to find the
          translated filename.
        • Signals an error if the repository subtype is neither
          ‘originals’ nor ‘translations’, or if necessary metadata is
          missing.

‘tlon-get-counterpart-dir’
     Calculates and returns the directory path where the counterpart of
     ‘FILE’ (or the current buffer's file) should reside.  It determines
     the counterpart repository (‘tlon-get-counterpart-repo’) and
     translates the relative directory structure within the source
     repository to the equivalent structure in the target repository
     using ‘tlon-get-bare-dir-translation’.

‘tlon-get-counterpart-repo’
     Returns the full path to the repository directory containing the
     counterpart of ‘FILE’ (or the current buffer's file).  It
     identifies the source repository, its subproject, determines the
     counterpart language (‘tlon-get-counterpart-language’), and looks
     up the repository matching the subproject and counterpart language
     using ‘tlon-repo-lookup’.

‘tlon-get-counterpart-language’
     Determines the language code of the counterpart for a given ‘REPO’
     (or the current repository).
        • If the repository language is "en" (English), it prompts the
          user to select a target language from
          ‘tlon-project-target-languages’ using completion.
        • If the repository language is one of the target languages, it
          returns "en".
        • Signals an error if the repository language is not recognized.

‘tlon-get-content-subtype’
     Returns the ‘:subtype’ property ('originals or 'translations) of
     the repository containing ‘FILE’ (or the current buffer's file).
     Ensures the repository's ‘:type’ is 'content.


File: tlon.info,  Node: Opening Counterparts,  Next: Paragraph Operations,  Prev: Finding Counterparts,  Up: Commands (6)

7.2.2 Opening Counterparts
--------------------------

‘tlon-open-counterpart’
     (Autoloaded) Opens the counterpart of ‘FILE’ (or the current
     buffer's file) and attempts to position the cursor at the
     corresponding paragraph.
       1. Saves the current buffer if no ‘FILE’ argument is given.
       2. Finds the counterpart file using ‘tlon-get-counterpart’.
       3. Calculates the number of paragraphs before the current point
          using ‘tlon-get-number-of-paragraphs’.
       4. Determines if point is exactly between paragraphs using
          ‘tlon-is-between-paragraphs-p’ to apply an offset.
       5. Opens the counterpart file using ‘find-file’ (or
          ‘find-file-other-window’ if ‘OTHER-WIN’ or prefix argument is
          non-nil).
       6. In the counterpart buffer, moves past the YAML front matter.
       7. Moves forward the calculated number of paragraphs (minus the
          offset).
       8. Moves point one character forward (typically to the start of
          the paragraph content).

‘tlon-open-counterpart-in-dired’
     Opens Dired to the directory containing the counterpart of ‘FILE’
     (or the file at point in Dired).  Uses ‘tlon-get-counterpart’ to
     find the file and ‘dired-jump’ to open Dired.  Supports opening in
     another window with a prefix argument.

‘tlon-open-counterpart-dwim’
     (Autoloaded) "Do What I Mean" command for opening counterparts.
        • If called in ‘markdown-mode’, behaves like
          ‘tlon-open-counterpart’.
        • If called in ‘dired-mode’, behaves like
          ‘tlon-open-counterpart-in-dired’.
        • Supports opening in another window with a prefix argument.

‘tlon-open-counterpart-in-other-window-dwim’
     (Autoloaded) Convenience command that calls
     ‘tlon-open-counterpart-dwim’ with the ‘OTHER-WIN’ argument set to
     ‘t’, forcing the counterpart to open in another window.


File: tlon.info,  Node: Paragraph Operations,  Next: Transient Menu (4),  Prev: Opening Counterparts,  Up: Commands (6)

7.2.3 Paragraph Operations
--------------------------

‘tlon-count-paragraphs’
     Interactively counts and displays the number of paragraphs in the
     active region, or between specified ‘START’ and ‘END’ positions.
     Uses ‘tlon-get-number-of-paragraphs’.

‘tlon-display-corresponding-paragraphs’
     Displays pairs of corresponding paragraphs from a file and its
     counterpart in a dedicated buffer ("_Paragraph Pairs_").
       1. Takes ‘PAIRS-OR-FN’ as input.  If it's a function
          (interactively defaults to
          ‘tlon-get-corresponding-paragraphs’), calls it to get the
          pairs.  Otherwise, assumes it's already a list of pairs.
       2. Creates or clears the "_Paragraph Pairs_" buffer.
       3. Iterates through the pairs, inserting
          "Original:\n[paragraph]\n\nTranslation:\n[paragraph]\n\n---\n\n".
          Handles missing paragraphs gracefully.
       4. Displays the buffer.  Catches ‘user-error’ (like paragraph
          mismatch from ‘tlon-get-corresponding-paragraphs’) and still
          displays the buffer containing the comparison up to the point
          of error.


File: tlon.info,  Node: Transient Menu (4),  Prev: Paragraph Operations,  Up: Commands (6)

7.2.4 Transient Menu
--------------------

The command ‘tlon-counterpart-menu’ activates a ‘transient’ menu
interface for counterpart operations.

   It provides the following groups and commands:
   • *Navigation*:
     ‘u’
          Visit counterpart (‘tlon-open-counterpart-dwim’)
     ‘H-u’
          Visit counterpart other window
          (‘tlon-open-counterpart-in-other-window-dwim’)
     ‘U’
          Open counterpart in Dired (‘tlon-open-counterpart-in-dired’)
   • *Matching*:
     ‘d’
          Display corresponding paragraphs
          (‘tlon-display-corresponding-paragraphs’)
   • *Metadata*:
     ‘o’
          Set ‘original_path’ (‘tlon-yaml-insert-original-path’)


File: tlon.info,  Node: Internal Functions and Variables (6),  Prev: Commands (6),  Up: Counterpart Navigation and Comparison (tlon-counterpartel)

7.3 Internal Functions and Variables
====================================

This section lists non-interactive functions used internally or
potentially useful for advanced customization.

* Menu:

* Counterpart Finding Logic::
* Paragraph Handling Logic::
* Temporary Utility Functions::


File: tlon.info,  Node: Counterpart Finding Logic,  Next: Paragraph Handling Logic,  Up: Internal Functions and Variables (6)

7.3.1 Counterpart Finding Logic
-------------------------------

‘tlon-get-counterpart-in-translations’
     Specific logic for finding the counterpart when ‘FILE’ is in a
     ‘translations’ repository.  Gets the counterpart directory
     (‘tlon-get-counterpart-dir’) and looks up the ‘original_path’ in
     the file's YAML metadata.

‘tlon-get-counterpart-in-originals’
     Specific logic for finding the counterpart when ‘FILE’ is in an
     ‘originals’ repository.  Gets the counterpart repository
     (‘tlon-get-counterpart-repo’), reads its metadata
     (‘tlon-metadata-in-repo’), and searches for an entry where the
     ‘original_path’ matches the filename of ‘FILE’.  Returns the ‘file’
     property of the matching entry.


File: tlon.info,  Node: Paragraph Handling Logic,  Next: Temporary Utility Functions,  Prev: Counterpart Finding Logic,  Up: Internal Functions and Variables (6)

7.3.2 Paragraph Handling Logic
------------------------------

‘tlon-is-between-paragraphs-p’
     Returns non-nil if point is exactly between two paragraphs (i.e.,
     moving one character forward changes the paragraph count).  Uses
     ‘tlon-get-number-of-paragraphs’.

‘tlon-with-paragraphs’
     Iterates through each paragraph in ‘FILE’ (or current buffer) and
     executes ‘FN’ for each.
       1. Finds the file and switches to its buffer.
       2. Moves past the YAML front matter.
       3. Determines the end of the content (before local variables).
       4. Loops while point is before the content end:
             • Records the start position.
             • Moves forward one paragraph using
               ‘markdown-forward-paragraph’.
             • Records the end position (capped at content end).
             • If the region between start and end is non-empty and
               contains non-whitespace characters:
                  • If ‘RETURN-POSITIONS’ is non-nil, pushes ‘(start .
                    end)’ to the result list.
                  • Otherwise, calls ‘FN’ with start and end positions
                    and pushes its result to the list.
       5. Returns the reversed list of results or positions.

‘tlon-get-number-of-paragraphs’
     Calculates the number of paragraphs between optional ‘START’ and
     ‘END’ positions.  Calls ‘tlon-with-paragraphs’ with
     ‘RETURN-POSITIONS’ set to ‘t’ and counts the resulting position
     pairs that fall within the specified range.

‘tlon-get-corresponding-paragraphs’
     Returns a list of corresponding paragraph pairs ‘((orig-para-1 .
     trans-para-1) (orig-para-2 . trans-para-2) ...)’ between ‘FILE’ (or
     current buffer) and its ‘COUNTERPART’ (inferred if nil).
       1. Finds the counterpart file.
       2. Uses ‘tlon-with-paragraphs’ to get lists of paragraph text for
          both the original and translation files.
       3. Checks if the number of paragraphs is different.  If so:
             • Creates the "_Paragraph Pairs_" buffer.
             • Inserts an error message detailing the mismatch.
             • Inserts all paragraph pairs found so far (padding with
               "[Missing paragraph]" if one list is shorter).
             • Displays the buffer.
             • Signals a ‘user-error’ "Paragraph number mismatch".
       4. If paragraph counts match, pairs up the paragraphs and returns
          the list.


File: tlon.info,  Node: Temporary Utility Functions,  Prev: Paragraph Handling Logic,  Up: Internal Functions and Variables (6)

7.3.3 Temporary Utility Functions
---------------------------------

These functions appear to be specific utilities for bulk metadata
updates, likely used during initial setup or migration.  They are not
part of the core counterpart functionality.

‘tlon-add-counterpart-metadata’
     Reads a CSV file mapping original filenames to translation
     filenames, finds the corresponding translation files in a specified
     ‘LANGUAGE’ repository and ‘BARE-DIR’, and inserts the
     ‘original_path’ metadata into their YAML front matter.  Requires
     ‘simple-extras-asciify-string’.

‘tlon-add-author-metadata’
     Processes author files in a specific ‘LANGUAGE’ repository.  For
     each file, it extracts the ‘title’ from YAML, generates a slug,
     constructs the expected ‘original_path’, deletes existing metadata,
     and inserts a standard set of author metadata fields (‘type’,
     ‘title’, ‘role’, ‘original_path’, ‘publication_status’).  Requires
     ‘simple-extras-slugify’.


File: tlon.info,  Node: DeepL Integration (tlon-deeplel),  Next: Dictionary Functionality (tlon-dictel),  Prev: Counterpart Navigation and Comparison (tlon-counterpartel),  Up: Top

8 DeepL Integration (‘tlon-deepl.el’)
*************************************

This module provides functions for interacting with the DeepL API,
enabling text translation and management of DeepL glossaries.  It relies
on an API key stored securely via ‘auth-source’.

* Menu:

* Dependencies: Dependencies (5).
* Configuration: Configuration (3).
* Commands: Commands (7).
* Internal Functions and Variables: Internal Functions and Variables (7).


File: tlon.info,  Node: Dependencies (5),  Next: Configuration (3),  Up: DeepL Integration (tlon-deeplel)

8.1 Dependencies
================

   • ‘tlon-glossary’
   • ‘tlon-core’
   • ‘url’
   • ‘auth-source’ (for API key retrieval)
   • ‘transient’ (for the menu)
   • ‘ediff’ (for ‘tlon-deepl-diff’)


File: tlon.info,  Node: Configuration (3),  Next: Commands (7),  Prev: Dependencies (5),  Up: DeepL Integration (tlon-deeplel)

8.2 Configuration
=================

* Menu:

* API Key and URL::
* API Call Parameters::
* Supported Glossary Languages::
* Internal State Variables::


File: tlon.info,  Node: API Key and URL,  Next: API Call Parameters,  Up: Configuration (3)

8.2.1 API Key and URL
---------------------

‘tlon-deepl-key’
     The DeepL API key, retrieved from ‘auth-source’ using the entry
     ‘tlon/babel/deepl.com/[WORK_EMAIL]’.
‘tlon-deepl-url-prefix’
     The base URL for all DeepL API v2 calls
     (‘https://api.deepl.com/v2/’).


File: tlon.info,  Node: API Call Parameters,  Next: Supported Glossary Languages,  Prev: API Key and URL,  Up: Configuration (3)

8.2.2 API Call Parameters
-------------------------

‘tlon-deepl-parameters’
     An alist defining the specifics for each supported DeepL API call
     (translate, glossary creation, retrieval, deletion).  Each entry
     maps an API call symbol (e.g., ‘translate’) to a list containing:
       1. HTTP Method ("GET", "POST", "DELETE")
       2. URL Suffix (string or function to generate the specific
          endpoint)
       3. Default Callback Function (symbol)
       4. Optional Encoding Function (symbol, for POST requests)


File: tlon.info,  Node: Supported Glossary Languages,  Next: Internal State Variables,  Prev: API Call Parameters,  Up: Configuration (3)

8.2.3 Supported Glossary Languages
----------------------------------

‘tlon-deepl-supported-glossary-languages’
     A list of language codes for which DeepL currently supports
     glossaries.


File: tlon.info,  Node: Internal State Variables,  Prev: Supported Glossary Languages,  Up: Configuration (3)

8.2.4 Internal State Variables
------------------------------

These variables store temporary state during API requests.
‘tlon-deepl-glossaries’
     A list holding the glossary data retrieved from the DeepL API via
     ‘tlon-deepl-get-glossaries’.  Initialized to nil and populated by
     the callback.
‘tlon-deepl-source-language’
     Stores the source language code for the current translation
     request.
‘tlon-deepl-target-language’
     Stores the target language code for the current translation or
     glossary creation request.
‘tlon-deepl-text’
     Stores the text to be translated in the current request.


File: tlon.info,  Node: Commands (7),  Next: Internal Functions and Variables (7),  Prev: Configuration (3),  Up: DeepL Integration (tlon-deeplel)

8.3 Commands
============

This section details the interactive commands provided by
‘tlon-deepl.el’.

* Menu:

* Translation::
* Glossaries::
* Utility Commands::
* Transient Menu: Transient Menu (5).


File: tlon.info,  Node: Translation,  Next: Glossaries,  Up: Commands (7)

8.3.1 Translation
-----------------

‘tlon-deepl-translate’
     Translates text using the DeepL API.
       1. Prompts for source language (defaulting to "en") using
          ‘tlon-select-language’.
       2. Prompts for target language using ‘tlon-select-language’
          (excluding the source language).
       3. Prompts for the text to translate, defaulting to the active
          region or the word at point.
       4. Sets the internal state variables (‘tlon-deepl-text’,
          ‘tlon-deepl-source-language’, ‘tlon-deepl-target-language’).
       5. Calls ‘tlon-deepl-request-wrapper’ with the ‘translate’ type.

       6. Uses a default callback that prints the translation and copies
          it to the kill ring (‘tlon-deepl-print-translation 'copy’).
          Allows specifying a custom ‘CALLBACK’.
       7. Handles glossary lookup (‘tlon-deepl-get-language-glossary’)
          and prompts for confirmation if no suitable glossary is found
          (unless ‘NO-GLOSSARY-OK’ is non-nil).

‘tlon-deepl-translate-abstract’
     Translates the ‘abstract’ field of a BibTeX entry into all
     ‘tlon-project-target-languages’.
       1. Determines the BibTeX ‘KEY’ (from Ebib or BibTeX mode, or
          argument).
       2. Extracts the ‘abstract’ text from the current buffer or BibTeX
          entry.
       3. Determines the ‘SOURCE-LANG’ from the entry's ‘langid’ field.

       4. If interactive or confirmed by the user, iterates through
          ‘tlon-project-target-languages’:
             • Skips translation if target language is the same as
               source.
             • Calls ‘tlon-deepl-translate’ with the abstract text,
               target language, source language, and a specific callback
               (‘tlon-translate-abstract-callback’) to update the BibTeX
               entry directly.  Passes ‘no-glossary-ok’ to avoid
               prompts.


File: tlon.info,  Node: Glossaries,  Next: Utility Commands,  Prev: Translation,  Up: Commands (7)

8.3.2 Glossaries
----------------

‘tlon-deepl-select-glossary’
     Interactively selects a DeepL glossary from the locally cached list
     (‘tlon-deepl-glossaries’).  Uses ‘completing-read’ with formatted
     glossary names (generated by ‘tlon-deepl-get-list-of-glossaries’).
     Returns the selected glossary ID.

‘tlon-deepl-get-glossaries’
     Retrieves the list of available glossaries from the DeepL API.
     Calls ‘tlon-deepl-request-wrapper’ with the ‘glossary-get’ type.
     The callback (‘tlon-deepl-glossary-get-callback’) updates the
     ‘tlon-deepl-glossaries’ variable.  This command is also called
     automatically after glossary creation or deletion, and on module
     load.

‘tlon-deepl-glossary-create’
     Creates a new DeepL glossary for a specified language.
       1. Prompts for the target ‘LANGUAGE’ using
          ‘tlon-select-language’.
       2. Extracts the glossary data for that language into the
          appropriate format (TSV for DeepL API) using
          ‘tlon-extract-glossary’.
       3. Sets the internal ‘tlon-deepl-target-language’ variable.
       4. Calls ‘tlon-deepl-request-wrapper’ with the ‘glossary-create’
          type.  The callback (‘tlon-deepl-glossary-create-callback’)
          refreshes the local glossary list and messages the API
          response.

‘tlon-deepl-glossary-delete’
     Deletes a DeepL glossary.
       1. Calls ‘tlon-deepl-request-wrapper’ with the ‘glossary-delete’
          type.
       2. The URL formatter (‘tlon-deepl-glossary-delete-formatter’)
          prompts the user to select the glossary to delete using
          ‘tlon-deepl-select-glossary’ and constructs the specific API
          endpoint URL.
       3. The callback (‘tlon-deepl-glossary-delete-callback’) refreshes
          the local glossary list and messages confirmation.


File: tlon.info,  Node: Utility Commands,  Next: Transient Menu (5),  Prev: Glossaries,  Up: Commands (7)

8.3.3 Utility Commands
----------------------

‘tlon-deepl-diff’
     Runs an ‘ediff’ session to compare a local translation file with
     its corresponding DeepL-generated translation file.  Prompts for
     the DeepL file path if not provided.  Defaults to the current
     buffer's file for the local translation.

‘tlon-deepl-fix-encoding-persistent’
     Attempts to fix common UTF-8 misinterpretation issues (where UTF-8
     bytes are treated as ISO-8859-1) within the current buffer (must be
     BibTeX or JSON mode).  Performs a series of search-and-replace
     operations based on a predefined list of common misinterpretations.


File: tlon.info,  Node: Transient Menu (5),  Prev: Utility Commands,  Up: Commands (7)

8.3.4 Transient Menu
--------------------

The command ‘tlon-deepl-menu’ activates a ‘transient’ menu interface for
DeepL operations.

   It provides the following groups and commands:
   • *Translate*:
     ‘t’
          Translate text (‘tlon-deepl-translate’)
     ‘a’
          Translate abstract (‘tlon-deepl-translate-abstract’)
   • *Glossaries*:
     ‘l’
          List/Select glossary (‘tlon-deepl-select-glossary’)
     ‘g’
          Retrieve glossaries from API (‘tlon-deepl-get-glossaries’)
     ‘c’
          Create glossary (‘tlon-deepl-glossary-create’)
     ‘d’
          Delete glossary (‘tlon-deepl-glossary-delete’)
   • *Other*:
     ‘e’
          Ediff translations (‘tlon-deepl-diff’)


File: tlon.info,  Node: Internal Functions and Variables (7),  Prev: Commands (7),  Up: DeepL Integration (tlon-deeplel)

8.4 Internal Functions and Variables
====================================

This section lists non-interactive functions and variables used
internally or potentially useful for advanced customization.

* Menu:

* API Request Handling::
* Callbacks::
* Payload Encoders & Formatters::
* Helper Functions: Helper Functions (1).


File: tlon.info,  Node: API Request Handling,  Next: Callbacks,  Up: Internal Functions and Variables (7)

8.4.1 API Request Handling
--------------------------

‘tlon-deepl-request-wrapper’
     The core function for making DeepL API calls.  Takes the API call
     ‘TYPE’, an optional ‘CALLBACK’ function, and an optional
     ‘NO-GLOSSARY-OK’ flag.
       1. Retrieves parameters (method, URL suffix/function, default
          callback, encoding function) from ‘tlon-deepl-parameters’
          based on ‘TYPE’.
       2. Constructs the full API ‘URL’.
       3. If an encoding function exists, calls it to generate the JSON
          ‘PAYLOAD’ (passing ‘NO-GLOSSARY-OK’).  Writes the payload to a
          temporary file.
       4. Builds the ‘curl’ command string including method, URL,
          headers (Content-Type, Authorization with ‘tlon-deepl-key’),
          and payload data if applicable.
       5. Executes the ‘curl’ command using ‘shell-command-to-string’ to
          get the ‘RESPONSE’.
       6. Deletes the temporary payload file if created.
       7. Inserts the response into a temporary buffer, positions point
          at the start of the JSON/list, and calls the specified
          ‘CALLBACK’ function.


File: tlon.info,  Node: Callbacks,  Next: Payload Encoders & Formatters,  Prev: API Request Handling,  Up: Internal Functions and Variables (7)

8.4.2 Callbacks
---------------

‘tlon-deepl-print-translation’
     Default callback for translation requests.  Parses the JSON
     response, extracts the translated text, decodes it as UTF-8, and
     either messages it or copies it to the kill ring if ‘COPY’ is
     non-nil.

‘tlon-deepl-glossary-create-callback’
     Callback for glossary creation.  Resets
     ‘tlon-deepl-target-language’, refreshes the local glossary list
     using ‘tlon-deepl-get-glossaries’, and messages the API response.

‘tlon-deepl-glossary-get-callback’
     Callback for glossary retrieval.  Parses the JSON response and
     updates the ‘tlon-deepl-glossaries’ variable.  Messages
     confirmation.

‘tlon-deepl-glossary-delete-callback’
     Callback for glossary deletion.  Refreshes the local glossary list
     using ‘tlon-deepl-get-glossaries’ and messages confirmation.


File: tlon.info,  Node: Payload Encoders & Formatters,  Next: Helper Functions (1),  Prev: Callbacks,  Up: Internal Functions and Variables (7)

8.4.3 Payload Encoders & Formatters
-----------------------------------

‘tlon-deepl-translate-encode’
     Generates the JSON payload for a translation request.  Includes the
     text (as a vector), source language, target language, and the
     relevant glossary ID (retrieved via
     ‘tlon-deepl-get-language-glossary’).  Handles the ‘NO-GLOSSARY-OK’
     logic and potential user abortion if no glossary is found and
     confirmation is denied.

‘tlon-deepl-glossary-create-encode’
     Generates the JSON payload for creating a glossary.  Determines the
     glossary file path (‘tlon-glossary-make-file’), reads its content
     (UTF-8 encoded TSV), and includes the glossary name, source
     language ("en"), target language, entries, and format ("tsv") in
     the JSON object.

‘tlon-deepl-glossary-delete-formatter’
     Function used by ‘tlon-deepl-request-wrapper’ to generate the
     specific URL for deleting a glossary.  It calls
     ‘tlon-deepl-select-glossary’ to get the ID and appends it to the
     base glossaries endpoint.


File: tlon.info,  Node: Helper Functions (1),  Prev: Payload Encoders & Formatters,  Up: Internal Functions and Variables (7)

8.4.4 Helper Functions
----------------------

‘tlon-deepl-get-list-of-glossaries’
     Formats the data in ‘tlon-deepl-glossaries’ into a list of strings
     suitable for display in ‘completing-read’ (used by
     ‘tlon-deepl-select-glossary’).  Each string includes name,
     languages, entry count, and ID.  Returns a cons cell
     ‘(DISPLAY-STRING . ID)’.

‘tlon-deepl-get-language-glossary’
     Finds the glossary ID for a specific target ‘LANGUAGE’ from the
     cached ‘tlon-deepl-glossaries’ list.  Returns nil if the source
     language is not "en" (as current glossaries are EN -> X). Uses
     ‘tlon-lookup’.

‘tlon-deepl-fix-encoding’
     Corrects a specific encoding misinterpretation where a UTF-8 string
     is read as ISO-8859-1.  Takes the misencoded ‘STRING’, re-encodes
     it as ISO-8859-1, and then decodes it correctly as UTF-8.


File: tlon.info,  Node: Dictionary Functionality (tlon-dictel),  Next: Forge Integration (tlon-forgel),  Prev: DeepL Integration (tlon-deeplel),  Up: Top

9 Dictionary Functionality (‘tlon-dict.el’)
*******************************************

This module integrates with the external ‘reverso.el’ package to provide
dictionary-related features, specifically fetching synonyms, while
ensuring that the language context aligns with the Tlön workflow.

* Menu:

* Dependencies: Dependencies (6).
* Commands: Commands (8).
* Transient Menu: Transient Menu (6).


File: tlon.info,  Node: Dependencies (6),  Next: Commands (8),  Up: Dictionary Functionality (tlon-dictel)

9.1 Dependencies
================

This module requires the ‘reverso’ package to be installed and
available.


File: tlon.info,  Node: Commands (8),  Next: Transient Menu (6),  Prev: Dependencies (6),  Up: Dictionary Functionality (tlon-dictel)

9.2 Commands
============

* Menu:

* Get Synonyms via Reverso::


File: tlon.info,  Node: Get Synonyms via Reverso,  Up: Commands (8)

9.2.1 Get Synonyms via Reverso
------------------------------

The command ‘tlon-reverso-get-synonyms’ fetches synonyms for the word
currently at point using the ‘reverso.el’ package.

   Crucially, it overrides the default language selection mechanism of
‘reverso.el’.  Instead, it determines the language of the current file
using ‘tlon-get-language-in-file’, looks up the corresponding language
code recognized by ‘reverso.el’ using Tlön's configuration
(‘tlon-lookup’), and passes this language code to the underlying
‘reverso--get-synonyms’ function.

   It prompts the user for the word, defaulting to the word at point
(‘thing-at-point 'word’).  The results are displayed in a dedicated
Reverso buffer, similar to how ‘reverso.el’ typically operates.


File: tlon.info,  Node: Transient Menu (6),  Prev: Commands (8),  Up: Dictionary Functionality (tlon-dictel)

9.3 Transient Menu
==================

The command ‘tlon-dict-menu’ activates a ‘transient’ menu interface for
dictionary-related commands.

   Currently, it offers one option:
‘s’
     Calls ‘tlon-reverso-get-synonyms’ to fetch synonyms for the word at
     point.


File: tlon.info,  Node: Forge Integration (tlon-forgel),  Next: Glossary Management (tlon-glossaryel),  Prev: Dictionary Functionality (tlon-dictel),  Up: Top

10 Forge Integration (‘tlon-forg.el’)
*************************************

This module provides integration between ‘forge’ (Emacs interface for
Git forges like GitHub) and Org mode.  It allows capturing GitHub issues
as Org TODO items, keeping their state synchronized, navigating between
the issue and its corresponding TODO, and managing related metadata like
assignees and labels (which map to Org status and tags).

* Menu:

* Dependencies: Dependencies (7).
* User Options: User Options (3).
* Commands: Commands (9).
* Internal Functions and Variables: Internal Functions and Variables (8).


File: tlon.info,  Node: Dependencies (7),  Next: User Options (3),  Up: Forge Integration (tlon-forgel)

10.1 Dependencies
=================

   • ‘forge’
   • ‘org’
   • ‘shut-up’
   • ‘tlon-core’
   • ‘tlon-dispatch’
   • ‘org-extras’ (optional, for some job-related refiling)
   • ‘ghub’ (for creating issues)
   • ‘magit’ (for creating issues)
   • ‘closql’ (underlying ‘forge’ dependency)
   • ‘transient’ (for the menu)


File: tlon.info,  Node: User Options (3),  Next: Commands (9),  Prev: Dependencies (7),  Up: Forge Integration (tlon-forgel)

10.2 User Options
=================

‘tlon-when-assignee-is-nil’
     Controls behavior when capturing an issue with no assignee.
     Options:
        • ‘prompt’ (default): Ask user if they want to be assigned.
        • ‘change’: Assign to the current user automatically.
        • ‘warn’: Capture as-is, but log a warning.
        • ‘capture’: Capture as-is, no warning.
        • ‘no-capture’ (or any other value): Do not capture the issue.
     Can be set temporarily via ‘tlon-forg-menu’.

‘tlon-when-assignee-is-someone-else’
     Controls behavior when capturing an issue assigned to someone else.
     Options are the same as ‘tlon-when-assignee-is-nil’.  Note: This
     option is ignored (treated as ‘no-capture’) when using
     ‘tlon-capture-all-issues’.  Can be set temporarily via
     ‘tlon-forg-menu’.

‘tlon-forg-when-reconciling’
     Controls behavior when ‘tlon-reconcile-issue-and-todo’ finds
     discrepancies between the issue and its TODO.  Options:
        • ‘prompt’ (default): Ask user whether to keep the issue's state
          or the TODO's state.
        • ‘issue’: Automatically update the TODO to match the issue.
        • ‘todo’: Automatically update the issue to match the TODO
          (Note: Currently not fully implemented).
     Can be set temporarily via ‘tlon-forg-menu’.

‘tlon-forg-include-archived’
     Boolean flag.  If non-nil, archived issues/TODOs are included in
     capture and reconcile operations.  Defaults to nil.  Can be toggled
     temporarily via ‘tlon-forg-menu’.

‘tlon-forg-enforce-user’
     String or nil.  If non-nil, forces Tlön to consider this string as
     the current user's GitHub login, primarily for testing purposes.
     Defaults to nil.


File: tlon.info,  Node: Commands (9),  Next: Internal Functions and Variables (8),  Prev: User Options (3),  Up: Forge Integration (tlon-forgel)

10.3 Commands
=============

This section details the interactive commands provided by
‘tlon-forg.el’.

* Menu:

* Visiting Issues and TODOs::
* Capturing Issues as TODOs::
* Reconciling Issues and TODOs::
* Counterpart Navigation::
* Creating Issues and TODOs::
* Closing Issues and TODOs::
* Sorting Org Entries::
* File Handling (Associated with Issues)::
* Miscellaneous::
* Transient Menu: Transient Menu (7).


File: tlon.info,  Node: Visiting Issues and TODOs,  Next: Capturing Issues as TODOs,  Up: Commands (9)

10.3.1 Visiting Issues and TODOs
--------------------------------

‘tlon-visit-issue’
     Visits the GitHub issue associated with the current context.  If
     point is on an ‘orgit-topic:’ link, follows it.  Otherwise, tries
     to extract the issue number and repository from the current Org
     heading.

‘tlon-visit-todo’
     Visits the Org TODO item associated with the current context
     (GitHub issue or Org heading).  Finds the correct Org file (generic
     or jobs) and position based on the issue's ID or job title.

‘tlon-visit-todo-or-capture’
     Visits the Org TODO associated with the current issue.  If no TODO
     exists yet, it calls ‘tlon-capture-issue’ first.


File: tlon.info,  Node: Capturing Issues as TODOs,  Next: Reconciling Issues and TODOs,  Prev: Visiting Issues and TODOs,  Up: Commands (9)

10.3.2 Capturing Issues as TODOs
--------------------------------

‘tlon-capture-issue’
     (Autoloaded) Creates a new Org TODO item based on the current Forge
     issue (or the one specified).
       1. Checks if the issue is open.
       2. Handles the assignee based on ‘tlon-when-assignee-is-nil’ and
          ‘tlon-when-assignee-is-someone-else’, potentially changing the
          assignee or skipping capture.
       3. If the issue is a "Job" (title starts with "Job: "):
             • Ensures it has a valid phase label (prompting if
               necessary via ‘tlon-capture-handle-phase’).
             • Stores or refiles the job TODO under its master job
               heading using ‘tlon-store-or-refile-job-todo’.
       4. If it's a generic issue:
             • Stores the TODO in the generic file using
               ‘tlon-store-todo’ with the "tbG" template.
     Only captures if a TODO doesn't already exist for the issue.

‘tlon-capture-all-issues’
     (Autoloaded) Captures all open issues in the current repository
     that are either unassigned or assigned to the current user.
       1. Performs a silent ‘forge-pull’ first (unless called with a
          prefix argument) to ensure local data is up-to-date.
       2. Iterates through all open issues in the repository
          (‘tlon-get-issues’).
       3. For each issue, checks if a TODO already exists
          (‘tlon-get-todo-position-from-issue’).
       4. If no TODO exists and the issue is assigned to the current
          user or unassigned, calls ‘tlon-capture-issue’.  (Note: It
          implicitly uses ‘no-capture’ for
          ‘tlon-when-assignee-is-someone-else’ in this bulk mode).


File: tlon.info,  Node: Reconciling Issues and TODOs,  Next: Counterpart Navigation,  Prev: Capturing Issues as TODOs,  Up: Commands (9)

10.3.3 Reconciling Issues and TODOs
-----------------------------------

‘tlon-reconcile-issue-and-todo’
     (Autoloaded) Synchronizes the state (title, status, tags) between
     the current issue and its associated Org TODO, or vice versa.
     Works whether point is in the issue buffer or on the TODO heading.

       1. Determines the issue and TODO based on the current context.
       2. Generates the expected TODO heading string based on the
          current issue state (‘tlon-make-todo-name-from-issue’).
       3. Compares this with the actual TODO heading string.
       4. If they differ, it applies the behavior defined by
          ‘tlon-forg-when-reconciling’:
             • ‘prompt’: Asks the user whether to update the TODO or the
               issue.
             • ‘issue’: Updates the TODO heading to match the issue
               state (‘tlon-update-todo-from-issue’).
             • ‘todo’: Updates the issue state to match the TODO
               (currently not implemented, signals error).

‘tlon-reconcile-all-issues-and-todos’
     (Autoloaded) Reconciles all Org TODOs in the generic file
     (‘tlon-get-todos-generic-file’) with their corresponding GitHub
     issues.
       1. Performs a silent ‘forge-pull’ first (unless called with a
          prefix argument).
       2. Iterates through all headings in the generic TODO file.
       3. For each heading, finds the associated issue
          (‘tlon-get-issue’).
       4. If an issue is found and the TODO is not archived (or
          ‘tlon-forg-include-archived’ is non-nil), calls
          ‘tlon-reconcile-issue-and-todo-from-issue’.


File: tlon.info,  Node: Counterpart Navigation,  Next: Creating Issues and TODOs,  Prev: Reconciling Issues and TODOs,  Up: Commands (9)

10.3.4 Counterpart Navigation
-----------------------------

‘tlon-visit-counterpart’
     (Autoloaded) Navigates between an issue and its corresponding TODO.
     If in an issue buffer, visits the TODO (‘tlon-visit-todo’).  If on
     a TODO heading, visits the issue (‘tlon-visit-issue’).

‘tlon-visit-counterpart-or-capture’
     (Autoloaded) Similar to ‘tlon-visit-counterpart’, but if navigating
     from an issue to a non-existent TODO, it captures the issue first
     (‘tlon-visit-todo-or-capture’).


File: tlon.info,  Node: Creating Issues and TODOs,  Next: Closing Issues and TODOs,  Prev: Counterpart Navigation,  Up: Commands (9)

10.3.5 Creating Issues and TODOs
--------------------------------

‘tlon-create-issue-from-todo’
     (Autoloaded) Creates a new GitHub issue based on the Org heading at
     point.
       1. Ensures the heading doesn't already have an issue number.
       2. Ensures the heading has a repository tag (prompts to add one
          via ‘tlon-set-repo-in-heading’ if missing).
       3. Extracts the title, status, and tags from the heading.
       4. Creates the issue on GitHub using ‘tlon-create-issue’.
       5. Pulls changes until the new issue appears locally.
       6. Sets the issue number in the Org heading
          (‘tlon-set-issue-number-in-heading’).
       7. Visits the new issue.
       8. Sets the assignee to the current user and applies the status
          and tags from the Org heading as labels (‘tlon-set-assignee’,
          ‘tlon-set-labels’).
       9. Updates the Org heading to include the ‘orgit-topic:’ link
          using ‘tlon-make-todo-name-from-issue’.

‘tlon-create-issue-or-todo’
     Creates the counterpart if it doesn't exist.  If on an Org heading
     without an issue, calls ‘tlon-create-issue-from-todo’.  If in an
     issue buffer without a corresponding TODO, calls
     ‘tlon-capture-issue’.


File: tlon.info,  Node: Closing Issues and TODOs,  Next: Sorting Org Entries,  Prev: Creating Issues and TODOs,  Up: Commands (9)

10.3.6 Closing Issues and TODOs
-------------------------------

‘tlon-close-issue-and-todo’
     (Autoloaded) Closes both the GitHub issue and its associated Org
     TODO.  Works from either context.
       1. Finds the issue number and repository.
       2. Closes the GitHub issue using ‘tlon-close-issue-number’ (which
          visits the issue and calls ‘tlon-close-issue’).
       3. Visits the corresponding Org TODO (‘tlon-visit-todo’).
       4. Sets the TODO state to "DONE" using ‘org-todo’.


File: tlon.info,  Node: Sorting Org Entries,  Next: File Handling (Associated with Issues),  Prev: Closing Issues and TODOs,  Up: Commands (9)

10.3.7 Sorting Org Entries
--------------------------

‘tlon-forg-sort-by-tag’
     (Autoloaded) Sorts Org entries in the current buffer based on the
     first tag that matches the pattern defined in
     ‘tlon-forg-sort-by-tags-regexp’.  Uses ‘org-sort-entries’ with a
     custom sorter function (‘tlon-forg-tag-sorter’).  Entries without a
     matching tag are sorted to the end.


File: tlon.info,  Node: File Handling (Associated with Issues),  Next: Miscellaneous,  Prev: Sorting Org Entries,  Up: Commands (9)

10.3.8 File Handling (Associated with Issues)
---------------------------------------------

‘tlon-open-forge-file’
     (Autoloaded) Opens the file associated with the current issue.
     Assumes the issue title contains a BibTeX-like key (e.g., "Job:
     'key'") and uses ‘tlon-get-file-from-issue’ (which calls
     ‘tlon-get-file-from-key’) to find the corresponding file path.

‘tlon-open-forge-counterpart’
     (Autoloaded) Opens the *counterpart* file associated with the
     current issue.  Finds the issue's file path using
     ‘tlon-get-file-from-issue’ and then calls ‘tlon-open-counterpart’
     on that path.


File: tlon.info,  Node: Miscellaneous,  Next: Transient Menu (7),  Prev: File Handling (Associated with Issues),  Up: Commands (9)

10.3.9 Miscellaneous
--------------------

‘tlon-report-bug’
     (Autoloaded) Creates a new bug report issue specifically in the
     ‘tlon.el’ repository.  Uses ‘tlon-create-issue-in-dir’ and
     prepopulates the buffer with a template using
     ‘tlon-prepopulate-bug-report-buffer’.

‘tlon-list-all-todos’
     (Autoloaded) Uses ‘org-roam-extras’ to list all Org files within
     the directory specified by ‘paths-dir-tlon-todos’.


File: tlon.info,  Node: Transient Menu (7),  Prev: Miscellaneous,  Up: Commands (9)

10.3.10 Transient Menu
----------------------

The command ‘tlon-forg-menu’ (Autoloaded) activates a ‘transient’ menu
interface for ‘tlon-forg’ operations.

   It provides the following groups and commands:
   • *Actions*:
     ‘y’
          dwim (visit counterpart or capture)
          (‘tlon-visit-counterpart-or-capture’)
     ‘v’
          visit counterpart (‘tlon-visit-counterpart’)
     ‘p’
          post (create issue from todo) (‘tlon-create-issue-from-todo’)
     ‘x’
          close issue and todo (‘tlon-close-issue-and-todo’)
     ‘s’
          sort by tag (‘tlon-forg-sort-by-tag’)
   • *Capture*:
     ‘c’
          capture issue (‘tlon-capture-issue’)
     ‘C’
          capture all issues (‘tlon-capture-all-issues’)
   • *Reconcile*:
     ‘r’
          reconcile issue and todo (‘tlon-reconcile-issue-and-todo’)
     ‘R’
          reconcile all issues and todos
          (‘tlon-reconcile-all-issues-and-todos’)
   • *Options*: (These set the corresponding user options temporarily
     for the session)
     ‘-a’
          Include archived (‘tlon-infix-toggle-include-archived’)
     ‘-r’
          When reconciling (‘tlon-forg-when-reconciling-infix’)
     ‘-n’
          When assignee is nil (‘tlon-when-assignee-is-nil-infix’)
     ‘-e’
          When assignee is someone else
          (‘tlon-when-assignee-is-someone-else-infix’)


File: tlon.info,  Node: Internal Functions and Variables (8),  Prev: Commands (9),  Up: Forge Integration (tlon-forgel)

10.4 Internal Functions and Variables
=====================================

This section lists non-interactive functions, variables, and constants
used internally or potentially useful for advanced customization.

* Menu:

* Constants: Constants (2).
* File Path Management::
* Issue and TODO Data Retrieval::
* Issue and TODO Modification::
* Capture and Reconciliation Helpers::
* Validation and Checks::
* GitHub Project Integration (Experimental)::
* Miscellaneous Helpers::


File: tlon.info,  Node: Constants (2),  Next: File Path Management,  Up: Internal Functions and Variables (8)

10.4.1 Constants
----------------

‘tlon-todo-statuses’
     List of valid Org TODO keywords used by Tlön (e.g., "TODO",
     "IMPORTANT", "WAITING").
‘tlon-todo-tags’
     List of valid Org tags used by Tlön (e.g., "PendingReview",
     "Later").
‘tlon-forg-sort-by-tags-regexp’
     Regexp used by ‘tlon-forg-sort-by-tag’ to identify sortable tags.
‘tlon-forg-gh-project-query’
     GraphQL query string for fetching issue details including project
     fields via the 'gh' CLI (experimental).
‘tlon-gh-field-ids’
     Alist mapping field names (e.g., ‘:effortid’) to their GitHub
     ProjectV2 field IDs (experimental).


File: tlon.info,  Node: File Path Management,  Next: Issue and TODO Data Retrieval,  Prev: Constants (2),  Up: Internal Functions and Variables (8)

10.4.2 File Path Management
---------------------------

‘tlon-todos-jobs-file’
     Variable holding the path to the Org file containing job-related
     TODOs.  Set dynamically via ‘tlon-get-todos-jobs-file’.
‘tlon-todos-generic-file’
     Variable holding the path to the Org file containing generic TODOs.
     Set dynamically via ‘tlon-get-todos-generic-file’.
‘tlon-get-todos-jobs-file’
     Retrieves the path to the jobs TODO file using its Org ID
     (‘paths-tlon-todos-jobs-id’) and caches it.
‘tlon-get-todos-generic-file’
     Retrieves the path to the generic TODO file using its Org ID
     (‘paths-tlon-todos-generic-id’) and caches it.
‘tlon-get-todos-file-from-issue’
     Returns the appropriate TODO file path (jobs or generic) based on
     whether the ‘ISSUE’ is a job (‘tlon-issue-is-job-p’).
‘tlon-get-todo-position’
     Finds the starting position of a heading matching ‘STRING’ in
     ‘FILE’.  If ‘SUBSTRING’ is non-nil, matches anywhere in the
     heading; otherwise, requires an exact match.  Uses
     ‘org-find-exact-headline-in-buffer’ or
     ‘tlon-find-headline-substring-in-file’.
‘tlon-find-headline-substring-in-file’
     Helper to find the position of a heading containing ‘TODO’ as a
     substring within ‘FILE’.
‘tlon-get-todo-position-from-issue’
     Finds the position of the TODO associated with ‘ISSUE’.  For jobs,
     searches for the heading name; for generic issues, searches for the
     ‘orgit-topic:’ link substring.


File: tlon.info,  Node: Issue and TODO Data Retrieval,  Next: Issue and TODO Modification,  Prev: File Path Management,  Up: Internal Functions and Variables (8)

10.4.3 Issue and TODO Data Retrieval
------------------------------------

‘tlon-get-issue’
     Retrieves the ‘forge-topic’ object for an issue specified by
     ‘NUMBER’ and ‘REPO’, or by extracting these from the current Org
     heading.
‘tlon-get-issue-buffer’
     Returns the buffer visiting the specified issue (or the one at
     point/heading).  Uses ‘tlon-visit-issue’ internally.
‘tlon-get-element-from-heading’
     Extracts text matching ‘REGEXP’ from the Org heading at point.
‘tlon-get-issue-number-from-heading’
     Extracts the issue number (e.g., #123) from the heading.
‘tlon-get-repo-from-heading’
     Extracts the repository abbreviation (e.g., [repo-abbrev]) from the
     heading and looks up the full directory path.
‘tlon-get-issue-number-from-open-issues’
     Prompts the user to select an open issue from the current
     repository using completion and returns its number.
‘tlon-get-issues’
     Returns a list of all open ‘forge-issue’ objects for the specified
     ‘REPO’ (or current repo).
‘tlon-get-latest-issue’
     Returns the number and title of the most recently created open
     issue in the ‘REPO’.
‘tlon-count-issues’
     Returns the count of open issues in the ‘REPO’.
‘tlon-get-labels-of-type’
     Returns labels of a specific ‘TYPE’ ('tag or 'phase) from an
     ‘ISSUE’.
‘tlon-get-status-in-issue’
     Returns the status ("open" or "completed") of an ‘ISSUE’,
     optionally ‘UPCASED’.
‘tlon-get-status-in-todo’
     Returns the Org TODO state if it's one of ‘tlon-todo-statuses’.
‘tlon-get-phase-in-labels’
     Finds the unique valid phase label within a list of ‘LABELS’.
‘tlon-get-phase-in-issue’
     Returns the unique valid job phase label for an ‘ISSUE’.
‘tlon-get-assignee’
     Returns the login name of the first assignee of an ‘ISSUE’.
‘tlon-forg-get-labels’
     Returns a list of all label names for an ‘ISSUE’.
‘tlon-get-tags-in-todo’
     Returns the valid Org tags (from ‘tlon-todo-tags’) on the heading
     at point.
‘tlon-get-element’
     Generic function to get an ‘ELEMENT’ (slot) from an ‘ISSUE’ object.

‘tlon-get-first-element’
     Gets the first item from an ‘ELEMENT’ (slot) that holds a list
     (like assignees, labels).
‘tlon-get-first-label’
     Returns the name of the first label of an ‘ISSUE’.
‘tlon-get-state’
     Returns the state symbol ('open or 'completed) of an ‘ISSUE’.
‘tlon-get-issue-name’
     Formats the issue name as "#NUMBER TITLE".
‘tlon-get-issue-link’
     Creates an Org link string (‘orgit-topic:ID’) for an ‘ISSUE’.
‘tlon-make-todo-name-from-issue’
     Constructs the full Org heading string for an ‘ISSUE’, including
     status, repo abbreviation, optional job action, the issue link, and
     tags.  Handles ‘NO-ACTION’ and ‘NO-STATUS’ flags.
‘tlon-get-file-from-issue’
     Extracts a key from the issue name and finds the corresponding file
     path using ‘tlon-get-file-from-key’.
‘tlon-get-parent-todo’
     Finds the parent heading of a given ‘TODO’ name within the jobs
     file.


File: tlon.info,  Node: Issue and TODO Modification,  Next: Capture and Reconciliation Helpers,  Prev: Issue and TODO Data Retrieval,  Up: Internal Functions and Variables (8)

10.4.4 Issue and TODO Modification
----------------------------------

‘tlon-set-repo-in-heading’
     Prompts the user to select a repository and inserts its
     abbreviation tag (e.g., [repo-abbrev]) into the Org heading if not
     already present.
‘tlon-set-issue-number-in-heading’
     Inserts the ‘ISSUE-NUMBER’ (e.g., #123) into the Org heading if not
     already present.
‘tlon-close-issue’
     Sets the state of an ‘ISSUE’ to 'completed using
     ‘forge--set-topic-state’.
‘tlon-close-issue-number’
     Visits the issue specified by ‘ISSUE-NUMBER’ and ‘REPO’ and then
     closes it using ‘tlon-close-issue’.
‘tlon-set-labels’
     Sets the labels for an ‘ISSUE’.  Can optionally replace existing
     labels of a specific ‘TYPE’ (status or phase) or simply append new
     labels.  Uses ‘forge--set-topic-labels’.
‘tlon-set-job-label’
     Prompts the user to select a valid job label from
     ‘tlon-job-labels’.
‘tlon-set-status’
     Prompts the user to select a valid TODO status from
     ‘tlon-todo-statuses’.
‘tlon-set-assignee’
     Sets the assignee for an ‘ISSUE’ using
     ‘forge--set-topic-assignees’.  Takes the ‘ASSIGNEE’ login string.
‘tlon-select-assignee’
     Prompts the user to select a GitHub user (from
     ‘tlon-user-lookup-all’) to be the assignee.
‘tlon-set-initial-label-and-assignee’
     Sets the issue label to "Awaiting processing" and assigns it to the
     current user.  Used when creating master job TODOs.
‘tlon-update-todo-from-issue’
     Replaces the current Org heading line with the provided
     ‘ISSUE-NAME’ string during reconciliation.
‘tlon-update-issue-from-todo’
     Placeholder function for updating an issue based on a TODO heading
     during reconciliation (currently signals an error).
‘tlon-mark-todo-done’
     Finds the ‘TODO’ heading in ‘FILE’ and sets its state to "DONE".


File: tlon.info,  Node: Capture and Reconciliation Helpers,  Next: Validation and Checks,  Prev: Issue and TODO Modification,  Up: Internal Functions and Variables (8)

10.4.5 Capture and Reconciliation Helpers
-----------------------------------------

‘tlon-pull-silently’
     Performs a ‘forge--pull’ operation, suppressing output messages,
     optionally displaying a custom ‘MESSAGE’ and running a ‘CALLBACK’
     function upon completion.
‘tlon-capture-all-issues-after-pull’
     Callback function for ‘tlon-capture-all-issues’ that initiates the
     capture process after the initial pull completes.
‘tlon-store-todo’
     Uses ‘org-capture’ with a specific ‘TEMPLATE’ ("tbG" or "tbJ") to
     store a new TODO for the ‘ISSUE’, unless one already exists.
     Handles master job TODO creation.
‘tlon-capture-handle-assignee’
     Implements the logic defined by ‘tlon-when-assignee-is-nil’ and
     ‘tlon-when-assignee-is-someone-else’ during issue capture.  Returns
     ‘t’ if capture should proceed, ‘nil’ otherwise.  May call
     ‘tlon-forg-change-assignee’.
‘tlon-forg-change-assignee’
     Changes the assignee of the ‘ISSUE’ to the current user and waits
     (pulling silently) until the change is reflected locally.
‘tlon-capture-handle-phase’
     Ensures an ‘ISSUE’ being captured as a job has a valid phase label,
     prompting the user to select one if missing.
‘tlon-issue-is-job-p’
     Returns ‘t’ if the ‘ISSUE’ title starts with "Job: ".
‘tlon-create-job-todo-from-issue’
     Handles phase checking and calls ‘tlon-store-or-refile-job-todo’
     for job issues.
‘tlon-store-master-job-todo’
     Creates the main parent heading for a job if it doesn't exist.
     Optionally sets the initial issue label and assignee.
‘tlon-store-or-refile-job-todo’
     Creates a new job TODO using ‘tlon-store-todo’ and then refiles it
     under its corresponding master job heading (found using
     ‘tlon-get-todo-position’).  If the master heading doesn't exist,
     prompts to create it via ‘tlon-store-master-job-todo’.  Uses
     ‘org-extras’ functions for refiling.
‘tlon-reconcile-all-issues-and-todos-after-pull’
     Callback function for ‘tlon-reconcile-all-issues-and-todos’ that
     initiates the reconciliation process after the initial pull
     completes.
‘tlon-reconcile-issue-and-todo-from-issue’
     Core reconciliation logic called by
     ‘tlon-reconcile-issue-and-todo’.  Compares expected and actual TODO
     names and calls ‘tlon-reconcile-issue-and-todo-prompt’ if they
     differ.
‘tlon-reconcile-issue-and-todo-prompt’
     Handles the user interaction or automatic action based on
     ‘tlon-forg-when-reconciling’ when a discrepancy is found.  Calls
     either ‘tlon-update-todo-from-issue’ or
     ‘tlon-update-issue-from-todo’.


File: tlon.info,  Node: Validation and Checks,  Next: GitHub Project Integration (Experimental),  Prev: Capture and Reconciliation Helpers,  Up: Internal Functions and Variables (8)

10.4.6 Validation and Checks
----------------------------

‘tlon-assignee-is-current-user-p’
     Returns ‘t’ if the ‘ISSUE’'s assignee matches the current user (or
     ‘tlon-forg-enforce-user’).
‘tlon-todo-has-valid-status-p’
     Returns ‘t’ if the Org heading at point has a TODO state listed in
     ‘tlon-todo-statuses’.
‘tlon-check-label-and-assignee’
     Checks if the label and assignee of the issue associated with the
     currently clocked task match the clocked action and the current
     user.  Used before starting a job phase.


File: tlon.info,  Node: GitHub Project Integration (Experimental),  Next: Miscellaneous Helpers,  Prev: Validation and Checks,  Up: Internal Functions and Variables (8)

10.4.7 GitHub Project Integration (Experimental)
------------------------------------------------

These functions use the 'gh' command-line tool and GraphQL to interact
with GitHub Projects (V2).  This functionality appears experimental or
incomplete.

‘tlon-gh-get-issue-fields’
     Executes the GraphQL query defined in ‘tlon-forg-gh-project-query’
     using 'gh api graphql' to fetch project-related fields for a
     specific issue.  Returns the raw JSON response.
‘tlon-gh-parse-issue-fields’
     Parses the raw JSON list returned by ‘tlon-gh-get-issue-fields’
     into a structured property list containing title, assignees,
     labels, effort, and status.


File: tlon.info,  Node: Miscellaneous Helpers,  Prev: GitHub Project Integration (Experimental),  Up: Internal Functions and Variables (8)

10.4.8 Miscellaneous Helpers
----------------------------

‘tlon-open-todo’
     Helper function to open ‘FILE’ and go to ‘POSITION’.
‘tlon-todo-issue-funcall’
     Calls ‘TODO-FUN’ if in Org mode at a heading, or ‘ISSUE-FUN’ if in
     a Forge buffer with an issue context.  Used by counterpart and
     reconcile commands.
‘tlon-forg-tag-sorter’
     The custom comparison function used by ‘tlon-forg-sort-by-tag’.
     Extracts the first tag matching ‘tlon-forg-sort-by-tags-regexp’ or
     returns "~" for sorting unmatched entries last.
‘tlon-create-issue’
     Creates a GitHub issue using ‘ghub-post’.
‘tlon-create-issue-in-dir’
     Helper for ‘tlon-report-bug’, sets up Magit and calls
     ‘forge-create-issue’.
‘tlon-prepopulate-bug-report-buffer’
     Inserts a template into the buffer created by ‘tlon-report-bug’.
‘tlon-symbol-reader’
     Helper for transient menus to read a symbol choice using
     completion.
‘tlon-when-assignee-is-nil-infix’
     Transient infix command to set ‘tlon-when-assignee-is-nil’.
‘tlon-when-assignee-is-someone-else-infix’
     Transient infix command to set
     ‘tlon-when-assignee-is-someone-else’.
‘tlon-forg-when-reconciling-infix’
     Transient infix command to set ‘tlon-forg-when-reconciling’.
‘tlon-infix-toggle-include-archived’
     Transient infix command to toggle ‘tlon-forg-include-archived’.


File: tlon.info,  Node: Glossary Management (tlon-glossaryel),  Next: Image Processing (tlon-imagesel),  Prev: Forge Integration (tlon-forgel),  Up: Top

11 Glossary Management (‘tlon-glossary.el’)
*******************************************

This module provides functions for managing a multilingual glossary
stored in a JSON file.  It allows users to edit entries, add
translations, and extract the glossary in different formats for various
recipients (humans, DeepL editor, DeepL API).

* Menu:

* Configuration: Configuration (4).
* Commands: Commands (10).
* Internal Functions and Variables: Internal Functions and Variables (9).


File: tlon.info,  Node: Configuration (4),  Next: Commands (10),  Up: Glossary Management (tlon-glossaryel)

11.1 Configuration
==================

* Menu:

* Glossary Source File::
* Glossary Recipients::


File: tlon.info,  Node: Glossary Source File,  Next: Glossary Recipients,  Up: Configuration (4)

11.1.1 Glossary Source File
---------------------------

The constant ‘tlon-file-glossary-source’ defines the path to the JSON
file containing the master glossary data.  By default, it points to
‘glossary.json’ within the ‘babel-core’ repository.


File: tlon.info,  Node: Glossary Recipients,  Prev: Glossary Source File,  Up: Configuration (4)

11.1.2 Glossary Recipients
--------------------------

The constant ‘tlon-glossary-recipients’ is an alist defining the email
addresses associated with specific target languages for sharing
human-readable glossaries.  Each entry is a plist with ‘:language’
(language code string) and ‘:email’ (email address string).

     (defconst tlon-glossary-recipients
       '((:language "fr" :email "tlon-french@googlegroups.com")
         (:language "it" :email "tlon-italian@googlegroups.com")))


File: tlon.info,  Node: Commands (10),  Next: Internal Functions and Variables (9),  Prev: Configuration (4),  Up: Glossary Management (tlon-glossaryel)

11.2 Commands
=============

This section details the interactive commands provided by
‘tlon-glossary.el’.

* Menu:

* Edit Glossary Entry::
* Extract Glossary::
* Share Glossary::
* Glossary Menu::


File: tlon.info,  Node: Edit Glossary Entry,  Next: Extract Glossary,  Up: Commands (10)

11.2.1 Edit Glossary Entry
--------------------------

The command ‘tlon-edit-glossary’ provides an interactive way to create
or update entries in the glossary file (‘tlon-file-glossary-source’).

  1. It parses the existing glossary using ‘tlon-parse-glossary’.
  2. It prompts the user to choose an existing English term (using
     completion) or add a new one.
  3. If the term is new:
        • It prompts the user to select the term type (‘variable’ or
          ‘invariant’) using ‘tlon-select-term-type’.
        • It creates a new entry structure using ‘tlon-create-entry’.
          For invariant terms, it automatically adds entries for all
          target languages, using the English term as the initial
          translation.
  4. If the term exists or is newly created and is not of type
     ‘invariant’:
        • It calls ‘tlon-edit-translation-in-entry’ to prompt the user
          for a target language and the corresponding translation for
          the selected English term.  It updates the entry with the new
          or modified translation.
  5. It updates the main glossary data structure with the modified or
     new entry using ‘tlon-update-glossary’.
  6. It writes the updated glossary back to the JSON file using
     ‘tlon-write-data’.


File: tlon.info,  Node: Extract Glossary,  Next: Share Glossary,  Prev: Edit Glossary Entry,  Up: Commands (10)

11.2.2 Extract Glossary
-----------------------

The command ‘tlon-extract-glossary’ extracts a language-specific
glossary from the main JSON file and saves it in a format suitable for a
specified recipient.

  1. It prompts the user to select the target ‘LANGUAGE’ using
     ‘tlon-select-language’.
  2. It prompts the user to select the ‘RECIPIENT’ type (‘human’,
     ‘deepl-editor’, or ‘deepl-api’) using completion.
  3. It determines the target file path and extension based on the
     language and recipient using ‘tlon-glossary-target-path’.
  4. It reads the source glossary JSON file.
  5. It creates or opens the target file and inserts the formatted
     glossary content using ‘tlon-insert-formatted-glossary’, filtering
     and formatting entries based on the recipient:
        • ‘human’: Includes only "variable" type entries, formatted as
          CSV (‘"Source","Target"’).
        • ‘deepl-editor’: Includes all entries, formatted as CSV
          (‘"Source","Target","EN","LANG"’).
        • ‘deepl-api’: Includes all entries, formatted as TSV
          (‘Source\tTarget’).
  6. It saves the target file.
  7. If the recipient is ‘human’, it asks the user if they want to share
     the extracted glossary via email using ‘tlon-share-glossary’.
  8. For other recipients, it messages the path to the extracted file.


File: tlon.info,  Node: Share Glossary,  Next: Glossary Menu,  Prev: Extract Glossary,  Up: Commands (10)

11.2.3 Share Glossary
---------------------

The command ‘tlon-share-glossary’ sends an extracted glossary file as an
email attachment to the designated translators for a specific language.

  1. It prompts the user to select the glossary ‘ATTACHMENT’ file
     (defaulting to the downloads directory).
  2. It prompts the user to select the ‘LANGUAGE’ of the glossary
     (unless provided as an argument).
  3. It looks up the recipient email address for the language in
     ‘tlon-glossary-recipients’ using ‘tlon-lookup’.
  4. It looks up the full language name (e.g., "French") using
     ‘tlon-lookup’ on ‘tlon-languages-properties’ and sets the
     ‘tlon-email-language’ variable.
  5. It calls ‘tlon-email-send’ with the ‘"share-glossary.org"’
     template, the recipient email, and the attachment path.


File: tlon.info,  Node: Glossary Menu,  Prev: Share Glossary,  Up: Commands (10)

11.2.4 Glossary Menu
--------------------

The command ‘tlon-glossary-menu’ activates a ‘transient’ menu interface
providing quick access to the main glossary functions:
‘e’
     Edit glossary entry (‘tlon-edit-glossary’)
‘x’
     Extract glossary (‘tlon-extract-glossary’)
‘s’
     Share glossary (‘tlon-share-glossary’)


File: tlon.info,  Node: Internal Functions and Variables (9),  Prev: Commands (10),  Up: Glossary Management (tlon-glossaryel)

11.3 Internal Functions and Variables
=====================================

This section lists non-interactive functions and variables used
internally or potentially useful for advanced customization.

* Menu:

* Glossary Data Handling::
* Glossary Extraction Formatting::
* Git Integration (Currently Unused/TODO)::


File: tlon.info,  Node: Glossary Data Handling,  Next: Glossary Extraction Formatting,  Up: Internal Functions and Variables (9)

11.3.1 Glossary Data Handling
-----------------------------

‘tlon-parse-glossary’
     Reads and parses the JSON glossary file specified by
     ‘tlon-file-glossary-source’ into an Emacs Lisp alist using
     ‘tlon-read-json’.

‘tlon-get-english-terms’
     Extracts a list of all English terms (the ‘en’ value) from the
     parsed glossary alist.  Used for completion in
     ‘tlon-edit-glossary’.

‘tlon-find-entry-by-term’
     Searches the parsed glossary alist for an entry whose English term
     (‘en’ value) matches the given ‘TERM’.  Returns the matching entry
     alist or nil.

‘tlon-select-term-type’
     Prompts the user with completion to select a term type (‘variable’
     or ‘invariant’) and returns the selected string.

‘tlon-create-entry’
     Creates a new glossary entry alist for a given English ‘TERM’ and
     ‘TYPE’.  If the type is ‘invariant’, it pre-populates translations
     for all ‘tlon-project-target-languages’ with the English term
     itself.

‘tlon-edit-translation-in-entry’
     Interactively prompts the user to select a target language and
     provide or update the translation for the given English ‘TERM’
     within the provided ‘ENTRY’ alist.  Returns the modified entry.

‘tlon-update-glossary’
     Takes the main glossary alist, a potentially modified ‘ENTRY’, and
     the corresponding English ‘TERM’.  If an entry for ‘TERM’ already
     exists in the glossary, it replaces it with ‘ENTRY’.  If not, it
     appends ‘ENTRY’ to the glossary.  Returns the updated glossary
     alist.


File: tlon.info,  Node: Glossary Extraction Formatting,  Next: Git Integration (Currently Unused/TODO),  Prev: Glossary Data Handling,  Up: Internal Functions and Variables (9)

11.3.2 Glossary Extraction Formatting
-------------------------------------

‘tlon-glossary-target-path’
     Determines the full output file path for an extracted glossary
     based on the target ‘LANGUAGE’ and ‘RECIPIENT’.  It sets the file
     extension to ‘.csv’ for ‘human’ and ‘deepl-editor’, and ‘.tsv’ for
     ‘deepl-api’.  Uses ‘tlon-glossary-make-file’ internally.

‘tlon-glossary-make-file’
     Constructs the filename (e.g., ‘EN-FR.csv’) and combines it with
     the user's download directory path (‘paths-dir-downloads’).

‘tlon-insert-formatted-glossary’
     Iterates through the parsed ‘JSON’ glossary data.  For each entry,
     it extracts the source (‘en’) and target (‘language’) terms.  Based
     on the ‘RECIPIENT’, it formats the entry as CSV or TSV and inserts
     it into the current buffer.  For ‘human’ recipients, it only
     includes entries of type ‘variable’.


File: tlon.info,  Node: Git Integration (Currently Unused/TODO),  Prev: Glossary Extraction Formatting,  Up: Internal Functions and Variables (9)

11.3.3 Git Integration (Currently Unused/TODO)
----------------------------------------------

‘tlon-glossary-prompt-for-explanation’
     (TODO) Prompts the user for an optional explanation of a glossary
     change, intended for commit messages.

‘tlon-glossary-commit’
     (TODO) Intended to handle the Git workflow for glossary changes:
     pulling, staging the glossary file, committing with a formatted
     message (including action, term, and optional explanation), and
     pushing.  Requires ‘magit’ functions.  Currently marked as unused
     and needing fixes.


File: tlon.info,  Node: Image Processing (tlon-imagesel),  Next: Job Management (tlon-jobsel),  Prev: Glossary Management (tlon-glossaryel),  Up: Top

12 Image Processing (‘tlon-images.el’)
**************************************

This module provides functionality for processing images, primarily
using the external ‘ImageMagick’ command-line tool.  It allows for
operations like reducing brightness, inverting colors, and making images
non-transparent.  It also integrates with the ‘invertornot.com’ API to
determine if an image's colors can be safely inverted.

* Menu:

* Dependencies: Dependencies (8).
* User Options: User Options (4).
* Commands: Commands (11).
* Internal Functions and Variables: Internal Functions and Variables (10).


File: tlon.info,  Node: Dependencies (8),  Next: User Options (4),  Up: Image Processing (tlon-imagesel)

12.1 Dependencies
=================

‘ImageMagick’
     Must be installed and accessible in the system's PATH for image
     processing commands to work.
‘transient’
     Required for the menu interface.
‘window-extras’
     Used by ‘tlon-images-maybe-open-after-processing’ for window
     management.


File: tlon.info,  Node: User Options (4),  Next: Commands (11),  Prev: Dependencies (8),  Up: Image Processing (tlon-imagesel)

12.2 User Options
=================

‘tlon-images-default-brightness-reduction’
     Default percentage (integer) by which to reduce image brightness
     when using ‘tlon-images-reduce-brightnesss’ without specifying a
     percentage.  Defaults to 20.

‘tlon-images-open-after-processing’
     Boolean flag.  If non-nil (the default), the original (copied as
     light theme) and processed (dark theme) images will be opened in
     separate windows after processing via
     ‘tlon-images-reduce-brightnesss’ or ‘tlon-images-invert-colors’.
     Uses ‘tlon-images-maybe-open-after-processing’.

‘tlon-images-process-without-asking’
     Boolean flag.  If non-nil, commands like
     ‘tlon-images-reduce-brightnesss’ will process the image at point
     (in Dired) or the current buffer's file without prompting for
     confirmation via ‘tlon-images-read-image’.  Defaults to nil.


File: tlon.info,  Node: Commands (11),  Next: Internal Functions and Variables (10),  Prev: User Options (4),  Up: Image Processing (tlon-imagesel)

12.3 Commands
=============

* Menu:

* Auto Process Image::
* Reduce Image Brightness::
* Invert Image Colors::
* Make Image Non-Transparent::
* Transient Menu: Transient Menu (8).


File: tlon.info,  Node: Auto Process Image,  Next: Reduce Image Brightness,  Up: Commands (11)

12.3.1 Auto Process Image
-------------------------

The command ‘tlon-images-auto-process’ attempts to intelligently process
an image for a dark theme.

  1. It prompts for the ‘IMAGE’ file using ‘tlon-images-read-image’.
  2. It determines the output filename using
     ‘tlon-images-get-themed-file-name’ with the ‘dark’ theme.
  3. It checks if the image can be safely inverted using
     ‘tlon-images-can-invert-p’ (which calls the ‘invertornot.com’ API).

  4. If inversion is safe, it calls ‘tlon-images-invert-colors’.
  5. Otherwise, it calls ‘tlon-images-reduce-brightnesss’ using the
     default reduction percentage.


File: tlon.info,  Node: Reduce Image Brightness,  Next: Invert Image Colors,  Prev: Auto Process Image,  Up: Commands (11)

12.3.2 Reduce Image Brightness
------------------------------

The command ‘tlon-images-reduce-brightnesss’ reduces the brightness of
an image using ImageMagick.

  1. It prompts for the ‘SOURCE’ image using ‘tlon-images-read-image’
     (unless provided).
  2. It determines the ‘TARGET’ filename (defaulting to a dark-themed
     version via ‘tlon-images-get-themed-file-name’) unless provided.
  3. It prompts for the reduction ‘PERCENT’ (defaulting to
     ‘tlon-images-default-brightness-reduction’) unless provided.  Note:
     The percentage passed to ImageMagick's ‘-modulate’ is calculated as
     ‘100 - PERCENT’.
  4. It constructs the ImageMagick command using
     ‘tlon-imagemagick-reduce-brightness’.
  5. It calls ‘tlon-images-process-image’ to execute the command, copy
     the original to a light-themed file, handle output, and potentially
     open the images.


File: tlon.info,  Node: Invert Image Colors,  Next: Make Image Non-Transparent,  Prev: Reduce Image Brightness,  Up: Commands (11)

12.3.3 Invert Image Colors
--------------------------

The command ‘tlon-images-invert-colors’ inverts the colors of an image
using ImageMagick.

  1. It prompts for the ‘SOURCE’ image using ‘tlon-images-read-image’
     (unless provided).
  2. It determines the ‘TARGET’ filename (defaulting to a dark-themed
     version via ‘tlon-images-get-themed-file-name’) unless provided.
  3. It constructs the ImageMagick command using
     ‘tlon-imagemagick-invert-colors’.
  4. It calls ‘tlon-images-process-image’ to execute the command, copy
     the original to a light-themed file, handle output, and potentially
     open the images.


File: tlon.info,  Node: Make Image Non-Transparent,  Next: Transient Menu (8),  Prev: Invert Image Colors,  Up: Commands (11)

12.3.4 Make Image Non-Transparent
---------------------------------

The command ‘tlon-images-make-nontransparent’ removes transparency from
an image, replacing it with a solid background color using ImageMagick.

  1. It prompts for the ‘SOURCE’ image using ‘tlon-images-read-image’
     (unless provided).
  2. It determines the ‘TARGET’ filename (defaulting to the source file
     itself, thus overwriting it) unless provided.
  3. It prompts for the ‘BACKGROUND’ color (defaulting to "white")
     unless provided.
  4. It constructs the ImageMagick command using
     ‘tlon-imagemagick-make-nontransparent’.
  5. It executes the command using ‘shell-command-to-string’.
  6. It calls ‘tlon-images-handle-output’ to display success or error
     messages.


File: tlon.info,  Node: Transient Menu (8),  Prev: Make Image Non-Transparent,  Up: Commands (11)

12.3.5 Transient Menu
---------------------

The command ‘tlon-images-menu’ activates a ‘transient’ menu interface
for image processing.

   It provides the following groups and commands:
   • *Commands*:
     ‘a’
          Auto process (‘tlon-images-auto-process’)
     ‘r’
          Reduce brightness (‘tlon-images-reduce-brightnesss’)
     ‘i’
          Invert colors (‘tlon-images-invert-colors’)
     ‘n’
          Make non-transparent (‘tlon-images-make-nontransparent’)
   • *Options*:
     ‘-o’
          Toggle opening images after processing
          (‘tlon-images-toggle-open-after-processing’ infix, modifies
          ‘tlon-images-open-after-processing’)
     ‘-p’
          Toggle processing without asking
          (‘tlon-images-toggle-process-without-asking’ infix, modifies
          ‘tlon-images-process-without-asking’)
     ‘-r’
          Set brightness reduction percentage
          (‘tlon-images-brightness-reduction-infix’, modifies
          ‘tlon-images-default-brightness-reduction’)


File: tlon.info,  Node: Internal Functions and Variables (10),  Prev: Commands (11),  Up: Image Processing (tlon-imagesel)

12.4 Internal Functions and Variables
=====================================

This section lists non-interactive functions, variables, and constants
used internally or potentially useful for advanced customization.

* Menu:

* ImageMagick Command Constants::
* InvertOrNot API Integration::
* Helper Functions: Helper Functions (2).
* Transient Infix Commands: Transient Infix Commands (1).


File: tlon.info,  Node: ImageMagick Command Constants,  Next: InvertOrNot API Integration,  Up: Internal Functions and Variables (10)

12.4.1 ImageMagick Command Constants
------------------------------------

‘tlon-imagemagick-reduce-brightness’
     Format string for the ‘magick’ command to reduce brightness using
     ‘-modulate’.  Placeholders: %1$s (input), %2$s (output), %3$s
     (brightness percentage for modulate).

‘tlon-imagemagick-invert-colors’
     Format string for the ‘magick’ command to invert colors using
     ‘-channel RGB -negate’.  Placeholders: %s (input), %s (output).

‘tlon-imagemagick-make-nontransparent’
     Format string for the ‘magick’ command to remove transparency using
     ‘-background’ and ‘-flatten’.  Placeholders: %1$s (input), %2$s
     (output), %3$s (background color).


File: tlon.info,  Node: InvertOrNot API Integration,  Next: Helper Functions (2),  Prev: ImageMagick Command Constants,  Up: Internal Functions and Variables (10)

12.4.2 InvertOrNot API Integration
----------------------------------

‘tlon-invertornot-generic-endpoint’
     Base URL for the ‘invertornot.com’ API.

‘tlon-images-post-file-to-invertornot’
     Sends an image ‘FILE’ to the ‘invertornot.com/api/file’ endpoint
     using a multipart/form-data POST request.  Returns the parsed JSON
     response via ‘tlon-images-handle-synchronous-response’.

‘tlon-images-post-url-to-invertornot’
     Sends an ‘IMAGE-URL’ to the ‘invertornot.com/api/url’ endpoint
     using a JSON POST request.  Returns the parsed JSON response via
     ‘tlon-images-handle-synchronous-response’.

‘tlon-images-handle-synchronous-response’
     Helper function to process the buffer returned by
     ‘url-retrieve-synchronously’, extract the JSON payload, and parse
     it into an alist.

‘tlon-images-can-invert-p’
     Takes an ‘IMAGE’ file path, sends it to the ‘invertornot.com’ API
     using ‘tlon-images-post-file-to-invertornot’, and checks the
     ‘invert’ field in the response.  Returns ‘t’ if the value is 1,
     ‘nil’ if 0, and signals an error otherwise.


File: tlon.info,  Node: Helper Functions (2),  Next: Transient Infix Commands (1),  Prev: InvertOrNot API Integration,  Up: Internal Functions and Variables (10)

12.4.3 Helper Functions
-----------------------

‘tlon-images-read-image’
     Prompts the user for an image file path.  If called within Dired,
     defaults to the file at point.  If the current buffer has a file,
     defaults to that.  If ‘tlon-images-process-without-asking’ is
     non-nil, it skips the prompt and uses the default directly.

‘tlon-images-process-image’
     Core utility for processing images.  Takes ‘SOURCE’, ‘TARGET’, the
     ImageMagick ‘COMMAND’ string, and a ‘MESSAGE-FMT’ string.
       1. Executes the ‘COMMAND’ using ‘shell-command-to-string’.
       2. Copies the ‘SOURCE’ file to a light-themed filename (using
          ‘tlon-images-get-themed-file-name’).
       3. Calls ‘tlon-images-maybe-open-after-processing’ with the light
          and dark themed files.
       4. Calls ‘tlon-images-handle-output’ with the command output and
          the formatted message.

‘tlon-images-handle-output’
     Checks the ‘OUTPUT’ string from a shell command.  If empty,
     displays the success ‘MESSAGE’.  If non-empty, signals a user error
     with the output content.

‘tlon-images-get-themed-file-name’
     Takes a ‘FILE’ path and a ‘THEME’ symbol (‘light’ or ‘dark’).
     Returns a new filename with ‘-[theme].ext’ appended before the
     extension (e.g., ‘image.png’ becomes ‘image-dark.png’).

‘tlon-images-maybe-open-after-processing’
     If ‘tlon-images-open-after-processing’ is non-nil, it opens the
     ‘ORIGINAL’ (light theme) and ‘PROCESSED’ (dark theme) files in
     separate windows, splitting the frame if necessary using
     ‘window-extras’ functions.


File: tlon.info,  Node: Transient Infix Commands (1),  Prev: Helper Functions (2),  Up: Internal Functions and Variables (10)

12.4.4 Transient Infix Commands
-------------------------------

These functions define the behavior of the options within the
‘tlon-images-menu’.

‘tlon-images-brightness-reduction-infix’
     Reads a number from the user to set the local value of
     ‘tlon-images-default-brightness-reduction’ for the current menu
     invocation.

‘tlon-images-toggle-open-after-processing’
     Toggles the boolean value of ‘tlon-images-open-after-processing’
     for the current menu invocation using
     ‘tlon-transient-toggle-variable-value’.

‘tlon-images-toggle-process-without-asking’
     Toggles the boolean value of ‘tlon-images-process-without-asking’
     for the current menu invocation using
     ‘tlon-transient-toggle-variable-value’.


File: tlon.info,  Node: Job Management (tlon-jobsel),  Next: Markdown Functionality (tlon-mdel),  Prev: Image Processing (tlon-imagesel),  Up: Top

13 Job Management (‘tlon-jobs.el’)
**********************************

This module manages the workflow for processing "Babel jobs," which
typically involve translating documents.  It integrates Org mode's
clocking mechanism, GitHub issues (via ‘orgit-forge’), and Git version
control (via ‘magit’) to track the progress of jobs through various
phases like processing, translation, revision, checking, and review.

* Menu:

* Configuration: Configuration (5).
* Commands: Commands (12).
* Internal Functions and Variables: Internal Functions and Variables (11).


File: tlon.info,  Node: Configuration (5),  Next: Commands (12),  Up: Job Management (tlon-jobsel)

13.1 Configuration
==================

* Menu:

* Job Labels and Phases::
* Org ID Constants::
* Jobs File Variable::


File: tlon.info,  Node: Job Labels and Phases,  Next: Org ID Constants,  Up: Configuration (5)

13.1.1 Job Labels and Phases
----------------------------

The constant ‘tlon-job-labels’ defines the different stages or phases a
job goes through.  It's an alist where each element represents a phase
and contains properties like the display label, the action verb
associated with the phase, and the default assignee for that phase.

     (defconst tlon-job-labels
       '((:label "Awaiting processing" :action "Process" :assignee "worldsaround")
         (:label "Awaiting translation" :action "Translate" :assignee "")
         ;; ... other phases ...
         (:label "Published" :action "Publish" :assignee "")))

   This structure drives the workflow logic, determining the next step
and assignee after a phase is completed.


File: tlon.info,  Node: Org ID Constants,  Next: Jobs File Variable,  Prev: Job Labels and Phases,  Up: Configuration (5)

13.1.2 Org ID Constants
-----------------------

‘tlon-jobs-manual-processing-id’
     The Org ID of the specific heading within ‘manual.org’ that
     contains instructions relevant to the "processing" phase.  Used by
     ‘tlon-jobs-initialize-processing’.

‘tlon-jobs-id’
     The Org ID of the main "jobs" heading in the central ‘jobs.org’
     file.  This file serves as the primary tracker for all jobs.


File: tlon.info,  Node: Jobs File Variable,  Prev: Org ID Constants,  Up: Configuration (5)

13.1.3 Jobs File Variable
-------------------------

The variable ‘tlon-jobs-file’ holds the path to the ‘jobs.org’ file.  It
is set dynamically by ‘tlon-jobs-get-file’ and should not be configured
manually.


File: tlon.info,  Node: Commands (12),  Next: Internal Functions and Variables (11),  Prev: Configuration (5),  Up: Job Management (tlon-jobsel)

13.2 Commands
=============

This section details the interactive commands provided by
‘tlon-jobs.el’.

* Menu:

* Start or Finish Job Phase::
* Create Job::
* Create Job Record::
* Create Heading in jobs.org: Create Heading in jobsorg.
* Transient Menu: Transient Menu (9).


File: tlon.info,  Node: Start or Finish Job Phase,  Next: Create Job,  Up: Commands (12)

13.2.1 Start or Finish Job Phase
--------------------------------

The command ‘tlon-jobs-start-or-finish-phase’ is the central command for
advancing the job workflow.  It determines the current context (Org mode
for starting, Markdown mode for finishing) and the action associated
with the currently clocked task (‘tlon-get-clock-action’).

   • *Initialization (in Org mode):*
       1. Clocks into the task.
       2. Saves the buffer.
       3. Determines the initialization function based on the action
          (e.g., ‘tlon-jobs-initialize-processing’).
       4. Calls the general ‘tlon-jobs-initialize’ function, which
          performs common setup tasks:
             • Checks the associated repository's label and assignee
               (‘tlon-check-label-and-assignee’).
             • Ensures the repository is on the "main" branch
               (‘tlon-check-branch’).
             • Pulls the latest changes from upstream
               (‘magit-pull-from-upstream’).
             • Sets up the window configuration with original and
               translation files (‘tlon-set-windows’).
             • Opens the associated GitHub issue (‘orgit-topic-open’).
             • Copies the original buffer content.
       5. Calls the specific initialization function for the current
          phase (e.g., opening the manual for processing, opening DeepL
          for translation, setting up diffs for review).

   • *Finalization (in Markdown mode):*
       1. Closes split mode if active (‘tlon-split-mode -1’).
       2. Saves the buffer.
       3. Calls ‘tlon-jobs-finalize’, which performs common finalization
          tasks:
             • Checks the repository branch and label/assignee.
             • Performs phase-specific checks (e.g., prompts for
               Jinx/Flycheck confirmation after translation).
             • Saves the modified original (if processing) or
               translation file.
             • Commits and pushes the changes for the translation file
               (and original if processing) using
               ‘tlon-commit-and-push’.
             • Updates the associated GitHub issue: sets the next label
               (‘tlon-get-clock-next-label’) and assignee
               (‘tlon-jobs-get-next-assignee’), potentially closing the
               issue after the "Review" phase using
               ‘tlon-jobs-act-on-issue’.
             • Updates the corresponding TODO items in ‘jobs.org’ and
               the main TODO file using ‘tlon-jobs-finalize-set-todos’.


File: tlon.info,  Node: Create Job,  Next: Create Job Record,  Prev: Start or Finish Job Phase,  Up: Commands (12)

13.2.2 Create Job
-----------------

The command ‘tlon-create-job’ orchestrates the entire process of
creating a new job based on a BibTeX entry at point in an Ebib buffer.

  1. Imports the document associated with the BibTeX entry using
     ‘tlon-import-document’, which returns the BibTeX key.
  2. Creates the initial translation file structure using
     ‘tlon-create-translation-file’.
  3. Creates the necessary records for the job (GitHub issue and
     ‘jobs.org’ heading) using ‘tlon-create-record-for-job’.


File: tlon.info,  Node: Create Job Record,  Next: Create Heading in jobsorg,  Prev: Create Job,  Up: Commands (12)

13.2.3 Create Job Record
------------------------

The command ‘tlon-create-record-for-job’ creates the tracking records
for a job based on a BibTeX ‘KEY’.  If ‘KEY’ is not provided, it
attempts to find it in the current buffer (Markdown or Ebib).

  1. Creates a GitHub issue titled "Job: 'KEY'" using
     ‘tlon-create-issue-from-key’.
  2. Creates a corresponding heading in ‘jobs.org’ using
     ‘tlon-create-heading-for-job’, optionally committing the change.


File: tlon.info,  Node: Create Heading in jobsorg,  Next: Transient Menu (9),  Prev: Create Job Record,  Up: Commands (12)

13.2.4 Create Heading in jobs.org
---------------------------------

The command ‘tlon-create-heading-for-job’ adds a new heading to the
‘jobs.org’ file for tracking a specific job based on its BibTeX ‘KEY’.

  1. Determines the ‘KEY’ (from argument or current buffer).
  2. Formats the heading as ‘[cite:@KEY]’.
  3. Finds the associated repository and its abbreviation
     (‘tlon-repo-lookup’).
  4. Opens ‘jobs.org’ (finding the buffer or file).
  5. If the heading doesn't exist:
        • Navigates to the main jobs section (using ‘tlon-jobs-id’).
        • Inserts the new heading.
        • Sets the TODO state to "TODO".
        • Adds the repository abbreviation as a tag.
        • Sorts the headings in the file (‘tlon-sort-headings’).
        • Saves the buffer.
  6. Optionally commits the change to ‘jobs.org’ using
     ‘tlon-commit-and-push’ if ‘COMMIT’ is non-nil.


File: tlon.info,  Node: Transient Menu (9),  Prev: Create Heading in jobsorg,  Up: Commands (12)

13.2.5 Transient Menu
---------------------

The command ‘tlon-jobs-menu’ activates a ‘transient’ menu interface for
job-related operations.

   It provides the following groups and commands:
   • *Job phases*:
     ‘j’
          Start or finish phase (‘tlon-jobs-start-or-finish-phase’)
   • *Job creation*:
     ‘c c’
          Create job (‘tlon-create-job’)
     ‘c d’
          1 Import document (‘tlon-import-document’)
     ‘c f’
          2 Create translation file (‘tlon-create-translation-file’)
     ‘c r’
          3 Create record for job (‘tlon-create-record-for-job’)
   • *Add or modify*:
     ‘a s’
          Section correspondence (‘tlon-section-correspondence-dwim’)
     ‘a u’
          URL correspondence (‘tlon-edit-url-correspondences’)
   • *jobs.org*:
     ‘r’
          Create record (‘tlon-create-record-for-job’)
     ‘h’
          Create heading (‘tlon-create-heading-for-job’)
     ‘t’
          Sort headings (‘tlon-sort-headings’)


File: tlon.info,  Node: Internal Functions and Variables (11),  Prev: Commands (12),  Up: Job Management (tlon-jobsel)

13.3 Internal Functions and Variables
=====================================

This section lists non-interactive functions and variables used
internally or potentially useful for advanced customization.

* Menu:

* File and Path Management::
* Job Phase Logic::
* Issue and TODO Interaction::
* jobs.org Helpers: jobsorg Helpers.


File: tlon.info,  Node: File and Path Management,  Next: Job Phase Logic,  Up: Internal Functions and Variables (11)

13.3.1 File and Path Management
-------------------------------

‘tlon-jobs-get-file’
     Retrieves the path to the ‘jobs.org’ file, using the Org ID
     ‘tlon-jobs-id’ and caching the result in ‘tlon-jobs-file’ via
     ‘tlon-get-or-set-org-var’.


File: tlon.info,  Node: Job Phase Logic,  Next: Issue and TODO Interaction,  Prev: File and Path Management,  Up: Internal Functions and Variables (11)

13.3.2 Job Phase Logic
----------------------

‘tlon-jobs-get-action-in-label’
     Extracts the action verb (e.g., "Process", "Translate") from a job
     phase ‘LABEL’ string (e.g., "Awaiting processing").

‘tlon-jobs-initialize’
     Performs common setup tasks when starting any job phase (checking
     repo, pulling, setting up windows, opening issue, copying buffer).
     Takes the specific phase initialization function (‘FUN’) as an
     argument and calls it after the common setup.

‘tlon-jobs-finalize’
     Performs common cleanup and update tasks when finishing any job
     phase (checking repo, committing files, updating GitHub issue
     label/assignee, updating TODOs).

‘tlon-jobs-get-next-assignee’
     Determines the assignee for the *next* phase.  It considers the
     current user and the designated assignee for the current phase
     versus the next phase, potentially assigning a substitute if the
     current user isn't the designated one for the current phase.

‘tlon-jobs-initialize-processing’
     Specific setup for the "Process" phase: opens the original file and
     the relevant section in ‘manual.org’ (using
     ‘tlon-jobs-manual-processing-id’), narrows the view, and opens the
     issue.

‘tlon-jobs-initialize-translation’
     Specific setup for the "Translate" phase: opens the DeepL
     application using ‘macos-open-app’.

‘tlon-jobs-initialize-revision’
     Specific setup for the "Revise" phase: activates split mode
     (‘tlon-split-mode’).

‘tlon-jobs-initialize-check’
     Specific setup for the "Check" phase: rearranges windows, starts
     Markdown preview, and initiates text-to-speech using
     ‘read-aloud-buf’.

‘tlon-jobs-initialize-review’
     Specific setup for the "Review" phase: opens an ‘ediff’ session
     showing changes since the last user commit
     (‘tlon-log-buffer-latest-user-commit-ediff’), sets up ‘jinx’ for
     spell/grammar checking in the target language, and moves to the
     beginning of the buffer.


File: tlon.info,  Node: Issue and TODO Interaction,  Next: jobsorg Helpers,  Prev: Job Phase Logic,  Up: Internal Functions and Variables (11)

13.3.3 Issue and TODO Interaction
---------------------------------

‘tlon-jobs-act-on-issue’
     Updates a GitHub issue associated with an ‘ORIGINAL-KEY’.  It finds
     the issue (using ‘tlon-issue-lookup’), sets the specified ‘LABEL’
     and ‘ASSIGNEE’ using ‘tlon-set-labels’ and ‘tlon-set-assignee’, and
     optionally closes the issue if ‘CLOSE’ is non-nil.

‘tlon-jobs-finalize-set-todos’
     Marks the relevant TODO items as DONE during the finalization
     process.  It marks the clocked task itself as DONE in the main TODO
     file (‘tlon-get-todos-jobs-file’).  For "Review" and "Check"
     phases, it also marks the parent TODO as DONE.  For the "Review"
     phase, it additionally marks the corresponding job heading in
     ‘jobs.org’ as DONE, sorts the headings, and commits the change.


File: tlon.info,  Node: jobsorg Helpers,  Prev: Issue and TODO Interaction,  Up: Internal Functions and Variables (11)

13.3.4 jobs.org Helpers
-----------------------

‘tlon-jobs-get-key-in-heading’
     Extracts the BibTeX key from the Org heading at point, assuming the
     format ‘[cite:@KEY]’ or "Job: 'KEY'.md".

‘tlon-jobs-goto-heading’
     Moves the point to the heading corresponding to the given BibTeX
     ‘KEY’ within the ‘jobs.org’ file.


File: tlon.info,  Node: Markdown Functionality (tlon-mdel),  Next: Meeting Management (tlon-meetel),  Prev: Job Management (tlon-jobsel),  Up: Top

14 Markdown Functionality (‘tlon-md.el’)
****************************************

This module provides specialized functionality for working with Markdown
files within the Tlön workflow.  It includes commands for inserting and
managing various Markdown, HTML, MDX, and SSML elements, handling
footnotes, sorting content, and interacting with YAML front matter.  It
also defines numerous constants (mostly regular expressions) for
identifying these elements.

* Menu:

* Dependencies: Dependencies (9).
* User Options: User Options (5).
* Commands: Commands (13).
* Internal Functions and Variables: Internal Functions and Variables (12).


File: tlon.info,  Node: Dependencies (9),  Next: User Options (5),  Up: Markdown Functionality (tlon-mdel)

14.1 Dependencies
=================

   • ‘markdown-mode-extras’
   • ‘tlon-core’
   • ‘tlon-yaml’


File: tlon.info,  Node: User Options (5),  Next: Commands (13),  Prev: Dependencies (9),  Up: Markdown Functionality (tlon-mdel)

14.2 User Options
=================

‘tlon-md-special-characters’
     An alist defining special characters that can be inserted using the
     ‘tlon-insert-special-character’ command.  The key is the
     descriptive name (e.g., "en dash") and the value is the character
     itself (e.g., "–").


File: tlon.info,  Node: Commands (13),  Next: Internal Functions and Variables (12),  Prev: User Options (5),  Up: Markdown Functionality (tlon-mdel)

14.3 Commands
=============

This section details the interactive commands provided by ‘tlon-md.el’.

* Menu:

* YAML Front Matter::
* Links and Sorting::
* Tag Insertion/Editing (HTML, MDX, SSML): Tag Insertion/Editing (HTML MDX SSML).
* Note Classification::
* Miscellaneous Commands::


File: tlon.info,  Node: YAML Front Matter,  Next: Links and Sorting,  Up: Commands (13)

14.3.1 YAML Front Matter
------------------------

‘tlon-edit-yaml-field’
     Edits the YAML field at point.  It retrieves the key and value
     using ‘tlon-yaml-get-field-at-point’ and then prompts the user to
     re-insert/modify them using ‘tlon-yaml-insert-field’.


File: tlon.info,  Node: Links and Sorting,  Next: Tag Insertion/Editing (HTML MDX SSML),  Prev: YAML Front Matter,  Up: Commands (13)

14.3.2 Links and Sorting
------------------------

‘tlon-insert-internal-link’
     Inserts a Markdown link to another Tlön entity (article, author,
     tag).  It uses completion based on titles found in the repository's
     metadata (‘tlon-metadata-in-repo’).  It handles existing links at
     point and uses the active region as default link text.

‘tlon-md-sort-related-entries’
     Sorts the list items (assumed to be links separated by " • ")
     alphabetically within the "Entradas relacionadas" section of the
     current buffer.  Uses ‘tlon-md-sort-elements-in-paragraph’
     internally.


File: tlon.info,  Node: Tag Insertion/Editing (HTML MDX SSML),  Next: Note Classification,  Prev: Links and Sorting,  Up: Commands (13)

14.3.3 Tag Insertion/Editing (HTML, MDX, SSML)
----------------------------------------------

These commands insert or edit specific tags at point or around the
selected region.  They generally use ‘tlon-md-insert-or-edit-tag’
internally, which checks if the tag already exists at point and either
edits it or inserts a new one.  Many prompt for necessary attributes.

   • *HTML Tags*:
     ‘tlon-html-insert-subscript’
          Inserts/edits ‘<sub>’ tags.
     ‘tlon-html-insert-superscript’
          Inserts/edits ‘<sup>’ tags.
     ‘tlon-html-insert-quote’
          Inserts/edits ‘<q>’ tags (inline quote).

   • *MDX Tags*:
     ‘tlon-mdx-insert-aside’
          Inserts/edits ‘<Aside>’ tags.
     ‘tlon-mdx-insert-cite’
          Inserts/edits ‘<Cite>’ tags.  Prompts for BibTeX key
          (‘bibKey’), locator, and length (short/long) using custom
          readers (‘tlon-md-cite-bibkey-reader’,
          ‘tlon-md-cite-locator-reader’, ‘tlon-md-cite-length-reader’).

     ‘tlon-mdx-insert-figure’
          Inserts/edits ‘<Figure>’ tags.  Prompts for image URL (‘src’)
          and alt text (‘alt’).
     ‘tlon-mdx-insert-language’
          Inserts/edits ‘<Language>’ tags.  Prompts for language ID
          (‘id’).
     ‘tlon-mdx-insert-literal-link’
          Inserts/edits ‘<LiteralLink>’ tags.  Prompts for the link URL
          (‘src’).
     ‘tlon-mdx-insert-math’
          Inserts/edits ‘<Math>’ tags.  Prompts for alt text (‘alt’) and
          display type (inline/display) using
          ‘tlon-md-math-display-reader’.  Suggests using
          ‘tlon-ai-translate-math’ for AI-generated alt text.
     ‘tlon-mdx-insert-embedded’
          Inserts/edits ‘<Embedded>’ tags (self-closing).  Prompts for
          chart URL (‘src’), alt text (‘alt’), and height (‘height’).
     ‘tlon-mdx-insert-replace-audio’
          Inserts/edits ‘<ReplaceAudio>’ tags.  Prompts for the audio
          text (‘text’) and optional voice role (‘role’) using
          ‘tlon-md-replace-audio-voice-reader’.
     ‘tlon-mdx-insert-romantlon-insert-mdx-roman’
          Inserts/edits ‘<Roman>’ tags (for Roman numerals in small caps
          with correct TTS).
     ‘tlon-mdx-insert-small-caps’
          Inserts/edits ‘<SmallCaps>’ tags (for general small caps
          text).
     ‘tlon-mdx-insert-table’
          (Not yet developed) Intended for inserting complex ‘<Table>’
          tags.
     ‘tlon-mdx-insert-simple-table’
          Inserts/edits ‘<SimpleTable>’ tags.  Prompts for alt text
          (‘alt’) and inclusion scope (‘include’) using
          ‘tlon-md-simple-table-include-reader’.
     ‘tlon-mdx-insert-visually-hidden’
          Inserts/edits ‘<VisuallyHidden>’ tags.
     ‘tlon-mdx-insert-voice-role’
          Inserts/edits ‘<VoiceRole>’ tags.  Prompts for the voice role
          (‘role’) using ‘tlon-md-replace-audio-voice-reader’.

   • *SSML Tags*:
     ‘tlon-tts-insert-ssml-break’
          Inserts/edits ‘<break>’ tags (self-closing).  Prompts for time
          duration (‘time’).
     ‘tlon-tts-insert-ssml-emphasis’
          Inserts/edits ‘<emphasis>’ tags.  Prompts for emphasis level
          (‘level’) using ‘tlon-md-emphasis-level-reader’.
     ‘tlon-tts-insert-ssml-lang’
          Inserts/edits ‘<lang>’ tags.  Prompts for language code
          (‘xml:lang’) using ‘tlon-md-lang-reader’.
     ‘tlon-tts-insert-ssml-phoneme’
          Inserts/edits ‘<phoneme>’ tags.  Prompts for alphabet type
          (‘alphabet’) using ‘tlon-md-phoneme-alphabet-reader’ and
          phonetic symbols (‘ph’).
     ‘tlon-tts-insert-ssml-say-as’
          Inserts/edits ‘<say-as>’ tags.  Prompts for interpretation
          type (‘interpret-as’) using
          ‘tlon-md-say-as-interpret-as-reader’.


File: tlon.info,  Node: Note Classification,  Next: Miscellaneous Commands,  Prev: Tag Insertion/Editing (HTML MDX SSML),  Up: Commands (13)

14.3.4 Note Classification
--------------------------

These commands manage the classification of footnotes as either standard
footnotes or sidenotes using ‘<Footnote>’ and ‘<Sidenote>’ MDX tags.

‘tlon-insert-footnote-marker’
     Inserts a ‘<Footnote />’ marker at the beginning of the footnote
     content at point.  If ‘OVERWRITE’ is non-nil (or called
     interactively), it replaces an existing ‘<Sidenote />’ marker.
‘tlon-insert-sidenote-marker’
     Inserts a ‘<Sidenote />’ marker at the beginning of the footnote
     content at point.  If ‘OVERWRITE’ is non-nil (or called
     interactively), it replaces an existing ‘<Footnote />’ marker.
‘tlon-auto-classify-note-at-point’
     Automatically classifies the footnote at point based on its content
     (using ‘tlon-note-automatic-type’) and inserts the corresponding
     marker (‘<Footnote />’ or ‘<Sidenote />’), overwriting any existing
     marker.
‘tlon-auto-classify-notes-in-file’
     Applies ‘tlon-auto-classify-note-at-point’ to all footnotes in the
     current buffer (or specified ‘FILE’).
‘tlon-auto-classify-notes-in-directory’
     Applies ‘tlon-auto-classify-notes-in-file’ to all Markdown files in
     the specified ‘DIR’ (or current directory).
‘tlon-classify-note-at-point’
     Manually classify the note at point.  Prompts the user to choose
     between "footnote" and "sidenote" and inserts the corresponding
     marker, optionally overwriting an existing one.


File: tlon.info,  Node: Miscellaneous Commands,  Prev: Note Classification,  Up: Commands (13)

14.3.5 Miscellaneous Commands
-----------------------------

‘tlon-offset-timestamps’
     Increases all MM:SS timestamps (in the format ‘[MM:SS]’) within the
     current buffer by a specified ‘OFFSET’ (also in MM:SS format).
‘tlon-insert-special-character’
     Prompts the user (with completion based on
     ‘tlon-md-special-characters’) to select a special character and
     inserts it at point.
‘tlon-md-beginning-of-buffer-dwim’
     Moves point to the beginning of the main content area, skipping the
     YAML front matter.  Called twice, moves to the beginning of the
     buffer.
‘tlon-md-end-of-buffer-dwim’
     Moves point to the end of the main content area, stopping before
     the "Local Variables" block.  Called twice, moves to the end of the
     buffer.
‘tlon-md-menu’
     Activates a ‘transient’ menu interface providing quick access to
     many of the commands in this module, grouped by category (YAML,
     TTS, Note markers, Citations, Quotes, Images, Link,
     Sub/Superscripts, Misc, Caps, Table).


File: tlon.info,  Node: Internal Functions and Variables (12),  Prev: Commands (13),  Up: Markdown Functionality (tlon-mdel)

14.4 Internal Functions and Variables
=====================================

This section lists non-interactive functions, variables, and constants
used internally or potentially useful for advanced customization.

* Menu:

* Constants: Constants (3).
* Tag Section Handling::
* Link and Sorting Helpers::
* Tag Handling Logic::
* Attribute Readers::
* Note Handling::
* Miscellaneous Helpers: Miscellaneous Helpers (1).


File: tlon.info,  Node: Constants (3),  Next: Tag Section Handling,  Up: Internal Functions and Variables (12)

14.4.1 Constants
----------------

   • *Local Variables Delimiters*: ‘tlon-md-local-variables-line-start’,
     ‘tlon-md-local-variables-line-end’.
   • *Tag Sections*: ‘tlon-md-canonical-tag-sections’ (defines standard
     section names like "Further reading" in different languages).
   • *Markdown Regexps*:
        • ‘markdown-regex-italic’ (modified default),
          ‘tlon-md-regexp-link-formatter’, ‘tlon-md-image’,
          ‘tlon-md-image-sans-alt’, ‘tlon-md-blockquote’,
          ‘tlon-md-math-power’, ‘tlon-md-math-big-number’,
          ‘tlon-md-footnote-start’, ‘tlon-md-heading-template’,
          ‘tlon-md-heading’, ‘tlon-md-subheading’.
   • *SSML Constants*: ‘tlon-md-ssml-emphasis-levels’,
     ‘tlon-tts-ssml-default-emphasis-level’,
     ‘tlon-md-ssml-phoneme-alphabets’,
     ‘tlon-tts-ssml-phoneme-default-alphabet’,
     ‘tlon-md-ssml-interpret-as-values’.
   • *Tag Specifications*: ‘tlon-tag-specs’ (central alist defining
     properties for all supported HTML, MDX, and SSML tags: type,
     attributes, self-closing status, documentation, attribute
     readers/prompts, capture groups).


File: tlon.info,  Node: Tag Section Handling,  Next: Link and Sorting Helpers,  Prev: Constants (3),  Up: Internal Functions and Variables (12)

14.4.2 Tag Section Handling
---------------------------

‘tlon-md-get-tag-section’
     Translates a canonical section name (e.g., "Further reading") to
     its equivalent in a ‘TARGET-LANGUAGE’ based on
     ‘tlon-md-canonical-tag-sections’.


File: tlon.info,  Node: Link and Sorting Helpers,  Next: Tag Handling Logic,  Prev: Tag Section Handling,  Up: Internal Functions and Variables (12)

14.4.3 Link and Sorting Helpers
-------------------------------

‘tlon-md-get-title-in-link-target’
     Retrieves the ‘title’ metadata for the file specified in a Markdown
     link's ‘TARGET’.
‘tlon-md-sort-elements-in-paragraph’
     Helper function to sort elements within the current paragraph
     separated by a given ‘SEPARATOR’.  Used by
     ‘tlon-md-sort-related-entries’.


File: tlon.info,  Node: Tag Handling Logic,  Next: Attribute Readers,  Prev: Link and Sorting Helpers,  Up: Internal Functions and Variables (12)

14.4.4 Tag Handling Logic
-------------------------

This group contains the core logic for inserting, editing, formatting,
and parsing the various tags (HTML, MDX, SSML).

‘tlon-md-insert-or-edit-tag’
     Decides whether to insert a new tag or edit an existing one at
     point based on ‘tlon-looking-at-tag-p’.
‘tlon-looking-at-tag-p’
     Checks if point is currently looking at a specific ‘TAG’ using its
     regex pattern.
‘tlon-md-edit-tag’
     Edits the tag at point.  Can optionally take pre-defined attribute
     ‘VALUES’ and ‘CONTENT’.  Uses ‘tlon-get-tag-at-point’,
     ‘tlon-md-get-tag-pattern’, ‘tlon-get-tag-attribute-values’, and
     ‘tlon-md-return-tag’.
‘tlon-md-set-tag-attribute-value’
     Creates a new list of attribute values with the specified
     ‘ATTRIBUTE’ set to ‘VALUE’ for a given ‘TAG’.
‘tlon-md-insert-attribute-value’
     Inserts or replaces a specific ‘ATTRIBUTE’ ‘VALUE’ in the tag at
     point by calling ‘tlon-md-edit-tag’.
‘tlon-md-return-tag’
     Core function to generate or insert a tag string.  Takes the ‘TAG’
     name, optional attribute ‘VALUES’, optional ‘CONTENT’, and a
     ‘FORMAT’ specifier ('get-match-string', 'get-placeholders',
     'get-values', 'insert-values', 'insert-prompt').  Calls
     ‘tlon-md-format-tag’ and ‘tlon-md-act-on-returned-tag’.
‘tlon-md-act-on-returned-tag’
     Performs the final action based on the ‘FORMAT’ specifier (insert
     string or return it).
‘tlon-md-format-tag’
     Formats the opening and closing tags (or just the opening tag for
     self-closing ones) based on the ‘TAG’ name, ‘VALUES’, and ‘FORMAT’.
     Calls ‘tlon-md-format-tag-with-attributes’.  Returns a cons cell
     ‘(OPEN . CLOSE)’ or a list ‘(OPEN)’.
‘tlon-md-get-tag-filled’
     Returns a complete tag string with specified ‘VALUES’ and
     ‘CONTENT’.  Uses ‘tlon-md-format-tag’ with 'get-values' format.
‘tlon-md-get-tag-to-fill’
     Returns a tag string template with placeholders for content and
     attributes.  Uses ‘tlon-md-format-tag’ with 'get-placeholders'
     format.
‘tlon-get-tag-at-point’
     Identifies the name of the tag at point by checking against all
     tags defined in ‘tlon-tag-specs’.
‘tlon-get-tag-groups’
     Returns a list of the regex capture group numbers for a ‘TAG’'s
     attributes (or attribute values if ‘VALUES’ is non-nil), based on
     ‘tlon-tag-specs’.
‘tlon-get-tag-attribute-names’
     Returns a list of attribute names for a ‘TAG’ from
     ‘tlon-tag-specs’.
‘tlon-get-tag-attribute-values’
     Extracts the current values of all attributes for the ‘TAG’ at
     point using regex match data and group numbers from
     ‘tlon-tag-specs’.
‘tlon-md-lookup-tag-attribute-property’
     Retrieves a specific ‘PROPERTY’ (e.g., ‘:group’, ‘:required’) for a
     named ‘ATTRIBUTE’ of a ‘TAG’ from ‘tlon-tag-specs’.
‘tlon-md-format-tag-with-attributes’
     Formats the attribute part of a tag string based on the ‘TAG’,
     optional ‘VALUES’, and ‘FORMAT’.  Iterates through attributes,
     calls ‘tlon-md-format-attribute-with-placeholder’, and handles user
     input via attribute readers or prompts if ‘FORMAT’ is
     'insert-prompt'.
‘tlon-md-format-attribute-with-placeholder’
     Creates a format string for a single attribute (e.g., = name="%s"=
     or = name="?:%s"= if ‘CAPTURE’ is t).
‘tlon-make-attribute-pattern-searchable’
     Converts an attribute format string into a searchable regex
     pattern, adding capture groups and making it optional if ‘REQUIRED’
     is nil.
‘tlon-md-format-tag-with-attributes-from-user’
     Helper to call the attribute reader function (‘FUN’) and ensure a
     value is provided if ‘REQUIRED-P’ is non-nil.
‘tlon-md-get-tag-pattern’
     Generates the complete regex pattern for matching a given ‘TAG’,
     including its attributes.  Uses ‘tlon-md-format-tag’ with
     'get-match-string' format.


File: tlon.info,  Node: Attribute Readers,  Next: Note Handling,  Prev: Tag Handling Logic,  Up: Internal Functions and Variables (12)

14.4.5 Attribute Readers
------------------------

These functions are used by ‘tlon-md-format-tag-with-attributes’ when
prompting the user for specific attribute values.

‘tlon-md-cite-bibkey-reader’
     Reads ‘bibKey’ using ‘citar-select-refs’.
‘tlon-md-cite-locator-reader’
     Reads ‘locator’ using completion against ‘tlon-locators’.
‘tlon-md-cite-length-reader’
     Reads citation length ("short" or "long") and returns the
     appropriate attribute string (" short" or "").
‘tlon-md-emphasis-level-reader’
     Reads ‘level’ for ‘<emphasis>’ using completion against
     ‘tlon-md-ssml-emphasis-levels’.
‘tlon-md-lang-reader’
     Reads ‘xml:lang’ using ‘tlon-select-language’.
‘tlon-md-math-display-reader’
     Reads display type ("inline" or "display") for ‘<Math>’ and returns
     the attribute string (" inline" or " display").
‘tlon-md-phoneme-alphabet-reader’
     Reads ‘alphabet’ for ‘<phoneme>’ using completion against
     ‘tlon-md-ssml-phoneme-alphabets’.
‘tlon-md-replace-audio-voice-reader’
     Reads ‘role’ for ‘<ReplaceAudio>’ or ‘<VoiceRole>’ using completion
     against a predefined list of roles.
‘tlon-md-say-as-interpret-as-reader’
     Reads ‘interpret-as’ for ‘<say-as>’ using completion against
     ‘tlon-md-ssml-interpret-as-values’.
‘tlon-md-simple-table-include-reader’
     Reads ‘include’ scope for ‘<SimpleTable>’ ("nothing", "everything",
     "body") and returns the formatted attribute string.


File: tlon.info,  Node: Note Handling,  Next: Miscellaneous Helpers (1),  Prev: Attribute Readers,  Up: Internal Functions and Variables (12)

14.4.6 Note Handling
--------------------

‘tlon-insert-note-marker’
     Helper function to insert a ‘MARKER’ (‘<Footnote />’ or ‘<Sidenote
     />’) at the beginning of the footnote content at point, optionally
     overwriting the other marker type.
‘tlon-md-get-note’
     Returns the text content of footnote ‘N’ (or the one at point).
     Optionally returns only the content after the marker if
     ‘CONTENT-ONLY’ is non-nil.  Uses ‘tlon-md-get-note-bounds’.
‘tlon-md-get-note-bounds’
     Returns a cons cell ‘(START . END)’ representing the boundaries of
     footnote ‘N’ (or the one at point).  Uses
     ‘markdown-footnote-find-text’, ‘tlon-md-get-note-beginning’, and
     ‘tlon-md-get-note-end’.
‘tlon-md-get-note-beginning’
     Finds the starting position of the footnote definition (e.g.,
     ‘[^N]:’) or the start of the content after the marker if
     ‘CONTENT-ONLY’ is non-nil.  Uses ‘markdown-footnote-text-positions’
     or regex search.
‘tlon-md-get-note-end’
     Finds the end position of the footnote at point by searching for
     the start of the next footnote definition.
‘tlon-get-note-type’
     Determines if a ‘NOTE’ string (or the note at point) contains a
     ‘<Footnote>’ or ‘<Sidenote>’ tag and returns the corresponding
     symbol ('footnote' or 'sidenote').
‘tlon-note-automatic-type’
     Implements the automatic classification logic: returns 'footnote'
     if the ‘NOTE’ contains a ‘<Cite>’ tag and has 4 or fewer words
     (excluding citations), otherwise returns 'sidenote'.


File: tlon.info,  Node: Miscellaneous Helpers (1),  Prev: Note Handling,  Up: Internal Functions and Variables (12)

14.4.7 Miscellaneous Helpers
----------------------------

‘tlon-ensure-markdown-mode’
     Checks if the current buffer is in a mode derived from
     ‘markdown-mode’ and signals an error if not.
‘tlon-md-beginning-of-content’
     Returns the position after the YAML front matter (using
     ‘tlon-md-end-of-metadata’) or the beginning of the buffer.
‘tlon-md-end-of-content’
     Returns the position before the "Local Variables" block (using
     ‘tlon-md-beginning-of-local-variables’) or the end of the buffer.
‘tlon-md-beginning-of-local-variables’
     Finds the start position of the "Local Variables" block using
     ‘tlon-get-delimited-region-pos’.
‘tlon-md-end-of-metadata’
     Finds the end position of the YAML front matter using
     ‘tlon-get-delimited-region-pos’.
‘tlon-md-get-local-variables’
     Returns the text content of the "Local Variables" block.
‘tlon-md-get-metadata’
     Returns the text content of the YAML front matter.
‘tlon-md-read-content’
     Reads the content of a ‘FILE’ (or current buffer) excluding the
     front matter and local variables sections.


File: tlon.info,  Node: Meeting Management (tlon-meetel),  Next: Repository Management (tlon-reposel),  Prev: Markdown Functionality (tlon-mdel),  Up: Top

15 Meeting Management (‘tlon-meet.el’)
**************************************

This module provides tools for managing meetings within the Tlön
workflow.  It focuses on creating and accessing dedicated Forge issues
for meetings (both individual and group), linking discussions to these
issues, and processing meeting recordings (diarization and AI
summarization).

* Menu:

* Dependencies: Dependencies (10).
* User Options: User Options (6).
* Commands: Commands (14).
* Org Mode Integration::
* Internal Functions and Variables: Internal Functions and Variables (13).


File: tlon.info,  Node: Dependencies (10),  Next: User Options (6),  Up: Meeting Management (tlon-meetel)

15.1 Dependencies
=================

   • ‘org’
   • ‘tlon-forg’
   • ‘tlon-ai’
   • ‘transient’
   • An external diarization script (configurable via
     ‘tlon-meet-diarize-script’).


File: tlon.info,  Node: User Options (6),  Next: Commands (14),  Prev: Dependencies (10),  Up: Meeting Management (tlon-meetel)

15.2 User Options
=================

‘tlon-meet-diarize-script’
     Path to the Python script used for audio diarization (default:
     ‘"diarize.py"’).

‘tlon-meet-summary-prompt’
     The prompt template used for generating AI summaries of meeting
     transcripts.  It should contain ‘%s’ which will be replaced by the
     transcript text.

‘tlon-meet-recordings-directory’
     The directory where Google Meet recordings are typically stored
     (default: ‘~/My Drive/Meet Recordings/’).

‘tlon-zoom-recordings-directory’
     The directory where Zoom recordings are typically stored (default:
     ‘~/Documents/Zoom/’).

‘tlon-default-conference-app’
     The default conferencing application, used to determine the default
     directory when searching for recordings (choice between ‘meet’ or
     ‘zoom’, default: ‘meet’).


File: tlon.info,  Node: Commands (14),  Next: Org Mode Integration,  Prev: User Options (6),  Up: Meeting Management (tlon-meetel)

15.3 Commands
=============

This section details the interactive commands provided by
‘tlon-meet.el’.

* Menu:

* Create or Visit Meeting Issues::
* Linking Issues for Discussion::
* Recording Processing::
* Transient Menu: Transient Menu (10).


File: tlon.info,  Node: Create or Visit Meeting Issues,  Next: Linking Issues for Discussion,  Up: Commands (14)

15.3.1 Create or Visit Meeting Issues
-------------------------------------

‘tlon-create-or-visit-meeting-issue’
     The main entry point for accessing meeting issues.  Prompts the
     user to select another participant (using completion from
     ‘tlon-user-lookup-all’) or "group".  If a person is selected, it
     calls ‘tlon-create-or-visit-individual-meeting-issue’.  If "group"
     is selected, it calls ‘tlon-create-or-visit-group-meeting-issue’.

‘tlon-create-or-visit-individual-meeting-issue’
     Creates or visits the Forge issue for a 1-on-1 meeting with a
     specific ‘PERSON’.  Prompts for the ‘PERSON’ if not provided.
     Prompts for the ‘DATE’ using ‘org-read-date’.  Determines the
     correct meeting repository using ‘tlon-get-meeting-repo’ and then
     calls ‘tlon-create-or-visit-meeting-issue-date’.

‘tlon-create-or-visit-group-meeting-issue’
     Creates or visits the Forge issue for a group meeting.  Prompts for
     the ‘DATE’ using ‘org-read-date’.  Uses the repository designated
     as ‘meetings-group’ (via ‘tlon-repo-lookup’) and calls
     ‘tlon-create-or-visit-meeting-issue-date’.

‘tlon-create-or-visit-meeting-issue-leo-pablo’
     Convenience command specifically for Leo-Pablo meetings.
     Determines the other participant based on ‘user-full-name’ and
     calls ‘tlon-create-or-visit-individual-meeting-issue’ with the
     appropriate person and date (prompting if not provided).

‘tlon-create-or-visit-meeting-issue-fede-pablo’
     Convenience command specifically for Fede-Pablo meetings.  Similar
     logic to the Leo-Pablo version.

‘tlon-create-or-visit-meeting-issue-fede-leo’
     Convenience command specifically for Fede-Leo meetings.  Similar
     logic to the Leo-Pablo version.


File: tlon.info,  Node: Linking Issues for Discussion,  Next: Recording Processing,  Prev: Create or Visit Meeting Issues,  Up: Commands (14)

15.3.2 Linking Issues for Discussion
------------------------------------

‘tlon-discuss-issue-in-meeting’
     Creates cross-references between the current Forge issue buffer and
     the relevant meeting issue buffer.
       1. Ensures the command is run from a ‘forge-issue-mode’ buffer.
       2. Gets the link to the current issue.
       3. Switches to the appropriate meeting issue buffer (determined
          by participants, prompting if necessary via
          ‘tlon-create-or-visit-meeting-issue’).
       4. Gets the link to the meeting issue.
       5. Enters edit mode for the last post in the meeting issue and
          inserts a line like "- Discutir [link-to-original-issue]."
       6. Submits the post.
       7. Switches back to the original issue buffer.
       8. Creates a new post and inserts "A discutir en
          [link-to-meeting-issue]."
       9. Submits the post.


File: tlon.info,  Node: Recording Processing,  Next: Transient Menu (10),  Prev: Linking Issues for Discussion,  Up: Commands (14)

15.3.3 Recording Processing
---------------------------

‘tlon-meet-diarize-and-summarize’
     Processes an audio recording file to generate a transcript and an
     AI summary.
       1. Prompts the user to select an ‘AUDIO-FILE’, defaulting to the
          directory specified by ‘tlon-default-conference-app’
          (‘tlon-meet-recordings-directory’ or
          ‘tlon-zoom-recordings-directory’).
       2. Extracts the date from the filename (if possible, using regex)
          or defaults to the current date.
       3. Creates and displays a "*Diarization Output*" buffer.
       4. Runs the diarization script specified by
          ‘tlon-meet-diarize-script’ asynchronously on the ‘AUDIO-FILE’.

       5. When the script finishes, it checks for the existence of the
          transcript file (expected name:
          ‘[audio-filename-sans-extension]-transcript.txt’).
       6. If the transcript exists, it calls
          ‘tlon-meet--generate-summary’.
       7. If the transcript doesn't exist, it reports an error in the
          output buffer.


File: tlon.info,  Node: Transient Menu (10),  Prev: Recording Processing,  Up: Commands (14)

15.3.4 Transient Menu
---------------------

The command ‘tlon-meet-menu’ activates a ‘transient’ menu interface for
meeting-related operations.

   It provides the following groups and commands:
   • *Meetings*:
     ‘l p’
          Leo-Pablo meeting
          (‘tlon-create-or-visit-meeting-issue-leo-pablo’)
     ‘f p’
          Fede-Pablo meeting
          (‘tlon-create-or-visit-meeting-issue-fede-pablo’)
     ‘f l’
          Fede-Leo meeting
          (‘tlon-create-or-visit-meeting-issue-fede-leo’)
     ‘g’
          Group meeting (‘tlon-create-or-visit-group-meeting-issue’)
     ‘i’
          Discuss issue in meeting (‘tlon-discuss-issue-in-meeting’)
     ‘d’
          Diarize and summarize (‘tlon-meet-diarize-and-summarize’)


File: tlon.info,  Node: Org Mode Integration,  Next: Internal Functions and Variables (13),  Prev: Commands (14),  Up: Meeting Management (tlon-meetel)

15.4 Org Mode Integration
=========================

‘tlon-set-meeting-buffers’
     This function is designed to be used as advice or a hook, typically
     triggered when opening a link from an Org agenda heading.  It
     parses the heading text to identify the meeting type (e.g.,
     "Leo<>Pablo", "Group meeting") and calls the corresponding
     ‘tlon-create-or-visit-...’ command for the current date.  It also
     calls ‘org-open-at-point’ to follow the original link (e.g.,
     Zoom/Meet URL).

‘tlon-goto-meeting-when-clocking-in’
     A hook function intended for ‘org-clock-in-hook’.  When clocking
     into a task in Org mode, it calls ‘tlon-set-meeting-buffers’ to
     automatically open the relevant meeting issue alongside any meeting
     link.


File: tlon.info,  Node: Internal Functions and Variables (13),  Prev: Org Mode Integration,  Up: Meeting Management (tlon-meetel)

15.5 Internal Functions and Variables
=====================================

This section lists non-interactive functions used internally or
potentially useful for advanced customization.

* Menu:

* Issue Handling Helpers::
* Diarize and Summarize Helpers::
* Repository and User Helpers::


File: tlon.info,  Node: Issue Handling Helpers,  Next: Diarize and Summarize Helpers,  Up: Internal Functions and Variables (13)

15.5.1 Issue Handling Helpers
-----------------------------

‘tlon-create-or-visit-meeting-issue-date’
     The core logic for finding or creating a meeting issue.  Takes a
     ‘DATE’ string and the target repository ‘DIR’.  It waits for Forge
     updates (‘tlon-wait-until-forge-updates’), looks up an existing
     issue matching the date (‘tlon-issue-lookup’), and either visits it
     (‘forge-visit-issue’) or creates a new one
     (‘tlon-create-and-visit-issue’).

‘tlon-wait-until-forge-updates’
     Pulls changes using ‘forge-pull’ and waits (with a timeout) until
     the repository's ‘updated’ timestamp changes, ensuring local data
     is synchronized before proceeding.

‘tlon-create-and-visit-issue’
     Creates a new Forge issue with the given ‘TITLE’ in the specified
     ‘DIR’ using ‘tlon-create-issue’, pulls changes, waits for the issue
     to appear locally, and then visits it.


File: tlon.info,  Node: Diarize and Summarize Helpers,  Next: Repository and User Helpers,  Prev: Issue Handling Helpers,  Up: Internal Functions and Variables (13)

15.5.2 Diarize and Summarize Helpers
------------------------------------

‘tlon-meet--generate-summary’
     Reads the content of the ‘TRANSCRIPT-FILE’, formats the AI prompt
     using ‘tlon-meet-summary-prompt’, and sends the request to the AI
     model via ‘tlon-make-gptel-request’.  The callback function is
     ‘tlon-meet--save-summary’.

‘tlon-meet--save-summary’
     Saves the generated ‘SUMMARY’ and the original ‘TRANSCRIPT’ to the
     appropriate meeting repository for the given ‘DATE’.
       1. Determines the target repository by prompting the user via
          ‘tlon-meet--determine-repo’.
       2. Defines the output filenames: ‘meeting-summaries.org’ and
          ‘[date]-transcript.txt’.
       3. Appends the summary to ‘meeting-summaries.org’ under a new
          heading for the date, creating the file and adding a
          title/options header if it doesn't exist.
       4. Saves the transcript to ‘[date]-transcript.txt’.
       5. Stages both files using ‘git add’.
       6. Commits the changes using ‘git commit’ with a message
          indicating the meeting date.
       7. Updates the "*Diarization Output*" buffer with progress and
          final file paths.

‘tlon-meet--determine-repo’
     Prompts the user to select the correct meeting repository directory
     from a list of all repositories with ‘subtype’ 'meetings.  Takes
     the ‘DATE’ for context in the prompt.  Returns the selected
     directory path.


File: tlon.info,  Node: Repository and User Helpers,  Prev: Diarize and Summarize Helpers,  Up: Internal Functions and Variables (13)

15.5.3 Repository and User Helpers
----------------------------------

‘tlon-prompt-for-all-other-users’
     Prompts the user to select a person using completion.  The
     candidates are all users defined in ‘tlon-users’ except for the
     current user (‘user-full-name’).  If the optional ‘GROUP’ argument
     is non-nil, "group" is added as a candidate.

‘tlon-get-meeting-repo’
     Finds the directory (:dir) of the meeting repository shared by
     ‘PARTICIPANT1’ and ‘PARTICIPANT2’.  It iterates through
     ‘tlon-repos’, looking for a repo with ‘subtype’ 'meetings that
     includes both participants in its ‘:participants’ list.


File: tlon.info,  Node: Repository Management (tlon-reposel),  Next: Search Functionality (tlon-searchel),  Prev: Meeting Management (tlon-meetel),  Up: Top

16 Repository Management (‘tlon-repos.el’)
******************************************

This module provides functions for managing Tlön's Git repositories.  It
integrates with ‘vc’, ‘vc-extras’, ‘forge’, ‘forge-extras’, and
‘pass-extras’ to offer commands for creating, cloning, deleting,
tracking, searching, and interacting with repositories, both locally and
remotely (primarily on GitHub under the ‘tlon-team’ organization).

* Menu:

* Dependencies: Dependencies (11).
* Commands: Commands (15).
* Internal Functions and Variables: Internal Functions and Variables (14).


File: tlon.info,  Node: Dependencies (11),  Next: Commands (15),  Up: Repository Management (tlon-reposel)

16.1 Dependencies
=================

   • ‘forge-core’, ‘forge-search’, ‘forge-extras’
   • ‘shut-up’
   • ‘tlon-core’
   • ‘vc’, ‘vc-extras’
   • ‘pass-extras’
   • ‘transient’


File: tlon.info,  Node: Commands (15),  Next: Internal Functions and Variables (14),  Prev: Dependencies (11),  Up: Repository Management (tlon-reposel)

16.2 Commands
=============

This section details the interactive commands provided by
‘tlon-repos.el’.

* Menu:

* Version Control (VC) Operations::
* Forge Integration::
* Git Crypt::
* Transient Menu: Transient Menu (11).


File: tlon.info,  Node: Version Control (VC) Operations,  Next: Forge Integration,  Up: Commands (15)

16.2.1 Version Control (VC) Operations
--------------------------------------

‘tlon-create-repo’
     Creates a new repository on GitHub under the ‘tlon-team’
     organization.  Prompts for the repository ‘NAME’.  Delegates to
     ‘vc-extras-create-repo’.

‘tlon-clone-repo’
     Clones an existing Tlön repository from the ‘tlon-team’
     organization into the directory specified by
     ‘paths-dir-tlon-repos’.  Prompts for the repository ‘NAME’ if not
     provided.  Optionally skips adding the repo to the Forge database
     if ‘NO-FORGE’ is non-nil.  Delegates to ‘vc-extras-clone-repo’.

‘tlon-clone-missing-repos’
     Clones all Tlön repositories defined in the configuration
     (‘tlon-repo-lookup-all :dir’) that do not exist locally.  Clones
     are performed asynchronously and do *not* automatically add the
     repos to the Forge database (use ‘tlon-forge-track-missing-repos’
     for that).

‘tlon-delete-local-repo’
     Deletes a local copy of a Tlön repository.  Prompts the user to
     select a repository from the intersection of configured Tlön repos
     and locally existing ones (using ‘tlon-get-local-repos’) if ‘NAME’
     is not provided.  Delegates deletion to
     ‘vc-extras-delete-local-repo’.


File: tlon.info,  Node: Forge Integration,  Next: Git Crypt,  Prev: Version Control (VC) Operations,  Up: Commands (15)

16.2.2 Forge Integration
------------------------

‘tlon-forge-track-repo’
     Adds a local Tlön repository to the Forge database, enabling Forge
     features like issue tracking and pull request management.  Prompts
     for the repository ‘NAME’ using ‘tlon-get-local-repos’ if not
     provided.  Uses ‘forge-extras-track-repository’.

‘tlon-forge-track-missing-repos’
     Iterates through all configured Tlön repositories that exist
     locally and adds any untracked ones to the Forge database using
     ‘forge-extras-track-repo-all-topics’.  Waits until each repo is
     successfully tracked before proceeding.

‘tlon-pull-issues-in-all-repos’
     Pulls the latest issues and pull requests from the remote for *all*
     tracked Tlön repositories.  Iterates through configured repos and
     calls ‘tlon-pull-issues-in-repo’ for each.

‘tlon-forge-search’
     Searches for a given ‘STRING’ across all tracked Tlön repositories
     (or a specified subset ‘REPOS’) using Forge's search functionality.
     It temporarily opens Magit buffers, performs the search via
     ‘forge-search’, and then closes the Magit buffers if they weren't
     already open.  Reports the number of repositories with matches and
     the time taken.  Kills previous search result buffers before
     starting.


File: tlon.info,  Node: Git Crypt,  Next: Transient Menu (11),  Prev: Forge Integration,  Up: Commands (15)

16.2.3 Git Crypt
----------------

‘tlon-git-crypt-unlock’
     Unlocks specific Tlön repositories that use ‘git-crypt’ (currently
     ‘uqbar/uqbar-api’, ‘uqbar/uqbar-front’, ‘uqbar’).  Prompts the user
     to select the repository and uses ‘pass-extras-git-crypt-unlock~
     with the corresponding password store entry (e.g.,
     =tlon/core/git-crypt/uqbar/uqbar-api’).


File: tlon.info,  Node: Transient Menu (11),  Prev: Git Crypt,  Up: Commands (15)

16.2.4 Transient Menu
---------------------

The command ‘tlon-repos-menu’ activates a ‘transient’ menu interface for
repository management.

   It provides the following groups and commands:
   • *Git*:
     ‘l’
          Clone repo (‘tlon-clone-repo’)
     ‘L’
          Clone all missing repos (‘tlon-clone-missing-repos’)
     ‘s’
          Split local repo (‘vc-extras-split-local-repo’)
     ‘d’
          Delete local repo (‘tlon-delete-local-repo’)
     ‘c’
          Create remote repo (‘tlon-create-repo’)
     ‘u’
          Unlock uqbar git-crypt (‘tlon-git-crypt-unlock’)
     ‘?’
          Check authentication (‘vc-extras-check-gh-authenticated’)
   • *Forge*:
     ‘a’
          Track repo (‘tlon-forge-track-repo’)
     ‘A’
          Track all missing repos (‘tlon-forge-track-missing-repos’)
     ‘r’
          Untrack repo (‘forge-remove-repository’)
     ‘R’
          Untrack all repos (db reset) (‘forge-reset-database’)
     ‘t’
          List tracked repos (‘forge-list-repositories’)
     ‘p’
          Pull issues in repo (‘tlon-pull-issues-in-repo’)
     ‘P’
          Pull issues in all repos (‘tlon-pull-issues-in-all-repos’)


File: tlon.info,  Node: Internal Functions and Variables (14),  Prev: Commands (15),  Up: Repository Management (tlon-reposel)

16.3 Internal Functions and Variables
=====================================

This section lists non-interactive functions and variables used
internally or potentially useful for advanced customization.

‘tlon-get-local-repos’
     Prompts the user to select a Tlön repository name using completion.
     The candidates are the intersection of all configured Tlön
     repositories (~tlon-repo-lookup-all :name=) and the repositories
     found locally within the Tlön repos directory
     (~vc-extras-list-local-candidates "tlon-team"=).  Signals an error
     if no local Tlön repos are found.

‘tlon-pull-issues-in-repo’
     Pulls issues and pull requests for a single repository specified by
     ‘DIR’ (or the current directory).  Uses ‘forge-get-repository’ to
     check if the repo is tracked and then calls ‘forge--pull’
     (suppressing its messages with ‘shut-up’).

‘tlon-forge-menu’
     A ‘transient’ menu definition that *overrides* the default
     ‘forge-dispatch’ command.  It provides a customized menu structure
     for Forge commands within the Tlön context, including options to
     search across all Tlön repos (‘tlon-forge-search’).


File: tlon.info,  Node: Search Functionality (tlon-searchel),  Next: Split Window Alignment (tlon-splitel),  Prev: Repository Management (tlon-reposel),  Up: Top

17 Search Functionality (‘tlon-search.el’)
******************************************

This module provides miscellaneous search commands, integrating with
‘magit’, ‘consult’, ‘forge’, and external web services for various
search needs within the Tlön workflow.

* Menu:

* Dependencies: Dependencies (12).
* Commands: Commands (16).
* Internal Functions and Variables: Internal Functions and Variables (15).


File: tlon.info,  Node: Dependencies (12),  Next: Commands (16),  Up: Search Functionality (tlon-searchel)

17.1 Dependencies
=================

   • ‘tlon’ (specifically ‘tlon-core’)
   • ‘transient’
   • ‘magit-log’
   • ‘consult’
   • ‘forge’
   • ‘goldendict-ng’ (optional, for translation)


File: tlon.info,  Node: Commands (16),  Next: Internal Functions and Variables (15),  Prev: Dependencies (12),  Up: Search Functionality (tlon-searchel)

17.2 Commands
=============

This section details the interactive commands provided by
‘tlon-search.el’.

* Menu:

* Search Commits::
* Search Commit Diffs::
* Search Files (Ripgrep)::
* Search for Translation::
* Search Menu::


File: tlon.info,  Node: Search Commits,  Next: Search Commit Diffs,  Up: Commands (16)

17.2.1 Search Commits
---------------------

The command ‘tlon-search-commits’ searches for a ‘SEARCH-STRING’ within
the commit messages of a Git repository.
  1. Prompts the user for the ‘SEARCH-STRING’.
  2. Optionally takes a ‘REPO’ directory path.  If nil, uses the current
     repository (‘default-directory’).
  3. Calls ‘magit-log-all’ with the ‘--grep’ argument and the
     ‘SEARCH-STRING’ to display the matching commits in a Magit log
     buffer.


File: tlon.info,  Node: Search Commit Diffs,  Next: Search Files (Ripgrep),  Prev: Search Commits,  Up: Commands (16)

17.2.2 Search Commit Diffs
--------------------------

The command ‘tlon-search-commit-diffs’ searches for a ‘SEARCH-STRING’
within the content (diffs) of commits in a Git repository.
  1. Prompts the user for the ‘SEARCH-STRING’.
  2. Optionally takes a ‘REPO’ directory path.  If nil, uses the current
     repository (‘default-directory’).
  3. Calls ‘magit-log-all’ with the ‘-S’ argument (pickaxe search) and
     the ‘SEARCH-STRING’ to display commits where the string was added
     or removed.


File: tlon.info,  Node: Search Files (Ripgrep),  Next: Search for Translation,  Prev: Search Commit Diffs,  Up: Commands (16)

17.2.3 Search Files (Ripgrep)
-----------------------------

The command ‘tlon-search-files’ searches for a ‘SEARCH-STRING’ within
the files of a Tlön repository using ‘consult-ripgrep’.
  1. Prompts the user for the ‘SEARCH-STRING’.
  2. Optionally takes a ‘REPO’ directory path.  If nil, it determines
     the current repository using ‘tlon-get-repo’ (including all
     sub-repositories).
  3. Calls ‘consult-ripgrep’ with the determined repository path and the
     search string, presenting results in the minibuffer with live
     preview.


File: tlon.info,  Node: Search for Translation,  Next: Search Menu,  Prev: Search Files (Ripgrep),  Up: Commands (16)

17.2.4 Search for Translation
-----------------------------

The command ‘tlon-search-for-translation’ searches for a Spanish
translation of an English ‘STRING’ using various online resources and
the local ‘goldendict-ng’ application.
  1. Prompts the user for the English ‘STRING’ to translate.
  2. Defines a list of URL templates for different translation websites
     (Spanish Stack Exchange, Bab.la, Wikipedia, Reverso Context,
     Linguee).
  3. Iterates through the URLs, formats them with the URL-encoded
     ‘STRING’, and opens each in a new browser buffer using
     ‘browse-url’.
  4. Calls ‘goldendict-ng-search-string’ to search for the ‘STRING’ in
     the locally installed GoldenDict-NG application (if configured).


File: tlon.info,  Node: Search Menu,  Prev: Search for Translation,  Up: Commands (16)

17.2.5 Search Menu
------------------

The command ‘tlon-search-menu’ activates a ‘transient’ menu interface
for accessing the various search commands.

   It provides the following options under the "Search" group:
‘c’
     Commits (‘tlon-search-commits’)
‘d’
     Commit diffs (‘tlon-search-commit-diffs’)
‘f’
     Files (‘tlon-search-files’)
‘i’
     Issues (current repo) (‘forge-search’)
‘I’
     Issues (all repos) (‘tlon-forge-search’)
‘t’
     Translation (‘tlon-search-for-translation’)


File: tlon.info,  Node: Internal Functions and Variables (15),  Prev: Commands (16),  Up: Search Functionality (tlon-searchel)

17.3 Internal Functions and Variables
=====================================

This module primarily consists of interactive commands and the transient
menu definition.  There are no significant internal-only functions or
variables exposed for general customization beyond the declared
dependencies.


File: tlon.info,  Node: Split Window Alignment (tlon-splitel),  Next: Text-to-Speech (tlon-ttsel),  Prev: Search Functionality (tlon-searchel),  Up: Top

18 Split Window Alignment (‘tlon-split.el’)
*******************************************

This module provides a minor mode, ‘tlon-split-mode’, designed to
facilitate working with two vertically split windows, typically
containing an original document and its translation.  Its primary
function is to automatically align the content (specifically paragraphs)
between the two windows as the user navigates the source window.

* Menu:

* Dependencies: Dependencies (13).
* User Options: User Options (7).
* Commands: Commands (17).
* Internal Functions and Variables: Internal Functions and Variables (16).


File: tlon.info,  Node: Dependencies (13),  Next: User Options (7),  Up: Split Window Alignment (tlon-splitel)

18.1 Dependencies
=================

   • ‘tlon-counterpart’
   • ‘tlon-md’
   • ‘transient’


File: tlon.info,  Node: User Options (7),  Next: Commands (17),  Prev: Dependencies (13),  Up: Split Window Alignment (tlon-splitel)

18.2 User Options
=================

‘tlon-split-screen-line-threshold’
     An integer specifying the minimum number of screen lines the cursor
     must be below the start of the buffer content for automatic
     paragraph alignment (‘tlon-split-autoalign-paragraphs’) to
     activate.  This prevents alignment attempts when near the top of
     the buffer where paragraph counting might be less reliable or
     meaningful.  Defaults to 60.


File: tlon.info,  Node: Commands (17),  Next: Internal Functions and Variables (16),  Prev: User Options (7),  Up: Split Window Alignment (tlon-splitel)

18.3 Commands
=============

* Menu:

* Toggle Split Mode::
* Manual Alignment::
* Reset Split Mode Hook::
* Sentence Highlighting (Experimental/Unused)::
* Transient Menu: Transient Menu (12).


File: tlon.info,  Node: Toggle Split Mode,  Next: Manual Alignment,  Up: Commands (17)

18.3.1 Toggle Split Mode
------------------------

The command ‘tlon-split-mode’ toggles the minor mode on or off in the
current buffer.  When enabled, it activates the automatic paragraph
alignment behavior via the 'post-command-hook'.


File: tlon.info,  Node: Manual Alignment,  Next: Reset Split Mode Hook,  Prev: Toggle Split Mode,  Up: Commands (17)

18.3.2 Manual Alignment
-----------------------

‘tlon-split-align-screen-lines’
     Manually aligns the other window so that its cursor is on the same
     screen line number as the cursor in the current window.  Scrolls
     the other window up or down as needed.

‘tlon-split-align-paragraphs’
     Manually aligns the other window based on paragraph count.  It
     calculates the paragraph number the cursor is currently in within
     the source window (using ‘tlon-get-number-of-paragraphs’) and
     scrolls the other window so that the corresponding paragraph is
     visible and roughly aligned (using ‘recenter’ and ‘scroll-down’).

‘tlon-split-align-sentences’
     (TODO) Intended to align windows based on sentence count, assuming
     paragraphs are already aligned.  Currently not implemented.


File: tlon.info,  Node: Reset Split Mode Hook,  Next: Sentence Highlighting (Experimental/Unused),  Prev: Manual Alignment,  Up: Commands (17)

18.3.3 Reset Split Mode Hook
----------------------------

The command ‘tlon-split-mode-reset’ removes and re-adds the
‘tlon-split-autoalign-paragraphs’ function to the 'post-command-hook'.
This can be useful if the hook's behavior seems incorrect or needs
refreshing.


File: tlon.info,  Node: Sentence Highlighting (Experimental/Unused),  Next: Transient Menu (12),  Prev: Reset Split Mode Hook,  Up: Commands (17)

18.3.4 Sentence Highlighting (Experimental/Unused)
--------------------------------------------------

These commands relate to an experimental feature for highlighting
corresponding sentences between windows, which is currently not actively
used or fully developed.

‘tlon-highlight-corresponding-sentence’
     Highlights the sentence in the source window that corresponds
     (based on sentence count and offset) to the sentence at point in
     the target window.
‘tlon-sentence-highlight-offset-set’
     Calculates and sets the sentence offset
     (‘tlon-sentence-highlight-offset’) between the source and target
     windows based on the current cursor positions.
‘tlon-toggle-automatic-highlighting’
     Toggles the automatic highlighting behavior by adding/removing
     ‘tlon-highlight-corresponding-sentence’ from the
     'post-command-hook'.


File: tlon.info,  Node: Transient Menu (12),  Prev: Sentence Highlighting (Experimental/Unused),  Up: Commands (17)

18.3.5 Transient Menu
---------------------

The command ‘tlon-split-menu’ activates a ‘transient’ menu interface for
split mode operations.

   It provides the following options under the "Split mode" group:
‘s’
     Toggle split mode (‘tlon-split-mode’)
‘h’
     Highlight corresponding sentence
     (‘tlon-highlight-corresponding-sentence’)
‘o’
     Set sentence offset (‘tlon-sentence-highlight-offset-set’)
‘r’
     Reset split mode hook (‘tlon-split-mode-reset’)


File: tlon.info,  Node: Internal Functions and Variables (16),  Prev: Commands (17),  Up: Split Window Alignment (tlon-splitel)

18.4 Internal Functions and Variables
=====================================

This section lists non-interactive functions and variables used
internally.

* Menu:

* State Variables::
* Helper Functions: Helper Functions (3).


File: tlon.info,  Node: State Variables,  Next: Helper Functions (3),  Up: Internal Functions and Variables (16)

18.4.1 State Variables
----------------------

‘tlon-split-last-screen-line-pos’
     Stores the screen line number of the cursor's last known position.
     Used by ‘tlon-split-screen-line-changed-p’ to detect movement.
‘tlon-sentence-highlight-offset’
     Stores the calculated sentence offset for the experimental
     highlighting feature.
‘tlon-enable-automatic-highlighting’
     Boolean flag controlling the experimental automatic sentence
     highlighting.


File: tlon.info,  Node: Helper Functions (3),  Prev: State Variables,  Up: Internal Functions and Variables (16)

18.4.2 Helper Functions
-----------------------

‘tlon-split-screen-line-changed-p’
     Returns non-nil if the cursor has moved to a different screen line
     since the last check.  Updates ‘tlon-split-last-screen-line-pos’.
‘tlon-split-top-of-buffer-visible-p’
     (Unused) Checks if the beginning of the buffer content (after
     metadata) is visible in the current window.
‘tlon-split-screen-line-offset’
     Calculates the difference in screen line numbers between the cursor
     positions in the current and other windows.
‘tlon-split-autoalign-paragraphs’
     The function added to 'post-command-hook' when ‘tlon-split-mode’ is
     active.  It checks if the mode is enabled, if the screen line has
     changed, and if the cursor is below the
     ‘tlon-split-screen-line-threshold’.  If all conditions are met, it
     calls ‘tlon-split-align-paragraphs’.
‘tlon-remove-source-overlays’
     Removes sentence highlighting overlays (used by the experimental
     highlighting feature).
‘tlon-current-window-line’
     Calculates the current screen line number relative to the top of
     the window (used by the experimental highlighting feature).


File: tlon.info,  Node: Text-to-Speech (tlon-ttsel),  Next: URL Handling (tlon-urlel),  Prev: Split Window Alignment (tlon-splitel),  Up: Top

19 Text-to-Speech (‘tlon-tts.el’)
*********************************

This module provides comprehensive text-to-speech (TTS) functionality,
integrating with multiple cloud-based TTS engines (Microsoft Azure,
Google Cloud, Amazon Polly, OpenAI, ElevenLabs).  It handles text
preparation (including SSML generation and listener cues), API requests,
audio chunking and merging, and file management.

* Menu:

* Dependencies: Dependencies (14).
* User Options: User Options (8).
* Commands: Commands (18).
* Internal Functions and Variables: Internal Functions and Variables (17).


File: tlon.info,  Node: Dependencies (14),  Next: User Options (8),  Up: Text-to-Speech (tlon-ttsel)

19.1 Dependencies
=================

   • ‘tlon-core’
   • ‘tlon-md’
   • ‘eieio’
   • ‘transient’
   • ‘flycheck’ (optional, for staging buffer)
   • ‘markdown-mode’ (optional, for staging buffer)
   • ‘json-mode’ (optional, for ElevenLabs voice listing)
   • External tools: ‘ffmpeg’ (for audio conversion/joining), ‘curl’
     (for API requests), ‘aws’ CLI (for Polly), ‘gcloud’ CLI (for Google
     Cloud token), ‘jq’ (for Google Cloud response parsing).


File: tlon.info,  Node: User Options (8),  Next: Commands (18),  Prev: Dependencies (14),  Up: Text-to-Speech (tlon-ttsel)

19.2 User Options
=================

* Menu:

* General TTS Settings::
* Engine-Specific Settings::


File: tlon.info,  Node: General TTS Settings,  Next: Engine-Specific Settings,  Up: User Options (8)

19.2.1 General TTS Settings
---------------------------

‘tlon-tts-global-engine’
     Specifies the default TTS engine to use (e.g., "Microsoft Azure",
     "Google Cloud", "Amazon Polly", "OpenAI", "ElevenLabs").

‘tlon-tts-use-alternate-voice’
     Boolean.  If non-nil, uses a designated alternate voice (per engine
     configuration) for reading elements like notes, asides,
     blockquotes, etc., marked with listener cues.

‘tlon-tts-delete-file-chunks’
     Boolean.  If non-nil, automatically deletes the individual audio
     chunk files after they have been successfully merged into the final
     output file.

‘tlon-tts-paragraph-break-duration’
     String specifying the duration of the pause (SSML ‘<break
     time’"...">=) inserted after each paragraph (e.g., "0.8s").

‘tlon-tts-listener-cue-break-duration’
     String specifying the duration of the pause inserted before and
     after listener cues (e.g., "0.5s").


File: tlon.info,  Node: Engine-Specific Settings,  Prev: General TTS Settings,  Up: User Options (8)

19.2.2 Engine-Specific Settings
-------------------------------

Each supported TTS engine has specific configuration options:

   • *Audio Settings*: Variables like
     ‘tlon-microsoft-azure-audio-settings’,
     ‘tlon-google-cloud-audio-settings’,
     ‘tlon-amazon-polly-audio-settings’, ‘tlon-openai-audio-settings’,
     ‘tlon-elevenlabs-audio-settings’ define the default audio output
     format (e.g., MP3 bitrate, PCM sample rate) and the corresponding
     file extension for each engine.  These are cons cells
     ‘("FORMAT_NAME" . "extension")’.
   • *Model Selection* (where applicable):
     ‘tlon-openai-model’
          Specifies the OpenAI TTS model to use (e.g.,
          "gpt-4o-mini-tts", "tts-1", "tts-1-hd").
     ‘tlon-elevenlabs-model’
          Specifies the ElevenLabs model (e.g.,
          "eleven_multilingual_v2", "eleven_turbo_v2_5").
   • *Region* (Amazon Polly):
     ‘tlon-amazon-polly-region’
          Specifies the AWS region for Amazon Polly requests (e.g.,
          "us-east-1").


File: tlon.info,  Node: Commands (18),  Next: Internal Functions and Variables (17),  Prev: User Options (8),  Up: Text-to-Speech (tlon-ttsel)

19.3 Commands
=============

This section details the interactive commands provided by ‘tlon-tts.el’.

* Menu:

* Core Workflow::
* Audio File Management::
* Reporting and Data Editing::
* Transient Menu: Transient Menu (13).


File: tlon.info,  Node: Core Workflow,  Next: Audio File Management,  Up: Commands (18)

19.3.1 Core Workflow
--------------------

‘tlon-tts-stage-content’
     (Autoloaded) Prepares content for narration.  Reads the content
     (from region, specified file, or current buffer), creates a
     dedicated staging buffer (e.g., ‘*TTS: filename*’), copies the
     content, sets up necessary file-local variables (source, language,
     engine, voice, etc.), and runs the preparation pipeline
     (‘tlon-tts-prepare-staging-buffer’).

‘tlon-tts-narrate-staged-content’
     (Autoloaded) Narrates the content currently prepared in the staging
     buffer.
       1. Ensures the current buffer is a staging buffer.
       2. Breaks the prepared text into chunks based on engine character
          limits and voice changes (‘tlon-tts-prepare-chunks’).
       3. Iterates through the chunks, calling the appropriate engine's
          request function (‘tlon-tts-generate-audio’) for each chunk,
          saving the audio to sequentially numbered files (e.g.,
          ‘filename-001.mp3’).
       4. Monitors the asynchronous audio generation processes.
       5. Once all chunks are generated:
             • Appends silence to chunks if needed (e.g., for
               ElevenLabs).
             • Joins the audio chunks into a single output file
               (‘tlon-tts-join-chunks’).
             • Optionally deletes the chunk files
               (‘tlon-tts-delete-chunks-of-file’).
             • Opens the directory containing the final audio file in
               Dired.
             • Opens the final audio file using the system's default
               player.


File: tlon.info,  Node: Audio File Management,  Next: Reporting and Data Editing,  Prev: Core Workflow,  Up: Commands (18)

19.3.2 Audio File Management
----------------------------

‘tlon-tts-join-chunks’
     Joins sequentially numbered audio chunk files (e.g.,
     ‘file-001.mp3’, ‘file-002.mp3’) into a single output file (e.g.,
     ‘file.mp3’) using ‘ffmpeg’.  Operates on the file at point in Dired
     or prompts for a file.

‘tlon-tts-delete-chunks-of-file’
     Deletes all audio chunk files associated with a base filename.
     Also kills the corresponding staging buffer if it exists.  Operates
     on the file at point in Dired or prompts for a file.

‘tlon-tts-truncate-audio-file’
     Removes a specified number of milliseconds from the *end* of an
     audio file using ‘mp3splt’.  Prompts for the file and the duration
     to remove.

‘tlon-tts-move-file-to-audio-server’
     (Autoloaded) Moves a generated audio file to the designated audio
     repository directory (‘uqbar-audio’) based on the file's language.
     Prompts for the file to move.

‘tlon-tts-open-audio-directory’
     (Autoloaded) Opens the audio repository directory for the current
     language (or prompts for one) in Dired.


File: tlon.info,  Node: Reporting and Data Editing,  Next: Transient Menu (13),  Prev: Audio File Management,  Up: Commands (18)

19.3.3 Reporting and Data Editing
---------------------------------

‘tlon-tts-generate-report’
     Generates a report buffer ("*TTS Report*") highlighting potential
     issues in the current staging buffer that might affect TTS quality,
     such as missing acronym definitions, potential chemical symbols,
     emphasis markers, en dashes, and numbers lacking separators.

‘tlon-tts-edit-global-abbreviations’
     (Autoloaded) Interactively edits the global abbreviations list
     stored in ‘tlon-file-global-abbreviations’.

‘tlon-tts-edit-global-phonetic-replacements’
     (Autoloaded) Interactively edits the global phonetic replacements
     list stored in ‘tlon-file-global-phonetic-replacements’.

‘tlon-tts-edit-global-phonetic-transcriptions’
     (Autoloaded) Interactively edits the global phonetic transcriptions
     list stored in ‘tlon-file-global-phonetic-transcriptions’.

‘tlon-add-local-abbreviation’
     (Autoloaded) Adds a file-local abbreviation to the
     ‘tlon-local-abbreviations’ variable in the current buffer's local
     variables section.

‘tlon-add-local-replacement’
     (Autoloaded) Adds a file-local phonetic replacement to the
     ‘tlon-local-replacements’ variable in the current buffer's local
     variables section.


File: tlon.info,  Node: Transient Menu (13),  Prev: Reporting and Data Editing,  Up: Commands (18)

19.3.4 Transient Menu
---------------------

The command ‘tlon-tts-menu’ (Autoloaded) activates a ‘transient’ menu
interface for TTS operations.

   It provides the following groups and commands:
   • *Narration*:
     ‘s’
          Stage content (‘tlon-tts-stage-content’)
     ‘n’
          Narrate staged content (‘tlon-tts-narrate-staged-content’)
     ‘e’
          Generate report (‘tlon-tts-generate-report’)
          *Narration options*: (These set the corresponding user options
          temporarily for the menu session)
          ‘-a’
               Paragraph break duration
               (‘tlon-tts-paragraph-break-duration-infix’)
          ‘-d’
               Delete file chunks
               (‘tlon-tts-menu-infix-toggle-delete-file-chunks’)
          ‘-e’
               Engine (‘tlon-tts-menu-infix-set-engine’)
          ‘-s’
               Engine Settings
               (‘tlon-tts-menu-infix-set-engine-settings’)
          ‘-p’
               Prompt (Currently unused)
               (‘tlon-tts-menu-infix-set-prompt’)
          ‘-v’
               Use alternate voice
               (‘tlon-tts-menu-infix-toggle-alternate-voice’)
          ‘-D’
               Debug mode (‘tlon-menu-infix-toggle-debug’)
   • *File processing*:
     ‘j’
          Join file chunks (‘tlon-tts-join-chunks’)
     ‘d’
          Delete file chunks (‘tlon-tts-delete-chunks-of-file’)
     ‘x’
          Truncate audio file (‘tlon-tts-truncate-audio-file’)
          *Audio repo*:
          ‘o’
               Open audio directory (‘tlon-tts-open-audio-directory’)
          ‘m’
               Move file to audio server
               (‘tlon-tts-move-file-to-audio-server’)
   • *Edit*:
        • *global*:
          ‘a’
               Abbreviation (‘tlon-tts-edit-global-abbreviations’)
          ‘r’
               Replacement
               (‘tlon-tts-edit-global-phonetic-replacements’)
          ‘t’
               Transcription
               (‘tlon-tts-edit-global-phonetic-transcriptions’)
        • *local*:
          ‘A’
               Abbreviation (‘tlon-add-local-abbreviation’)
          ‘R’
               Replacement (‘tlon-add-local-replacement’)


File: tlon.info,  Node: Internal Functions and Variables (17),  Prev: Commands (18),  Up: Text-to-Speech (tlon-ttsel)

19.4 Internal Functions and Variables
=====================================

This section lists key non-interactive functions, variables, and
constants used internally.

* Menu:

* Configuration and Constants::
* Staging Buffer and Preparation::
* Chunking and Processing::
* Engine Request Functions::
* SSML and Text Processing Helpers::
* Audio File Helpers::


File: tlon.info,  Node: Configuration and Constants,  Next: Staging Buffer and Preparation,  Up: Internal Functions and Variables (17)

19.4.1 Configuration and Constants
----------------------------------

‘tlon-tts-engines’
     Central alist defining properties for each supported TTS engine
     (name, voice variable, audio settings variable, request function,
     character limit, internal property key).
Voice Lists (e.g., ‘tlon-microsoft-azure-voices’)
     Alists defining preferred voices for each engine, including ID,
     language, gender, and optional role (main/alternate).
Audio Choices (e.g., ‘tlon-microsoft-azure-audio-choices’)
     Alists defining available audio formats and extensions for each
     engine, used for completion in the transient menu.
Request Formats (e.g., ‘tlon-microsoft-azure-request’)
     Format strings for the ‘curl’ or ‘aws’ commands used to make API
     requests for each engine.
Character Limits (e.g., ‘tlon-microsoft-azure-char-limit’)
     Maximum number of characters allowed per request for each engine.
     Used for chunking.
API Keys (e.g., ‘tlon-microsoft-azure-key’)
     Variables holding the API keys for each service, typically
     retrieved from ‘auth-source’.
‘tlon-tts-supported-tags’
     Alist defining SSML tags, their support status across engines, and
     how to handle them if unsupported (remove, chunkify).
‘tlon-tts-listener-cues’
     Alist defining the start and end cue text for different content
     types (aside, blockquote, etc.)  in various languages.
‘tlon-tts-listener-cue-patterns’
     Alist mapping content types to the regex patterns used to identify
     them in the text.


File: tlon.info,  Node: Staging Buffer and Preparation,  Next: Chunking and Processing,  Prev: Configuration and Constants,  Up: Internal Functions and Variables (17)

19.4.2 Staging Buffer and Preparation
-------------------------------------

‘tlon-tts-get-staging-buffer-name’
     Generates the name for the staging buffer based on the source
     filename.
‘tlon-tts-set-file-local-vars’
     Sets file-local variables in the staging buffer (source, language,
     engine, audio format, voice, locale).
‘tlon-tts-prepare-staging-buffer’
     The main function that orchestrates the text preparation pipeline
     within the staging buffer.  It calls numerous helper functions to:
        • Generate the initial report.
        • Ensure images/tables have alt text.
        • Process notes (footnotes/sidenotes).
        • Remove unwanted sections (e.g., "Further reading").
        • Remove horizontal lines.
        • Replace BibTeX keys with citations.
        • Add listener cues.
        • Process links.
        • Remove formatting (bold, italics, etc.).
        • Add paragraph breaks.
        • Process currencies and numerals.
        • Process abbreviations (local and global).
        • Process phonetic replacements and transcriptions.
        • Handle unsupported SSML tags.
        • Clean up extra newlines.
        • (Potentially) Escape XML special characters.


File: tlon.info,  Node: Chunking and Processing,  Next: Engine Request Functions,  Prev: Staging Buffer and Preparation,  Up: Internal Functions and Variables (17)

19.4.3 Chunking and Processing
------------------------------

‘tlon-tts-prepare-chunks’
     Calculates the engine's character limit and calls
     ‘tlon-tts-read-into-chunks’.
‘tlon-tts-read-into-chunks’
     Reads the staging buffer content (excluding local variables
     section) and splits it into chunks using
     ‘tlon-tts-break-into-chunks’.
‘tlon-tts-break-into-chunks’
     Core logic for splitting text into chunks based on paragraph
     boundaries, engine character limits, and voice changes specified by
     ‘tlon-tts-voice-chunks’.
‘tlon-tts-process-chunks’
     Iterates through the generated ‘tlon-tts-chunks’, calling
     ‘tlon-tts-generate-audio’ for each.
‘tlon-tts-generate-audio’
     Constructs the API request command using the appropriate
     engine-specific function (e.g.,
     ‘tlon-tts-microsoft-azure-make-request’) and starts the
     asynchronous process.  Sets up the process sentinel to handle
     completion (‘tlon-tts-process-chunk’).


File: tlon.info,  Node: Engine Request Functions,  Next: SSML and Text Processing Helpers,  Prev: Chunking and Processing,  Up: Internal Functions and Variables (17)

19.4.4 Engine Request Functions
-------------------------------

Engine Request Functions (e.g., ‘tlon-tts-microsoft-azure-make-request’)
     Functions responsible for constructing the specific ‘curl’, ‘aws’,
     or other command-line request for each TTS engine, incorporating
     the text (wrapped in SSML), API key, selected voice, locale, audio
     format, and output destination.


File: tlon.info,  Node: SSML and Text Processing Helpers,  Next: Audio File Helpers,  Prev: Engine Request Functions,  Up: Internal Functions and Variables (17)

19.4.5 SSML and Text Processing Helpers
---------------------------------------

‘tlon-tts-process-unsupported-ssml-tags’
     Determines which SSML tags are unsupported by the current engine
     and either removes them (‘tlon-tts-remove-unsupported-ssml-tags’)
     or prepares for chunking based on them
     (‘tlon-tts-chunkify-unsupported-ssml-tags’).
‘tlon-tts-process-listener-cues’
     Iterates through defined content types (tables, quotes, asides,
     etc.)  and calls ‘tlon-tts-add-listener-cues’ for each.
‘tlon-tts-add-listener-cues’
     Finds occurrences of a specific content type using regex patterns
     and replaces the matched text with the content wrapped in
     appropriate listener cues and potentially alternate voice tags
     (‘tlon-tts-listener-cue-full-enclose’).
‘tlon-tts-process-notes’
     Handles footnotes, replacing references with content (for
     sidenotes) or removing them, adding listener cues.
‘tlon-tts-process-formatting’
     Calls individual functions to remove various formatting tags (bold,
     italics, sup, sub, etc.).
‘tlon-tts-process-numerals’
     Calls functions to handle number formatting (powers, Roman
     numerals, thousands separators).
‘tlon-tts-process-abbreviations’
     Core logic for replacing abbreviations (local or global) with their
     expansions.
‘tlon-tts-process-terms’
     Generic function for replacing terms based on a list (used for
     phonetic replacements and transcriptions).


File: tlon.info,  Node: Audio File Helpers,  Prev: SSML and Text Processing Helpers,  Up: Internal Functions and Variables (17)

19.4.6 Audio File Helpers
-------------------------

‘tlon-tts-get-chunk-name’
     Generates the numbered filename for an audio chunk.
‘tlon-tts-get-list-of-chunks’
     Finds all chunk files matching a base filename pattern.
‘tlon-tts-create-list-of-chunks’
     Creates a temporary text file listing chunk filenames, required by
     ‘ffmpeg’ for concatenation.
‘tlon-tts-append-silence-to-chunks’
     Appends silence to each chunk file using ‘ffmpeg’, necessary for
     some engines like ElevenLabs.
‘tlon-tts-append-silence-to-chunks-p’
     Determines if silence should be appended based on the TTS engine
     used for the file.


File: tlon.info,  Node: URL Handling (tlon-urlel),  Next: Word Counting and Statistics (tlon-countel),  Prev: Text-to-Speech (tlon-ttsel),  Up: Top

20 URL Handling (‘tlon-url.el’)
*******************************

This module provides tools for checking dead URLs within files and
replacing URLs across multiple Tlön content repositories.  It integrates
with the external ‘linkchecker’ command-line tool and the Wayback
Machine (web.archive.org).

* Menu:

* Dependencies: Dependencies (15).
* Commands: Commands (19).
* Internal Functions and Variables: Internal Functions and Variables (18).


File: tlon.info,  Node: Dependencies (15),  Next: Commands (19),  Up: URL Handling (tlon-urlel)

20.1 Dependencies
=================

   • ‘tlon-core’
   • ‘transient’
   • ‘ffap’ (Find File At Point, built-in)
   • ‘linkchecker’ (External command-line tool)


File: tlon.info,  Node: Commands (19),  Next: Internal Functions and Variables (18),  Prev: Dependencies (15),  Up: URL Handling (tlon-urlel)

20.2 Commands
=============

* Menu:

* Check URLs in File::
* Get Archived URL::
* Replace URL Across Projects::
* Transient Menu: Transient Menu (14).


File: tlon.info,  Node: Check URLs in File,  Next: Get Archived URL,  Up: Commands (19)

20.2.1 Check URLs in File
-------------------------

The command ‘tlon-check-urls-in-file’ (Autoloaded) checks all URLs found
in a specified ‘FILE’ (or the current buffer's file) for dead links
using the external ‘linkchecker’ tool asynchronously.
  1. Identifies the input file.
  2. Extracts all URLs from the file using ‘tlon-get-urls-in-file’.
  3. Creates a temporary output file for the ‘linkchecker’ results.
  4. Constructs the ‘linkchecker’ command, specifying the output file
     and the list of URLs to check (with ‘--recursion-level=0’ to
     prevent checking linked pages).
  5. Starts the ‘linkchecker’ process asynchronously using
     ‘start-process-shell-command’.
  6. Sets a process sentinel:
        • When the process finishes (indicated by an event string
          starting with "finished"), it displays a completion message.
        • It then opens the temporary output file containing the
          ‘linkchecker’ results.
        • It enables ‘goto-address-mode’ in the results buffer, making
          URLs clickable.


File: tlon.info,  Node: Get Archived URL,  Next: Replace URL Across Projects,  Prev: Check URLs in File,  Up: Commands (19)

20.2.2 Get Archived URL
-----------------------

The command ‘tlon-get-archived’ (Autoloaded) constructs the Wayback
Machine URL for the latest archived version of a given ‘URL’ and copies
it to the kill ring.
  1. Prompts for the ‘URL’, defaulting to the URL at point
     (‘thing-at-point 'url t’).
  2. Formats the Wayback Machine URL as
     ‘https://web.archive.org/web/2/URL’.
  3. Copies the formatted URL to the kill ring using ‘kill-new’.
  4. Returns the archived URL string.


File: tlon.info,  Node: Replace URL Across Projects,  Next: Transient Menu (14),  Prev: Get Archived URL,  Up: Commands (19)

20.2.3 Replace URL Across Projects
----------------------------------

The command ‘tlon-replace-url-across-projects’ performs a
search-and-replace operation for URLs across all files within Tlön
content repositories (both originals and translations).
  1. Prompts for the ‘URL-DEAD’ (the URL to replace), defaulting to the
     URL at point.
  2. Prompts for the ‘URL-LIVE’ (the replacement URL).
  3. Gathers a list of all repository directories marked as ‘type’
     'content using ‘tlon-repo-lookup-all’.
  4. Recursively finds all files within these directories using
     ‘directory-files-recursively’.
  5. Iterates through each regular file:
        • Reads the file content into a temporary buffer.
        • Checks if ‘URL-DEAD’ exists in the buffer.
        • If found:
             • Increments a replacement counter.
             • Records the directory of the affected file.
             • Performs a global search-and-replace within the temporary
               buffer, replacing all occurrences of ‘URL-DEAD’ with
               ‘URL-LIVE’.
             • Writes the modified content back to the original file.
  6. After processing all files, displays a message indicating the total
     number of replacements made and the unique directories affected.


File: tlon.info,  Node: Transient Menu (14),  Prev: Replace URL Across Projects,  Up: Commands (19)

20.2.4 Transient Menu
---------------------

The command ‘tlon-url-menu’ (Autoloaded) activates a ‘transient’ menu
interface for URL-related operations.

   It provides the following options under the "" (main) group:
‘a’
     Get archived URL (‘tlon-get-archived’)
‘c’
     Check URLs in file (‘tlon-check-urls-in-file’)
‘v’
     Replace URL across projects (‘tlon-replace-url-across-projects’)


File: tlon.info,  Node: Internal Functions and Variables (18),  Prev: Commands (19),  Up: URL Handling (tlon-urlel)

20.3 Internal Functions and Variables
=====================================

This section lists non-interactive functions used internally or
potentially useful for advanced customization.

‘tlon-get-urls-in-file’
     Extracts a list of unique URLs from a given ‘FILE’ (or the current
     buffer's file).  It inserts the file content into a temporary
     buffer, searches for potential URLs using
     ‘browse-url-button-regexp’, validates them using ‘ffap-url-p’, and
     returns a list of unique URLs found.

‘tlon-get-urls-in-dir’
     Recursively finds all files with a specific ‘EXTENSION’ (defaulting
     to "md") within a given ‘DIR’ (defaulting to the current
     repository) and returns a combined list of all unique URLs found
     within those files by calling ‘tlon-get-urls-in-file’ on each.

‘tlon-save-list-of-urls’
     Takes a list of ‘URLS’, creates a temporary file, writes the URLs
     (one per line) prefixed with a ‘# LinkChecker URL list’ header, and
     returns the path to the temporary file.  (Note: This function seems
     unused within the current module).


File: tlon.info,  Node: Word Counting and Statistics (tlon-countel),  Next: Indices,  Prev: URL Handling (tlon-urlel),  Up: Top

21 Word Counting and Statistics (‘tlon-count.el’)
*************************************************

This module provides functionality for counting words in files,
directories, and repositories, as well as counting occurrences of BibTeX
keys.  It includes features for generating reports, exporting data to
Google Drive, and calculating historical word counts (requires external
tools).

* Menu:

* Dependencies: Dependencies (16).
* Configuration: Configuration (6).
* Commands: Commands (20).
* Internal Functions and Variables: Internal Functions and Variables (19).


File: tlon.info,  Node: Dependencies (16),  Next: Configuration (6),  Up: Word Counting and Statistics (tlon-countel)

21.1 Dependencies
=================

   • ‘tlon-md’
   • ‘tlon-yaml’
   • ‘dired’, ‘dired-x’ (for file selection and interaction)
   • ‘transient’ (for the menu)
   • ‘gdrive’ (external CLI tool, for Google Drive export)
   • ‘gdu’ (external CLI tool, for historic word count)
   • ‘gnuplot’ (external CLI tool, for historic word count)


File: tlon.info,  Node: Configuration (6),  Next: Commands (20),  Prev: Dependencies (16),  Up: Word Counting and Statistics (tlon-countel)

21.2 Configuration
==================

‘tlon-count-gdrive-directory-ids’
     An alist mapping language codes (e.g., "en", "es") to their
     corresponding Google Drive folder IDs.  Used by
     ‘tlon-count-export-to-google-drive’ to determine the upload
     destination.


File: tlon.info,  Node: Commands (20),  Next: Internal Functions and Variables (19),  Prev: Configuration (6),  Up: Word Counting and Statistics (tlon-countel)

21.3 Commands
=============

This section details the interactive commands provided by
‘tlon-count.el’.

* Menu:

* Word Counting::
* Org Table Generation and Export::
* BibTeX Key Counting::
* Historic Word Count::
* Transient Menu: Transient Menu (15).


File: tlon.info,  Node: Word Counting,  Next: Org Table Generation and Export,  Up: Commands (20)

21.3.1 Word Counting
--------------------

These commands calculate the number of "substantive" words (total words
minus words in YAML front matter and local variables sections) in
specified locations.  They share common optional arguments:

‘FORMAT’
     Determines the output format:
     ‘list’
          Returns a list of cons cells ‘((COUNT . FILENAME) ...)’.
     ‘count’
          Returns the total word count as a number.
     ‘summary’ (or any other value/nil)
          Displays a message like "%s words in %s files."  and copies
          the total count to the kill ring.
‘REGEXP’
     A regular expression (string) to filter filenames.  If nil,
     defaults to matching Markdown files (‘\\.md$’).

‘tlon-count-words-in-repo’
     Counts words in files matching ‘REGEXP’ within a specified Tlön
     repository.  Prompts for the ‘REPO-NAME’ (completing from
     translation repositories) if not provided.  Uses ‘tlon-repo-lookup’
     to find the directory and then calls ‘tlon-count-words-in-dir’
     recursively.

‘tlon-count-words-in-dir’
     Counts words in files matching ‘REGEXP’ within a specified
     directory ‘DIR’.  If ‘DIR’ is nil, tries to use the directory at
     point; otherwise, prompts for one.  If the optional ‘RECURSIVELY’
     argument is non-nil, it searches subdirectories as well.  Calls
     ‘tlon-count-words-in-files’ with the collected file list.

‘tlon-count-words-in-files’
     Counts words in a list of ‘FILES’.  If ‘FILES’ is nil, it attempts
     to use the files marked in the current Dired buffer
     (‘dired-get-marked-files’).  It iterates through each file,
     calculates the substantive word count using
     ‘tlon-count-substantive-words’, and returns the result based on the
     ‘FORMAT’ argument.


File: tlon.info,  Node: Org Table Generation and Export,  Next: BibTeX Key Counting,  Prev: Word Counting,  Up: Commands (20)

21.3.2 Org Table Generation and Export
--------------------------------------

‘tlon-count-create-table-for-dir’
     Creates an Org mode table summarizing word counts for Markdown
     files in a directory ‘DIR’.
       1. Prompts for ‘DIR’ (defaulting to the directory at point in
          Dired).
       2. Calls ‘tlon-count-words-in-dir’ with ‘FORMAT’ 'list to get the
          data.
       3. Determines the output Org file path using
          ‘tlon-count-get-table-output-path’ (typically in the ‘stats/’
          subdirectory of the ‘babel’ repo).
       4. Inserts the data into a new buffer as an Org table using
          ‘tlon-count-insert-table-from-list’ and saves it to the
          destination file.
       5. Exports the Org table to a TSV file using
          ‘tlon-count-export-org-table’.
       6. Exports the generated TSV file to the appropriate Google Drive
          folder using ‘tlon-count-export-to-google-drive’.

‘tlon-count-export-org-table’
     Exports the first Org table found in ‘FILE’ (or the current
     buffer's file) to a TSV file.  The destination TSV file path is
     derived from the source Org file path using
     ‘tlon-count-get-tsv-file’.  Uses ‘org-table-export’ with the
     "orgtbl-to-tsv" format.

‘tlon-count-export-to-google-drive’
     Exports a local ‘FILE’ (typically a TSV generated by
     ‘tlon-count-export-org-table’) to Google Drive.
       1. Determines the target language from the filename using
          ‘tlon-get-language-in-file’.
       2. Looks up the corresponding Google Drive folder ID in
          ‘tlon-count-gdrive-directory-ids’.
       3. Uses the external ‘gdrive’ command-line tool to upload the
          file to the specified parent folder ID.
       4. Opens the target Google Drive folder in the browser using
          ‘browse-url’.


File: tlon.info,  Node: BibTeX Key Counting,  Next: Historic Word Count,  Prev: Org Table Generation and Export,  Up: Commands (20)

21.3.3 BibTeX Key Counting
--------------------------

‘tlon-count-bibtex-keys-in-dir’
     Counts the occurrences of each BibTeX key (within ‘<Cite ...>’
     tags) across all non-hidden files in a directory ‘DIR’.
       1. Prompts for ‘DIR’ if not provided.
       2. If the optional prefix argument ‘RECURSIVE’ is non-nil,
          includes files in subdirectories.
       3. Gets the list of files using ‘tlon-get-files-in-dir’.
       4. Defines the pattern for BibTeX keys using
          ‘tlon-md-get-tag-pattern "Cite"’.
       5. Iterates through each file, extracting key counts into a hash
          table using ‘tlon-extract-bibkeys-from-file’.
       6. Merges the counts from each file into a total count hash table
          using ‘tlon-merge-key-counts’.
       7. Sorts the keys by count (descending) using
          ‘tlon-sort-key-counts’.
       8. Displays the sorted counts in a dedicated buffer ("_BibTeX Key
          Counts_") using ‘tlon-display-key-counts’.


File: tlon.info,  Node: Historic Word Count,  Next: Transient Menu (15),  Prev: BibTeX Key Counting,  Up: Commands (20)

21.3.4 Historic Word Count
--------------------------

‘tlon-historic-word-count’
     Computes and potentially visualizes the historic word count for a
     repository over a specified number of past days.  *Requires the
     external tools ‘gdu’ and ‘gnuplot’ to be installed.*
       1. Prompts for ‘REPO-NAME’ (completing from translation
          repositories).
       2. Prompts for the number of ‘DAYS’ into the past.
       3. Prompts for the average characters per word (‘CHARS-PER-WORD’,
          default 5.5).
       4. Executes an external shell script (‘count/historic-word-count’
          located in the ‘babel’ repo) which uses ‘gdu’ to get directory
          sizes over time and potentially ‘gnuplot’ to visualize the
          estimated word count (size / chars-per-word).
       5. Displays the script's output in the "*Directory Size*" buffer.


File: tlon.info,  Node: Transient Menu (15),  Prev: Historic Word Count,  Up: Commands (20)

21.3.5 Transient Menu
---------------------

The command ‘tlon-count-menu’ activates a ‘transient’ menu interface for
counting operations.

   It provides the following groups and commands:
   • *Count words*:
     ‘w f’
          in file(s) (‘tlon-count-words-in-files’)
     ‘w d’
          in dir (‘tlon-count-words-in-dir’)
     ‘w r’
          in repo (‘tlon-count-words-in-repo’)
     ‘w t’
          Create table for dir (‘tlon-count-create-table-for-dir’)
   • *Count BibTeX keys*:
     ‘k d’
          in dir (‘tlon-count-bibtex-keys-in-dir’)


File: tlon.info,  Node: Internal Functions and Variables (19),  Prev: Commands (20),  Up: Word Counting and Statistics (tlon-countel)

21.4 Internal Functions and Variables
=====================================

This section lists non-interactive functions used internally or
potentially useful for advanced customization.

* Menu:

* Word Count Filtering::
* Org Table and Export Helpers::
* BibTeX Key Counting Helpers::


File: tlon.info,  Node: Word Count Filtering,  Next: Org Table and Export Helpers,  Up: Internal Functions and Variables (19)

21.4.1 Word Count Filtering
---------------------------

‘tlon-count-substantive-words’
     Calculates the number of "substantive" words in the current buffer.
     It does this by taking the total word count (‘count-words’) and
     subtracting the count of "extraneous" words calculated by
     ‘tlon-count-extraneous-words’.

‘tlon-count-extraneous-words’
     Calculates the number of "extraneous" words in the current buffer.
     These are defined as words within the YAML front matter section
     (retrieved via ‘tlon-yaml-get-metadata’) and the local variables
     section (retrieved via ‘tlon-md-get-local-variables’).


File: tlon.info,  Node: Org Table and Export Helpers,  Next: BibTeX Key Counting Helpers,  Prev: Word Count Filtering,  Up: Internal Functions and Variables (19)

21.4.2 Org Table and Export Helpers
-----------------------------------

‘tlon-count-insert-table-from-list’
     Takes a ‘LIST’ of cons cells ‘((COUNT . FILENAME) ...)’ and inserts
     it as an Org mode table into a new buffer ("*Tlön stats*").  If
     ‘DESTINATION’ file path is provided, saves the buffer to that file.

‘tlon-count-get-table-output-path’
     Constructs the full path for the output Org table file based on the
     input directory ‘DIR’.  The target directory is ‘stats/’ within the
     ‘babel’ repository, and the filename is derived from the base name
     of ‘DIR’ with an ‘.org’ extension.

‘tlon-count-get-tsv-file’
     Constructs the full path for the output TSV file based on the input
     Org ‘FILE’ path.  The TSV file is placed in the same directory as
     the Org file, with the same base name but a ‘.tsv’ extension.


File: tlon.info,  Node: BibTeX Key Counting Helpers,  Prev: Org Table and Export Helpers,  Up: Internal Functions and Variables (19)

21.4.3 BibTeX Key Counting Helpers
----------------------------------

‘tlon-get-files-in-dir’
     Returns a list of all non-hidden files in ‘DIR’.  If ‘RECURSIVE’ is
     non-nil, includes files in subdirectories.  Excludes directories
     themselves from the list.

‘tlon-extract-bibkeys-from-file’
     Reads a ‘FILE’, searches for occurrences matching the
     ‘BIBKEY-PATTERN’ (regex for ‘<Cite ...>’), extracts the BibTeX key
     (match group 3), and returns a hash table mapping keys to their
     counts within that file.

‘tlon-merge-key-counts’
     Merges the key counts from ‘HASH-TABLE2’ into ‘HASH-TABLE1’.  If a
     key exists in both, their counts are added.  Modifies and returns
     ‘HASH-TABLE1’.

‘tlon-sort-key-counts’
     Converts a ‘KEY-COUNTS’ hash table into a list of cons cells ‘((KEY
     . COUNT) ...)’ and sorts it in descending order based on the count
     (CDR).

‘tlon-display-key-counts’
     Takes a ‘SORTED-KEYS’ list (as returned by ‘tlon-sort-key-counts’)
     and displays it in a formatted way (count followed by key) in the
     dedicated "_BibTeX Key Counts_" buffer.


File: tlon.info,  Node: Indices,  Prev: Word Counting and Statistics (tlon-countel),  Up: Top

22 Indices
**********

* Menu:

* Function index::
* Variable index::
* Concept index::


File: tlon.info,  Node: Function index,  Next: Variable index,  Up: Indices

22.1 Function index
===================

 [index ]
* Menu:

* bibtex-extras-escape-special-characters: Entry Management.   (line 43)
* tlon-abstract-cleanup:                 Abstract Fetching Helpers.
                                                               (line 29)
* tlon-abstract-may-proceed-p:           Abstract Fetching Helpers.
                                                               (line 21)
* tlon-add-abstract-translation:         Abstract Translation Helpers.
                                                               (line 12)
* tlon-add-author-metadata:              Temporary Utility Functions.
                                                               (line 17)
* tlon-add-counterpart-metadata:         Temporary Utility Functions.
                                                               (line 10)
* tlon-add-database-field:               Entry Management.     (line 21)
* tlon-add-lang-id-to-entries:           Entry Management.     (line 38)
* tlon-add-local-abbreviation:           Reporting and Data Editing.
                                                               (line 24)
* tlon-add-local-replacement:            Reporting and Data Editing.
                                                               (line 29)
* tlon-add-or-update-tlon-field:         Entry Management Helpers.
                                                               (line  6)
* tlon-add-or-update-tlon-field-in-file: Entry Management Helpers.
                                                               (line  9)
* tlon-ai-convert-math:                  Mathematical Expression Handling.
                                                               (line  6)
* tlon-ai-create-reference-article:      Writing Reference Articles.
                                                               (line  6)
* tlon-ai-describe-image:                Image Description.    (line  6)
* tlon-ai-fix-encoding-in-buffer:        Fixing Encoding Errors.
                                                               (line 16)
* tlon-ai-fix-encoding-in-string:        Fixing Encoding Errors.
                                                               (line  6)
* tlon-ai-fix-markdown-format:           Fixing Markdown Formatting.
                                                               (line  6)
* tlon-ai-join-files:                    Fixing Encoding Errors.
                                                               (line 22)
* tlon-ai-menu:                          Transient Menu.       (line  6)
* tlon-ai-phonetically-transcribe:       Phonetic Transcription.
                                                               (line  6)
* tlon-ai-proofread-reference-article:   Proofreading Reference Articles.
                                                               (line  6)
* tlon-ai-propagate-changes:             Propagating Changes Across Repositories.
                                                               (line  6)
* tlon-ai-rewrite:                       Rewriting Text.       (line  6)
* tlon-ai-set-image-alt-text:            Setting Image Alt Text.
                                                               (line  6)
* tlon-ai-set-image-alt-text-in-buffer:  Setting Image Alt Text.
                                                               (line 17)
* tlon-ai-set-language-bibtex:           Setting Language in BibTeX Entries.
                                                               (line  6)
* tlon-ai-translate:                     Translation Variants. (line  6)
* tlon-ai-translate-math:                Mathematical Expression Handling.
                                                               (line 15)
* tlon-api-copy-token:                   Authentication Token. (line  6)
* tlon-api-get-citation:                 Citation Retrieval.   (line  6)
* tlon-api-get-citation-json:            Citation Retrieval.   (line 18)
* tlon-api-get-citation-url:             Citation Retrieval.   (line 14)
* tlon-api-get-credentials:              Authentication.       (line 13)
* tlon-api-get-routes:                   Route Handling.       (line  6)
* tlon-api-get-token:                    Authentication.       (line  6)
* tlon-api-menu:                         Transient Menu (1).   (line  6)
* tlon-api-open-local-log:               Log Handling.         (line 12)
* tlon-api-open-most-recent-log:         Log Handling.         (line  6)
* tlon-api-print-response:               Response and Log Processing.
                                                               (line  6)
* tlon-api-request:                      Make API Request.     (line  6)
* tlon-api-request-force:                Make API Request.     (line 21)
* tlon-assignee-is-current-user-p:       Validation and Checks.
                                                               (line  6)
* tlon-auto-add-database-field:          Entry Management.     (line 26)
* tlon-auto-classify-note-at-point:      Note Classification.  (line 17)
* tlon-auto-classify-notes-in-directory: Note Classification.  (line 25)
* tlon-auto-classify-notes-in-file:      Note Classification.  (line 22)
* tlon-auto-clean-entry:                 Entry Management.     (line 31)
* tlon-autokey-get-names:                Autokey Generation.   (line 16)
* tlon-autokey-get-title:                Autokey Generation.   (line 22)
* tlon-autokey-get-year:                 Autokey Generation.   (line 19)
* tlon-bibliography-lookup:              URL and Bibliography Helpers.
                                                               (line 15)
* tlon-capture-all-issues:               Capturing Issues as TODOs.
                                                               (line 23)
* tlon-capture-all-issues-after-pull:    Capture and Reconciliation Helpers.
                                                               (line 10)
* tlon-capture-handle-assignee:          Capture and Reconciliation Helpers.
                                                               (line 17)
* tlon-capture-handle-phase:             Capture and Reconciliation Helpers.
                                                               (line 25)
* tlon-capture-issue:                    Capturing Issues as TODOs.
                                                               (line  6)
* tlon-check-label-and-assignee:         Validation and Checks.
                                                               (line 12)
* tlon-check-urls-in-file:               Check URLs in File.   (line  6)
* tlon-classify-note-at-point:           Note Classification.  (line 28)
* tlon-clone-missing-repos:              Version Control (VC) Operations.
                                                               (line 18)
* tlon-clone-repo:                       Version Control (VC) Operations.
                                                               (line 11)
* tlon-close-issue:                      Issue and TODO Modification.
                                                               (line 13)
* tlon-close-issue-and-todo:             Closing Issues and TODOs.
                                                               (line  6)
* tlon-close-issue-number:               Issue and TODO Modification.
                                                               (line 16)
* tlon-color-change-hue-at-point:        Color Manipulation Commands.
                                                               (line 17)
* tlon-color-change-lightness-at-point:  Color Manipulation Commands.
                                                               (line 33)
* tlon-color-change-saturation-at-point: Color Manipulation Commands.
                                                               (line 25)
* tlon-color-change-step-infix:          Transient Infix Commands.
                                                               (line 13)
* tlon-color-change-value-at-point:      Helper Functions.     (line 53)
* tlon-color-decrease-hue-at-point:      Color Manipulation Commands.
                                                               (line 15)
* tlon-color-decrease-lightness-at-point: Color Manipulation Commands.
                                                               (line 31)
* tlon-color-decrease-saturation-at-point: Color Manipulation Commands.
                                                               (line 23)
* tlon-color-delete-palette:             Delete Color Palette. (line  6)
* tlon-color-encode:                     Helper Functions.     (line 27)
* tlon-color-encode-frontend-variables:  Helper Functions.     (line 37)
* tlon-color-encode-globals-css:         Helper Functions.     (line 31)
* tlon-color-encode-theme-colors-js:     Helper Functions.     (line 34)
* tlon-color-format-in-frontend-files-infix: Transient Infix Commands.
                                                               (line  9)
* tlon-color-increase-hue-at-point:      Color Manipulation Commands.
                                                               (line 13)
* tlon-color-increase-lightness-at-point: Color Manipulation Commands.
                                                               (line 29)
* tlon-color-increase-saturation-at-point: Color Manipulation Commands.
                                                               (line 21)
* tlon-color-insert-colors-section:      Helper Functions.     (line 20)
* tlon-color-load-palette:               Load Color Palette.   (line  6)
* tlon-color-load-palettes:              Helper Functions.     (line 10)
* tlon-color-menu:                       Color Menu.           (line  6)
* tlon-color-open-globals-file:          Open Global CSS File. (line  6)
* tlon-color-parse-css:                  Helper Functions.     (line 42)
* tlon-color-parse-css-theme:            Helper Functions.     (line 47)
* tlon-color-read-palette:               Helper Functions.     (line  6)
* tlon-color-remove-colors-section:      Helper Functions.     (line 17)
* tlon-color-save-frontend-files:        Save Frontend Files.  (line  6)
* tlon-color-save-palettes-to-file:      Helper Functions.     (line 14)
* tlon-color-store-palette:              Store Color Palette.  (line  6)
* tlon-contacts-copy-property-value:     Copy Property Value.  (line  6)
* tlon-contacts-create:                  Create Contact.       (line  6)
* tlon-contacts-define-property-edit-commands: Dynamically Defined Edit Commands.
                                                               (line  6)
* tlon-contacts-edit-one-property:       Edit Single Property. (line  6)
* tlon-contacts-edit-properties:         Edit Contact Properties.
                                                               (line  6)
* tlon-contacts-get-contact-name:        Internal Functions and Variables (5).
                                                               (line 39)
* tlon-contacts-get-file:                Internal Functions and Variables (5).
                                                               (line  9)
* tlon-contacts-get-nonempty-properties: Internal Functions and Variables (5).
                                                               (line 33)
* tlon-contacts-get-property-value:      Internal Functions and Variables (5).
                                                               (line 20)
* tlon-contacts-get-property-value-of-contact: Internal Functions and Variables (5).
                                                               (line 27)
* tlon-contacts-get-role:                Internal Functions and Variables (5).
                                                               (line 44)
* tlon-contacts-insert-name:             Internal Functions and Variables (5).
                                                               (line 15)
* tlon-contacts-menu:                    Transient Menu (3).   (line  6)
* tlon-contacts-select-role:             Internal Functions and Variables (5).
                                                               (line 48)
* tlon-convert-bibliography-to-cite:     Citation Conversion and Replacement.
                                                               (line 13)
* tlon-convert-links-to-cite:            Citation Conversion and Replacement.
                                                               (line  6)
* tlon-copy-buffer:                      Utility Functions.    (line 11)
* tlon-copy-dwim:                        Copy Region or Buffer.
                                                               (line  6)
* tlon-copy-region:                      Utility Functions.    (line 15)
* tlon-count-bibtex-keys-in-dir:         BibTeX Key Counting.  (line  6)
* tlon-count-create-table-for-dir:       Org Table Generation and Export.
                                                               (line  6)
* tlon-count-export-org-table:           Org Table Generation and Export.
                                                               (line 24)
* tlon-count-export-to-google-drive:     Org Table Generation and Export.
                                                               (line 31)
* tlon-count-extraneous-words:           Word Count Filtering. (line 12)
* tlon-count-get-table-output-path:      Org Table and Export Helpers.
                                                               (line 11)
* tlon-count-get-tsv-file:               Org Table and Export Helpers.
                                                               (line 17)
* tlon-count-insert-table-from-list:     Org Table and Export Helpers.
                                                               (line  6)
* tlon-count-issues:                     Issue and TODO Data Retrieval.
                                                               (line 29)
* tlon-count-menu:                       Transient Menu (15).  (line  6)
* tlon-count-paragraphs:                 Paragraph Operations. (line  6)
* tlon-count-substantive-words:          Word Count Filtering. (line  6)
* tlon-count-words-in-dir:               Word Counting.        (line 30)
* tlon-count-words-in-files:             Word Counting.        (line 37)
* tlon-count-words-in-repo:              Word Counting.        (line 23)
* tlon-counterpart-menu:                 Transient Menu (4).   (line  6)
* tlon-create-and-visit-issue:           Issue Handling Helpers.
                                                               (line 19)
* tlon-create-entry:                     Glossary Data Handling.
                                                               (line 25)
* tlon-create-heading-for-job:           Create Heading in jobsorg.
                                                               (line  6)
* tlon-create-issue:                     Miscellaneous Helpers.
                                                               (line 16)
* tlon-create-issue-from-todo:           Creating Issues and TODOs.
                                                               (line  6)
* tlon-create-issue-in-dir:              Miscellaneous Helpers.
                                                               (line 18)
* tlon-create-issue-or-todo:             Creating Issues and TODOs.
                                                               (line 24)
* tlon-create-job:                       Create Job.           (line  6)
* tlon-create-job-todo-from-issue:       Capture and Reconciliation Helpers.
                                                               (line 30)
* tlon-create-or-visit-group-meeting-issue: Create or Visit Meeting Issues.
                                                               (line 20)
* tlon-create-or-visit-individual-meeting-issue: Create or Visit Meeting Issues.
                                                               (line 13)
* tlon-create-or-visit-meeting-issue:    Create or Visit Meeting Issues.
                                                               (line  6)
* tlon-create-or-visit-meeting-issue-date: Issue Handling Helpers.
                                                               (line  6)
* tlon-create-or-visit-meeting-issue-fede-leo: Create or Visit Meeting Issues.
                                                               (line 36)
* tlon-create-or-visit-meeting-issue-fede-pablo: Create or Visit Meeting Issues.
                                                               (line 32)
* tlon-create-or-visit-meeting-issue-leo-pablo: Create or Visit Meeting Issues.
                                                               (line 26)
* tlon-create-record-for-job:            Create Job Record.    (line  6)
* tlon-create-repo:                      Version Control (VC) Operations.
                                                               (line  6)
* tlon-current-window-line:              Helper Functions (3). (line 24)
* tlon-deepl-diff:                       Utility Commands.     (line  6)
* tlon-deepl-fix-encoding:               Helper Functions (1). (line 19)
* tlon-deepl-fix-encoding-persistent:    Utility Commands.     (line 12)
* tlon-deepl-get-glossaries:             Glossaries.           (line 12)
* tlon-deepl-get-language-glossary:      Helper Functions (1). (line 13)
* tlon-deepl-get-list-of-glossaries:     Helper Functions (1). (line  6)
* tlon-deepl-glossary-create:            Glossaries.           (line 20)
* tlon-deepl-glossary-create-callback:   Callbacks.            (line 12)
* tlon-deepl-glossary-create-encode:     Payload Encoders & Formatters.
                                                               (line 14)
* tlon-deepl-glossary-delete:            Glossaries.           (line 33)
* tlon-deepl-glossary-delete-callback:   Callbacks.            (line 22)
* tlon-deepl-glossary-delete-formatter:  Payload Encoders & Formatters.
                                                               (line 21)
* tlon-deepl-glossary-get-callback:      Callbacks.            (line 17)
* tlon-deepl-menu:                       Transient Menu (5).   (line  6)
* tlon-deepl-print-translation:          Callbacks.            (line  6)
* tlon-deepl-request-wrapper:            API Request Handling. (line  6)
* tlon-deepl-select-glossary:            Glossaries.           (line  6)
* tlon-deepl-translate:                  Translation.          (line  6)
* tlon-deepl-translate-abstract:         Translation.          (line 25)
* tlon-deepl-translate-encode:           Payload Encoders & Formatters.
                                                               (line  6)
* tlon-delete-local-repo:                Version Control (VC) Operations.
                                                               (line 25)
* tlon-dict-menu:                        Transient Menu (6).   (line  6)
* tlon-discuss-issue-in-meeting:         Linking Issues for Discussion.
                                                               (line  6)
* tlon-display-corresponding-paragraphs: Paragraph Operations. (line 11)
* tlon-display-key-counts:               BibTeX Key Counting Helpers.
                                                               (line 27)
* tlon-edit-glossary:                    Edit Glossary Entry.  (line  6)
* tlon-edit-translation-in-entry:        Glossary Data Handling.
                                                               (line 31)
* tlon-edit-yaml-field:                  YAML Front Matter.    (line  6)
* tlon-ensure-markdown-mode:             Miscellaneous Helpers (1).
                                                               (line  6)
* tlon-extract-bibkeys-from-file:        BibTeX Key Counting Helpers.
                                                               (line 11)
* tlon-extract-glossary:                 Extract Glossary.     (line  6)
* tlon-fetch-abstract-from-crossref:     Abstract Fetching Helpers.
                                                               (line 14)
* tlon-fetch-abstract-from-google-books: Abstract Fetching Helpers.
                                                               (line 17)
* tlon-fetch-abstract-with-zotra:        Abstract Fetching Helpers.
                                                               (line  6)
* tlon-fetch-and-set-abstract:           Abstract Management.  (line  6)
* tlon-fetch-field-with-zotra:           Abstract Fetching Helpers.
                                                               (line 26)
* tlon-fetch-url-from-doi:               Abstract Fetching Helpers.
                                                               (line 11)
* tlon-find-entry-by-term:               Glossary Data Handling.
                                                               (line 16)
* tlon-find-headline-substring-in-file:  File Path Management. (line 27)
* tlon-fix-source-filename-paths:        Response and Log Processing.
                                                               (line 20)
* tlon-forg-change-assignee:             Capture and Reconciliation Helpers.
                                                               (line 22)
* tlon-forg-get-labels:                  Issue and TODO Data Retrieval.
                                                               (line 45)
* tlon-forg-menu:                        Transient Menu (7).   (line  6)
* tlon-forg-sort-by-tag:                 Sorting Org Entries.  (line  6)
* tlon-forg-tag-sorter:                  Miscellaneous Helpers.
                                                               (line 12)
* tlon-forg-when-reconciling-infix:      Miscellaneous Helpers.
                                                               (line 31)
* tlon-forge-menu:                       Internal Functions and Variables (14).
                                                               (line 23)
* tlon-forge-search:                     Forge Integration.    (line 23)
* tlon-forge-track-missing-repos:        Forge Integration.    (line 12)
* tlon-forge-track-repo:                 Forge Integration.    (line  6)
* tlon-generate-autokey:                 Autokey Generation.   (line 10)
* tlon-get-abstract-with-ai:             Generating Abstracts and Synopses.
                                                               (line 14)
* tlon-get-abstract-with-ai-from-html:   Generating Abstracts and Synopses.
                                                               (line 47)
* tlon-get-abstract-with-ai-from-pdf:    Generating Abstracts and Synopses.
                                                               (line 42)
* tlon-get-abstract-with-or-without-ai:  Generating Abstracts and Synopses.
                                                               (line  8)
* tlon-get-archived:                     Get Archived URL.     (line  6)
* tlon-get-assignee:                     Issue and TODO Data Retrieval.
                                                               (line 43)
* tlon-get-clock:                        Getting Clock Information.
                                                               (line  6)
* tlon-get-clock-action:                 Getting Clock Information.
                                                               (line 25)
* tlon-get-clock-file:                   Getting Clock Information.
                                                               (line 15)
* tlon-get-clock-issue:                  Getting Clock Information.
                                                               (line 20)
* tlon-get-clock-key:                    Getting Clock Information.
                                                               (line 10)
* tlon-get-clock-label:                  Getting Clock Information.
                                                               (line 32)
* tlon-get-clock-next-label:             Getting Clock Information.
                                                               (line 37)
* tlon-get-content-subtype:              Finding Counterparts. (line 48)
* tlon-get-corresponding-paragraphs:     Paragraph Handling Logic.
                                                               (line 36)
* tlon-get-counterpart:                  Finding Counterparts. (line  6)
* tlon-get-counterpart-dir:              Finding Counterparts. (line 22)
* tlon-get-counterpart-in-originals:     Counterpart Finding Logic.
                                                               (line 12)
* tlon-get-counterpart-in-translations:  Counterpart Finding Logic.
                                                               (line  6)
* tlon-get-counterpart-language:         Finding Counterparts. (line 38)
* tlon-get-counterpart-repo:             Finding Counterparts. (line 30)
* tlon-get-element:                      Issue and TODO Data Retrieval.
                                                               (line 50)
* tlon-get-element-from-heading:         Issue and TODO Data Retrieval.
                                                               (line 13)
* tlon-get-english-terms:                Glossary Data Handling.
                                                               (line 11)
* tlon-get-field-in-bibliography:        URL and Bibliography Helpers.
                                                               (line 20)
* tlon-get-file-from-issue:              Issue and TODO Data Retrieval.
                                                               (line 68)
* tlon-get-files-in-dir:                 BibTeX Key Counting Helpers.
                                                               (line  6)
* tlon-get-first-element:                Issue and TODO Data Retrieval.
                                                               (line 53)
* tlon-get-first-label:                  Issue and TODO Data Retrieval.
                                                               (line 56)
* tlon-get-issue:                        Issue and TODO Data Retrieval.
                                                               (line  6)
* tlon-get-issue-buffer:                 Issue and TODO Data Retrieval.
                                                               (line 10)
* tlon-get-issue-link:                   Issue and TODO Data Retrieval.
                                                               (line 62)
* tlon-get-issue-name:                   Issue and TODO Data Retrieval.
                                                               (line 60)
* tlon-get-issue-number-from-heading:    Issue and TODO Data Retrieval.
                                                               (line 15)
* tlon-get-issue-number-from-open-issues: Issue and TODO Data Retrieval.
                                                               (line 20)
* tlon-get-issues:                       Issue and TODO Data Retrieval.
                                                               (line 23)
* tlon-get-labels-of-type:               Issue and TODO Data Retrieval.
                                                               (line 31)
* tlon-get-latest-issue:                 Issue and TODO Data Retrieval.
                                                               (line 26)
* tlon-get-local-repos:                  Internal Functions and Variables (14).
                                                               (line  9)
* tlon-get-meeting-repo:                 Repository and User Helpers.
                                                               (line 12)
* tlon-get-missing-urls:                 URL and Bibliography Helpers.
                                                               (line  6)
* tlon-get-note-type:                    Note Handling.        (line 27)
* tlon-get-number-of-paragraphs:         Paragraph Handling Logic.
                                                               (line 30)
* tlon-get-parent-todo:                  Issue and TODO Data Retrieval.
                                                               (line 71)
* tlon-get-phase-in-issue:               Issue and TODO Data Retrieval.
                                                               (line 41)
* tlon-get-phase-in-labels:              Issue and TODO Data Retrieval.
                                                               (line 39)
* tlon-get-repo-from-heading:            Issue and TODO Data Retrieval.
                                                               (line 17)
* tlon-get-state:                        Issue and TODO Data Retrieval.
                                                               (line 58)
* tlon-get-status-in-issue:              Issue and TODO Data Retrieval.
                                                               (line 34)
* tlon-get-status-in-todo:               Issue and TODO Data Retrieval.
                                                               (line 37)
* tlon-get-synopsis-with-ai:             Generating Abstracts and Synopses.
                                                               (line 35)
* tlon-get-tag-at-point:                 Tag Handling Logic.   (line 47)
* tlon-get-tag-attribute-names:          Tag Handling Logic.   (line 54)
* tlon-get-tag-attribute-values:         Tag Handling Logic.   (line 57)
* tlon-get-tag-groups:                   Tag Handling Logic.   (line 50)
* tlon-get-tags-in-todo:                 Issue and TODO Data Retrieval.
                                                               (line 47)
* tlon-get-todo-position:                File Path Management. (line 21)
* tlon-get-todo-position-from-issue:     File Path Management. (line 30)
* tlon-get-todos-file-from-issue:        File Path Management. (line 18)
* tlon-get-todos-generic-file:           File Path Management. (line 15)
* tlon-get-todos-jobs-file:              File Path Management. (line 12)
* tlon-get-urls-in-dir:                  Internal Functions and Variables (18).
                                                               (line 16)
* tlon-get-urls-in-file:                 URL and Bibliography Helpers.
                                                               (line 11)
* tlon-get-urls-in-file <1>:             Internal Functions and Variables (18).
                                                               (line  9)
* tlon-gh-get-issue-fields:              GitHub Project Integration (Experimental).
                                                               (line 10)
* tlon-gh-parse-issue-fields:            GitHub Project Integration (Experimental).
                                                               (line 14)
* tlon-git-crypt-unlock:                 Git Crypt.            (line  6)
* tlon-glossary-commit:                  Git Integration (Currently Unused/TODO).
                                                               (line 10)
* tlon-glossary-make-file:               Glossary Extraction Formatting.
                                                               (line 12)
* tlon-glossary-menu:                    Glossary Menu.        (line  6)
* tlon-glossary-prompt-for-explanation:  Git Integration (Currently Unused/TODO).
                                                               (line  6)
* tlon-glossary-target-path:             Glossary Extraction Formatting.
                                                               (line  6)
* tlon-goto-meeting-when-clocking-in:    Org Mode Integration. (line 15)
* tlon-highlight-corresponding-sentence: Sentence Highlighting (Experimental/Unused).
                                                               (line 10)
* tlon-historic-word-count:              Historic Word Count.  (line  6)
* tlon-html-insert-quote:                Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 16)
* tlon-html-insert-subscript:            Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 12)
* tlon-html-insert-superscript:          Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 14)
* tlon-images-auto-process:              Auto Process Image.   (line  6)
* tlon-images-brightness-reduction-infix: Transient Infix Commands (1).
                                                               (line  9)
* tlon-images-can-invert-p:              InvertOrNot API Integration.
                                                               (line 24)
* tlon-images-get-themed-file-name:      Helper Functions (2). (line 28)
* tlon-images-handle-output:             Helper Functions (2). (line 23)
* tlon-images-handle-synchronous-response: InvertOrNot API Integration.
                                                               (line 19)
* tlon-images-invert-colors:             Invert Image Colors.  (line  6)
* tlon-images-make-nontransparent:       Make Image Non-Transparent.
                                                               (line  6)
* tlon-images-maybe-open-after-processing: Helper Functions (2).
                                                               (line 33)
* tlon-images-menu:                      Transient Menu (8).   (line  6)
* tlon-images-post-file-to-invertornot:  InvertOrNot API Integration.
                                                               (line  9)
* tlon-images-post-url-to-invertornot:   InvertOrNot API Integration.
                                                               (line 14)
* tlon-images-process-image:             Helper Functions (2). (line 12)
* tlon-images-read-image:                Helper Functions (2). (line  6)
* tlon-images-reduce-brightnesss:        Reduce Image Brightness.
                                                               (line  6)
* tlon-images-toggle-open-after-processing: Transient Infix Commands (1).
                                                               (line 14)
* tlon-images-toggle-process-without-asking: Transient Infix Commands (1).
                                                               (line 19)
* tlon-infix-toggle-include-archived:    Miscellaneous Helpers.
                                                               (line 33)
* tlon-insert-footnote-marker:           Note Classification.  (line  9)
* tlon-insert-formatted-glossary:        Glossary Extraction Formatting.
                                                               (line 16)
* tlon-insert-internal-link:             Links and Sorting.    (line  6)
* tlon-insert-note-marker:               Note Handling.        (line  6)
* tlon-insert-sidenote-marker:           Note Classification.  (line 13)
* tlon-insert-special-character:         Miscellaneous Commands.
                                                               (line  9)
* tlon-is-between-paragraphs-p:          Paragraph Handling Logic.
                                                               (line  6)
* tlon-issue-is-job-p:                   Capture and Reconciliation Helpers.
                                                               (line 28)
* tlon-jobs-act-on-issue:                Issue and TODO Interaction.
                                                               (line  6)
* tlon-jobs-finalize:                    Job Phase Logic.      (line 16)
* tlon-jobs-finalize-set-todos:          Issue and TODO Interaction.
                                                               (line 12)
* tlon-jobs-get-action-in-label:         Job Phase Logic.      (line  6)
* tlon-jobs-get-file:                    File and Path Management.
                                                               (line  6)
* tlon-jobs-get-key-in-heading:          jobsorg Helpers.      (line  6)
* tlon-jobs-get-next-assignee:           Job Phase Logic.      (line 21)
* tlon-jobs-goto-heading:                jobsorg Helpers.      (line 10)
* tlon-jobs-initialize:                  Job Phase Logic.      (line 10)
* tlon-jobs-initialize-check:            Job Phase Logic.      (line 41)
* tlon-jobs-initialize-processing:       Job Phase Logic.      (line 27)
* tlon-jobs-initialize-review:           Job Phase Logic.      (line 46)
* tlon-jobs-initialize-revision:         Job Phase Logic.      (line 37)
* tlon-jobs-initialize-translation:      Job Phase Logic.      (line 33)
* tlon-jobs-menu:                        Transient Menu (9).   (line  6)
* tlon-jobs-start-or-finish-phase:       Start or Finish Job Phase.
                                                               (line  6)
* tlon-list-all-todos:                   Miscellaneous.        (line 12)
* tlon-looking-at-tag-p:                 Tag Handling Logic.   (line 12)
* tlon-make-attribute-pattern-searchable: Tag Handling Logic.  (line 73)
* tlon-make-paths-clickable:             Response and Log Processing.
                                                               (line 26)
* tlon-make-todo-name-from-issue:        Issue and TODO Data Retrieval.
                                                               (line 64)
* tlon-mark-todo-done:                   Issue and TODO Modification.
                                                               (line 44)
* tlon-md-act-on-returned-tag:           Tag Handling Logic.   (line 32)
* tlon-md-beginning-of-buffer-dwim:      Miscellaneous Commands.
                                                               (line 13)
* tlon-md-beginning-of-content:          Miscellaneous Helpers (1).
                                                               (line  9)
* tlon-md-beginning-of-local-variables:  Miscellaneous Helpers (1).
                                                               (line 15)
* tlon-md-cite-bibkey-reader:            Attribute Readers.    (line  9)
* tlon-md-cite-length-reader:            Attribute Readers.    (line 13)
* tlon-md-cite-locator-reader:           Attribute Readers.    (line 11)
* tlon-md-edit-tag:                      Tag Handling Logic.   (line 15)
* tlon-md-emphasis-level-reader:         Attribute Readers.    (line 16)
* tlon-md-end-of-buffer-dwim:            Miscellaneous Commands.
                                                               (line 17)
* tlon-md-end-of-content:                Miscellaneous Helpers (1).
                                                               (line 12)
* tlon-md-end-of-metadata:               Miscellaneous Helpers (1).
                                                               (line 18)
* tlon-md-format-attribute-with-placeholder: Tag Handling Logic.
                                                               (line 70)
* tlon-md-format-tag:                    Tag Handling Logic.   (line 35)
* tlon-md-format-tag-with-attributes:    Tag Handling Logic.   (line 64)
* tlon-md-format-tag-with-attributes-from-user: Tag Handling Logic.
                                                               (line 77)
* tlon-md-get-local-variables:           Miscellaneous Helpers (1).
                                                               (line 21)
* tlon-md-get-metadata:                  Miscellaneous Helpers (1).
                                                               (line 23)
* tlon-md-get-note:                      Note Handling.        (line 10)
* tlon-md-get-note-beginning:            Note Handling.        (line 19)
* tlon-md-get-note-bounds:               Note Handling.        (line 14)
* tlon-md-get-note-end:                  Note Handling.        (line 24)
* tlon-md-get-tag-filled:                Tag Handling Logic.   (line 40)
* tlon-md-get-tag-pattern:               Tag Handling Logic.   (line 80)
* tlon-md-get-tag-section:               Tag Section Handling. (line  6)
* tlon-md-get-tag-to-fill:               Tag Handling Logic.   (line 43)
* tlon-md-get-title-in-link-target:      Link and Sorting Helpers.
                                                               (line  6)
* tlon-md-insert-attribute-value:        Tag Handling Logic.   (line 23)
* tlon-md-insert-or-edit-tag:            Tag Handling Logic.   (line  9)
* tlon-md-lang-reader:                   Attribute Readers.    (line 19)
* tlon-md-lookup-tag-attribute-property: Tag Handling Logic.   (line 61)
* tlon-md-math-display-reader:           Attribute Readers.    (line 21)
* tlon-md-menu:                          Miscellaneous Commands.
                                                               (line 21)
* tlon-md-phoneme-alphabet-reader:       Attribute Readers.    (line 24)
* tlon-md-read-content:                  Miscellaneous Helpers (1).
                                                               (line 25)
* tlon-md-replace-audio-voice-reader:    Attribute Readers.    (line 27)
* tlon-md-return-tag:                    Tag Handling Logic.   (line 26)
* tlon-md-say-as-interpret-as-reader:    Attribute Readers.    (line 30)
* tlon-md-set-tag-attribute-value:       Tag Handling Logic.   (line 20)
* tlon-md-simple-table-include-reader:   Attribute Readers.    (line 33)
* tlon-md-sort-elements-in-paragraph:    Link and Sorting Helpers.
                                                               (line  9)
* tlon-md-sort-related-entries:          Links and Sorting.    (line 12)
* tlon-mdx-insert-aside:                 Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 20)
* tlon-mdx-insert-cite:                  Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 22)
* tlon-mdx-insert-embedded:              Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 42)
* tlon-mdx-insert-figure:                Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 28)
* tlon-mdx-insert-language:              Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 31)
* tlon-mdx-insert-literal-link:          Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 34)
* tlon-mdx-insert-math:                  Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 37)
* tlon-mdx-insert-replace-audio:         Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 45)
* tlon-mdx-insert-romantlon-insert-mdx-roman: Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 49)
* tlon-mdx-insert-simple-table:          Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 58)
* tlon-mdx-insert-small-caps:            Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 52)
* tlon-mdx-insert-table:                 Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 55)
* tlon-mdx-insert-visually-hidden:       Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 62)
* tlon-mdx-insert-voice-role:            Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 64)
* tlon-meet--determine-repo:             Diarize and Summarize Helpers.
                                                               (line 29)
* tlon-meet--generate-summary:           Diarize and Summarize Helpers.
                                                               (line  6)
* tlon-meet--save-summary:               Diarize and Summarize Helpers.
                                                               (line 12)
* tlon-meet-diarize-and-summarize:       Recording Processing. (line  6)
* tlon-meet-menu:                        Transient Menu (10).  (line  6)
* tlon-merge-key-counts:                 BibTeX Key Counting Helpers.
                                                               (line 17)
* tlon-move-all-fluid-entries-to-stable: Entry Management.     (line 16)
* tlon-move-entry-to-fluid:              Entry Management.     (line  6)
* tlon-next-value:                       Utility Functions.    (line  6)
* tlon-note-automatic-type:              Note Handling.        (line 31)
* tlon-offset-timestamps:                Miscellaneous Commands.
                                                               (line  6)
* tlon-open-clock-file:                  Open Clocked Task's File.
                                                               (line  6)
* tlon-open-clock-issue:                 Open Clocked Task's Issue.
                                                               (line  6)
* tlon-open-counterpart:                 Opening Counterparts. (line  6)
* tlon-open-counterpart-dwim:            Opening Counterparts. (line 31)
* tlon-open-counterpart-in-dired:        Opening Counterparts. (line 25)
* tlon-open-counterpart-in-other-window-dwim: Opening Counterparts.
                                                               (line 39)
* tlon-open-forge-counterpart:           File Handling (Associated with Issues).
                                                               (line 12)
* tlon-open-forge-file:                  File Handling (Associated with Issues).
                                                               (line  6)
* tlon-open-todo:                        Miscellaneous Helpers.
                                                               (line  6)
* tlon-parse-glossary:                   Glossary Data Handling.
                                                               (line  6)
* tlon-phonetically-transcribe-in-buffer: Phonetic Transcription.
                                                               (line 16)
* tlon-prepopulate-bug-report-buffer:    Miscellaneous Helpers.
                                                               (line 21)
* tlon-prompt-for-all-other-users:       Repository and User Helpers.
                                                               (line  6)
* tlon-prompt-to-add-missing-urls:       URL Management.       (line  6)
* tlon-pull-issues-in-all-repos:         Forge Integration.    (line 18)
* tlon-pull-issues-in-repo:              Internal Functions and Variables (14).
                                                               (line 17)
* tlon-pull-silently:                    Capture and Reconciliation Helpers.
                                                               (line  6)
* tlon-read-abstract-translations:       Abstract Translation Helpers.
                                                               (line  6)
* tlon-reconcile-all-issues-and-todos:   Reconciling Issues and TODOs.
                                                               (line 24)
* tlon-reconcile-all-issues-and-todos-after-pull: Capture and Reconciliation Helpers.
                                                               (line 42)
* tlon-reconcile-issue-and-todo:         Reconciling Issues and TODOs.
                                                               (line  6)
* tlon-reconcile-issue-and-todo-from-issue: Capture and Reconciliation Helpers.
                                                               (line 46)
* tlon-reconcile-issue-and-todo-prompt:  Capture and Reconciliation Helpers.
                                                               (line 51)
* tlon-remove-empty-spaces:              Entry Management Helpers.
                                                               (line 12)
* tlon-remove-source-overlays:           Helper Functions (3). (line 21)
* tlon-replace-url-across-projects:      Replace URL Across Projects.
                                                               (line  6)
* tlon-report-bug:                       Miscellaneous.        (line  6)
* tlon-repos-menu:                       Transient Menu (11).  (line  6)
* tlon-reverso-get-synonyms:             Get Synonyms via Reverso.
                                                               (line  6)
* tlon-save-list-of-urls:                Internal Functions and Variables (18).
                                                               (line 22)
* tlon-search-commit-diffs:              Search Commit Diffs.  (line  6)
* tlon-search-commits:                   Search Commits.       (line  6)
* tlon-search-files:                     Search Files (Ripgrep).
                                                               (line  6)
* tlon-search-for-translation:           Search for Translation.
                                                               (line  6)
* tlon-search-menu:                      Search Menu.          (line  6)
* tlon-select-api-route:                 Route Handling.       (line 11)
* tlon-select-assignee:                  Issue and TODO Modification.
                                                               (line 32)
* tlon-select-term-type:                 Glossary Data Handling.
                                                               (line 21)
* tlon-sentence-highlight-offset-set:    Sentence Highlighting (Experimental/Unused).
                                                               (line 14)
* tlon-set-assignee:                     Issue and TODO Modification.
                                                               (line 29)
* tlon-set-initial-label-and-assignee:   Issue and TODO Modification.
                                                               (line 35)
* tlon-set-issue-number-in-heading:      Issue and TODO Modification.
                                                               (line 10)
* tlon-set-job-label:                    Issue and TODO Modification.
                                                               (line 23)
* tlon-set-labels:                       Issue and TODO Modification.
                                                               (line 19)
* tlon-set-meeting-buffers:              Org Mode Integration. (line  6)
* tlon-set-paths-from-clock:             Utility Functions.    (line 18)
* tlon-set-repo-in-heading:              Issue and TODO Modification.
                                                               (line  6)
* tlon-set-status:                       Issue and TODO Modification.
                                                               (line 26)
* tlon-set-windows:                      Utility Functions.    (line 24)
* tlon-share-glossary:                   Share Glossary.       (line  6)
* tlon-shorten-abstract-with-ai:         Generating Abstracts and Synopses.
                                                               (line 27)
* tlon-sort-key-counts:                  BibTeX Key Counting Helpers.
                                                               (line 22)
* tlon-split-align-paragraphs:           Manual Alignment.     (line 11)
* tlon-split-align-screen-lines:         Manual Alignment.     (line  6)
* tlon-split-align-sentences:            Manual Alignment.     (line 18)
* tlon-split-autoalign-paragraphs:       Helper Functions (3). (line 15)
* tlon-split-menu:                       Transient Menu (12).  (line  6)
* tlon-split-mode:                       Toggle Split Mode.    (line  6)
* tlon-split-mode-reset:                 Reset Split Mode Hook.
                                                               (line  6)
* tlon-split-screen-line-changed-p:      Helper Functions (3). (line  6)
* tlon-split-screen-line-offset:         Helper Functions (3). (line 12)
* tlon-split-top-of-buffer-visible-p:    Helper Functions (3). (line  9)
* tlon-store-master-job-todo:            Capture and Reconciliation Helpers.
                                                               (line 33)
* tlon-store-or-refile-job-todo:         Capture and Reconciliation Helpers.
                                                               (line 36)
* tlon-store-todo:                       Capture and Reconciliation Helpers.
                                                               (line 13)
* tlon-symbol-reader:                    Miscellaneous Helpers.
                                                               (line 23)
* tlon-tex-add-to-excluded-keys:         Reporting and Field Finding.
                                                               (line 19)
* tlon-tex-bibtex-set-field-advice:      Field Modification Advice.
                                                               (line 13)
* tlon-tex-create-translation-entry:     Translation Entry Creation.
                                                               (line  6)
* tlon-tex-do-replace-keys-with-citations: Citation Replacement Helpers.
                                                               (line  6)
* tlon-tex-ebib-set-field-advice:        Field Modification Advice.
                                                               (line 17)
* tlon-tex-entries-report:               Reporting and Field Finding.
                                                               (line  6)
* tlon-tex-field-modified:               Field Modification Advice.
                                                               (line  6)
* tlon-tex-find-next-entry-with-missing-field: Reporting and Field Finding.
                                                               (line 24)
* tlon-tex-load-excluded-keys:           Reporting Helpers.    (line  6)
* tlon-tex-menu:                         Transient Menu (2).   (line  6)
* tlon-tex-remove-braces:                Field Modification Advice.
                                                               (line 10)
* tlon-tex-replace-keys-with-citations:  Citation Conversion and Replacement.
                                                               (line 21)
* tlon-tex-replace-keys-with-citations-in-dir: Citation Conversion and Replacement.
                                                               (line 30)
* tlon-tex-save-excluded-keys:           Reporting Helpers.    (line  9)
* tlon-text-remove-translated-entries:   Reporting Helpers.    (line 12)
* tlon-todo-has-valid-status-p:          Validation and Checks.
                                                               (line  9)
* tlon-todo-issue-funcall:               Miscellaneous Helpers.
                                                               (line  8)
* tlon-toggle-automatic-highlighting:    Sentence Highlighting (Experimental/Unused).
                                                               (line 18)
* tlon-transcribe-audio:                 Audio Transcription.  (line  6)
* tlon-translate-abstract:               Abstract Management.  (line 22)
* tlon-translate-abstract-callback:      Abstract Translation Helpers.
                                                               (line 17)
* tlon-translate-abstracts:              Abstract Management.  (line 35)
* tlon-tts-add-listener-cues:            SSML and Text Processing Helpers.
                                                               (line 14)
* tlon-tts-amazon-polly-make-request:    Engine Request Functions.
                                                               (line  6)
* tlon-tts-append-silence-to-chunks:     Audio File Helpers.   (line 13)
* tlon-tts-append-silence-to-chunks-p:   Audio File Helpers.   (line 16)
* tlon-tts-break-into-chunks:            Chunking and Processing.
                                                               (line 13)
* tlon-tts-create-list-of-chunks:        Audio File Helpers.   (line 10)
* tlon-tts-delete-chunks-of-file:        Audio File Management.
                                                               (line 12)
* tlon-tts-edit-global-abbreviations:    Reporting and Data Editing.
                                                               (line 12)
* tlon-tts-edit-global-phonetic-replacements: Reporting and Data Editing.
                                                               (line 16)
* tlon-tts-edit-global-phonetic-transcriptions: Reporting and Data Editing.
                                                               (line 20)
* tlon-tts-elevenlabs-make-request:      Engine Request Functions.
                                                               (line  6)
* tlon-tts-generate-audio:               Chunking and Processing.
                                                               (line 20)
* tlon-tts-generate-report:              Reporting and Data Editing.
                                                               (line  6)
* tlon-tts-get-chunk-name:               Audio File Helpers.   (line  6)
* tlon-tts-get-list-of-chunks:           Audio File Helpers.   (line  8)
* tlon-tts-get-staging-buffer-name:      Staging Buffer and Preparation.
                                                               (line  6)
* tlon-tts-google-cloud-make-request:    Engine Request Functions.
                                                               (line  6)
* tlon-tts-insert-ssml-break:            Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 69)
* tlon-tts-insert-ssml-emphasis:         Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 72)
* tlon-tts-insert-ssml-lang:             Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 75)
* tlon-tts-insert-ssml-phoneme:          Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 78)
* tlon-tts-insert-ssml-say-as:           Tag Insertion/Editing (HTML MDX SSML).
                                                               (line 82)
* tlon-tts-join-chunks:                  Audio File Management.
                                                               (line  6)
* tlon-tts-menu:                         Transient Menu (13).  (line  6)
* tlon-tts-microsoft-azure-make-request: Engine Request Functions.
                                                               (line  6)
* tlon-tts-move-file-to-audio-server:    Audio File Management.
                                                               (line 22)
* tlon-tts-narrate-staged-content:       Core Workflow.        (line 14)
* tlon-tts-open-audio-directory:         Audio File Management.
                                                               (line 27)
* tlon-tts-openai-make-request:          Engine Request Functions.
                                                               (line  6)
* tlon-tts-prepare-chunks:               Chunking and Processing.
                                                               (line  6)
* tlon-tts-prepare-staging-buffer:       Staging Buffer and Preparation.
                                                               (line 12)
* tlon-tts-process-abbreviations:        SSML and Text Processing Helpers.
                                                               (line 28)
* tlon-tts-process-chunks:               Chunking and Processing.
                                                               (line 17)
* tlon-tts-process-formatting:           SSML and Text Processing Helpers.
                                                               (line 22)
* tlon-tts-process-listener-cues:        SSML and Text Processing Helpers.
                                                               (line 11)
* tlon-tts-process-notes:                SSML and Text Processing Helpers.
                                                               (line 19)
* tlon-tts-process-numerals:             SSML and Text Processing Helpers.
                                                               (line 25)
* tlon-tts-process-terms:                SSML and Text Processing Helpers.
                                                               (line 31)
* tlon-tts-process-unsupported-ssml-tags: SSML and Text Processing Helpers.
                                                               (line  6)
* tlon-tts-read-into-chunks:             Chunking and Processing.
                                                               (line  9)
* tlon-tts-set-file-local-vars:          Staging Buffer and Preparation.
                                                               (line  9)
* tlon-tts-stage-content:                Core Workflow.        (line  6)
* tlon-tts-truncate-audio-file:          Audio File Management.
                                                               (line 17)
* tlon-update-glossary:                  Glossary Data Handling.
                                                               (line 36)
* tlon-update-issue-from-todo:           Issue and TODO Modification.
                                                               (line 41)
* tlon-update-todo-from-issue:           Issue and TODO Modification.
                                                               (line 38)
* tlon-upload-file-to-server:            File Upload.          (line  6)
* tlon-url-menu:                         Transient Menu (14).  (line  6)
* tlon-visit-counterpart:                Counterpart Navigation.
                                                               (line  6)
* tlon-visit-counterpart-or-capture:     Counterpart Navigation.
                                                               (line 11)
* tlon-visit-issue:                      Visiting Issues and TODOs.
                                                               (line  6)
* tlon-visit-todo:                       Visiting Issues and TODOs.
                                                               (line 12)
* tlon-visit-todo-or-capture:            Visiting Issues and TODOs.
                                                               (line 17)
* tlon-wait-until-forge-updates:         Issue Handling Helpers.
                                                               (line 14)
* tlon-when-assignee-is-nil-infix:       Miscellaneous Helpers.
                                                               (line 26)
* tlon-when-assignee-is-someone-else-infix: Miscellaneous Helpers.
                                                               (line 28)
* tlon-with-paragraphs:                  Paragraph Handling Logic.
                                                               (line 11)
* tlon-write-abstract-translations:      Abstract Translation Helpers.
                                                               (line  9)


File: tlon.info,  Node: Variable index,  Next: Concept index,  Prev: Function index,  Up: Indices

22.2 Variable index
===================

 [index ]
* Menu:

* tlon-abstract-overwrite:               User Options (1).     (line  6)
* tlon-ai-auto-proofread:                Auto Proofread Reference Articles.
                                                               (line  6)
* tlon-ai-batch-fun:                     Batch Processing Function.
                                                               (line  6)
* tlon-ai-create-reference-article-model: Custom Models.       (line 28)
* tlon-ai-edit-prompt:                   Edit Prompt Before Sending.
                                                               (line  6)
* tlon-ai-markdown-fix-model:            Custom Models.        (line 23)
* tlon-ai-overwrite-alt-text:            Overwrite Image Alt Text.
                                                               (line  6)
* tlon-ai-proofread-reference-article-model: Custom Models.    (line 33)
* tlon-ai-summarization-model:           Custom Models.        (line 18)
* tlon-amazon-polly-audio-choices:       Configuration and Constants.
                                                               (line 13)
* tlon-amazon-polly-char-limit:          Configuration and Constants.
                                                               (line 19)
* tlon-amazon-polly-region:              Engine-Specific Settings.
                                                               (line 24)
* tlon-amazon-polly-request:             Configuration and Constants.
                                                               (line 16)
* tlon-amazon-polly-voices:              Configuration and Constants.
                                                               (line 10)
* tlon-api-local-url:                    Local API URL.        (line  6)
* tlon-api-most-recent-log-buffer:       Log Buffer Variable.  (line  6)
* tlon-color-format-in-frontend-files:   User Options (2).     (line  6)
* tlon-color-globals-css-file:           Constants and Variables.
                                                               (line 14)
* tlon-color-globals-css-footer:         Constants and Variables.
                                                               (line 21)
* tlon-color-globals-css-header:         Constants and Variables.
                                                               (line 19)
* tlon-color-globals-css-remove-pattern: Constants and Variables.
                                                               (line 23)
* tlon-color-palette-file:               Constants and Variables.
                                                               (line 12)
* tlon-color-palettes:                   Constants and Variables.
                                                               (line  6)
* tlon-color-theme-colors-js-file:       Constants and Variables.
                                                               (line 16)
* tlon-color-theme-colors-js-footer:     Constants and Variables.
                                                               (line 28)
* tlon-color-theme-colors-js-header:     Constants and Variables.
                                                               (line 26)
* tlon-colors-change-step:               User Options (2).     (line 12)
* tlon-contacts-file:                    Variables (2).        (line  6)
* tlon-contacts-id:                      Constants (1).        (line  6)
* tlon-contacts-properties:              Constants (1).        (line 11)
* tlon-contacts-property-values:         Constants (1).        (line 19)
* tlon-count-gdrive-directory-ids:       Configuration (6).    (line  6)
* tlon-deepl-glossaries:                 Internal State Variables.
                                                               (line  7)
* tlon-deepl-key:                        API Key and URL.      (line  6)
* tlon-deepl-parameters:                 API Call Parameters.  (line  6)
* tlon-deepl-source-language:            Internal State Variables.
                                                               (line 11)
* tlon-deepl-supported-glossary-languages: Supported Glossary Languages.
                                                               (line  6)
* tlon-deepl-target-language:            Internal State Variables.
                                                               (line 14)
* tlon-deepl-text:                       Internal State Variables.
                                                               (line 17)
* tlon-deepl-url-prefix:                 API Key and URL.      (line  9)
* tlon-default-conference-app:           User Options (6).     (line 23)
* tlon-elevenlabs-audio-choices:         Configuration and Constants.
                                                               (line 13)
* tlon-elevenlabs-char-limit:            Configuration and Constants.
                                                               (line 19)
* tlon-elevenlabs-key:                   Configuration and Constants.
                                                               (line 22)
* tlon-elevenlabs-model:                 Engine-Specific Settings.
                                                               (line 20)
* tlon-elevenlabs-tts-url:               Configuration and Constants.
                                                               (line 16)
* tlon-elevenlabs-voices:                Configuration and Constants.
                                                               (line 10)
* tlon-enable-automatic-highlighting:    State Variables.      (line 12)
* tlon-file-abstract-translations:       Constants.            (line  6)
* tlon-file-glossary-source:             Glossary Source File. (line  6)
* tlon-forg-enforce-user:                User Options (3).     (line 38)
* tlon-forg-gh-project-query:            Constants (2).        (line 14)
* tlon-forg-include-archived:            User Options (3).     (line 33)
* tlon-forg-sort-by-tags-regexp:         Constants (2).        (line 12)
* tlon-forg-when-reconciling:            User Options (3).     (line 23)
* tlon-gh-field-ids:                     Constants (2).        (line 17)
* tlon-glossary-recipients:              Glossary Recipients.  (line  6)
* tlon-google-cloud-audio-choices:       Configuration and Constants.
                                                               (line 13)
* tlon-google-cloud-char-limit:          Configuration and Constants.
                                                               (line 19)
* tlon-google-cloud-key:                 Configuration and Constants.
                                                               (line 22)
* tlon-google-cloud-request:             Configuration and Constants.
                                                               (line 16)
* tlon-google-cloud-voices:              Configuration and Constants.
                                                               (line 10)
* tlon-imagemagick-invert-colors:        ImageMagick Command Constants.
                                                               (line 11)
* tlon-imagemagick-make-nontransparent:  ImageMagick Command Constants.
                                                               (line 15)
* tlon-imagemagick-reduce-brightness:    ImageMagick Command Constants.
                                                               (line  6)
* tlon-images-default-brightness-reduction: User Options (4).  (line  6)
* tlon-images-open-after-processing:     User Options (4).     (line 11)
* tlon-images-process-without-asking:    User Options (4).     (line 18)
* tlon-invertornot-generic-endpoint:     InvertOrNot API Integration.
                                                               (line  6)
* tlon-job-labels:                       Job Labels and Phases.
                                                               (line  6)
* tlon-jobs-file:                        Jobs File Variable.   (line  6)
* tlon-jobs-id:                          Org ID Constants.     (line 11)
* tlon-jobs-manual-processing-id:        Org ID Constants.     (line  6)
* tlon-key-regexp:                       Variables (1).        (line  6)
* tlon-locators:                         Constants.            (line 11)
* tlon-md-special-characters:            User Options (5).     (line  6)
* tlon-meet-diarize-script:              User Options (6).     (line  6)
* tlon-meet-recordings-directory:        User Options (6).     (line 15)
* tlon-meet-summary-prompt:              User Options (6).     (line 10)
* tlon-microsoft-azure-audio-choices:    Configuration and Constants.
                                                               (line 13)
* tlon-microsoft-azure-char-limit:       Configuration and Constants.
                                                               (line 19)
* tlon-microsoft-azure-key:              Configuration and Constants.
                                                               (line 22)
* tlon-microsoft-azure-request:          Configuration and Constants.
                                                               (line 16)
* tlon-microsoft-azure-voices:           Configuration and Constants.
                                                               (line 10)
* tlon-openai-audio-choices:             Configuration and Constants.
                                                               (line 13)
* tlon-openai-char-limit:                Configuration and Constants.
                                                               (line 19)
* tlon-openai-key:                       Configuration and Constants.
                                                               (line 22)
* tlon-openai-model:                     Engine-Specific Settings.
                                                               (line 17)
* tlon-openai-tts-request:               Configuration and Constants.
                                                               (line 16)
* tlon-openai-voices:                    Configuration and Constants.
                                                               (line 10)
* tlon-regexp-expanded-citation-formatter: Constants.          (line 29)
* tlon-regexp-expanded-citation-formatter-with-locators: Constants.
                                                               (line 26)
* tlon-regexp-expanded-citation-with-link: Constants.          (line 32)
* tlon-regexp-expanded-citation-with-no-link: Constants.       (line 36)
* tlon-regexp-locator-in-citation:       Constants.            (line 23)
* tlon-sentence-highlight-offset:        State Variables.      (line  9)
* tlon-split-last-screen-line-pos:       State Variables.      (line  6)
* tlon-split-screen-line-threshold:      User Options (7).     (line  6)
* tlon-tex-excluded-keys:                Variables.            (line  6)
* tlon-tex-excluded-keys-file:           Constants.            (line  8)
* tlon-tex-max-abstract-length:          Constants.            (line 40)
* tlon-tex-min-abstract-length:          Constants.            (line 42)
* tlon-tex-pandoc-cite-pattern:          Constants.            (line 20)
* tlon-tex-pandoc-cite-pattern-long:     Constants.            (line 14)
* tlon-tex-pandoc-cite-pattern-short:    Constants.            (line 17)
* tlon-tex-synopsis-length:              Constants.            (line 44)
* tlon-todo-statuses:                    Constants (2).        (line  6)
* tlon-todo-tags:                        Constants (2).        (line  9)
* tlon-todos-generic-file:               File Path Management. (line  9)
* tlon-todos-jobs-file:                  File Path Management. (line  6)
* tlon-tts-delete-file-chunks:           General TTS Settings. (line 15)
* tlon-tts-engines:                      Configuration and Constants.
                                                               (line  6)
* tlon-tts-global-engine:                General TTS Settings. (line  6)
* tlon-tts-listener-cue-break-duration:  General TTS Settings. (line 24)
* tlon-tts-listener-cue-patterns:        Configuration and Constants.
                                                               (line 31)
* tlon-tts-listener-cues:                Configuration and Constants.
                                                               (line 28)
* tlon-tts-paragraph-break-duration:     General TTS Settings. (line 20)
* tlon-tts-supported-tags:               Configuration and Constants.
                                                               (line 25)
* tlon-tts-use-alternate-voice:          General TTS Settings. (line 10)
* tlon-uqbar-api-routes:                 API Routes.           (line  6)
* tlon-when-assignee-is-nil:             User Options (3).     (line  6)
* tlon-when-assignee-is-someone-else:    User Options (3).     (line 16)
* tlon-zoom-recordings-directory:        User Options (6).     (line 19)


File: tlon.info,  Node: Concept index,  Prev: Variable index,  Up: Indices

22.3 Concept index
==================


Tag Table:
Node: Top206
Node: AI Functionality (tlon-aiel)12881
Node: User Options13376
Node: Batch Processing Function13744
Node: Overwrite Image Alt Text14212
Node: Edit Prompt Before Sending14953
Node: Auto Proofread Reference Articles15424
Node: Custom Models15901
Node: Commands17848
Node: Translation Variants18541
Node: Writing Reference Articles18935
Node: Proofreading Reference Articles19993
Node: Rewriting Text20910
Node: Image Description21472
Node: Setting Image Alt Text22428
Node: Fixing Markdown Formatting23483
Node: Generating Abstracts and Synopses24837
Node: Setting Language in BibTeX Entries27382
Node: Phonetic Transcription28369
Node: Audio Transcription29286
Node: Mathematical Expression Handling29993
Node: Fixing Encoding Errors31278
Node: Propagating Changes Across Repositories32504
Node: Transient Menu34389
Node: Internal Functions and Variables34954
Node: API Interaction (tlon-apiel)37266
Node: Dependencies37898
Node: Configuration38261
Node: API Routes38483
Node: Local API URL39032
Node: Log Buffer Variable39300
Node: Commands (1)39648
Node: Make API Request40022
Node: Authentication Token41102
Node: Log Handling41424
Node: File Upload42080
Node: Transient Menu (1)42991
Node: Internal Functions and Variables (1)43670
Node: Authentication44080
Node: Route Handling44935
Node: Response and Log Processing45597
Node: Citation Retrieval47289
Node: BibTeX Functionality (tlon-texel)48333
Node: Dependencies (1)49289
Node: User Options (1)50198
Node: Configuration (1)50689
Node: Constants50895
Node: Variables53129
Node: Commands (2)53440
Node: Abstract Management53911
Node: Entry Management55935
Node: URL Management58047
Node: Translation Entry Creation58847
Node: Citation Conversion and Replacement59892
Node: Reporting and Field Finding61636
Node: Transient Menu (2)62943
Node: Internal Functions and Variables (2)64395
Node: Abstract Fetching Helpers64964
Node: Entry Management Helpers66568
Node: Autokey Generation67261
Node: URL and Bibliography Helpers68420
Node: Citation Replacement Helpers69572
Node: Abstract Translation Helpers70199
Node: Reporting Helpers71384
Node: Field Modification Advice72124
Node: Clock Functionality (tlon-clockel)73101
Node: Commands (3)73759
Node: Open Clocked Task's File74087
Node: Open Clocked Task's Issue74564
Node: Copy Region or Buffer75122
Node: Internal Functions and Variables (3)75556
Node: Getting Clock Information75973
Node: Utility Functions77808
Node: Variables (1)79032
Node: Color Palette Management (tlon-colorel)79421
Node: Dependencies (2)80200
Node: User Options (2)80502
Node: Commands (4)81159
Node: Open Global CSS File81600
Node: Load Color Palette81899
Node: Save Frontend Files82707
Node: Store Color Palette83430
Node: Delete Color Palette84479
Node: Color Manipulation Commands85126
Node: Color Menu86764
Node: Internal Functions and Variables (4)87504
Node: Constants and Variables87936
Node: Helper Functions89311
Node: Transient Infix Commands92562
Node: Contact Management (tlon-contactsel)93215
Node: Dependencies (3)93892
Node: Configuration (2)94150
Node: Constants (1)94387
Node: Variables (2)96026
Node: Commands (5)96386
Node: Create Contact96749
Node: Edit Contact Properties97501
Node: Copy Property Value98747
Node: Edit Single Property99365
Node: Dynamically Defined Edit Commands100316
Node: Transient Menu (3)101068
Node: Internal Functions and Variables (5)102119
Node: Counterpart Navigation and Comparison (tlon-counterpartel)104405
Node: Dependencies (4)105203
Node: Commands (6)105538
Node: Finding Counterparts105863
Node: Opening Counterparts108535
Node: Paragraph Operations110659
Node: Transient Menu (4)111950
Node: Internal Functions and Variables (6)112788
Node: Counterpart Finding Logic113226
Node: Paragraph Handling Logic114146
Node: Temporary Utility Functions116858
Node: DeepL Integration (tlon-deeplel)118044
Node: Dependencies (5)118683
Node: Configuration (3)119029
Node: API Key and URL119312
Node: API Call Parameters119706
Node: Supported Glossary Languages120380
Node: Internal State Variables120721
Node: Commands (7)121479
Node: Translation121836
Node: Glossaries123912
Node: Utility Commands125944
Node: Transient Menu (5)126708
Node: Internal Functions and Variables (7)127575
Node: API Request Handling128025
Node: Callbacks129323
Node: Payload Encoders & Formatters130372
Node: Helper Functions (1)131603
Node: Dictionary Functionality (tlon-dictel)132636
Node: Dependencies (6)133206
Node: Commands (8)133430
Node: Get Synonyms via Reverso133633
Node: Transient Menu (6)134500
Node: Forge Integration (tlon-forgel)134895
Node: Dependencies (7)135666
Node: User Options (3)136159
Node: Commands (9)138108
Node: Visiting Issues and TODOs138676
Node: Capturing Issues as TODOs139492
Node: Reconciling Issues and TODOs141385
Node: Counterpart Navigation143213
Node: Creating Issues and TODOs143887
Node: Closing Issues and TODOs145309
Node: Sorting Org Entries145968
Node: File Handling (Associated with Issues)146516
Node: Miscellaneous147302
Node: Transient Menu (7)147902
Node: Internal Functions and Variables (8)149470
Node: Constants (2)150074
Node: File Path Management150842
Node: Issue and TODO Data Retrieval152559
Node: Issue and TODO Modification155958
Node: Capture and Reconciliation Helpers158111
Node: Validation and Checks161058
Node: GitHub Project Integration (Experimental)161821
Node: Miscellaneous Helpers162679
Node: Glossary Management (tlon-glossaryel)164279
Node: Configuration (4)164923
Node: Glossary Source File165132
Node: Glossary Recipients165492
Node: Commands (10)166094
Node: Edit Glossary Entry166454
Node: Extract Glossary167870
Node: Share Glossary169400
Node: Glossary Menu170364
Node: Internal Functions and Variables (9)170803
Node: Glossary Data Handling171252
Node: Glossary Extraction Formatting173031
Node: Git Integration (Currently Unused/TODO)174187
Node: Image Processing (tlon-imagesel)174924
Node: Dependencies (8)175683
Node: User Options (4)176111
Node: Commands (11)177162
Node: Auto Process Image177496
Node: Reduce Image Brightness178261
Node: Invert Image Colors179314
Node: Make Image Non-Transparent180111
Node: Transient Menu (8)181034
Node: Internal Functions and Variables (10)182229
Node: ImageMagick Command Constants182746
Node: InvertOrNot API Integration183609
Node: Helper Functions (2)184947
Node: Transient Infix Commands (1)186837
Node: Job Management (tlon-jobsel)187744
Node: Configuration (5)188469
Node: Job Labels and Phases188690
Node: Org ID Constants189525
Node: Jobs File Variable190081
Node: Commands (12)190397
Node: Start or Finish Job Phase190825
Node: Create Job193544
Node: Create Job Record194202
Node: Create Heading in jobsorg194810
Node: Transient Menu (9)195880
Node: Internal Functions and Variables (11)197038
Node: File and Path Management197490
Node: Job Phase Logic197881
Node: Issue and TODO Interaction200110
Node: jobsorg Helpers201112
Node: Markdown Functionality (tlon-mdel)201589
Node: Dependencies (9)202384
Node: User Options (5)202612
Node: Commands (13)203052
Node: YAML Front Matter203498
Node: Links and Sorting203874
Node: Tag Insertion/Editing (HTML MDX SSML)204634
Node: Note Classification208829
Node: Miscellaneous Commands210512
Node: Internal Functions and Variables (12)211678
Node: Constants (3)212228
Node: Tag Section Handling213557
Node: Link and Sorting Helpers213961
Node: Tag Handling Logic214522
Node: Attribute Readers218846
Node: Note Handling220557
Node: Miscellaneous Helpers (1)222334
Node: Meeting Management (tlon-meetel)223605
Node: Dependencies (10)224339
Node: User Options (6)224664
Node: Commands (14)225678
Node: Create or Visit Meeting Issues226063
Node: Linking Issues for Discussion228018
Node: Recording Processing229074
Node: Transient Menu (10)230311
Node: Org Mode Integration231206
Node: Internal Functions and Variables (13)232154
Node: Issue Handling Helpers232579
Node: Diarize and Summarize Helpers233675
Node: Repository and User Helpers235382
Node: Repository Management (tlon-reposel)236203
Node: Dependencies (11)236969
Node: Commands (15)237306
Node: Version Control (VC) Operations237692
Node: Forge Integration239107
Node: Git Crypt240586
Node: Transient Menu (11)241098
Node: Internal Functions and Variables (14)242462
Node: Search Functionality (tlon-searchel)243799
Node: Dependencies (12)244391
Node: Commands (16)244729
Node: Search Commits245118
Node: Search Commit Diffs245701
Node: Search Files (Ripgrep)246357
Node: Search for Translation247063
Node: Search Menu247952
Node: Internal Functions and Variables (15)248595
Node: Split Window Alignment (tlon-splitel)249024
Node: Dependencies (13)249793
Node: User Options (7)250019
Node: Commands (17)250609
Node: Toggle Split Mode250960
Node: Manual Alignment251292
Node: Reset Split Mode Hook252248
Node: Sentence Highlighting (Experimental/Unused)252672
Node: Transient Menu (12)253700
Node: Internal Functions and Variables (16)254330
Node: State Variables254687
Node: Helper Functions (3)255287
Node: Text-to-Speech (tlon-ttsel)256605
Node: Dependencies (14)257332
Node: User Options (8)257960
Node: General TTS Settings258187
Node: Engine-Specific Settings259255
Node: Commands (18)260425
Node: Core Workflow260802
Node: Audio File Management262525
Node: Reporting and Data Editing263794
Node: Transient Menu (13)265236
Node: Internal Functions and Variables (17)267683
Node: Configuration and Constants268168
Node: Staging Buffer and Preparation269885
Node: Chunking and Processing271314
Node: Engine Request Functions272507
Node: SSML and Text Processing Helpers273078
Node: Audio File Helpers274759
Node: URL Handling (tlon-urlel)275557
Node: Dependencies (15)276163
Node: Commands (19)276449
Node: Check URLs in File276748
Node: Get Archived URL277936
Node: Replace URL Across Projects278574
Node: Transient Menu (14)280024
Node: Internal Functions and Variables (18)280556
Node: Word Counting and Statistics (tlon-countel)281813
Node: Dependencies (16)282520
Node: Configuration (6)283025
Node: Commands (20)283451
Node: Word Counting283874
Node: Org Table Generation and Export285836
Node: BibTeX Key Counting287880
Node: Historic Word Count289046
Node: Transient Menu (15)290077
Node: Internal Functions and Variables (19)290777
Node: Word Count Filtering291203
Node: Org Table and Export Helpers291988
Node: BibTeX Key Counting Helpers293063
Node: Indices294385
Node: Function index294571
Node: Variable index356985
Node: Concept index369922

End Tag Table


Local Variables:
coding: utf-8
Info-documentlanguage: en
End:
