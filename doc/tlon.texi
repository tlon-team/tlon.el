\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename tlon.info
@settitle tlon
@documentencoding UTF-8
@documentlanguage en
@set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
@set MAINTAINER Pablo Stafforini
@set MAINTAINEREMAIL @email{pablo@tlon.team}
@set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
@c %**end of header

@dircategory Emacs misc features
@direntry
* Tlon: (tlon).         Companion Emacs package for Tlön.
@end direntry

@finalout
@titlepage
@author Pablo Stafforini (@email{pablo@@tlon.team})
@end titlepage

@ifnottex
@node Top
@top tlon

@insertcopying

@code{tlon} provides all the Emacs functionality used by the Tlön team. @*

@end ifnottex

@menu
* AI Functionality (@samp{tlon-ai.el}): AI Functionality (@samp{tlon-aiel}). 
* API Interaction (@samp{tlon-api.el}): API Interaction (@samp{tlon-apiel}). 
* Bib@TeX{} Functionality (@samp{tlon-tex.el}): Bib@TeX{} Functionality (@samp{tlon-texel}). 
* Clock Functionality (@samp{tlon-clock.el}): Clock Functionality (@samp{tlon-clockel}). 
* Color Palette Management (@samp{tlon-color.el}): Color Palette Management (@samp{tlon-colorel}). 
* Contact Management (@samp{tlon-contacts.el}): Contact Management (@samp{tlon-contactsel}). 
* Counterpart Navigation and Comparison (@samp{tlon-counterpart.el}): Counterpart Navigation and Comparison (@samp{tlon-counterpartel}). 
* DeepL Integration (@samp{tlon-deepl.el}): DeepL Integration (@samp{tlon-deeplel}). 
* Dictionary Functionality (@samp{tlon-dict.el}): Dictionary Functionality (@samp{tlon-dictel}). 
* Forge Integration (@samp{tlon-forg.el}): Forge Integration (@samp{tlon-forgel}). 
* Glossary Management (@samp{tlon-glossary.el}): Glossary Management (@samp{tlon-glossaryel}). 
* Image Processing (@samp{tlon-images.el}): Image Processing (@samp{tlon-imagesel}). 
* Job Management (@samp{tlon-jobs.el}): Job Management (@samp{tlon-jobsel}). 
* Markdown Functionality (@samp{tlon-md.el}): Markdown Functionality (@samp{tlon-mdel}). 
* Meeting Management (@samp{tlon-meet.el}): Meeting Management (@samp{tlon-meetel}). 
* Repository Management (@samp{tlon-repos.el}): Repository Management (@samp{tlon-reposel}). 
* Search Functionality (@samp{tlon-search.el}): Search Functionality (@samp{tlon-searchel}). 
* Split Window Alignment (@samp{tlon-split.el}): Split Window Alignment (@samp{tlon-splitel}). 
* Text-to-Speech (@samp{tlon-tts.el}): Text-to-Speech (@samp{tlon-ttsel}). 
* URL Handling (@samp{tlon-url.el}): URL Handling (@samp{tlon-urlel}). 
* Word Counting and Statistics (@samp{tlon-count.el}): Word Counting and Statistics (@samp{tlon-countel}). 
* Indices::

@detailmenu
--- The Detailed Node Listing ---

AI Functionality (@samp{tlon-ai.el})

* User Options::
* Commands::
* Internal Functions and Variables::

User Options

* Batch Processing Function::
* Overwrite Image Alt Text::
* Edit Prompt Before Sending::
* Auto Proofread Reference Articles::
* Custom Models::

Commands

* Translation Variants::
* Writing Reference Articles::
* Proofreading Reference Articles::
* Rewriting Text::
* Image Description::
* Setting Image Alt Text::
* Fixing Markdown Formatting::
* Generating Abstracts and Synopses::
* Setting Language in Bib@TeX{} Entries::
* Phonetic Transcription::
* Audio Transcription::
* Mathematical Expression Handling::
* Fixing Encoding Errors::
* Propagating Changes Across Repositories::
* Transient Menu::

API Interaction (@samp{tlon-api.el})

* Dependencies::
* Configuration::
* Commands: Commands (1). 
* Internal Functions and Variables: Internal Functions and Variables (1). 

Configuration

* API Routes::
* Local API URL::
* Log Buffer Variable::

Commands

* Make API Request::
* Authentication Token::
* Log Handling::
* File Upload::
* Transient Menu: Transient Menu (1). 

Internal Functions and Variables

* Authentication::
* Route Handling::
* Response and Log Processing::
* Citation Retrieval::

Bib@TeX{} Functionality (@samp{tlon-tex.el})

* Dependencies: Dependencies (1). 
* User Options: User Options (1). 
* Configuration: Configuration (1). 
* Commands: Commands (2). 
* Internal Functions and Variables: Internal Functions and Variables (2). 

Configuration

* Constants::
* Variables::

Commands

* Abstract Management::
* Entry Management::
* URL Management::
* Translation Entry Creation::
* Citation Conversion and Replacement::
* Reporting and Field Finding::
* Transient Menu: Transient Menu (2). 

Internal Functions and Variables

* Abstract Fetching Helpers::
* Entry Management Helpers::
* Autokey Generation::
* URL and Bibliography Helpers::
* Citation Replacement Helpers::
* Abstract Translation Helpers::
* Reporting Helpers::
* Field Modification Advice::

Clock Functionality (@samp{tlon-clock.el})

* Commands: Commands (3). 
* Internal Functions and Variables: Internal Functions and Variables (3). 

Commands

* Open Clocked Task's File::
* Open Clocked Task's Issue::
* Copy Region or Buffer::

Internal Functions and Variables

* Getting Clock Information::
* Utility Functions::
* Variables: Variables (1). 

Color Palette Management (@samp{tlon-color.el})

* Dependencies: Dependencies (2). 
* User Options: User Options (2). 
* Commands: Commands (4). 
* Internal Functions and Variables: Internal Functions and Variables (4). 

Commands

* Open Global CSS File::
* Load Color Palette::
* Save Frontend Files::
* Store Color Palette::
* Delete Color Palette::
* Color Manipulation Commands::
* Color Menu::

Internal Functions and Variables

* Constants and Variables::
* Helper Functions::
* Transient Infix Commands::

Contact Management (@samp{tlon-contacts.el})

* Dependencies: Dependencies (3). 
* Configuration: Configuration (2). 
* Commands: Commands (5). 
* Internal Functions and Variables: Internal Functions and Variables (5). 

Configuration

* Constants: Constants (1). 
* Variables: Variables (2). 

Commands

* Create Contact::
* Edit Contact Properties::
* Copy Property Value::
* Edit Single Property::
* Dynamically Defined Edit Commands::
* Transient Menu: Transient Menu (3). 

Counterpart Navigation and Comparison (@samp{tlon-counterpart.el})

* Dependencies: Dependencies (4). 
* Commands: Commands (6). 
* Internal Functions and Variables: Internal Functions and Variables (6). 

Commands

* Finding Counterparts::
* Opening Counterparts::
* Paragraph Operations::
* Transient Menu: Transient Menu (4). 

Internal Functions and Variables

* Counterpart Finding Logic::
* Paragraph Handling Logic::
* Temporary Utility Functions::

DeepL Integration (@samp{tlon-deepl.el})

* Dependencies: Dependencies (5). 
* Configuration: Configuration (3). 
* Commands: Commands (7). 
* Internal Functions and Variables: Internal Functions and Variables (7). 

Configuration

* API Key and URL::
* API Call Parameters::
* Supported Glossary Languages::
* Internal State Variables::

Commands

* Translation::
* Glossaries::
* Utility Commands::
* Transient Menu: Transient Menu (5). 

Internal Functions and Variables

* API Request Handling::
* Callbacks::
* Payload Encoders & Formatters::
* Helper Functions: Helper Functions (1). 

Dictionary Functionality (@samp{tlon-dict.el})

* Dependencies: Dependencies (6). 
* Commands: Commands (8). 
* Transient Menu: Transient Menu (6). 

Commands

* Get Synonyms via Reverso::

Forge Integration (@samp{tlon-forg.el})

* Dependencies: Dependencies (7). 
* User Options: User Options (3). 
* Commands: Commands (9). 
* Internal Functions and Variables: Internal Functions and Variables (8). 

Commands

* Visiting Issues and TODOs::
* Capturing Issues as TODOs::
* Reconciling Issues and TODOs::
* Counterpart Navigation::
* Creating Issues and TODOs::
* Closing Issues and TODOs::
* Sorting Org Entries::
* File Handling (Associated with Issues)::
* Miscellaneous::
* Transient Menu: Transient Menu (7). 

Internal Functions and Variables

* Constants: Constants (2). 
* File Path Management::
* Issue and TODO Data Retrieval::
* Issue and TODO Modification::
* Capture and Reconciliation Helpers::
* Validation and Checks::
* GitHub Project Integration (Experimental)::
* Miscellaneous Helpers::

Glossary Management (@samp{tlon-glossary.el})

* Configuration: Configuration (4). 
* Commands: Commands (10). 
* Internal Functions and Variables: Internal Functions and Variables (9). 

Configuration

* Glossary Source File::
* Glossary Recipients::

Commands

* Edit Glossary Entry::
* Extract Glossary::
* Share Glossary::
* Glossary Menu::

Internal Functions and Variables

* Glossary Data Handling::
* Glossary Extraction Formatting::
* Git Integration (Currently Unused/TODO)::

Image Processing (@samp{tlon-images.el})

* Dependencies: Dependencies (8). 
* User Options: User Options (4). 
* Commands: Commands (11). 
* Internal Functions and Variables: Internal Functions and Variables (10). 

Commands

* Auto Process Image::
* Reduce Image Brightness::
* Invert Image Colors::
* Make Image Non-Transparent::
* Transient Menu: Transient Menu (8). 

Internal Functions and Variables

* ImageMagick Command Constants::
* InvertOrNot API Integration::
* Helper Functions: Helper Functions (2). 
* Transient Infix Commands: Transient Infix Commands (1). 

Job Management (@samp{tlon-jobs.el})

* Configuration: Configuration (5). 
* Commands: Commands (12). 
* Internal Functions and Variables: Internal Functions and Variables (11). 

Configuration

* Job Labels and Phases::
* Org ID Constants::
* Jobs File Variable::

Commands

* Start or Finish Job Phase::
* Create Job::
* Create Job Record::
* Create Heading in jobs.org: Create Heading in jobsorg. 
* Transient Menu: Transient Menu (9). 

Internal Functions and Variables

* File and Path Management::
* Job Phase Logic::
* Issue and TODO Interaction::
* jobs.org Helpers: jobsorg Helpers. 

Markdown Functionality (@samp{tlon-md.el})

* Dependencies: Dependencies (9). 
* User Options: User Options (5). 
* Commands: Commands (13). 
* Internal Functions and Variables: Internal Functions and Variables (12). 

Commands

* YAML Front Matter::
* Links and Sorting::
* Tag Insertion/Editing (HTML, MDX, SSML): Tag Insertion/Editing (HTML MDX SSML). 
* Note Classification::
* Miscellaneous Commands::

Internal Functions and Variables

* Constants: Constants (3). 
* Tag Section Handling::
* Link and Sorting Helpers::
* Tag Handling Logic::
* Attribute Readers::
* Note Handling::
* Miscellaneous Helpers: Miscellaneous Helpers (1). 

Meeting Management (@samp{tlon-meet.el})

* Dependencies: Dependencies (10). 
* User Options: User Options (6). 
* Commands: Commands (14). 
* Org Mode Integration::
* Internal Functions and Variables: Internal Functions and Variables (13). 

Commands

* Create or Visit Meeting Issues::
* Linking Issues for Discussion::
* Recording Processing::
* Transient Menu: Transient Menu (10). 

Internal Functions and Variables

* Issue Handling Helpers::
* Diarize and Summarize Helpers::
* Repository and User Helpers::

Repository Management (@samp{tlon-repos.el})

* Dependencies: Dependencies (11). 
* Commands: Commands (15). 
* Internal Functions and Variables: Internal Functions and Variables (14). 

Commands

* Version Control (VC) Operations::
* Forge Integration::
* Git Crypt::
* Transient Menu: Transient Menu (11). 

Search Functionality (@samp{tlon-search.el})

* Dependencies: Dependencies (12). 
* Commands: Commands (16). 
* Internal Functions and Variables: Internal Functions and Variables (15). 

Commands

* Search Commits::
* Search Commit Diffs::
* Search Files (Ripgrep)::
* Search for Translation::
* Search Menu::

Split Window Alignment (@samp{tlon-split.el})

* Dependencies: Dependencies (13). 
* User Options: User Options (7). 
* Commands: Commands (17). 
* Internal Functions and Variables: Internal Functions and Variables (16). 

Commands

* Toggle Split Mode::
* Manual Alignment::
* Reset Split Mode Hook::
* Sentence Highlighting (Experimental/Unused)::
* Transient Menu: Transient Menu (12). 

Internal Functions and Variables

* State Variables::
* Helper Functions: Helper Functions (3). 

Text-to-Speech (@samp{tlon-tts.el})

* Dependencies: Dependencies (14). 
* User Options: User Options (8). 
* Commands: Commands (18). 
* Internal Functions and Variables: Internal Functions and Variables (17). 

User Options

* General TTS Settings::
* Engine-Specific Settings::

Commands

* Core Workflow::
* Audio File Management::
* Reporting and Data Editing::
* Transient Menu: Transient Menu (13). 

Internal Functions and Variables

* Configuration and Constants::
* Staging Buffer and Preparation::
* Chunking and Processing::
* Engine Request Functions::
* SSML and Text Processing Helpers::
* Audio File Helpers::

URL Handling (@samp{tlon-url.el})

* Dependencies: Dependencies (15). 
* Commands: Commands (19). 
* Internal Functions and Variables: Internal Functions and Variables (18). 

Commands

* Check URLs in File::
* Get Archived URL::
* Replace URL Across Projects::
* Transient Menu: Transient Menu (14). 

Word Counting and Statistics (@samp{tlon-count.el})

* Dependencies: Dependencies (16). 
* Configuration: Configuration (6). 
* Commands: Commands (20). 
* Internal Functions and Variables: Internal Functions and Variables (19). 

Commands

* Word Counting::
* Org Table Generation and Export::
* Bib@TeX{} Key Counting::
* Historic Word Count::
* Transient Menu: Transient Menu (15). 

Internal Functions and Variables

* Word Count Filtering::
* Org Table and Export Helpers::
* Bib@TeX{} Key Counting Helpers::

Indices

* Function index::
* Variable index::
* Concept index::

@end detailmenu
@end menu

@node AI Functionality (@samp{tlon-aiel})
@chapter AI Functionality (@samp{tlon-ai.el})

This module provides integration with AI models for various tasks such as summarization, translation, image description, and code manipulation within the Tlön ecosystem. It leverages the @samp{gptel} package and its extensions. @*

@menu
* User Options::
* Commands::
* Internal Functions and Variables::
@end menu

@node User Options
@section User Options

This section describes the user-configurable options available in @samp{tlon-ai.el}. @*

@menu
* Batch Processing Function::
* Overwrite Image Alt Text::
* Edit Prompt Before Sending::
* Auto Proofread Reference Articles::
* Custom Models::
@end menu

@node Batch Processing Function
@subsection Batch Processing Function

@vindex tlon-ai-batch-fun
The user option @code{tlon-ai-batch-fun} specifies a function to be run when @code{tlon} operates in batch mode. This allows for automated processing of multiple items using AI functions. Set this to the symbol of the desired function. @*

@lisp
(setq tlon-ai-batch-fun 'my-batch-processing-function)
@end lisp

@node Overwrite Image Alt Text
@subsection Overwrite Image Alt Text

@vindex tlon-ai-overwrite-alt-text
The user option @code{tlon-ai-overwrite-alt-text} controls whether existing alt text in image tags should be overwritten when generating new descriptions. @*

@itemize
@item
If non-nil, existing alt text will be replaced by the newly generated text when using @code{tlon-ai-set-image-alt-text-in-buffer}. @*
@item
If nil (the default), existing alt text will be preserved. @*
@end itemize

Note: The command @code{tlon-ai-set-image-alt-text} (operating on a single image tag at point) @strong{always} overwrites existing alt text, regardless of this option's setting. @*

@node Edit Prompt Before Sending
@subsection Edit Prompt Before Sending

@vindex tlon-ai-edit-prompt
When the user option @code{tlon-ai-edit-prompt} is non-nil, @code{tlon} will prompt the user to edit the generated prompt string before sending it to the AI model. This allows for on-the-fly customization of AI requests. @*

@lisp
(setq tlon-ai-edit-prompt t)
@end lisp

@node Auto Proofread Reference Articles
@subsection Auto Proofread Reference Articles

@vindex tlon-ai-auto-proofread
If the user option @code{tlon-ai-auto-proofread} is set to a non-nil value, @code{tlon} will automatically initiate the proofreading process using the configured AI model after a reference article has been generated via @code{tlon-ai-create-reference-article}. @*

@node Custom Models
@subsection Custom Models

@code{tlon} allows specifying different AI models for specific tasks, overriding the default @samp{gptel} model configuration. This enables using models optimized for particular capabilities (e.g., large context window for summarization, advanced reasoning for proofreading). @*

Each option takes a cons cell @samp{(BACKEND . MODEL)}, where @samp{BACKEND} is a string (e.g., @samp{"ChatGPT"}, @samp{"Gemini"}) and @samp{MODEL} is a symbol representing the specific model (e.g., @samp{gpt-4.5-preview}, @samp{gemini-2.0-flash-thinking-exp-01-21}). Refer to @code{gptel-extras-ai-models} for available options. If an option is nil, the default @samp{gptel} model is used for that task. @*

@vindex tlon-ai-summarization-model
@table @asis
@item @code{tlon-ai-summarization-model}
Model for summarizing text (e.g., generating abstracts, synopses). It's recommended to use a model with a large context window. @*
@lisp
(setq tlon-ai-summarization-model '("Gemini" . gemini-2.0-flash-thinking-exp-01-21))
@end lisp
@end table

@vindex tlon-ai-markdown-fix-model
@table @asis
@item @code{tlon-ai-markdown-fix-model}
Model for fixing Markdown formatting issues, especially when comparing original and translated documents. @*
@lisp
(setq tlon-ai-markdown-fix-model '("Gemini" . gemini-2.0-flash-thinking-exp-01-21))
@end lisp
@end table

@vindex tlon-ai-create-reference-article-model
@table @asis
@item @code{tlon-ai-create-reference-article-model}
Model used by @code{tlon-ai-create-reference-article} to draft encyclopedia-style articles based on provided source materials. @*
@lisp
(setq tlon-ai-create-reference-article-model nil) ; Use default gptel model
@end lisp
@end table

@vindex tlon-ai-proofread-reference-article-model
@table @asis
@item @code{tlon-ai-proofread-reference-article-model}
Model used by @code{tlon-ai-proofread-reference-article} for correcting factual errors, calculation mistakes, etc., in generated reference articles. Often benefits from a more powerful model. @*
@lisp
(setq tlon-ai-proofread-reference-article-model '("ChatGPT" . gpt-4.5-preview))
@end lisp
@end table

@node Commands
@section Commands

This section details the interactive commands provided by @samp{tlon-ai.el}. @*

@menu
* Translation Variants::
* Writing Reference Articles::
* Proofreading Reference Articles::
* Rewriting Text::
* Image Description::
* Setting Image Alt Text::
* Fixing Markdown Formatting::
* Generating Abstracts and Synopses::
* Setting Language in Bib@TeX{} Entries::
* Phonetic Transcription::
* Audio Transcription::
* Mathematical Expression Handling::
* Fixing Encoding Errors::
* Propagating Changes Across Repositories::
* Transient Menu::
@end menu

@node Translation Variants
@subsection Translation Variants

@findex tlon-ai-translate
The command @code{tlon-ai-translate} prompts for text and returns ten alternative Spanish translations using the configured AI model. The user can then select the preferred translation from the minibuffer, which is copied to the kill ring. @*

@node Writing Reference Articles
@subsection Writing Reference Articles

@findex tlon-ai-create-reference-article
The command @code{tlon-ai-create-reference-article} generates a new encyclopedia-style article based on the current buffer's content and linked sources. @*

It extracts the title from the buffer's front matter (@samp{title} key). It determines the language of the article from the current file. It constructs a prompt using @code{tlon-ai-write-reference-article-prompt}, instructing the AI to synthesize information primarily from attached source files (added to the @samp{gptel} context via @code{tlon-add-add-sources-to-context}) and an optional glossary (added via @code{tlon-add-glossary-to-context}). @*

The AI response (the generated article) is placed in a new buffer. If the user confirms, it can then be proofread using @code{tlon-ai-proofread-reference-article}. The model used can be customized via @code{tlon-ai-create-reference-article-model}. @*

@node Proofreading Reference Articles
@subsection Proofreading Reference Articles

@findex tlon-ai-proofread-reference-article
The command @code{tlon-ai-proofread-reference-article} sends the content of the current buffer (assumed to be a reference article) to the AI for proofreading. @*

It uses the prompt defined in @code{tlon-ai-proofread-reference-article-prompt}, instructing the AI to act as an expert proofreader, focusing on factual errors, calculation mistakes, and other important issues within the context of an encyclopedia of effective altruism. The language is determined from the current file. @*

The AI's response, containing the proofread version or comments, is displayed in a new buffer named ``@strong{Comments on [Article Title]}''. The model used can be customized via @code{tlon-ai-proofread-reference-article-model}. @*

@node Rewriting Text
@subsection Rewriting Text

@findex tlon-ai-rewrite
The command @code{tlon-ai-rewrite} prompts for text (defaulting to the active region) and requests ten alternative Spanish rewrites from the AI using the prompt @code{tlon-ai-rewrite-prompt}. @*

The user selects one of the suggested variants from the minibuffer. If a region was active, it is deleted and replaced with the selected variant. The selected variant is also copied to the kill ring. @*

@node Image Description
@subsection Image Description

@findex tlon-ai-describe-image
The command @code{tlon-ai-describe-image} generates a concise description (alt text) for an image file. @*

It prompts the user to select an image file if one isn't automatically detected (e.g., from a @samp{Figure} tag at point or the file at point in Dired). It determines the desired language for the description based on the context (e.g., the language of the current buffer). @*

It uses the prompt from @code{tlon-ai-describe-image-prompt} for the determined language, instructing the AI to provide a one- or two-sentence description under 50 words. The image file is added to the @samp{gptel} context for the request. @*

By default, the resulting description is displayed as a message. An optional CALLBACK argument can be provided programmatically to handle the response differently. @*

@node Setting Image Alt Text
@subsection Setting Image Alt Text

@findex tlon-ai-set-image-alt-text
The command @code{tlon-ai-set-image-alt-text} automatically generates and inserts an alt text description for an image tag (@samp{Figure} or @samp{OurWorldInData}) at point. @*

It extracts the image source (@samp{src}) attribute from the tag, locates the corresponding image file (handling local paths and Our World In Data URLs), and then calls @code{tlon-ai-describe-image} to get the description. The generated alt text is then inserted into the @samp{alt} attribute of the image tag at point. This command @strong{always} overwrites any existing alt text. @*

@findex tlon-ai-set-image-alt-text-in-buffer
The command @code{tlon-ai-set-image-alt-text-in-buffer} iterates through all @samp{Figure} and @samp{OurWorldInData} tags in the current buffer and calls @code{tlon-ai-set-image-alt-text} for each one. @*

Whether it overwrites existing alt text depends on the value of the user option @code{tlon-ai-overwrite-alt-text}. @*

@node Fixing Markdown Formatting
@subsection Fixing Markdown Formatting

@findex tlon-ai-fix-markdown-format
The command @code{tlon-ai-fix-markdown-format} attempts to restore lost or altered formatting in a translated Markdown file by comparing it paragraph by paragraph with its original counterpart. @*

It identifies the original file using @code{tlon-get-counterpart}. It retrieves corresponding paragraphs from both files using @code{tlon-get-corresponding-paragraphs}. For each pair of paragraphs, it sends a request to the AI using the prompt @code{tlon-ai-fix-markdown-format-prompt}, asking it to apply the formatting from the original paragraph to the translated text. @*

The command processes paragraphs concurrently (up to a limit defined internally) and includes a retry mechanism with exponential backoff for failed requests. If a paragraph fails permanently after 3 retries, the process aborts. @*

Upon successful completion of all paragraphs, the reconstructed content is saved to a new file named @samp{[original-filename]--fixed.md}. The user is then prompted to optionally start an @samp{ediff} session between the original translation and the newly fixed file. The model used can be customized via @code{tlon-ai-markdown-fix-model}. @*

@node Generating Abstracts and Synopses
@subsection Generating Abstracts and Synopses

These commands generate summaries of documents using AI@. @*

@findex tlon-get-abstract-with-or-without-ai
@table @asis
@item @code{tlon-get-abstract-with-or-without-ai}
This command first attempts to extract an abstract using non-AI methods via @code{tlon-fetch-and-set-abstract}. If that fails (e.g., no abstract found in metadata or the file), it falls back to generating one using AI via @code{tlon-get-abstract-with-ai}. @*
@end table

@findex tlon-get-abstract-with-ai
@table @asis
@item @code{tlon-get-abstract-with-ai}
Generates a standard abstract (typically 100-250 words) for the specified content (file, region, PDF/HTML associated with Bib@TeX{} entry, etc.). It first asks the AI to check if an abstract already exists in the text using the prompt @code{tlon-ai-get-abstract-prompts}. If found, the AI returns it; otherwise, the AI generates a new abstract following the guidelines in @code{tlon-ai-how-to-write-abstract-prompt}. The language is either detected automatically or selected by the user. The result is typically inserted into the @samp{abstract} field of the corresponding Bib@TeX{} entry or copied to the kill ring. The model used can be customized via @code{tlon-ai-summarization-model}. @*
@end table

@findex tlon-shorten-abstract-with-ai
@table @asis
@item @code{tlon-shorten-abstract-with-ai}
Takes an existing abstract (typically from the @samp{abstract} field of the Bib@TeX{} entry at point) and asks the AI to shorten it to meet the length requirements specified in @code{tlon-tex-max-abstract-length}, using the prompt @code{tlon-ai-shorten-abstract-prompts}. The shortened abstract replaces the original one in the Bib@TeX{} entry. @*
@end table

@findex tlon-get-synopsis-with-ai
@table @asis
@item @code{tlon-get-synopsis-with-ai}
Generates a more detailed summary (synopsis, typically 1000-2000 words) of the specified content. It uses the prompt @code{tlon-ai-get-synopsis-prompts}. The resulting synopsis is copied to the kill ring. The model used can be customized via @code{tlon-ai-summarization-model}. @*
@end table

@findex tlon-get-abstract-with-ai-from-pdf
@table @asis
@item @code{tlon-get-abstract-with-ai-from-pdf}
A convenience command that specifically targets the PDF file associated with the Bib@TeX{} entry at point and calls @code{tlon-get-abstract-with-ai} on it. @*
@end table

@findex tlon-get-abstract-with-ai-from-html
@table @asis
@item @code{tlon-get-abstract-with-ai-from-html}
A convenience command that specifically targets the HTML file associated with the Bib@TeX{} entry at point and calls @code{tlon-get-abstract-with-ai} on it. @*
@end table

@node Setting Language in Bib@TeX{} Entries
@subsection Setting Language in Bib@TeX{} Entries

@findex tlon-ai-set-language-bibtex
The command @code{tlon-ai-set-language-bibtex} automatically detects and sets the @samp{langid} field for the Bib@TeX{} entry at point. @*

It sends the Bib@TeX{} entry text to the AI using the prompt @code{tlon-ai-detect-language-bibtex-prompt}. @*

@itemize
@item
If the entry already has a @samp{langid} field: @*
@itemize
@item
If the detected language matches the existing @samp{langid}, no change is made (unless the existing @samp{langid} needs validation/standardization). @*
@item
If they conflict, the user is prompted to choose which language to use. @*
@end itemize
@item
If the entry has no @samp{langid} field, the detected language is added. @*
@end itemize

The language code is validated and standardized using @code{tlon}'s language functions before being set. @*

@node Phonetic Transcription
@subsection Phonetic Transcription

@findex tlon-ai-phonetically-transcribe
The command @code{tlon-ai-phonetically-transcribe} generates the International Phonetic Alphabet (IPA) transcription for a given text string. @*

It prompts for the text to transcribe (defaulting to the active region or word at point) and determines the language (from the file or user selection). It uses the prompt @code{tlon-ai-transcribe-phonetically-prompt} for the specified language. The resulting IPA transcription is copied to the kill ring. @*

@findex tlon-phonetically-transcribe-in-buffer
The command @code{tlon-phonetically-transcribe-in-buffer} iterates through each line in the current buffer, calls @code{tlon-ai-phonetically-transcribe} on the line's content, and inserts the resulting IPA transcription after the original line, separated by a comma. @*

@node Audio Transcription
@subsection Audio Transcription

@findex tlon-transcribe-audio
The command @code{tlon-transcribe-audio} transcribes an audio file using OpenAI's Whisper API@. @*

It prompts the user to select an audio file. It retrieves the OpenAI API key (prompting to set it if necessary via @code{tlon-tts-openai-get-or-set-key}). It then makes an asynchronous request to the OpenAI API endpoint using @samp{curl}, uploading the audio file. @*

A CALLBACK function must be provided programmatically to handle the result. The callback receives the transcript text on success, or nil on failure. @*

@node Mathematical Expression Handling
@subsection Mathematical Expression Handling

@findex tlon-ai-convert-math
@table @asis
@item @code{tlon-ai-convert-math}
Converts a natural language mathematical expression into @LaTeX{} format. It prompts for the expression (defaulting to the region or @samp{Math} tag content) and language. It uses the prompt @code{tlon-ai-convert-math-prompt}. If point is on a @samp{Math} tag, the @LaTeX{} result is inserted as the second value in the @samp{alt} attribute (preserving the original expression as the first value). Otherwise, the result is copied to the kill ring and messaged. @*
@end table

@findex tlon-ai-translate-math
@table @asis
@item @code{tlon-ai-translate-math}
Converts a @LaTeX{} mathematical expression into a natural language description (alt text). It prompts for the expression (defaulting to the region or @samp{Math} tag content) and language. It uses the prompt @code{tlon-ai-translate-math-prompt}. If point is on a @samp{Math} tag, the natural language result is inserted as the first value in the @samp{alt} attribute (preserving the @LaTeX{} expression as the second value). Otherwise, the result is copied to the kill ring and messaged. @*
@end table

@node Fixing Encoding Errors
@subsection Fixing Encoding Errors

@findex tlon-ai-fix-encoding-in-string
The command @code{tlon-ai-fix-encoding-in-string} attempts to correct encoding errors within a given string. @*

It typically operates on a JSON value identified at point using helper functions. It determines the language associated with the JSON key. It sends the string to the AI using the prompt @code{tlon-ai-fix-encoding-prompt}, asking it to correct encoding issues like @samp{cuýn} or @samp{pronosticaci¾3\263n}. The corrected string is then copied to the kill ring. @*

@findex tlon-ai-fix-encoding-in-buffer
The command @code{tlon-ai-fix-encoding-in-buffer} is a specialized command designed to process a large JSON buffer containing potentially many encoding errors, chunk by chunk. It saves the corrected chunks to separate files. (This seems highly specific to a particular data processing task). @*

@findex tlon-ai-join-files
The command @code{tlon-ai-join-files} concatenates the content of chunk files (e.g., @samp{chunk0.json}, @samp{chunk1.json}, @dots{}) generated by @code{tlon-ai-fix-encoding-in-buffer} back into a single output file (e.g., @samp{fixed.json}). @*

@node Propagating Changes Across Repositories
@subsection Propagating Changes Across Repositories

@findex tlon-ai-propagate-changes
The command @code{tlon-ai-propagate-changes} attempts to automatically apply changes made in the latest commit of the current file to its corresponding files in other @code{tlon} content repositories (originals and translations). @*

@enumerate
@item
It identifies the current file, its repository, language, and the latest commit affecting it using @code{tlon} and Git functions. @*
@item
It retrieves the diff for the file from that commit using @samp{git show}. @*
@item
It identifies all other @code{tlon} content repositories (excluding the source repo). @*
@item
For each target repository: @*
@itemize
@item
It determines the corresponding target file using metadata lookups (@code{tlon-ai--find-target-file}), handling different scenarios (original to translation, translation to original, translation to translation). @*
@item
If a target file is found and exists, it constructs a prompt asking the AI to apply the @strong{semantic equivalent} of the source diff to the target file's content (provided in the prompt). @*
@item
It sends the request to the AI@. @*
@item
The callback function (@code{tlon-ai--propagate-changes-callback}) receives the AI's response (the modified target content). @*
@item
If the AI response is valid, the callback overwrites the target file with the new content. @*
@item
It then stages and commits the changes in the target repository using Git, with a commit message indicating the source commit and repository. @*
@end itemize
@end enumerate

This command relies heavily on accurate metadata (@samp{original_path}) and consistent file structures across repositories. @*

@node Transient Menu
@subsection Transient Menu

@findex tlon-ai-menu
The command @code{tlon-ai-menu} displays a @samp{transient} menu interface, providing quick access to most of the AI-related commands and options described above. It allows toggling options like @samp{tlon-ai-overwrite-alt-text} and @samp{tlon-ai-edit-prompt}, selecting models for specific tasks, setting batch functions, and invoking the various AI operations (summarization, image description, translation, etc.). @*

@node Internal Functions and Variables
@section Internal Functions and Variables

This section lists some non-interactive functions and variables used internally by @samp{tlon-ai.el}. While not intended for direct user interaction, understanding them can be helpful for customization or debugging. @*

@itemize
@item
@code{tlon-make-gptel-request}: Core function for sending requests to the AI model via @samp{gptel}. Handles prompt formatting, model selection, context checks, and callbacks. @*
@item
@code{tlon-ai-maybe-edit-prompt}: Conditionally allows editing the prompt based on @code{tlon-ai-edit-prompt}. @*
@item
@code{tlon-warn-if-gptel-context}: Checks if the @samp{gptel} context is empty and warns the user if not. @*
@item
Callback functions (e.g., @code{tlon-ai-callback-return}, @code{tlon-ai-callback-copy}, @code{tlon-ai-callback-save}, @code{tlon-ai-callback-insert}, @code{tlon-ai-callback-fail}): Handle responses from AI requests in various ways (returning value, copying, saving, inserting, error handling). @*
@item
@code{tlon-ai-batch-continue}: Helper for batch processing, moves to the next item and calls the batch function. @*
@item
@code{tlon-get-string-dwim}: Retrieves text content from various sources (file, region, buffer, PDF/HTML associated with Bib@TeX{} entry) for AI processing. @*
@item
@code{tlon-get-file-as-string}: Reads the content of a file (handling PDF conversion) into a string. @*
@item
Prompt constants (e.g., @code{tlon-ai-detect-language-prompt}, @code{tlon-ai-translate-prompt}, @code{tlon-ai-write-reference-article-prompt}, etc.): Store the various prompt templates used for different AI tasks, often including language-specific versions. @*
@item
Change propagation helpers (@code{tlon-ai--get-commit-diff}, @code{tlon-ai--find-target-file}, @code{tlon-ai--commit-in-repo}, @code{tlon-ai--propagate-changes-callback}): Internal functions used by @code{tlon-ai-propagate-changes}. @*
@item
Transient infix definitions (e.g., @code{tlon-ai-infix-toggle-overwrite-alt-text}, @code{tlon-ai-batch-fun-infix}, model selection infixes): Define the interactive elements within the @code{tlon-ai-menu}. @*
@end itemize

@node API Interaction (@samp{tlon-apiel})
@chapter API Interaction (@samp{tlon-api.el})

This module facilitates interaction with the Tlön Babel APIs, specifically the @samp{uqbar} API@. It handles authentication (token retrieval), making requests to various API endpoints, processing responses (especially logs), retrieving citations, and uploading files. @*

@menu
* Dependencies::
* Configuration::
* Commands: Commands (1). 
* Internal Functions and Variables: Internal Functions and Variables (1). 
@end menu

@node Dependencies
@section Dependencies

@itemize
@item
@samp{request} (for making HTTP requests) @*
@item
@samp{tlon-core} @*
@item
@samp{transient} (for the menu) @*
@item
@samp{json} (for parsing responses) @*
@item
@samp{auth-source} (for credentials) @*
@item
@samp{url} (for URL encoding) @*
@end itemize

@node Configuration
@section Configuration

@menu
* API Routes::
* Local API URL::
* Log Buffer Variable::
@end menu

@node API Routes
@subsection API Routes

@vindex tlon-uqbar-api-routes
The constant @code{tlon-uqbar-api-routes} defines the available endpoints for the @samp{uqbar} API@. Each entry is a plist specifying the @samp{:route} (URL path, potentially with @samp{%s} for language), @samp{:type} (HTTP method, e.g., ``GET'', ``POST''), and a @samp{:docstring} explaining the endpoint's purpose. The @samp{%s} in routes is dynamically replaced with the current @code{tlon-translation-language} by @code{tlon-api-get-routes}. @*

@node Local API URL
@subsection Local API URL

@vindex tlon-api-local-url
The constant @code{tlon-api-local-url} defines the base URL for the local development instance of the @samp{uqbar} API@. @*

@node Log Buffer Variable
@subsection Log Buffer Variable

@vindex tlon-api-most-recent-log-buffer
The variable @code{tlon-api-most-recent-log-buffer} stores the name (typically the route) of the buffer containing the most recently received API log response. Used by @code{tlon-api-open-most-recent-log}. @*

@node Commands (1)
@section Commands

This section details the interactive commands provided by @samp{tlon-api.el}. @*

@menu
* Make API Request::
* Authentication Token::
* Log Handling::
* File Upload::
* Transient Menu: Transient Menu (1). 
@end menu

@node Make API Request
@subsection Make API Request

@findex tlon-api-request
The command @code{tlon-api-request} makes a request to a specified @samp{ROUTE} on the @samp{uqbar} API@. @*
@enumerate
@item
Prompts the user to select the @samp{ROUTE} using @code{tlon-select-api-route}. @*
@item
Optionally takes @samp{FORCE-UPDATE} (non-nil or prefix argument) to append @samp{?force=true} to the URL@. @*
@item
Optionally takes @samp{POP-TO-BUFFER} (non-nil) to display the log response buffer immediately. @*
@item
Retrieves an authentication token using @code{tlon-api-get-token}. @*
@item
Makes the HTTP request using the @samp{request} library, specifying the method (@samp{:type}) and headers (including the bearer token). @*
@item
Parses the JSON response. @*
@item
On success, calls @code{tlon-api-print-response} to process and display the log data, and messages the user about completion. @*
@end enumerate

@findex tlon-api-request-force
@table @asis
@item @code{tlon-api-request-force}
A convenience command that calls @code{tlon-api-request} with the @samp{FORCE-UPDATE} argument set to @samp{t}. @*
@end table

@node Authentication Token
@subsection Authentication Token

@findex tlon-api-copy-token
The command @code{tlon-api-copy-token} retrieves an authentication token for the local API using @code{tlon-api-get-token} and copies it to the kill ring. @*

@node Log Handling
@subsection Log Handling

@findex tlon-api-open-most-recent-log
@table @asis
@item @code{tlon-api-open-most-recent-log}
Opens the buffer associated with the most recent API log response (whose name is stored in @code{tlon-api-most-recent-log-buffer}). If the buffer doesn't exist, it re-requests the log from the API using @code{tlon-api-request} with @samp{POP-TO-BUFFER} set. @*
@end table

@findex tlon-api-open-local-log
@table @asis
@item @code{tlon-api-open-local-log}
Opens the local log file maintained by the @samp{uqbar-api} backend itself (typically @samp{logs/uqbar-api.log} within the @samp{uqbar-api} repository). @*
@end table

@node File Upload
@subsection File Upload

@findex tlon-upload-file-to-server
The command @code{tlon-upload-file-to-server} uploads a local @samp{FILE} to a remote @samp{DESTINATION} using the @samp{scp} command asynchronously. @*
@enumerate
@item
Prompts for the @samp{FILE} to upload (using @samp{files-extras-read-file}). @*
@item
Prompts for the remote @samp{DESTINATION} directory. @*
@item
Optionally takes @samp{DELETE-AFTER-UPLOAD} (non-nil) to delete the local file upon successful upload. @*
@item
Starts the @samp{scp} process in the background. @*
@item
Sets a process sentinel to monitor the upload status, displaying messages for success or failure. If successful and requested, deletes the local file. If failed, displays the error and the @samp{*scp-upload*} buffer. @*
@item
If called from Dired, reverts the buffer after initiating the upload. @*
@end enumerate

@node Transient Menu (1)
@subsection Transient Menu

@findex tlon-api-menu
The command @code{tlon-api-menu} activates a @samp{transient} menu interface for API operations. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Requests}: @*
@table @asis
@item @samp{q}
Make request (@code{tlon-api-request}) @*
@item @samp{Q}
Make force request (@code{tlon-api-request-force}) @*
@end table
@item
@strong{Logs}: @*
@table @asis
@item @samp{l}
Open most recent log (@code{tlon-api-open-most-recent-log}) @*
@item @samp{L}
Open local log (@code{tlon-api-open-local-log}) @*
@end table
@item
@strong{Misc}: @*
@table @asis
@item @samp{t}
Copy access token (@code{tlon-api-copy-token}) @*
@end table
@end itemize

@node Internal Functions and Variables (1)
@section Internal Functions and Variables

This section lists non-interactive functions used internally or potentially useful for advanced customization. @*

@menu
* Authentication::
* Route Handling::
* Response and Log Processing::
* Citation Retrieval::
@end menu

@node Authentication
@subsection Authentication

@findex tlon-api-get-token
@table @asis
@item @code{tlon-api-get-token}
Retrieves an authentication token for a given @samp{SITE} (URL). It gets credentials using @code{tlon-api-get-credentials}, makes a POST request to the @samp{/api/auth/login} endpoint, parses the JSON response, and calls the provided @samp{CALLBACK} function with the extracted @samp{access_token}. @*
@end table

@findex tlon-api-get-credentials
@table @asis
@item @code{tlon-api-get-credentials}
Constructs the data string for the authentication request. It retrieves the username (based on @samp{user-full-name} via @code{tlon-user-lookup}) and the password (from @samp{auth-source} using a specific key format) and URL-encodes them into the required @samp{application/x-www-form-urlencoded} format. @*
@end table

@node Route Handling
@subsection Route Handling

@findex tlon-api-get-routes
@table @asis
@item @code{tlon-api-get-routes}
Returns a processed version of @code{tlon-uqbar-api-routes} where any @samp{%s} placeholder in the @samp{:route} property is replaced with the current value of @code{tlon-translation-language}. @*
@end table

@findex tlon-select-api-route
@table @asis
@item @code{tlon-select-api-route}
Prompts the user to select an API route using completion. It formats the choices from @code{tlon-api-get-routes} to include the route path and its docstring. Returns the selected route path string. @*
@end table

@node Response and Log Processing
@subsection Response and Log Processing

@findex tlon-api-print-response
@table @asis
@item @code{tlon-api-print-response}
Processes the @samp{DATA} (parsed JSON) received from an API request for a given @samp{ROUTE}. @*
@enumerate
@item
Sets @code{tlon-api-most-recent-log-buffer} to the @samp{ROUTE}. @*
@item
Creates or clears the buffer named after the @samp{ROUTE}. @*
@item
Inserts the JSON @samp{DATA} into the buffer. @*
@item
Pretty-prints the JSON using @samp{json-pretty-print-buffer}. @*
@item
Fixes any relative @samp{:source_filename} paths within the JSON to be absolute paths based on @code{paths-dir-tlon-repos} using @code{tlon-fix-source-filename-paths}. @*
@item
Makes file paths within the buffer clickable using @code{tlon-make-paths-clickable}. @*
@item
If @samp{POP-TO-BUFFER} is non-nil, displays the buffer. @*
@end enumerate
@end table

@findex tlon-fix-source-filename-paths
@table @asis
@item @code{tlon-fix-source-filename-paths}
Parses the JSON content of the current (or specified) @samp{BUFFER}, finds all @samp{source_filename} keys, prepends the Tlön repository base path (@code{paths-dir-tlon-repos}) to their values, re-encodes the modified JSON, inserts it back, and re-formats/modes the buffer. @*
@end table

@findex tlon-make-paths-clickable
@table @asis
@item @code{tlon-make-paths-clickable}
Searches the current (or specified) @samp{BUFFER} for quoted strings that represent existing file paths. For each valid path found, it creates an Emacs button overlay that allows opening the file with mouse clicks or RET@. It also enables @samp{goto-address-mode} and binds RET locally to @samp{ffap} (find file at point). @*
@end table

@node Citation Retrieval
@subsection Citation Retrieval

@findex tlon-api-get-citation
@table @asis
@item @code{tlon-api-get-citation}
Retrieves a formatted citation for a Bib@TeX{} @samp{KEY} from the Babel API@. Takes an optional @samp{CSL} style argument ('long, 'short, 'audio-long, 'audio-short). Constructs the URL using @code{tlon-api-get-citation-url}, fetches the JSON using @code{tlon-api-get-citation-json}, and extracts the relevant citation string based on the @samp{CSL} style. Returns nil if not found. @*
@end table

@findex tlon-api-get-citation-url
@table @asis
@item @code{tlon-api-get-citation-url}
Constructs the specific API URL for retrieving a citation based on the @samp{KEY} and @samp{CSL} style (determining text/audio endpoint). @*
@end table

@findex tlon-api-get-citation-json
@table @asis
@item @code{tlon-api-get-citation-json}
Fetches the JSON response from a given citation @samp{URL} using an external @samp{curl} command. Includes basic error handling for host resolution issues. Parses the JSON response using @samp{json-read}. @*
@end table

@node Bib@TeX{} Functionality (@samp{tlon-texel})
@chapter Bib@TeX{} Functionality (@samp{tlon-tex.el})

This module provides a wide range of functions for interacting with Bib@TeX{} files and related data sources. It covers fetching and managing abstracts, moving entries between different Bib@TeX{} files (e.g., fluid vs. stable), adding and updating fields, cleaning entries, generating citation keys (autokey), finding and adding missing URLs, handling translations of abstracts, converting Markdown links to citations, replacing citation keys with formatted citations, and generating reports on Bib@TeX{} entries. @*

@menu
* Dependencies: Dependencies (1). 
* User Options: User Options (1). 
* Configuration: Configuration (1). 
* Commands: Commands (2). 
* Internal Functions and Variables: Internal Functions and Variables (2). 
@end menu

@node Dependencies (1)
@section Dependencies

@itemize
@item
@samp{bibtex-extras} @*
@item
@samp{paths} @*
@item
@samp{shut-up} @*
@item
@samp{tlon-core} @*
@item
@samp{transient} @*
@item
@samp{doi-utils} (for @code{tlon-fetch-url-from-doi}) @*
@item
@samp{url} (for fetching data) @*
@item
@samp{json} (for parsing API responses and translations) @*
@item
@samp{citar-cache} (for bibliography lookups) @*
@item
@samp{zotra-extras} (for fetching abstracts/fields) @*
@item
@samp{simple-extras} (for URL simplification) @*
@item
@samp{tlon-ai} (for AI-assisted abstract fetching) @*
@item
@samp{tlon-api} (for fetching formatted citations) @*
@item
@samp{tlon-deepl} (for abstract translation) @*
@item
@samp{tlon-md} (for Markdown link/tag handling) @*
@item
@samp{citar-extras} (for opening entries in Ebib) @*
@item
@samp{files-extras} (for writing lists to files) @*
@end itemize

@node User Options (1)
@section User Options

@vindex tlon-abstract-overwrite
@table @asis
@item @code{tlon-abstract-overwrite}
Controls behavior when fetching an abstract for an entry that already has one. @*
@itemize
@item
@samp{always}: Always overwrite the existing abstract. @*
@item
@samp{never}: Never overwrite the existing abstract. @*
@item
@samp{ask} (default): Prompt the user whether to overwrite. @*
@end itemize
@end table

@node Configuration (1)
@section Configuration

@menu
* Constants::
* Variables::
@end menu

@node Constants
@subsection Constants

@vindex tlon-file-abstract-translations
@table @asis
@item @code{tlon-file-abstract-translations}
Path to the JSON file storing abstract translations. @*
@end table
@vindex tlon-tex-excluded-keys-file
@table @asis
@item @code{tlon-tex-excluded-keys-file}
Path to the Elisp file where excluded Bib@TeX{} keys (for abstract reporting) are persisted. @*
@end table
@vindex tlon-locators
@table @asis
@item @code{tlon-locators}
Alist mapping citation locators (e.g., ``page'', ``chapter'') to their abbreviations (e.g., ``p.'', ``chap.''). Used for regex generation. @*
@end table
@vindex tlon-tex-pandoc-cite-pattern-long
@table @asis
@item @code{tlon-tex-pandoc-cite-pattern-long}
Regex for matching ``long'' Pandoc citation keys (e.g., `[@@key]`, `[@@key, p. 5]`). Captures key and locator(s). @*
@end table
@vindex tlon-tex-pandoc-cite-pattern-short
@table @asis
@item @code{tlon-tex-pandoc-cite-pattern-short}
Regex for matching ``short'' Pandoc citation keys (e.g., `<cite>[@@key]</cite>`). Captures key and locator(s). @*
@end table
@vindex tlon-tex-pandoc-cite-pattern
@table @asis
@item @code{tlon-tex-pandoc-cite-pattern}
Combined regex for matching both long and short Pandoc citation keys. @*
@end table
@vindex tlon-regexp-locator-in-citation
@table @asis
@item @code{tlon-regexp-locator-in-citation}
Regex fragment specifically matching one or more locators within a citation, based on @code{tlon-locators}. @*
@end table
@vindex tlon-regexp-expanded-citation-formatter-with-locators
@table @asis
@item @code{tlon-regexp-expanded-citation-formatter-with-locators}
(Note: Marked as not working correctly) Formatter string for a regex to match expanded citations, attempting to handle locators. @*
@end table
@vindex tlon-regexp-expanded-citation-formatter
@table @asis
@item @code{tlon-regexp-expanded-citation-formatter}
Formatter string for a regex to match expanded citations (e.g., ``Author, Title (Year) @dots{}''). @*
@end table
@vindex tlon-regexp-expanded-citation-with-link
@table @asis
@item @code{tlon-regexp-expanded-citation-with-link}
Regex derived from @code{tlon-regexp-expanded-citation-formatter} to match an expanded citation where the title is a Tlön-style Markdown link. Captures the title. @*
@end table
@vindex tlon-regexp-expanded-citation-with-no-link
@table @asis
@item @code{tlon-regexp-expanded-citation-with-no-link}
Regex derived from @code{tlon-regexp-expanded-citation-formatter} to match an expanded citation where the title is enclosed in quotes or asterisks but is not a link. Captures the title. @*
@end table
@vindex tlon-tex-max-abstract-length
@table @asis
@item @code{tlon-tex-max-abstract-length}
Maximum recommended word count for an abstract. Used in reports. @*
@end table
@vindex tlon-tex-min-abstract-length
@table @asis
@item @code{tlon-tex-min-abstract-length}
Minimum recommended word count for an abstract. Used in reports. @*
@end table
@vindex tlon-tex-synopsis-length
@table @asis
@item @code{tlon-tex-synopsis-length}
Maximum recommended word count for a synopsis (generated via AI). @*
@end table

@node Variables
@subsection Variables

@vindex tlon-tex-excluded-keys
@table @asis
@item @code{tlon-tex-excluded-keys}
List of Bib@TeX{} keys for entries that do not require an abstract. Loaded from @code{tlon-tex-excluded-keys-file} and used by @code{tlon-tex-entries-report}. @*
@end table

@node Commands (2)
@section Commands

This section details the interactive commands provided by @samp{tlon-tex.el}. @*

@menu
* Abstract Management::
* Entry Management::
* URL Management::
* Translation Entry Creation::
* Citation Conversion and Replacement::
* Reporting and Field Finding::
* Transient Menu: Transient Menu (2). 
@end menu

@node Abstract Management
@subsection Abstract Management

@findex tlon-fetch-and-set-abstract
@table @asis
@item @code{tlon-fetch-and-set-abstract}
(Autoloaded) Attempts to fetch an abstract for the Bib@TeX{} entry at point and set its @samp{abstract} field. @*
@enumerate
@item
Checks if proceeding is allowed based on @code{tlon-abstract-overwrite} and existing abstract. @*
@item
Retrieves DOI, ISBN, and URL from the entry. @*
@item
Tries fetching from CrossRef (using DOI), Google Books (using ISBN), and Zotero/Zotra (using URL/DOI) in that order. @*
@item
If an abstract is found, cleans it using @code{tlon-abstract-cleanup} and sets the field using the appropriate mode-specific function (Ebib or Bib@TeX{}). @*
@item
If no abstract is found via these methods, messages the user. @*
@item
Calls @code{tlon-ai-batch-continue} for potential batch processing integration. @*
@end enumerate
@end table

@findex tlon-translate-abstract
@table @asis
@item @code{tlon-translate-abstract}
Translates the abstract of the Bib@TeX{} entry at point (or specified @samp{KEY}) from its @samp{langid} to a selected @samp{TARGET-LANG} using DeepL@. @*
@enumerate
@item
Determines the Bib@TeX{} key, abstract text, and source language. @*
@item
Prompts for the @samp{TARGET-LANG} using @code{tlon-select-language}. @*
@item
Calls @code{tlon-deepl-translate} with the abstract text and languages. @*
@item
Uses the callback @code{tlon-translate-abstract-callback} to save the translation to the JSON file (@code{tlon-file-abstract-translations}) or a specified variable @samp{VAR}. @*
@end enumerate
@end table

@findex tlon-translate-abstracts
@table @asis
@item @code{tlon-translate-abstracts}
Translates abstracts for multiple entries in the current Bib@TeX{} buffer. Iterates through entries (up to 2000 times per call), calling @code{tlon-translate-abstract} for each entry that doesn't already have a translation (unless @samp{OVERWRITE} is non-nil). Useful for batch translation, especially when saving to a variable @samp{VAR} to avoid file I/O contention. @*
@end table

@node Entry Management
@subsection Entry Management

@findex tlon-move-entry-to-fluid
@table @asis
@item @code{tlon-move-entry-to-fluid}
(Autoloaded) Moves the Bib@TeX{} entry at point (or specified @samp{KEY}) from its current file to the fluid Bib@TeX{} file (@code{tlon-file-fluid}). @*
@enumerate
@item
Determines the key. @*
@item
Uses @samp{bibtex-extras-move-entry} to move the entry. @*
@item
Adds or updates the @samp{database} field to ``Tlön'' in the fluid file using @code{tlon-add-or-update-tlon-field-in-file}. @*
@item
Copies the key to the kill ring. @*
@end enumerate
@end table

@findex tlon-move-all-fluid-entries-to-stable
@table @asis
@item @code{tlon-move-all-fluid-entries-to-stable}
(Autoloaded) Moves all entries from the fluid Bib@TeX{} file (@code{tlon-file-fluid}) to the stable Bib@TeX{} file (@code{tlon-file-stable}). Checks for unsaved buffers first. @*
@end table

@findex tlon-add-database-field
@table @asis
@item @code{tlon-add-database-field}
Iterates through all entries in a specified Bib@TeX{} @samp{FILE} and adds or updates the @samp{database} field to ``Tlön'' using @code{tlon-add-or-update-tlon-field}. Saves the buffer. @*
@end table

@findex tlon-auto-add-database-field
@table @asis
@item @code{tlon-auto-add-database-field}
Hook function intended for @samp{after-save-hook} in Bib@TeX{} mode. Automatically calls @code{tlon-add-database-field} on the fluid Bib@TeX{} file (@code{tlon-file-fluid}) whenever it's saved. @*
@end table

@findex tlon-auto-clean-entry
@table @asis
@item @code{tlon-auto-clean-entry}
Hook function intended for @samp{after-save-hook} in Bib@TeX{} mode. Performs cleanup actions on save: removes trailing spaces in fields (@code{tlon-remove-empty-spaces}), escapes special characters (@code{bibtex-extras-escape-special-characters}), and runs @samp{bibtex-clean-entry} if point is at the start of an entry. @*
@end table

@findex tlon-add-lang-id-to-entries
@table @asis
@item @code{tlon-add-lang-id-to-entries}
Iterates through entries in the current Bib@TeX{} buffer. If an entry lacks a @samp{langid} field, prompts the user to select a language using @code{tlon-select-language} and sets the field. @*
@end table

@findex bibtex-extras-escape-special-characters
@table @asis
@item @code{bibtex-extras-escape-special-characters}
Escapes special characters ($, %, #, &) with a backslash within the current Bib@TeX{} buffer, excluding @samp{url} and @samp{file} fields. @*
@end table

@node URL Management
@subsection URL Management

@findex tlon-prompt-to-add-missing-urls
@table @asis
@item @code{tlon-prompt-to-add-missing-urls}
(Autoloaded) Finds URLs present in the current Markdown buffer but missing from the Tlön bibliography. @*
@enumerate
@item
Gets missing URLs using @code{tlon-get-missing-urls}. @*
@item
Iterates through missing URLs, highlighting each one. @*
@item
Prompts the user (``Add? y/n'') for each URL@. @*
@item
Saves the URLs the user wants to add to the file specified by @samp{zotra-extras-add-multiple-urls-filename} using @samp{files-extras-list-to-lines}. @*
@item
Messages the user about the saved file and the next step (using @samp{zotra-extras-add-multiple-urls}). @*
@end enumerate
@end table

@node Translation Entry Creation
@subsection Translation Entry Creation

@findex tlon-tex-create-translation-entry
@table @asis
@item @code{tlon-tex-create-translation-entry}
(Autoloaded) Creates a new Bib@TeX{} entry representing a translation of the entry currently open in @samp{ebib-entry-mode}. @*
@enumerate
@item
Prompts for the target language using @code{tlon-select-language}. @*
@item
Gathers fields from the original entry (@samp{translation} (original key), @samp{type}, @samp{author}, @samp{database}). @*
@item
Prompts for the new @samp{title} and @samp{translator}. @*
@item
Sets the @samp{langid} based on the selected language and @samp{date} to the current year. @*
@item
Switches to the translations Bib@TeX{} database (database 3). @*
@item
Creates a new entry (@samp{ebib-add-entry}). @*
@item
Sets the gathered/prompted fields in the new entry. @*
@item
Generates a citation key for the new entry (@samp{ebib-generate-autokey}). @*
@end enumerate
@end table

@node Citation Conversion and Replacement
@subsection Citation Conversion and Replacement

@findex tlon-convert-links-to-cite
@table @asis
@item @code{tlon-convert-links-to-cite}
(Autoloaded) Iterates through standard Markdown links in the current buffer. If a link's URL matches a @samp{url} field in the Tlön bibliography (found via @code{tlon-bibliography-lookup}), prompts the user to convert the link to a @samp{<Cite>} tag using the corresponding Bib@TeX{} key. @*
@end table

@findex tlon-convert-bibliography-to-cite
@table @asis
@item @code{tlon-convert-bibliography-to-cite}
(Autoloaded) Converts plain text bibliography entries (matching @code{tlon-regexp-expanded-citation-with-link} or @code{tlon-regexp-expanded-citation-with-no-link}) within the current region/buffer into @samp{<Cite>} tags. Looks up the Bib@TeX{} key based on the @samp{title} using @code{tlon-bibliography-lookup}. Assumes one work per line and no locators. @*
@end table

@findex tlon-tex-replace-keys-with-citations
@table @asis
@item @code{tlon-tex-replace-keys-with-citations}
Replaces all @samp{<Cite key}``@dots{}'' @dots{}>= tags in a @samp{FILE} (or current buffer) with formatted citations retrieved from the Tlön API@. @*
@enumerate
@item
Calls @code{tlon-tex-do-replace-keys-with-citations}. @*
@item
Optionally takes an @samp{AUDIO} flag. If non-nil, requests audio-specific citation styles ('short-audio', 'long-audio') from the API@. Otherwise, requests 'short' or 'long' based on the @samp{length} attribute in the @samp{<Cite>} tag. @*
@end enumerate
@end table

@findex tlon-tex-replace-keys-with-citations-in-dir
@table @asis
@item @code{tlon-tex-replace-keys-with-citations-in-dir}
Recursively applies @code{tlon-tex-replace-keys-with-citations} to all Markdown files in the current directory. Takes optional @samp{AUDIO} flag. @*
@end table

@node Reporting and Field Finding
@subsection Reporting and Field Finding

@findex tlon-tex-entries-report
@table @asis
@item @code{tlon-tex-entries-report}
(Autoloaded) Generates a report buffer listing Bib@TeX{} entries in the current buffer that: @*
@itemize
@item
Have no abstract (excluding those in @code{tlon-tex-excluded-keys} or with a @samp{crossref} field). @*
@item
Have abstracts longer than @code{tlon-tex-max-abstract-length} words. @*
@item
Have abstracts shorter than @code{tlon-tex-min-abstract-length} words. @*
@item
Have abstracts with fewer than 10 words. @*
@end itemize
Filters out entries that are translations (have a @samp{translation} field) using @code{tlon-text-remove-translated-entries}. @*
@end table

@findex tlon-tex-add-to-excluded-keys
@table @asis
@item @code{tlon-tex-add-to-excluded-keys}
Adds one or more Bib@TeX{} keys (provided as a space-separated string) to the @code{tlon-tex-excluded-keys} list and saves the list to @code{tlon-tex-excluded-keys-file}. @*
@end table

@findex tlon-tex-find-next-entry-with-missing-field
@table @asis
@item @code{tlon-tex-find-next-entry-with-missing-field}
Moves point to the next Bib@TeX{} entry in the buffer that is missing a specified @samp{FIELD} (prompting for the field name with completion). Skips entries that have a @samp{crossref} field. @*
@end table

@node Transient Menu (2)
@subsection Transient Menu

@findex tlon-tex-menu
The command @code{tlon-tex-menu} (Autoloaded) activates a @samp{transient} menu interface for Bib@TeX{}-related operations. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Markdown}: @*
@itemize
@item
@strong{URLs missing from database}: @*
@table @asis
@item @samp{f}
Find in file (@code{tlon-prompt-to-add-missing-urls}) @*
@item @samp{z}
Add with Zotra (@samp{zotra-extras-add-multiple-urls}) @*
@end table
@item
@strong{Convert to `Cite`}: @*
@table @asis
@item @samp{b}
Convert bibliography (@code{tlon-convert-bibliography-to-cite}) @*
@item @samp{l}
Convert links (@code{tlon-convert-links-to-cite}) @*
@end table
@end itemize
@item
@strong{Ebib}: @*
@table @asis
@item @samp{a}
Fetch abstract (@code{tlon-fetch-and-set-abstract}) @*
@item @samp{c}
Create translation entry (@code{tlon-tex-create-translation-entry}) @*
@end table
@item
@strong{Bib@TeX{}}: @*
@itemize
@item
@strong{Report}: @*
@table @asis
@item @samp{r r}
Generate report (@code{tlon-tex-entries-report}) @*
@item @samp{r x}
Add key to exclude from report (@code{tlon-tex-add-to-excluded-keys}) @*
@end table
@item
@strong{Move}: @*
@table @asis
@item @samp{t}
Move this entry to Tlön database (@code{tlon-move-entry-to-fluid}) @*
@item @samp{s}
Move all entries to stable (@code{tlon-move-all-fluid-entries-to-stable}) @*
@end table
@end itemize
@end itemize

@node Internal Functions and Variables (2)
@section Internal Functions and Variables

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization. @*

@menu
* Abstract Fetching Helpers::
* Entry Management Helpers::
* Autokey Generation::
* URL and Bibliography Helpers::
* Citation Replacement Helpers::
* Abstract Translation Helpers::
* Reporting Helpers::
* Field Modification Advice::
@end menu

@node Abstract Fetching Helpers
@subsection Abstract Fetching Helpers

@findex tlon-fetch-abstract-with-zotra
@table @asis
@item @code{tlon-fetch-abstract-with-zotra}
Attempts to fetch the abstract using @samp{zotra-extras-fetch-field} for a given @samp{URL} or @samp{DOI}. Tries both the original URL and the resolved URL from the DOI (via @code{tlon-fetch-url-from-doi}). Handles PDF URLs and timeouts. @*
@end table
@findex tlon-fetch-url-from-doi
@table @asis
@item @code{tlon-fetch-url-from-doi}
Fetches the final redirected URL for a given @samp{DOI} using @samp{curl -ILs}. @*
@end table
@findex tlon-fetch-abstract-from-crossref
@table @asis
@item @code{tlon-fetch-abstract-from-crossref}
Fetches abstract data from the CrossRef API using a @samp{DOI}. Parses the JSON response. @*
@end table
@findex tlon-fetch-abstract-from-google-books
@table @asis
@item @code{tlon-fetch-abstract-from-google-books}
Fetches abstract (description) data from the Google Books API using an @samp{ISBN}. Parses the JSON response. Includes a 5-second timeout. @*
@end table
@findex tlon-abstract-may-proceed-p
@table @asis
@item @code{tlon-abstract-may-proceed-p}
Checks if the abstract fetching/setting process should proceed based on the current mode, the value of @code{tlon-abstract-overwrite}, and whether an abstract already exists. Prompts the user if @samp{tlon-abstract-overwrite} is 'ask. @*
@end table
@findex tlon-fetch-field-with-zotra
@table @asis
@item @code{tlon-fetch-field-with-zotra}
Wrapper around @samp{zotra-extras-fetch-field}, potentially fetching the ID/URL first using @samp{ebib-extras-get-or-fetch-id-or-url}. @*
@end table
@findex tlon-abstract-cleanup
@table @asis
@item @code{tlon-abstract-cleanup}
Cleans up a raw abstract string by removing XML/HTML tags, specific @LaTeX{} tags, leading ``summary'' or ``abstract'' words, and ensuring it ends with a period. @*
@end table

@node Entry Management Helpers
@subsection Entry Management Helpers

@findex tlon-add-or-update-tlon-field
@table @asis
@item @code{tlon-add-or-update-tlon-field}
Uses @samp{bibtex-extras-add-or-update-field} to set the @samp{database} field to ``Tlön'' in the current entry. @*
@end table
@findex tlon-add-or-update-tlon-field-in-file
@table @asis
@item @code{tlon-add-or-update-tlon-field-in-file}
Finds the entry with @samp{KEY} in @samp{FILE} and calls @code{tlon-add-or-update-tlon-field} on it. Saves the buffer. @*
@end table
@findex tlon-remove-empty-spaces
@table @asis
@item @code{tlon-remove-empty-spaces}
Removes spaces immediately preceding a closing brace @samp{@}} within Bib@TeX{} fields in the current buffer. @*
@end table

@node Autokey Generation
@subsection Autokey Generation

These functions customize the Bib@TeX{} autokey generation process, likely used as replacements or advice for standard @samp{bibtex-generate-autokey} behavior. @*

@findex tlon-generate-autokey
@table @asis
@item @code{tlon-generate-autokey}
Generates a Bib@TeX{} key based on @samp{AUTHOR}, @samp{YEAR}, and @samp{TITLE} strings, following customizable Bib@TeX{} autokey settings (separators, lengths, etc.). Calls helper functions @code{tlon-autokey-get-names}, @code{tlon-autokey-get-year}, @code{tlon-autokey-get-title}. @*
@end table
@findex tlon-autokey-get-names
@table @asis
@item @code{tlon-autokey-get-names}
Formats the author @samp{NAME} string according to Bib@TeX{} autokey settings (number of names, separator, handling ``and''). @*
@end table
@findex tlon-autokey-get-year
@table @asis
@item @code{tlon-autokey-get-year}
Extracts the relevant part of the @samp{YEAR} string based on @samp{bibtex-autokey-year-length}. @*
@end table
@findex tlon-autokey-get-title
@table @asis
@item @code{tlon-autokey-get-title}
Formats the @samp{TITLE} string according to Bib@TeX{} autokey settings (number of words, ignored words, separator, handling terminators). @*
@end table

@node URL and Bibliography Helpers
@subsection URL and Bibliography Helpers

@findex tlon-get-missing-urls
@table @asis
@item @code{tlon-get-missing-urls}
Finds URLs present in a @samp{FILE} (using @code{tlon-get-urls-in-file}) but not found in the @samp{url} field of any entry in the Tlön bibliography (using @code{tlon-get-field-in-bibliography}). Uses simplified URLs for comparison. @*
@end table
@findex tlon-get-urls-in-file
@table @asis
@item @code{tlon-get-urls-in-file}
Extracts all unique URLs found within Markdown links (@samp{markdown-regex-link-inline}) in a @samp{FILE} (or current buffer). Uses @samp{ffap-url-p} for validation. @*
@end table
@findex tlon-bibliography-lookup
@table @asis
@item @code{tlon-bibliography-lookup}
Searches the cached Tlön bibliography (@samp{citar-cache--bibliographies}) for an entry where @samp{FIELD} matches @samp{VALUE} (optionally as a substring). Returns the value of @samp{ASSOC-FIELD} for the matching entry. @*
@end table
@findex tlon-get-field-in-bibliography
@table @asis
@item @code{tlon-get-field-in-bibliography}
Returns a list of all values for a specific @samp{FIELD} found across all entries in the cached Tlön bibliography. @*
@end table

@node Citation Replacement Helpers
@subsection Citation Replacement Helpers

@findex tlon-tex-do-replace-keys-with-citations
@table @asis
@item @code{tlon-tex-do-replace-keys-with-citations}
The core logic for replacing @samp{<Cite>} tags. Iterates through tags, extracts the key and length attribute, determines the required CSL style (based on length and optional @samp{AUDIO} flag), fetches the formatted citation from the API using @code{tlon-api-get-citation}, and replaces the tag with the result. @*
@end table

@node Abstract Translation Helpers
@subsection Abstract Translation Helpers

@findex tlon-read-abstract-translations
@table @asis
@item @code{tlon-read-abstract-translations}
Reads and parses the JSON data from @code{tlon-file-abstract-translations} using @code{tlon-read-json}. @*
@end table
@findex tlon-write-abstract-translations
@table @asis
@item @code{tlon-write-abstract-translations}
Writes the provided @samp{DATA} (alist) to @code{tlon-file-abstract-translations} using @code{tlon-write-data}. @*
@end table
@findex tlon-add-abstract-translation
@table @asis
@item @code{tlon-add-abstract-translation}
Adds or updates a @samp{TRANSLATION} for a given @samp{KEY} and @samp{TARGET-LANG} in the abstract translations @samp{DATA} (read from file or passed as @samp{VAR}). Handles existing entries and overwriting based on the @samp{OVERWRITE} flag. Writes back to file or updates the variable. @*
@end table
@findex tlon-translate-abstract-callback
@table @asis
@item @code{tlon-translate-abstract-callback}
Callback function used by @code{tlon-translate-abstract}. Takes the DeepL translation result, the @samp{KEY}, @samp{TARGET-LANG}, and optional @samp{OVERWRITE} and @samp{VAR} flags, and calls @code{tlon-add-abstract-translation} to save the result. @*
@end table

@node Reporting Helpers
@subsection Reporting Helpers

@findex tlon-tex-load-excluded-keys
@table @asis
@item @code{tlon-tex-load-excluded-keys}
Loads the list of excluded keys from @code{tlon-tex-excluded-keys-file} into the @code{tlon-tex-excluded-keys} variable. @*
@end table
@findex tlon-tex-save-excluded-keys
@table @asis
@item @code{tlon-tex-save-excluded-keys}
Saves the current value of @code{tlon-tex-excluded-keys} back to @code{tlon-tex-excluded-keys-file}. @*
@end table
@findex tlon-text-remove-translated-entries
@table @asis
@item @code{tlon-text-remove-translated-entries}
Filters a @samp{LIST} of Bib@TeX{} keys, removing any key that corresponds to an entry having a @samp{translation} field (checked by temporarily opening the entry in Ebib). @*
@end table

@node Field Modification Advice
@subsection Field Modification Advice

@findex tlon-tex-field-modified
@table @asis
@item @code{tlon-tex-field-modified}
Central function called when a Bib@TeX{} field is modified. Currently, if the modified @samp{FIELD} is ``abstract'', it triggers DeepL translation via @code{tlon-deepl-translate-abstract}. @*
@end table
@findex tlon-tex-remove-braces
@table @asis
@item @code{tlon-tex-remove-braces}
Removes curly braces @samp{@{@} = from a =STRING}. Used before sending abstract text to DeepL@. @*
@end table
@findex tlon-tex-bibtex-set-field-advice
@table @asis
@item @code{tlon-tex-bibtex-set-field-advice}
:around advice for @samp{bibtex-set-field}. Calls the original function and then calls @code{tlon-tex-field-modified} with the field name, value, and entry key. @*
@end table
@findex tlon-tex-ebib-set-field-advice
@table @asis
@item @code{tlon-tex-ebib-set-field-advice}
:around advice for @samp{ebib-set-field-value}. Calls the original function and then calls @code{tlon-tex-field-modified} with the field name, value, and entry key. @*
@end table

@node Clock Functionality (@samp{tlon-clockel})
@chapter Clock Functionality (@samp{tlon-clock.el})

This module provides functions for interacting with Org mode's clocking mechanism (@samp{org-clock}), specifically tailored for the Tlön workflow. It allows retrieving information about the currently clocked task, such as associated files or issues, and performing actions based on that information. @*

@menu
* Commands: Commands (3). 
* Internal Functions and Variables: Internal Functions and Variables (3). 
@end menu

@node Commands (3)
@section Commands

This section details the interactive commands provided by @samp{tlon-clock.el}. @*

@menu
* Open Clocked Task's File::
* Open Clocked Task's Issue::
* Copy Region or Buffer::
@end menu

@node Open Clocked Task's File
@subsection Open Clocked Task's File

@findex tlon-open-clock-file
The command @code{tlon-open-clock-file} identifies the Bib@TeX{} key associated with the currently running Org clock task (using @code{tlon-get-clock-key}) and opens the corresponding file (located via @code{tlon-get-file-from-key}). This provides quick access to the primary document related to the clocked task. @*

@node Open Clocked Task's Issue
@subsection Open Clocked Task's Issue

@findex tlon-open-clock-issue
The command @code{tlon-open-clock-issue} finds an @samp{orgit-forge} link within the currently clocked heading, extracts the issue identifier (GID), and opens the corresponding issue using @samp{forge-visit-issue}. This requires the clocked heading to contain a link like @samp{[[orgit-topic:ISSUE_GID][...]]} and for the @samp{forge} package to be configured. @*

@node Copy Region or Buffer
@subsection Copy Region or Buffer

@findex tlon-copy-dwim
The command @code{tlon-copy-dwim} (``Do What I Mean'') copies text to the kill ring. If a region is active, it copies the region's content. If no region is active, it copies the entire content of the current buffer. This is a general utility command included in this module. @*

@node Internal Functions and Variables (3)
@section Internal Functions and Variables

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization. @*

@menu
* Getting Clock Information::
* Utility Functions::
* Variables: Variables (1). 
@end menu

@node Getting Clock Information
@subsection Getting Clock Information

@findex tlon-get-clock
@table @asis
@item @code{tlon-get-clock}
Returns the raw string of the currently clocked heading (@samp{org-clock-current-task}). Errors if no clock is running. @*
@end table

@findex tlon-get-clock-key
@table @asis
@item @code{tlon-get-clock-key}
Extracts the Bib@TeX{} key from the clocked heading string. It assumes the key is enclosed in backticks (e.g., ``key``) and uses the regular expression @code{tlon-key-regexp} to find it. @*
@end table

@findex tlon-get-clock-file
@table @asis
@item @code{tlon-get-clock-file}
Retrieves the full file path associated with the Bib@TeX{} key found in the clocked heading. Uses @code{tlon-get-clock-key} and @code{tlon-get-file-from-key}. @*
@end table

@findex tlon-get-clock-issue
@table @asis
@item @code{tlon-get-clock-issue}
Finds the first @samp{orgit-forge} link in the clocked heading (@samp{org-clock-heading}) and returns the issue identifier (GID) part of the link (e.g., the part after @samp{orgit-topic:}). @*
@end table

@findex tlon-get-clock-action
@table @asis
@item @code{tlon-get-clock-action}
Extracts the assumed ``action'' from the clocked heading. It expects the action to be the second word in the heading string (after the first word, often a verb like ``Translate''). It validates this word against the list of known actions defined in the Tlön labels configuration (@code{tlon-label-lookup-all :action}). @*
@end table

@findex tlon-get-clock-label
@table @asis
@item @code{tlon-get-clock-label}
Retrieves the label associated with the action identified by @code{tlon-get-clock-action}, using the Tlön labels configuration (@code{tlon-label-lookup}). @*
@end table

@findex tlon-get-clock-next-label
@table @asis
@item @code{tlon-get-clock-next-label}
Determines the ``next'' label in the sequence defined by @code{tlon-job-labels}, based on the label of the currently clocked action (@code{tlon-get-clock-label}). This relies on the order within the @code{tlon-job-labels} alist. @*
@end table

@node Utility Functions
@subsection Utility Functions

@findex tlon-next-value
@table @asis
@item @code{tlon-next-value}
A generic helper function to find the value associated with a @samp{PROPERTY} that comes @strong{after} the item with the specified @samp{VALUE} in an @samp{ALIST}. Used by @code{tlon-get-clock-next-label}. @*
@end table

@findex tlon-copy-buffer
@table @asis
@item @code{tlon-copy-buffer}
Copies the entire content of a specified @samp{FILE} (or the current buffer) to the kill ring. @*
@end table

@findex tlon-copy-region
@table @asis
@item @code{tlon-copy-region}
Copies the text between positions @samp{BEG} and @samp{END} to the kill ring. @*
@end table

@findex tlon-set-paths-from-clock
@table @asis
@item @code{tlon-set-paths-from-clock}
Retrieves the Bib@TeX{} key from the clocked task and uses Tlön metadata to find the file paths for both the original document and its corresponding translation. Returns these paths and the key as multiple values. @*
@end table

@findex tlon-set-windows
@table @asis
@item @code{tlon-set-windows}
A utility function (likely requiring @samp{window-extras} and @samp{winum} packages) to open two specified files (@samp{ORIGINAL-PATH} and @samp{TRANSLATION-PATH}) in specific windows (window 1 and window 2, respectively), splitting the frame if necessary. @*
@end table

@node Variables (1)
@subsection Variables

@vindex tlon-key-regexp
@table @asis
@item @code{tlon-key-regexp}
The constant regular expression used by @code{tlon-get-clock-key} to identify Bib@TeX{} keys within clocked task headings. It specifically looks for text enclosed in backticks, optionally followed by @samp{.md}. @*
@end table

@node Color Palette Management (@samp{tlon-colorel})
@chapter Color Palette Management (@samp{tlon-color.el})

This module provides functions to manage color palettes for the Tlön frontend projects (specifically @samp{uqbar-front}). It allows loading predefined palettes into CSS and JavaScript files, storing palettes derived from CSS, deleting palettes, and interactively manipulating color values (hue, saturation, lightness) within the CSS file. @*

@menu
* Dependencies: Dependencies (2). 
* User Options: User Options (2). 
* Commands: Commands (4). 
* Internal Functions and Variables: Internal Functions and Variables (4). 
@end menu

@node Dependencies (2)
@section Dependencies

@itemize
@item
@samp{tlon-core} @*
@item
@samp{transient} @*
@item
@samp{color-extras} (external package, likely required for color manipulation and conversion) @*
@end itemize

@node User Options (2)
@section User Options

@vindex tlon-color-format-in-frontend-files
@table @asis
@item @code{tlon-color-format-in-frontend-files}
Specifies the preferred color format (``hex'' or ``hsl'') to use when writing color values to the frontend CSS file (@code{globals.css}). Defaults to ``hex''. Note: The JavaScript file (@code{theme-colors.js}) currently always uses ``hsl''. @*
@end table

@vindex tlon-colors-change-step
@table @asis
@item @code{tlon-colors-change-step}
The default step value (integer) used when increasing or decreasing hue, saturation, or lightness using the interactive commands. Defaults to 1. @*
@end table

@node Commands (4)
@section Commands

This section details the interactive commands provided by @samp{tlon-color.el}. @*

@menu
* Open Global CSS File::
* Load Color Palette::
* Save Frontend Files::
* Store Color Palette::
* Delete Color Palette::
* Color Manipulation Commands::
* Color Menu::
@end menu

@node Open Global CSS File
@subsection Open Global CSS File

@findex tlon-color-open-globals-file
The command @code{tlon-color-open-globals-file} simply opens the main CSS file (@code{globals.css}) where color palettes are defined for the frontend. @*

@node Load Color Palette
@subsection Load Color Palette

@findex tlon-color-load-palette
The command @code{tlon-color-load-palette} loads a specified, previously stored color @samp{PALETTE} into the frontend files. @*

@enumerate
@item
Prompts the user to select a @samp{PALETTE} name from the list stored in @code{tlon-color-palettes}. @*
@item
Optionally takes a @samp{LANGUAGE} argument (`css` or `js`). If nil, it loads the palette into both the CSS and JS files. @*
@item
For each specified language: @*
@itemize
@item
Removes the existing color sections using @code{tlon-color-remove-colors-section}. @*
@item
Inserts the new color sections for the selected @samp{PALETTE} using @code{tlon-color-insert-colors-section}. @*
@end itemize
@end enumerate

@node Save Frontend Files
@subsection Save Frontend Files

@findex tlon-color-save-frontend-files
The command @code{tlon-color-save-frontend-files} is a convenience command designed to synchronize color changes made in the CSS file with the JavaScript file. @*

@enumerate
@item
Saves the current state of the @code{globals.css} buffer. @*
@item
Parses the current colors in @code{globals.css} and temporarily stores them under the name ``temp-palette'' using @code{tlon-color-store-palette} (overwriting if it exists). @*
@item
Loads this ``temp-palette'' into the @code{theme-colors.js} file using @code{tlon-color-load-palette} with the `js` language argument. @*
@end enumerate

@node Store Color Palette
@subsection Store Color Palette

@findex tlon-color-store-palette
The command @code{tlon-color-store-palette} parses the current color definitions in @code{globals.css} and saves them as a named palette in the @code{tlon-color-palettes} variable and persists them to @code{tlon-color-palette-file}. @*

@enumerate
@item
Prompts the user for a @samp{PALETTE-NAME}. @*
@item
Parses the CSS file using @code{tlon-color-parse-css} to extract light and dark theme colors. @*
@item
Checks if a palette with the given name already exists. @*
@item
If it exists, asks for confirmation to overwrite (unless the optional @samp{OVERWRITE} argument is non-nil). Updates the existing entry. @*
@item
If it doesn't exist, adds the new palette to @code{tlon-color-palettes}. @*
@item
Saves the updated @code{tlon-color-palettes} list to @code{tlon-color-palette-file} using @code{tlon-color-save-palettes-to-file}. @*
@item
Messages the user about the success (added or updated). @*
@end enumerate

@node Delete Color Palette
@subsection Delete Color Palette

@findex tlon-color-delete-palette
The command @code{tlon-color-delete-palette} removes a stored color palette. @*

@enumerate
@item
Prompts the user to select a @samp{PALETTE} name from the existing palettes in @code{tlon-color-palettes}. @*
@item
Removes all entries matching the selected name from the @code{tlon-color-palettes} list. @*
@item
Saves the updated list back to @code{tlon-color-palette-file} using @code{tlon-color-save-palettes-to-file}. @*
@item
Messages the user about the successful removal. @*
@end enumerate

@node Color Manipulation Commands
@subsection Color Manipulation Commands

These commands allow interactive modification of color values (HSL) directly within the @code{globals.css} file. They operate on the color string at point, replace it with the modified value, and then call @code{tlon-color-save-frontend-files} to synchronize the change with the JS file. They rely on functions from the @samp{color-extras} package. @*

@itemize
@item
@strong{Hue}: @*
@findex tlon-color-increase-hue-at-point
@table @asis
@item @code{tlon-color-increase-hue-at-point}
Increases hue by @code{tlon-colors-change-step}. @*
@end table
@findex tlon-color-decrease-hue-at-point
@table @asis
@item @code{tlon-color-decrease-hue-at-point}
Decreases hue by @code{tlon-colors-change-step}. @*
@end table
@findex tlon-color-change-hue-at-point
@table @asis
@item @code{tlon-color-change-hue-at-point}
Prompts for a change amount (e.g., ``+5'', ``-10'') and applies it to the hue. @*
@end table
@item
@strong{Saturation}: @*
@findex tlon-color-increase-saturation-at-point
@table @asis
@item @code{tlon-color-increase-saturation-at-point}
Increases saturation by @code{tlon-colors-change-step}. @*
@end table
@findex tlon-color-decrease-saturation-at-point
@table @asis
@item @code{tlon-color-decrease-saturation-at-point}
Decreases saturation by @code{tlon-colors-change-step}. @*
@end table
@findex tlon-color-change-saturation-at-point
@table @asis
@item @code{tlon-color-change-saturation-at-point}
Prompts for a change amount and applies it to the saturation. @*
@end table
@item
@strong{Lightness}: @*
@findex tlon-color-increase-lightness-at-point
@table @asis
@item @code{tlon-color-increase-lightness-at-point}
Increases lightness by @code{tlon-colors-change-step}. @*
@end table
@findex tlon-color-decrease-lightness-at-point
@table @asis
@item @code{tlon-color-decrease-lightness-at-point}
Decreases lightness by @code{tlon-colors-change-step}. @*
@end table
@findex tlon-color-change-lightness-at-point
@table @asis
@item @code{tlon-color-change-lightness-at-point}
Prompts for a change amount and applies it to the lightness. @*
@end table
@end itemize

@node Color Menu
@subsection Color Menu

@findex tlon-color-menu
The command @code{tlon-color-menu} activates a @samp{transient} menu interface providing access to most of the color management and manipulation commands. @*

It includes sections for: @*
@itemize
@item
@strong{Change colors}: Access to the hue, saturation, and lightness increase/decrease/change commands. Includes an option to set the change step. @*
@item
@strong{Palette}: Access to load, store, and delete palettes. Includes commands to open the CSS file, save frontend files, and invoke color conversion/contrast functions from @samp{color-extras}. Includes an option to set the frontend format preference. @*
@end itemize

@node Internal Functions and Variables (4)
@section Internal Functions and Variables

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization. @*

@menu
* Constants and Variables::
* Helper Functions::
* Transient Infix Commands::
@end menu

@node Constants and Variables
@subsection Constants and Variables

@vindex tlon-color-palettes
@table @asis
@item @code{tlon-color-palettes}
The central variable holding the list of defined color palettes. It's an alist where the key is the palette name (string) and the value is another alist representing the colors. Each color entry is @samp{(CSS-VARIABLE . (LIGHT-VALUE . DARK-VALUE))}. Loaded from and saved to @code{tlon-color-palette-file}. @*
@end table
@vindex tlon-color-palette-file
@table @asis
@item @code{tlon-color-palette-file}
Path to the Elisp file where @code{tlon-color-palettes} is persisted. @*
@end table
@vindex tlon-color-globals-css-file
@table @asis
@item @code{tlon-color-globals-css-file}
Path to the main CSS file in the @samp{uqbar-front} repository. @*
@end table
@vindex tlon-color-theme-colors-js-file
@table @asis
@item @code{tlon-color-theme-colors-js-file}
Path to the JavaScript theme colors file in the @samp{uqbar-front} repository. @*
@end table
@vindex tlon-color-globals-css-header
@table @asis
@item @code{tlon-color-globals-css-header}
Format string for the start of a theme section in CSS@. @*
@end table
@vindex tlon-color-globals-css-footer
@table @asis
@item @code{tlon-color-globals-css-footer}
String marking the end of a theme section in CSS@. @*
@end table
@vindex tlon-color-globals-css-remove-pattern
@table @asis
@item @code{tlon-color-globals-css-remove-pattern}
Regex pattern used to remove entire theme sections from the CSS file. @*
@end table
@vindex tlon-color-theme-colors-js-header
@table @asis
@item @code{tlon-color-theme-colors-js-header}
Format string for the start of a theme section in JS@. @*
@end table
@vindex tlon-color-theme-colors-js-footer
@table @asis
@item @code{tlon-color-theme-colors-js-footer}
String marking the end of a theme section in JS@. @*
@end table

@node Helper Functions
@subsection Helper Functions

@findex tlon-color-read-palette
@table @asis
@item @code{tlon-color-read-palette}
Prompts the user to select an existing palette name using completion based on @code{tlon-color-palettes}. Returns the selected name as a list (for interactive use). @*
@end table
@findex tlon-color-load-palettes
@table @asis
@item @code{tlon-color-load-palettes}
Loads the palettes from @code{tlon-color-palette-file} into the @code{tlon-color-palettes} variable if the file exists. Called automatically when @samp{tlon-color.el} is loaded. @*
@end table
@findex tlon-color-save-palettes-to-file
@table @asis
@item @code{tlon-color-save-palettes-to-file}
Saves the current value of @code{tlon-color-palettes} to @code{tlon-color-palette-file} in Elisp format. @*
@end table
@findex tlon-color-remove-colors-section
@table @asis
@item @code{tlon-color-remove-colors-section}
Removes the color definition sections from the specified @samp{LANGUAGE} file (CSS or JS) using the appropriate patterns. @*
@end table
@findex tlon-color-insert-colors-section
@table @asis
@item @code{tlon-color-insert-colors-section}
Inserts the color definitions for a given @samp{PALETTE} into the specified @samp{LANGUAGE} file. It encodes the palette using @code{tlon-color-encode}, inserts the result, converts colors to the desired format using @samp{color-extras-convert-all} (respecting @code{tlon-color-format-in-frontend-files} for CSS, forcing HSL for JS), and saves the buffer. @*
@end table
@findex tlon-color-encode
@table @asis
@item @code{tlon-color-encode}
Top-level function to encode a @samp{PALETTE} for a specific @samp{LANGUAGE}. Calls the appropriate CSS or JS encoding function for both light and dark themes and concatenates the results. @*
@end table
@findex tlon-color-encode-globals-css
@table @asis
@item @code{tlon-color-encode-globals-css}
Generates the CSS string for a specific @samp{THEME} (light/dark) of a @samp{PALETTE}. Uses @code{tlon-color-encode-frontend-variables}. @*
@end table
@findex tlon-color-encode-theme-colors-js
@table @asis
@item @code{tlon-color-encode-theme-colors-js}
Generates the JS string for a specific @samp{THEME} (light/dark) of a @samp{PALETTE}. Uses @code{tlon-color-encode-frontend-variables}. @*
@end table
@findex tlon-color-encode-frontend-variables
@table @asis
@item @code{tlon-color-encode-frontend-variables}
Iterates through the color definitions in a @samp{PALETTE}, extracts the correct value for the given @samp{THEME}, and formats it as a CSS variable declaration or a JS key-value pair based on the @samp{LANGUAGE}. @*
@end table
@findex tlon-color-parse-css
@table @asis
@item @code{tlon-color-parse-css}
Parses the @code{globals.css} file to extract the current color definitions for both light and dark themes. Calls @code{tlon-color-parse-css-theme} for each theme and combines the results into the standard palette alist format. @*
@end table
@findex tlon-color-parse-css-theme
@table @asis
@item @code{tlon-color-parse-css-theme}
Parses a specific @samp{THEME} section within the @samp{CSS-BUFFER}. It temporarily converts all colors in the buffer to hex format using @samp{color-extras-convert-all}, finds the theme section, extracts all CSS variable definitions (@samp{--variable: #value;}), and returns them as an alist. @*
@end table
@findex tlon-color-change-value-at-point
@table @asis
@item @code{tlon-color-change-value-at-point}
Core function for interactive color manipulation. Takes the @samp{COMPONENT} (``h'', ``s'', or ``l''), @samp{DIRECTION} (``+'' or ``-''), and optional @samp{STEP}. Finds the color at point, calls the appropriate @samp{ct-edit-hsluv-*} function from @samp{color-extras}, inserts the result, and calls @code{tlon-color-save-frontend-files}. @*
@end table

@node Transient Infix Commands
@subsection Transient Infix Commands

These functions define the behavior of the options within the @code{tlon-color-menu}. @*

@findex tlon-color-format-in-frontend-files-infix
@table @asis
@item @code{tlon-color-format-in-frontend-files-infix}
Reads the desired format (``hex'' or ``hsl'') from the user to set the local value of @code{tlon-color-format-in-frontend-files} for the current menu invocation. @*
@end table
@findex tlon-color-change-step-infix
@table @asis
@item @code{tlon-color-change-step-infix}
Reads a number from the user to set the local value of @code{tlon-colors-change-step} for the current menu invocation. @*
@end table

@node Contact Management (@samp{tlon-contactsel})
@chapter Contact Management (@samp{tlon-contacts.el})

This module provides functionality for managing contacts stored within an Org mode file. It allows creating new contact entries, editing their properties based on predefined roles, and retrieving contact information. @*

@menu
* Dependencies: Dependencies (3). 
* Configuration: Configuration (2). 
* Commands: Commands (5). 
* Internal Functions and Variables: Internal Functions and Variables (5). 
@end menu

@node Dependencies (3)
@section Dependencies

@itemize
@item
@samp{tlon-core} @*
@item
@samp{transient} @*
@item
@samp{org} @*
@item
@samp{org-id} @*
@item
@samp{org-contacts} @*
@end itemize

@node Configuration (2)
@section Configuration

@menu
* Constants: Constants (1). 
* Variables: Variables (2). 
@end menu

@node Constants (1)
@subsection Constants

@vindex tlon-contacts-id
@table @asis
@item @code{tlon-contacts-id}
The Org mode ID (``F874E332-47AF-436F-997E-1A6791DEE0BE'') used to identify the main heading under which contacts are stored. This ID is crucial for locating the contacts section within the Org file. @*
@end table

@vindex tlon-contacts-properties
@table @asis
@item @code{tlon-contacts-properties}
An alist defining the expected Org mode properties associated with different contact roles. The key is the role name (string, e.g., ``creator'', ``translator''), and the value is a list of property names (strings, e.g., ``EMAIL'', ``URL'', ``GENDER''). This structure dictates which properties are prompted for when editing a contact of a specific role. @*
@end table

@vindex tlon-contacts-property-values
@table @asis
@item @code{tlon-contacts-property-values}
A list defining the properties that can be edited, along with their transient menu shortcuts and potential completion candidates. Each element is a list @samp{(PROPERTY :shortcut SHORTCUT :candidates COMPLETION-LIST)}. @*
@itemize
@item
@samp{PROPERTY} (string): The name of the Org property (e.g., ``EMAIL'', ``GENDER''). @*
@item
@samp{SHORTCUT} (string): The single-character key used in the transient menu (@code{tlon-contacts-menu}) to edit this property. @*
@item
@samp{COMPLETION-LIST} (list of strings or nil): If a list is provided, @code{completing-read} will be used when editing this property, offering these values as candidates. If nil, @code{read-string} is used. Language candidates are dynamically fetched using @code{tlon-get-language-candidates}. @*
@end itemize
@end table

@node Variables (2)
@subsection Variables

@vindex tlon-contacts-file
@table @asis
@item @code{tlon-contacts-file}
Holds the path to the Org file containing the contacts. This variable is set dynamically by @code{tlon-contacts-get-file} using the @code{tlon-contacts-id} and should not be set manually by the user. @*
@end table

@node Commands (5)
@section Commands

@menu
* Create Contact::
* Edit Contact Properties::
* Copy Property Value::
* Edit Single Property::
* Dynamically Defined Edit Commands::
* Transient Menu: Transient Menu (3). 
@end menu

@node Create Contact
@subsection Create Contact

@findex tlon-contacts-create
The command @code{tlon-contacts-create} creates a new contact entry in the designated contacts Org file. @*
@enumerate
@item
Finds or opens the contacts file (@code{tlon-contacts-get-file}). @*
@item
Navigates to the main contacts heading using @code{tlon-contacts-id}. @*
@item
Inserts a new level 2 heading at the end of the subtree. @*
@item
Prompts for the first and last name using @code{tlon-contacts-insert-name} and inserts them. @*
@item
Calls @code{tlon-contacts-edit-properties} to prompt for the role and set initial properties. @*
@item
Sorts the contact headings alphabetically within the file using @code{tlon-sort-headings}. @*
@end enumerate

@node Edit Contact Properties
@subsection Edit Contact Properties

@findex tlon-contacts-edit-properties
The command @code{tlon-contacts-edit-properties} allows editing the Org properties of the contact entry at point. @*
@enumerate
@item
Ensures the buffer is in Org mode. @*
@item
Retrieves the contact's current ``ROLE'' property using @code{tlon-contacts-get-role}. @*
@item
If an optional @samp{ROLE} argument is provided, checks if it matches the current role. @*
@item
If no role exists or no @samp{ROLE} argument is given, prompts the user to select a role using @code{tlon-contacts-select-role}. If a role is newly selected, sets the ``ROLE'' property. @*
@item
Iterates through the properties defined for the selected role in @code{tlon-contacts-properties}. @*
@item
For each property: @*
@itemize
@item
Looks up its definition in @code{tlon-contacts-property-values} to find completion candidates. @*
@item
Gets the current value using @samp{org-entry-get}. @*
@item
Prompts the user for the new value using @code{completing-read} (if candidates exist) or @code{read-string}. @*
@item
Sets the property using @samp{org-set-property}. @*
@end itemize
@item
Saves the buffer. @*
@end enumerate

@node Copy Property Value
@subsection Copy Property Value

@findex tlon-contacts-copy-property-value
The command @code{tlon-contacts-copy-property-value} copies the value of a specified property for the contact at point to the kill ring. @*
@enumerate
@item
Calls @code{tlon-contacts-get-property-value}, which prompts the user to select a property from the non-empty properties of the current contact. @*
@item
Copies the retrieved value (or an empty string if nil) to the kill ring using @samp{kill-new}. @*
@item
Displays a confirmation message. @*
@end enumerate

@node Edit Single Property
@subsection Edit Single Property

@findex tlon-contacts-edit-one-property
The command @code{tlon-contacts-edit-one-property} provides a way to edit a single, specific property of the contact at point, using completion if available. @*
@enumerate
@item
Prompts the user to select the @samp{PROPERTY} to edit, offering completion based on the properties defined in @code{tlon-contacts-property-values}. @*
@item
Ensures the buffer is in Org mode. @*
@item
Looks up the property's definition in @code{tlon-contacts-property-values} to find completion candidates. @*
@item
Gets the current value using @samp{org-entry-get}. @*
@item
Prompts the user for the new value using @code{completing-read} (if candidates exist) or @code{read-string}. @*
@item
Sets the property using @samp{org-set-property}. @*
@item
Saves the buffer and displays a confirmation message. @*
@end enumerate

@node Dynamically Defined Edit Commands
@subsection Dynamically Defined Edit Commands

@findex tlon-contacts-define-property-edit-commands
The macro @code{tlon-contacts-define-property-edit-commands} automatically generates individual interactive commands for editing each property listed in @code{tlon-contacts-property-values}. @*
@itemize
@item
For each property (e.g., ``EMAIL''), it defines a command named @code{tlon-contacts-edit-email} (lowercase). @*
@item
Each generated command simply calls @code{tlon-contacts-edit-one-property} with the corresponding property name. @*
@item
This macro also defines (or redefines) the @code{tlon-contacts-menu} transient prefix. @*
@end itemize

@node Transient Menu (3)
@subsection Transient Menu

@findex tlon-contacts-menu
The command @code{tlon-contacts-menu} activates a @samp{transient} menu interface for contact management. This menu is defined by the @code{tlon-contacts-define-property-edit-commands} macro. @*

It typically includes: @*
@itemize
@item
General commands: @*
@table @asis
@item @samp{S}
Search contacts (@samp{org-contacts}) @*
@item @samp{c}
Create contact (@code{tlon-contacts-create}) @*
@item @samp{e}
Edit all properties (@code{tlon-contacts-edit-properties}) @*
@item @samp{y}
Copy property value (@code{tlon-contacts-copy-property-value}) @*
@end table
@item
Edit specific properties: @*
@itemize
@item
One entry for each property defined in @code{tlon-contacts-property-values}, using the specified @samp{:shortcut} key (e.g., @samp{m} for ``email'', @samp{g} for ``gender''). Each shortcut calls the corresponding dynamically generated edit command (e.g., @code{tlon-contacts-edit-email}). @*
@end itemize
@end itemize

@node Internal Functions and Variables (5)
@section Internal Functions and Variables

This section lists non-interactive functions used internally or potentially useful for advanced customization. @*

@findex tlon-contacts-get-file
@table @asis
@item @code{tlon-contacts-get-file}
Retrieves the path to the contacts Org file. It uses @code{tlon-get-or-set-org-var} to find the file containing the Org ID @code{tlon-contacts-id} and caches the result in the @code{tlon-contacts-file} variable. @*
@end table

@findex tlon-contacts-insert-name
@table @asis
@item @code{tlon-contacts-insert-name}
Prompts the user for ``First name: '' and ``Last name: '', then inserts the name formatted as ``Last name, First name'' at point. Saves the buffer afterwards. @*
@end table

@findex tlon-contacts-get-property-value
@table @asis
@item @code{tlon-contacts-get-property-value}
Retrieves the value of a specific @samp{PROP} for the contact entry at point. If @samp{PROP} is nil, it prompts the user to select a property from the list of non-empty properties (obtained via @code{tlon-contacts-get-nonempty-properties}). Returns the property value string. @*
@end table

@findex tlon-contacts-get-property-value-of-contact
@table @asis
@item @code{tlon-contacts-get-property-value-of-contact}
Prompts the user to select a contact using @samp{org-contacts}, then calls @code{tlon-contacts-get-property-value} in the context of the selected contact's buffer to retrieve the value of @samp{PROP} (prompting for @samp{PROP} if nil). @*
@end table

@findex tlon-contacts-get-nonempty-properties
@table @asis
@item @code{tlon-contacts-get-nonempty-properties}
Returns an alist of non-empty properties for the contact entry at point. It gets the contact's role, finds the associated properties from @code{tlon-contacts-properties}, and retrieves the value for each using @samp{org-entry-get}. @*
@end table

@findex tlon-contacts-get-contact-name
@table @asis
@item @code{tlon-contacts-get-contact-name}
Retrieves the first and last name from the heading of the contact entry at point. Assumes the format ``Last, First''. Returns a cons cell @samp{(FIRST . LAST)}. @*
@end table

@findex tlon-contacts-get-role
@table @asis
@item @code{tlon-contacts-get-role}
Returns the value of the ``ROLE'' property for the contact entry at point using @samp{org-entry-get}. @*
@end table

@findex tlon-contacts-select-role
@table @asis
@item @code{tlon-contacts-select-role}
Prompts the user to select a role using completion. The candidates are the keys (roles) from the @code{tlon-contacts-properties} alist. Returns the selected role string. @*
@end table

@node Counterpart Navigation and Comparison (@samp{tlon-counterpartel})
@chapter Counterpart Navigation and Comparison (@samp{tlon-counterpart.el})

This module provides functionality for finding, opening, and comparing ``counterpart'' files. In the Tlön context, a counterpart is typically the original version of a translated document, or a translation in a specific language if the current file is the original. It also includes tools for working with paragraphs within these files. @*

@menu
* Dependencies: Dependencies (4). 
* Commands: Commands (6). 
* Internal Functions and Variables: Internal Functions and Variables (6). 
@end menu

@node Dependencies (4)
@section Dependencies

@itemize
@item
@samp{tlon-core} @*
@item
@samp{tlon-md} @*
@item
@samp{tlon-yaml} @*
@item
@samp{files-extras} @*
@item
@samp{transient} @*
@item
@samp{dired} (optional, for Dired integration) @*
@end itemize

@node Commands (6)
@section Commands

@menu
* Finding Counterparts::
* Opening Counterparts::
* Paragraph Operations::
* Transient Menu: Transient Menu (4). 
@end menu

@node Finding Counterparts
@subsection Finding Counterparts

@findex tlon-get-counterpart
@table @asis
@item @code{tlon-get-counterpart}
(Autoloaded) Calculates and returns the full path to the counterpart file of @samp{FILE} (or the current buffer's file). @*
@itemize
@item
If the file is in a repository marked as @samp{translations} (based on its @samp{:subtype} property), it looks for the @samp{original_path} key in the file's YAML front matter and combines it with the counterpart directory (@code{tlon-get-counterpart-dir}). @*
@item
If the file is in a repository marked as @samp{originals}, it prompts the user to select a target language, finds the corresponding translations repository, and looks up the file's entry in the target repository's metadata to find the translated filename. @*
@item
Signals an error if the repository subtype is neither @samp{originals} nor @samp{translations}, or if necessary metadata is missing. @*
@end itemize
@end table

@findex tlon-get-counterpart-dir
@table @asis
@item @code{tlon-get-counterpart-dir}
Calculates and returns the directory path where the counterpart of @samp{FILE} (or the current buffer's file) should reside. It determines the counterpart repository (@code{tlon-get-counterpart-repo}) and translates the relative directory structure within the source repository to the equivalent structure in the target repository using @code{tlon-get-bare-dir-translation}. @*
@end table

@findex tlon-get-counterpart-repo
@table @asis
@item @code{tlon-get-counterpart-repo}
Returns the full path to the repository directory containing the counterpart of @samp{FILE} (or the current buffer's file). It identifies the source repository, its subproject, determines the counterpart language (@code{tlon-get-counterpart-language}), and looks up the repository matching the subproject and counterpart language using @code{tlon-repo-lookup}. @*
@end table

@findex tlon-get-counterpart-language
@table @asis
@item @code{tlon-get-counterpart-language}
Determines the language code of the counterpart for a given @samp{REPO} (or the current repository). @*
@itemize
@item
If the repository language is ``en'' (English), it prompts the user to select a target language from @code{tlon-project-target-languages} using completion. @*
@item
If the repository language is one of the target languages, it returns ``en''. @*
@item
Signals an error if the repository language is not recognized. @*
@end itemize
@end table

@findex tlon-get-content-subtype
@table @asis
@item @code{tlon-get-content-subtype}
Returns the @samp{:subtype} property ('originals or 'translations) of the repository containing @samp{FILE} (or the current buffer's file). Ensures the repository's @samp{:type} is 'content. @*
@end table

@node Opening Counterparts
@subsection Opening Counterparts

@findex tlon-open-counterpart
@table @asis
@item @code{tlon-open-counterpart}
(Autoloaded) Opens the counterpart of @samp{FILE} (or the current buffer's file) and attempts to position the cursor at the corresponding paragraph. @*
@enumerate
@item
Saves the current buffer if no @samp{FILE} argument is given. @*
@item
Finds the counterpart file using @code{tlon-get-counterpart}. @*
@item
Calculates the number of paragraphs before the current point using @code{tlon-get-number-of-paragraphs}. @*
@item
Determines if point is exactly between paragraphs using @code{tlon-is-between-paragraphs-p} to apply an offset. @*
@item
Opens the counterpart file using @samp{find-file} (or @samp{find-file-other-window} if @samp{OTHER-WIN} or prefix argument is non-nil). @*
@item
In the counterpart buffer, moves past the YAML front matter. @*
@item
Moves forward the calculated number of paragraphs (minus the offset). @*
@item
Moves point one character forward (typically to the start of the paragraph content). @*
@end enumerate
@end table

@findex tlon-open-counterpart-in-dired
@table @asis
@item @code{tlon-open-counterpart-in-dired}
Opens Dired to the directory containing the counterpart of @samp{FILE} (or the file at point in Dired). Uses @code{tlon-get-counterpart} to find the file and @samp{dired-jump} to open Dired. Supports opening in another window with a prefix argument. @*
@end table

@findex tlon-open-counterpart-dwim
@table @asis
@item @code{tlon-open-counterpart-dwim}
(Autoloaded) ``Do What I Mean'' command for opening counterparts. @*
@itemize
@item
If called in @samp{markdown-mode}, behaves like @code{tlon-open-counterpart}. @*
@item
If called in @samp{dired-mode}, behaves like @code{tlon-open-counterpart-in-dired}. @*
@item
Supports opening in another window with a prefix argument. @*
@end itemize
@end table

@findex tlon-open-counterpart-in-other-window-dwim
@table @asis
@item @code{tlon-open-counterpart-in-other-window-dwim}
(Autoloaded) Convenience command that calls @code{tlon-open-counterpart-dwim} with the @samp{OTHER-WIN} argument set to @samp{t}, forcing the counterpart to open in another window. @*
@end table

@node Paragraph Operations
@subsection Paragraph Operations

@findex tlon-count-paragraphs
@table @asis
@item @code{tlon-count-paragraphs}
Interactively counts and displays the number of paragraphs in the active region, or between specified @samp{START} and @samp{END} positions. Uses @code{tlon-get-number-of-paragraphs}. @*
@end table

@findex tlon-display-corresponding-paragraphs
@table @asis
@item @code{tlon-display-corresponding-paragraphs}
Displays pairs of corresponding paragraphs from a file and its counterpart in a dedicated buffer (``@emph{Paragraph Pairs}''). @*
@enumerate
@item
Takes @samp{PAIRS-OR-FN} as input. If it's a function (interactively defaults to @code{tlon-get-corresponding-paragraphs}), calls it to get the pairs. Otherwise, assumes it's already a list of pairs. @*
@item
Creates or clears the ``@emph{Paragraph Pairs}'' buffer. @*
@item
Iterates through the pairs, inserting ``Original:\n[paragraph]\n\nTranslation:\n[paragraph]\n\n----\n\n''. Handles missing paragraphs gracefully. @*
@item
Displays the buffer. Catches @samp{user-error} (like paragraph mismatch from @code{tlon-get-corresponding-paragraphs}) and still displays the buffer containing the comparison up to the point of error. @*
@end enumerate
@end table

@node Transient Menu (4)
@subsection Transient Menu

@findex tlon-counterpart-menu
The command @code{tlon-counterpart-menu} activates a @samp{transient} menu interface for counterpart operations. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Navigation}: @*
@table @asis
@item @samp{u}
Visit counterpart (@code{tlon-open-counterpart-dwim}) @*
@item @samp{H-u}
Visit counterpart other window (@code{tlon-open-counterpart-in-other-window-dwim}) @*
@item @samp{U}
Open counterpart in Dired (@code{tlon-open-counterpart-in-dired}) @*
@end table
@item
@strong{Matching}: @*
@table @asis
@item @samp{d}
Display corresponding paragraphs (@code{tlon-display-corresponding-paragraphs}) @*
@end table
@item
@strong{Metadata}: @*
@table @asis
@item @samp{o}
Set ‘original@math{_path}’ (@code{tlon-yaml-insert-original-path}) @*
@end table
@end itemize

@node Internal Functions and Variables (6)
@section Internal Functions and Variables

This section lists non-interactive functions used internally or potentially useful for advanced customization. @*

@menu
* Counterpart Finding Logic::
* Paragraph Handling Logic::
* Temporary Utility Functions::
@end menu

@node Counterpart Finding Logic
@subsection Counterpart Finding Logic

@findex tlon-get-counterpart-in-translations
@table @asis
@item @code{tlon-get-counterpart-in-translations}
Specific logic for finding the counterpart when @samp{FILE} is in a @samp{translations} repository. Gets the counterpart directory (@code{tlon-get-counterpart-dir}) and looks up the @samp{original_path} in the file's YAML metadata. @*
@end table

@findex tlon-get-counterpart-in-originals
@table @asis
@item @code{tlon-get-counterpart-in-originals}
Specific logic for finding the counterpart when @samp{FILE} is in an @samp{originals} repository. Gets the counterpart repository (@code{tlon-get-counterpart-repo}), reads its metadata (@code{tlon-metadata-in-repo}), and searches for an entry where the @samp{original_path} matches the filename of @samp{FILE}. Returns the @samp{file} property of the matching entry. @*
@end table

@node Paragraph Handling Logic
@subsection Paragraph Handling Logic

@findex tlon-is-between-paragraphs-p
@table @asis
@item @code{tlon-is-between-paragraphs-p}
Returns non-nil if point is exactly between two paragraphs (i.e., moving one character forward changes the paragraph count). Uses @code{tlon-get-number-of-paragraphs}. @*
@end table

@findex tlon-with-paragraphs
@table @asis
@item @code{tlon-with-paragraphs}
Iterates through each paragraph in @samp{FILE} (or current buffer) and executes @samp{FN} for each. @*
@enumerate
@item
Finds the file and switches to its buffer. @*
@item
Moves past the YAML front matter. @*
@item
Determines the end of the content (before local variables). @*
@item
Loops while point is before the content end: @*
@itemize
@item
Records the start position. @*
@item
Moves forward one paragraph using @samp{markdown-forward-paragraph}. @*
@item
Records the end position (capped at content end). @*
@item
If the region between start and end is non-empty and contains non-whitespace characters: @*
@itemize
@item
If @samp{RETURN-POSITIONS} is non-nil, pushes @samp{(start . end)} to the result list. @*
@item
Otherwise, calls @samp{FN} with start and end positions and pushes its result to the list. @*
@end itemize
@end itemize
@item
Returns the reversed list of results or positions. @*
@end enumerate
@end table

@findex tlon-get-number-of-paragraphs
@table @asis
@item @code{tlon-get-number-of-paragraphs}
Calculates the number of paragraphs between optional @samp{START} and @samp{END} positions. Calls @code{tlon-with-paragraphs} with @samp{RETURN-POSITIONS} set to @samp{t} and counts the resulting position pairs that fall within the specified range. @*
@end table

@findex tlon-get-corresponding-paragraphs
@table @asis
@item @code{tlon-get-corresponding-paragraphs}
Returns a list of corresponding paragraph pairs @samp{((orig-para-1 . trans-para-1) (orig-para-2 . trans-para-2) ...)} between @samp{FILE} (or current buffer) and its @samp{COUNTERPART} (inferred if nil). @*
@enumerate
@item
Finds the counterpart file. @*
@item
Uses @code{tlon-with-paragraphs} to get lists of paragraph text for both the original and translation files. @*
@item
Checks if the number of paragraphs is different. If so: @*
@itemize
@item
Creates the ``@emph{Paragraph Pairs}'' buffer. @*
@item
Inserts an error message detailing the mismatch. @*
@item
Inserts all paragraph pairs found so far (padding with ``[Missing paragraph]'' if one list is shorter). @*
@item
Displays the buffer. @*
@item
Signals a @samp{user-error} ``Paragraph number mismatch''. @*
@end itemize
@item
If paragraph counts match, pairs up the paragraphs and returns the list. @*
@end enumerate
@end table

@node Temporary Utility Functions
@subsection Temporary Utility Functions

These functions appear to be specific utilities for bulk metadata updates, likely used during initial setup or migration. They are not part of the core counterpart functionality. @*

@findex tlon-add-counterpart-metadata
@table @asis
@item @code{tlon-add-counterpart-metadata}
Reads a CSV file mapping original filenames to translation filenames, finds the corresponding translation files in a specified @samp{LANGUAGE} repository and @samp{BARE-DIR}, and inserts the @samp{original_path} metadata into their YAML front matter. Requires @samp{simple-extras-asciify-string}. @*
@end table

@findex tlon-add-author-metadata
@table @asis
@item @code{tlon-add-author-metadata}
Processes author files in a specific @samp{LANGUAGE} repository. For each file, it extracts the @samp{title} from YAML, generates a slug, constructs the expected @samp{original_path}, deletes existing metadata, and inserts a standard set of author metadata fields (@samp{type}, @samp{title}, @samp{role}, @samp{original_path}, @samp{publication_status}). Requires @samp{simple-extras-slugify}. @*
@end table

@node DeepL Integration (@samp{tlon-deeplel})
@chapter DeepL Integration (@samp{tlon-deepl.el})

This module provides functions for interacting with the DeepL API, enabling text translation and management of DeepL glossaries. It relies on an API key stored securely via @samp{auth-source}. @*

@menu
* Dependencies: Dependencies (5). 
* Configuration: Configuration (3). 
* Commands: Commands (7). 
* Internal Functions and Variables: Internal Functions and Variables (7). 
@end menu

@node Dependencies (5)
@section Dependencies

@itemize
@item
@samp{tlon-glossary} @*
@item
@samp{tlon-core} @*
@item
@samp{url} @*
@item
@samp{auth-source} (for API key retrieval) @*
@item
@samp{transient} (for the menu) @*
@item
@samp{ediff} (for @code{tlon-deepl-diff}) @*
@end itemize

@node Configuration (3)
@section Configuration

@menu
* API Key and URL::
* API Call Parameters::
* Supported Glossary Languages::
* Internal State Variables::
@end menu

@node API Key and URL
@subsection API Key and URL

@vindex tlon-deepl-key
@table @asis
@item @code{tlon-deepl-key}
The DeepL API key, retrieved from @samp{auth-source} using the entry @samp{tlon/babel/deepl.com/[WORK_EMAIL]}. @*
@end table
@vindex tlon-deepl-url-prefix
@table @asis
@item @code{tlon-deepl-url-prefix}
The base URL for all DeepL API v2 calls (@samp{https://api.deepl.com/v2/}). @*
@end table

@node API Call Parameters
@subsection API Call Parameters

@vindex tlon-deepl-parameters
@table @asis
@item @code{tlon-deepl-parameters}
An alist defining the specifics for each supported DeepL API call (translate, glossary creation, retrieval, deletion). Each entry maps an API call symbol (e.g., @samp{translate}) to a list containing: @*
@enumerate
@item
HTTP Method (``GET'', ``POST'', ``DELETE'') @*
@item
URL Suffix (string or function to generate the specific endpoint) @*
@item
Default Callback Function (symbol) @*
@item
Optional Encoding Function (symbol, for POST requests) @*
@end enumerate
@end table

@node Supported Glossary Languages
@subsection Supported Glossary Languages

@vindex tlon-deepl-supported-glossary-languages
@table @asis
@item @code{tlon-deepl-supported-glossary-languages}
A list of language codes for which DeepL currently supports glossaries. @*
@end table

@node Internal State Variables
@subsection Internal State Variables

These variables store temporary state during API requests. @*
@vindex tlon-deepl-glossaries
@table @asis
@item @code{tlon-deepl-glossaries}
A list holding the glossary data retrieved from the DeepL API via @code{tlon-deepl-get-glossaries}. Initialized to nil and populated by the callback. @*
@end table
@vindex tlon-deepl-source-language
@table @asis
@item @code{tlon-deepl-source-language}
Stores the source language code for the current translation request. @*
@end table
@vindex tlon-deepl-target-language
@table @asis
@item @code{tlon-deepl-target-language}
Stores the target language code for the current translation or glossary creation request. @*
@end table
@vindex tlon-deepl-text
@table @asis
@item @code{tlon-deepl-text}
Stores the text to be translated in the current request. @*
@end table

@node Commands (7)
@section Commands

This section details the interactive commands provided by @samp{tlon-deepl.el}. @*

@menu
* Translation::
* Glossaries::
* Utility Commands::
* Transient Menu: Transient Menu (5). 
@end menu

@node Translation
@subsection Translation

@findex tlon-deepl-translate
@table @asis
@item @code{tlon-deepl-translate}
Translates text using the DeepL API@. @*
@enumerate
@item
Prompts for source language (defaulting to ``en'') using @code{tlon-select-language}. @*
@item
Prompts for target language using @code{tlon-select-language} (excluding the source language). @*
@item
Prompts for the text to translate, defaulting to the active region or the word at point. @*
@item
Sets the internal state variables (@code{tlon-deepl-text}, @code{tlon-deepl-source-language}, @code{tlon-deepl-target-language}). @*
@item
Calls @code{tlon-deepl-request-wrapper} with the @samp{translate} type. @*
@item
Uses a default callback that prints the translation and copies it to the kill ring (@code{tlon-deepl-print-translation 'copy}). Allows specifying a custom @samp{CALLBACK}. @*
@item
Handles glossary lookup (@code{tlon-deepl-get-language-glossary}) and prompts for confirmation if no suitable glossary is found (unless @samp{NO-GLOSSARY-OK} is non-nil). @*
@end enumerate
@end table

@findex tlon-deepl-translate-abstract
@table @asis
@item @code{tlon-deepl-translate-abstract}
Translates the @samp{abstract} field of a Bib@TeX{} entry into all @code{tlon-project-target-languages}. @*
@enumerate
@item
Determines the Bib@TeX{} @samp{KEY} (from Ebib or Bib@TeX{} mode, or argument). @*
@item
Extracts the @samp{abstract} text from the current buffer or Bib@TeX{} entry. @*
@item
Determines the @samp{SOURCE-LANG} from the entry's @samp{langid} field. @*
@item
If interactive or confirmed by the user, iterates through @code{tlon-project-target-languages}: @*
@itemize
@item
Skips translation if target language is the same as source. @*
@item
Calls @code{tlon-deepl-translate} with the abstract text, target language, source language, and a specific callback (@code{tlon-translate-abstract-callback}) to update the Bib@TeX{} entry directly. Passes @samp{no-glossary-ok} to avoid prompts. @*
@end itemize
@end enumerate
@end table

@node Glossaries
@subsection Glossaries

@findex tlon-deepl-select-glossary
@table @asis
@item @code{tlon-deepl-select-glossary}
Interactively selects a DeepL glossary from the locally cached list (@code{tlon-deepl-glossaries}). Uses @code{completing-read} with formatted glossary names (generated by @code{tlon-deepl-get-list-of-glossaries}). Returns the selected glossary ID@. @*
@end table

@findex tlon-deepl-get-glossaries
@table @asis
@item @code{tlon-deepl-get-glossaries}
Retrieves the list of available glossaries from the DeepL API@. Calls @code{tlon-deepl-request-wrapper} with the @samp{glossary-get} type. The callback (@code{tlon-deepl-glossary-get-callback}) updates the @code{tlon-deepl-glossaries} variable. This command is also called automatically after glossary creation or deletion, and on module load. @*
@end table

@findex tlon-deepl-glossary-create
@table @asis
@item @code{tlon-deepl-glossary-create}
Creates a new DeepL glossary for a specified language. @*
@enumerate
@item
Prompts for the target @samp{LANGUAGE} using @code{tlon-select-language}. @*
@item
Extracts the glossary data for that language into the appropriate format (TSV for DeepL API) using @code{tlon-extract-glossary}. @*
@item
Sets the internal @code{tlon-deepl-target-language} variable. @*
@item
Calls @code{tlon-deepl-request-wrapper} with the @samp{glossary-create} type. The callback (@code{tlon-deepl-glossary-create-callback}) refreshes the local glossary list and messages the API response. @*
@end enumerate
@end table

@findex tlon-deepl-glossary-delete
@table @asis
@item @code{tlon-deepl-glossary-delete}
Deletes a DeepL glossary. @*
@enumerate
@item
Calls @code{tlon-deepl-request-wrapper} with the @samp{glossary-delete} type. @*
@item
The URL formatter (@code{tlon-deepl-glossary-delete-formatter}) prompts the user to select the glossary to delete using @code{tlon-deepl-select-glossary} and constructs the specific API endpoint URL@. @*
@item
The callback (@code{tlon-deepl-glossary-delete-callback}) refreshes the local glossary list and messages confirmation. @*
@end enumerate
@end table

@node Utility Commands
@subsection Utility Commands

@findex tlon-deepl-diff
@table @asis
@item @code{tlon-deepl-diff}
Runs an @samp{ediff} session to compare a local translation file with its corresponding DeepL-generated translation file. Prompts for the DeepL file path if not provided. Defaults to the current buffer's file for the local translation. @*
@end table

@findex tlon-deepl-fix-encoding-persistent
@table @asis
@item @code{tlon-deepl-fix-encoding-persistent}
Attempts to fix common UTF-8 misinterpretation issues (where UTF-8 bytes are treated as ISO-8859-1) within the current buffer (must be Bib@TeX{} or JSON mode). Performs a series of search-and-replace operations based on a predefined list of common misinterpretations. @*
@end table

@node Transient Menu (5)
@subsection Transient Menu

@findex tlon-deepl-menu
The command @code{tlon-deepl-menu} activates a @samp{transient} menu interface for DeepL operations. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Translate}: @*
@table @asis
@item @samp{t}
Translate text (@code{tlon-deepl-translate}) @*
@item @samp{a}
Translate abstract (@code{tlon-deepl-translate-abstract}) @*
@end table
@item
@strong{Glossaries}: @*
@table @asis
@item @samp{l}
List/Select glossary (@code{tlon-deepl-select-glossary}) @*
@item @samp{g}
Retrieve glossaries from API (@code{tlon-deepl-get-glossaries}) @*
@item @samp{c}
Create glossary (@code{tlon-deepl-glossary-create}) @*
@item @samp{d}
Delete glossary (@code{tlon-deepl-glossary-delete}) @*
@end table
@item
@strong{Other}: @*
@table @asis
@item @samp{e}
Ediff translations (@code{tlon-deepl-diff}) @*
@end table
@end itemize

@node Internal Functions and Variables (7)
@section Internal Functions and Variables

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization. @*

@menu
* API Request Handling::
* Callbacks::
* Payload Encoders & Formatters::
* Helper Functions: Helper Functions (1). 
@end menu

@node API Request Handling
@subsection API Request Handling

@findex tlon-deepl-request-wrapper
@table @asis
@item @code{tlon-deepl-request-wrapper}
The core function for making DeepL API calls. Takes the API call @samp{TYPE}, an optional @samp{CALLBACK} function, and an optional @samp{NO-GLOSSARY-OK} flag. @*
@enumerate
@item
Retrieves parameters (method, URL suffix/function, default callback, encoding function) from @code{tlon-deepl-parameters} based on @samp{TYPE}. @*
@item
Constructs the full API @samp{URL}. @*
@item
If an encoding function exists, calls it to generate the JSON @samp{PAYLOAD} (passing @samp{NO-GLOSSARY-OK}). Writes the payload to a temporary file. @*
@item
Builds the @samp{curl} command string including method, URL, headers (Content-Type, Authorization with @code{tlon-deepl-key}), and payload data if applicable. @*
@item
Executes the @samp{curl} command using @samp{shell-command-to-string} to get the @samp{RESPONSE}. @*
@item
Deletes the temporary payload file if created. @*
@item
Inserts the response into a temporary buffer, positions point at the start of the JSON/list, and calls the specified @samp{CALLBACK} function. @*
@end enumerate
@end table

@node Callbacks
@subsection Callbacks

@findex tlon-deepl-print-translation
@table @asis
@item @code{tlon-deepl-print-translation}
Default callback for translation requests. Parses the JSON response, extracts the translated text, decodes it as UTF-8, and either messages it or copies it to the kill ring if @samp{COPY} is non-nil. @*
@end table

@findex tlon-deepl-glossary-create-callback
@table @asis
@item @code{tlon-deepl-glossary-create-callback}
Callback for glossary creation. Resets @code{tlon-deepl-target-language}, refreshes the local glossary list using @code{tlon-deepl-get-glossaries}, and messages the API response. @*
@end table

@findex tlon-deepl-glossary-get-callback
@table @asis
@item @code{tlon-deepl-glossary-get-callback}
Callback for glossary retrieval. Parses the JSON response and updates the @code{tlon-deepl-glossaries} variable. Messages confirmation. @*
@end table

@findex tlon-deepl-glossary-delete-callback
@table @asis
@item @code{tlon-deepl-glossary-delete-callback}
Callback for glossary deletion. Refreshes the local glossary list using @code{tlon-deepl-get-glossaries} and messages confirmation. @*
@end table

@node Payload Encoders & Formatters
@subsection Payload Encoders & Formatters

@findex tlon-deepl-translate-encode
@table @asis
@item @code{tlon-deepl-translate-encode}
Generates the JSON payload for a translation request. Includes the text (as a vector), source language, target language, and the relevant glossary ID (retrieved via @code{tlon-deepl-get-language-glossary}). Handles the @samp{NO-GLOSSARY-OK} logic and potential user abortion if no glossary is found and confirmation is denied. @*
@end table

@findex tlon-deepl-glossary-create-encode
@table @asis
@item @code{tlon-deepl-glossary-create-encode}
Generates the JSON payload for creating a glossary. Determines the glossary file path (@code{tlon-glossary-make-file}), reads its content (UTF-8 encoded TSV), and includes the glossary name, source language (``en''), target language, entries, and format (``tsv'') in the JSON object. @*
@end table

@findex tlon-deepl-glossary-delete-formatter
@table @asis
@item @code{tlon-deepl-glossary-delete-formatter}
Function used by @code{tlon-deepl-request-wrapper} to generate the specific URL for deleting a glossary. It calls @code{tlon-deepl-select-glossary} to get the ID and appends it to the base glossaries endpoint. @*
@end table

@node Helper Functions (1)
@subsection Helper Functions

@findex tlon-deepl-get-list-of-glossaries
@table @asis
@item @code{tlon-deepl-get-list-of-glossaries}
Formats the data in @code{tlon-deepl-glossaries} into a list of strings suitable for display in @code{completing-read} (used by @code{tlon-deepl-select-glossary}). Each string includes name, languages, entry count, and ID@. Returns a cons cell @samp{(DISPLAY-STRING . ID)}. @*
@end table

@findex tlon-deepl-get-language-glossary
@table @asis
@item @code{tlon-deepl-get-language-glossary}
Finds the glossary ID for a specific target @samp{LANGUAGE} from the cached @code{tlon-deepl-glossaries} list. Returns nil if the source language is not ``en'' (as current glossaries are EN -> X). Uses @code{tlon-lookup}. @*
@end table

@findex tlon-deepl-fix-encoding
@table @asis
@item @code{tlon-deepl-fix-encoding}
Corrects a specific encoding misinterpretation where a UTF-8 string is read as ISO-8859-1. Takes the misencoded @samp{STRING}, re-encodes it as ISO-8859-1, and then decodes it correctly as UTF-8. @*
@end table

@node Dictionary Functionality (@samp{tlon-dictel})
@chapter Dictionary Functionality (@samp{tlon-dict.el})

This module integrates with the external @samp{reverso.el} package to provide dictionary-related features, specifically fetching synonyms, while ensuring that the language context aligns with the Tlön workflow. @*

@menu
* Dependencies: Dependencies (6). 
* Commands: Commands (8). 
* Transient Menu: Transient Menu (6). 
@end menu

@node Dependencies (6)
@section Dependencies

This module requires the @samp{reverso} package to be installed and available. @*

@node Commands (8)
@section Commands

@menu
* Get Synonyms via Reverso::
@end menu

@node Get Synonyms via Reverso
@subsection Get Synonyms via Reverso

@findex tlon-reverso-get-synonyms
The command @code{tlon-reverso-get-synonyms} fetches synonyms for the word currently at point using the @samp{reverso.el} package. @*

Crucially, it overrides the default language selection mechanism of @samp{reverso.el}. Instead, it determines the language of the current file using @code{tlon-get-language-in-file}, looks up the corresponding language code recognized by @samp{reverso.el} using Tlön's configuration (@code{tlon-lookup}), and passes this language code to the underlying @samp{reverso--get-synonyms} function. @*

It prompts the user for the word, defaulting to the word at point (@code{thing-at-point 'word}). The results are displayed in a dedicated Reverso buffer, similar to how @samp{reverso.el} typically operates. @*

@node Transient Menu (6)
@section Transient Menu

@findex tlon-dict-menu
The command @code{tlon-dict-menu} activates a @samp{transient} menu interface for dictionary-related commands. @*

Currently, it offers one option: @*
@table @asis
@item @samp{s}
Calls @code{tlon-reverso-get-synonyms} to fetch synonyms for the word at point. @*
@end table

@node Forge Integration (@samp{tlon-forgel})
@chapter Forge Integration (@samp{tlon-forg.el})

This module provides integration between @samp{forge} (Emacs interface for Git forges like GitHub) and Org mode. It allows capturing GitHub issues as Org TODO items, keeping their state synchronized, navigating between the issue and its corresponding TODO, and managing related metadata like assignees and labels (which map to Org status and tags). @*

@menu
* Dependencies: Dependencies (7). 
* User Options: User Options (3). 
* Commands: Commands (9). 
* Internal Functions and Variables: Internal Functions and Variables (8). 
@end menu

@node Dependencies (7)
@section Dependencies

@itemize
@item
@samp{forge} @*
@item
@samp{org} @*
@item
@samp{shut-up} @*
@item
@samp{tlon-core} @*
@item
@samp{tlon-dispatch} @*
@item
@samp{org-extras} (optional, for some job-related refiling) @*
@item
@samp{ghub} (for creating issues) @*
@item
@samp{magit} (for creating issues) @*
@item
@samp{closql} (underlying @samp{forge} dependency) @*
@item
@samp{transient} (for the menu) @*
@end itemize

@node User Options (3)
@section User Options

@vindex tlon-when-assignee-is-nil
@table @asis
@item @code{tlon-when-assignee-is-nil}
Controls behavior when capturing an issue with no assignee. Options: @*
@itemize
@item
@samp{prompt} (default): Ask user if they want to be assigned. @*
@item
@samp{change}: Assign to the current user automatically. @*
@item
@samp{warn}: Capture as-is, but log a warning. @*
@item
@samp{capture}: Capture as-is, no warning. @*
@item
@samp{no-capture} (or any other value): Do not capture the issue. @*
@end itemize
Can be set temporarily via @code{tlon-forg-menu}. @*
@end table

@vindex tlon-when-assignee-is-someone-else
@table @asis
@item @code{tlon-when-assignee-is-someone-else}
Controls behavior when capturing an issue assigned to someone else. Options are the same as @code{tlon-when-assignee-is-nil}. Note: This option is ignored (treated as @samp{no-capture}) when using @code{tlon-capture-all-issues}. Can be set temporarily via @code{tlon-forg-menu}. @*
@end table

@vindex tlon-forg-when-reconciling
@table @asis
@item @code{tlon-forg-when-reconciling}
Controls behavior when @code{tlon-reconcile-issue-and-todo} finds discrepancies between the issue and its TODO@. Options: @*
@itemize
@item
@samp{prompt} (default): Ask user whether to keep the issue's state or the TODO's state. @*
@item
@samp{issue}: Automatically update the TODO to match the issue. @*
@item
@samp{todo}: Automatically update the issue to match the TODO (Note: Currently not fully implemented). @*
@end itemize
Can be set temporarily via @code{tlon-forg-menu}. @*
@end table

@vindex tlon-forg-include-archived
@table @asis
@item @code{tlon-forg-include-archived}
Boolean flag. If non-nil, archived issues/TODOs are included in capture and reconcile operations. Defaults to nil. Can be toggled temporarily via @code{tlon-forg-menu}. @*
@end table

@vindex tlon-forg-enforce-user
@table @asis
@item @code{tlon-forg-enforce-user}
String or nil. If non-nil, forces Tlön to consider this string as the current user's GitHub login, primarily for testing purposes. Defaults to nil. @*
@end table

@node Commands (9)
@section Commands

This section details the interactive commands provided by @samp{tlon-forg.el}. @*

@menu
* Visiting Issues and TODOs::
* Capturing Issues as TODOs::
* Reconciling Issues and TODOs::
* Counterpart Navigation::
* Creating Issues and TODOs::
* Closing Issues and TODOs::
* Sorting Org Entries::
* File Handling (Associated with Issues)::
* Miscellaneous::
* Transient Menu: Transient Menu (7). 
@end menu

@node Visiting Issues and TODOs
@subsection Visiting Issues and TODOs

@findex tlon-visit-issue
@table @asis
@item @code{tlon-visit-issue}
Visits the GitHub issue associated with the current context. If point is on an @samp{orgit-topic:} link, follows it. Otherwise, tries to extract the issue number and repository from the current Org heading. @*
@end table

@findex tlon-visit-todo
@table @asis
@item @code{tlon-visit-todo}
Visits the Org TODO item associated with the current context (GitHub issue or Org heading). Finds the correct Org file (generic or jobs) and position based on the issue's ID or job title. @*
@end table

@findex tlon-visit-todo-or-capture
@table @asis
@item @code{tlon-visit-todo-or-capture}
Visits the Org TODO associated with the current issue. If no TODO exists yet, it calls @code{tlon-capture-issue} first. @*
@end table

@node Capturing Issues as TODOs
@subsection Capturing Issues as TODOs

@findex tlon-capture-issue
@table @asis
@item @code{tlon-capture-issue}
(Autoloaded) Creates a new Org TODO item based on the current Forge issue (or the one specified). @*
@enumerate
@item
Checks if the issue is open. @*
@item
Handles the assignee based on @code{tlon-when-assignee-is-nil} and @code{tlon-when-assignee-is-someone-else}, potentially changing the assignee or skipping capture. @*
@item
If the issue is a ``Job'' (title starts with ``Job: ''): @*
@itemize
@item
Ensures it has a valid phase label (prompting if necessary via @code{tlon-capture-handle-phase}). @*
@item
Stores or refiles the job TODO under its master job heading using @code{tlon-store-or-refile-job-todo}. @*
@end itemize
@item
If it's a generic issue: @*
@itemize
@item
Stores the TODO in the generic file using @code{tlon-store-todo} with the ``tbG'' template. @*
@end itemize
@end enumerate
Only captures if a TODO doesn't already exist for the issue. @*
@end table

@findex tlon-capture-all-issues
@table @asis
@item @code{tlon-capture-all-issues}
(Autoloaded) Captures all open issues in the current repository that are either unassigned or assigned to the current user. @*
@enumerate
@item
Performs a silent @samp{forge-pull} first (unless called with a prefix argument) to ensure local data is up-to-date. @*
@item
Iterates through all open issues in the repository (@code{tlon-get-issues}). @*
@item
For each issue, checks if a TODO already exists (@code{tlon-get-todo-position-from-issue}). @*
@item
If no TODO exists and the issue is assigned to the current user or unassigned, calls @code{tlon-capture-issue}. (Note: It implicitly uses @samp{no-capture} for @code{tlon-when-assignee-is-someone-else} in this bulk mode). @*
@end enumerate
@end table

@node Reconciling Issues and TODOs
@subsection Reconciling Issues and TODOs

@findex tlon-reconcile-issue-and-todo
@table @asis
@item @code{tlon-reconcile-issue-and-todo}
(Autoloaded) Synchronizes the state (title, status, tags) between the current issue and its associated Org TODO, or vice versa. Works whether point is in the issue buffer or on the TODO heading. @*
@enumerate
@item
Determines the issue and TODO based on the current context. @*
@item
Generates the expected TODO heading string based on the current issue state (@code{tlon-make-todo-name-from-issue}). @*
@item
Compares this with the actual TODO heading string. @*
@item
If they differ, it applies the behavior defined by @code{tlon-forg-when-reconciling}: @*
@itemize
@item
@samp{prompt}: Asks the user whether to update the TODO or the issue. @*
@item
@samp{issue}: Updates the TODO heading to match the issue state (@code{tlon-update-todo-from-issue}). @*
@item
@samp{todo}: Updates the issue state to match the TODO (currently not implemented, signals error). @*
@end itemize
@end enumerate
@end table

@findex tlon-reconcile-all-issues-and-todos
@table @asis
@item @code{tlon-reconcile-all-issues-and-todos}
(Autoloaded) Reconciles all Org TODOs in the generic file (@code{tlon-get-todos-generic-file}) with their corresponding GitHub issues. @*
@enumerate
@item
Performs a silent @samp{forge-pull} first (unless called with a prefix argument). @*
@item
Iterates through all headings in the generic TODO file. @*
@item
For each heading, finds the associated issue (@code{tlon-get-issue}). @*
@item
If an issue is found and the TODO is not archived (or @code{tlon-forg-include-archived} is non-nil), calls @code{tlon-reconcile-issue-and-todo-from-issue}. @*
@end enumerate
@end table

@node Counterpart Navigation
@subsection Counterpart Navigation

@findex tlon-visit-counterpart
@table @asis
@item @code{tlon-visit-counterpart}
(Autoloaded) Navigates between an issue and its corresponding TODO@. If in an issue buffer, visits the TODO (@code{tlon-visit-todo}). If on a TODO heading, visits the issue (@code{tlon-visit-issue}). @*
@end table

@findex tlon-visit-counterpart-or-capture
@table @asis
@item @code{tlon-visit-counterpart-or-capture}
(Autoloaded) Similar to @code{tlon-visit-counterpart}, but if navigating from an issue to a non-existent TODO, it captures the issue first (@code{tlon-visit-todo-or-capture}). @*
@end table

@node Creating Issues and TODOs
@subsection Creating Issues and TODOs

@findex tlon-create-issue-from-todo
@table @asis
@item @code{tlon-create-issue-from-todo}
(Autoloaded) Creates a new GitHub issue based on the Org heading at point. @*
@enumerate
@item
Ensures the heading doesn't already have an issue number. @*
@item
Ensures the heading has a repository tag (prompts to add one via @code{tlon-set-repo-in-heading} if missing). @*
@item
Extracts the title, status, and tags from the heading. @*
@item
Creates the issue on GitHub using @code{tlon-create-issue}. @*
@item
Pulls changes until the new issue appears locally. @*
@item
Sets the issue number in the Org heading (@code{tlon-set-issue-number-in-heading}). @*
@item
Visits the new issue. @*
@item
Sets the assignee to the current user and applies the status and tags from the Org heading as labels (@code{tlon-set-assignee}, @code{tlon-set-labels}). @*
@item
Updates the Org heading to include the @samp{orgit-topic:} link using @code{tlon-make-todo-name-from-issue}. @*
@end enumerate
@end table

@findex tlon-create-issue-or-todo
@table @asis
@item @code{tlon-create-issue-or-todo}
Creates the counterpart if it doesn't exist. If on an Org heading without an issue, calls @code{tlon-create-issue-from-todo}. If in an issue buffer without a corresponding TODO, calls @code{tlon-capture-issue}. @*
@end table

@node Closing Issues and TODOs
@subsection Closing Issues and TODOs

@findex tlon-close-issue-and-todo
@table @asis
@item @code{tlon-close-issue-and-todo}
(Autoloaded) Closes both the GitHub issue and its associated Org TODO@. Works from either context. @*
@enumerate
@item
Finds the issue number and repository. @*
@item
Closes the GitHub issue using @code{tlon-close-issue-number} (which visits the issue and calls @code{tlon-close-issue}). @*
@item
Visits the corresponding Org TODO (@code{tlon-visit-todo}). @*
@item
Sets the TODO state to ``DONE'' using @samp{org-todo}. @*
@end enumerate
@end table

@node Sorting Org Entries
@subsection Sorting Org Entries

@findex tlon-forg-sort-by-tag
@table @asis
@item @code{tlon-forg-sort-by-tag}
(Autoloaded) Sorts Org entries in the current buffer based on the first tag that matches the pattern defined in @code{tlon-forg-sort-by-tags-regexp}. Uses @samp{org-sort-entries} with a custom sorter function (@code{tlon-forg-tag-sorter}). Entries without a matching tag are sorted to the end. @*
@end table

@node File Handling (Associated with Issues)
@subsection File Handling (Associated with Issues)

@findex tlon-open-forge-file
@table @asis
@item @code{tlon-open-forge-file}
(Autoloaded) Opens the file associated with the current issue. Assumes the issue title contains a Bib@TeX{}-like key (e.g., ``Job: `key`'') and uses @code{tlon-get-file-from-issue} (which calls @code{tlon-get-file-from-key}) to find the corresponding file path. @*
@end table

@findex tlon-open-forge-counterpart
@table @asis
@item @code{tlon-open-forge-counterpart}
(Autoloaded) Opens the @strong{counterpart} file associated with the current issue. Finds the issue's file path using @code{tlon-get-file-from-issue} and then calls @code{tlon-open-counterpart} on that path. @*
@end table

@node Miscellaneous
@subsection Miscellaneous

@findex tlon-report-bug
@table @asis
@item @code{tlon-report-bug}
(Autoloaded) Creates a new bug report issue specifically in the @samp{tlon.el} repository. Uses @code{tlon-create-issue-in-dir} and prepopulates the buffer with a template using @code{tlon-prepopulate-bug-report-buffer}. @*
@end table

@findex tlon-list-all-todos
@table @asis
@item @code{tlon-list-all-todos}
(Autoloaded) Uses @samp{org-roam-extras} to list all Org files within the directory specified by @samp{paths-dir-tlon-todos}. @*
@end table

@node Transient Menu (7)
@subsection Transient Menu

@findex tlon-forg-menu
The command @code{tlon-forg-menu} (Autoloaded) activates a @samp{transient} menu interface for @samp{tlon-forg} operations. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Actions}: @*
@table @asis
@item @samp{y}
dwim (visit counterpart or capture) (@code{tlon-visit-counterpart-or-capture}) @*
@item @samp{v}
visit counterpart (@code{tlon-visit-counterpart}) @*
@item @samp{p}
post (create issue from todo) (@code{tlon-create-issue-from-todo}) @*
@item @samp{x}
close issue and todo (@code{tlon-close-issue-and-todo}) @*
@item @samp{s}
sort by tag (@code{tlon-forg-sort-by-tag}) @*
@end table
@item
@strong{Capture}: @*
@table @asis
@item @samp{c}
capture issue (@code{tlon-capture-issue}) @*
@item @samp{C}
capture all issues (@code{tlon-capture-all-issues}) @*
@end table
@item
@strong{Reconcile}: @*
@table @asis
@item @samp{r}
reconcile issue and todo (@code{tlon-reconcile-issue-and-todo}) @*
@item @samp{R}
reconcile all issues and todos (@code{tlon-reconcile-all-issues-and-todos}) @*
@end table
@item
@strong{Options}: (These set the corresponding user options temporarily for the session) @*
@table @asis
@item @samp{-a}
Include archived (@code{tlon-infix-toggle-include-archived}) @*
@item @samp{-r}
When reconciling (@code{tlon-forg-when-reconciling-infix}) @*
@item @samp{-n}
When assignee is nil (@code{tlon-when-assignee-is-nil-infix}) @*
@item @samp{-e}
When assignee is someone else (@code{tlon-when-assignee-is-someone-else-infix}) @*
@end table
@end itemize

@node Internal Functions and Variables (8)
@section Internal Functions and Variables

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization. @*

@menu
* Constants: Constants (2). 
* File Path Management::
* Issue and TODO Data Retrieval::
* Issue and TODO Modification::
* Capture and Reconciliation Helpers::
* Validation and Checks::
* GitHub Project Integration (Experimental)::
* Miscellaneous Helpers::
@end menu

@node Constants (2)
@subsection Constants

@vindex tlon-todo-statuses
@table @asis
@item @code{tlon-todo-statuses}
List of valid Org TODO keywords used by Tlön (e.g., ``TODO'', ``IMPORTANT'', ``WAITING''). @*
@end table
@vindex tlon-todo-tags
@table @asis
@item @code{tlon-todo-tags}
List of valid Org tags used by Tlön (e.g., ``PendingReview'', ``Later''). @*
@end table
@vindex tlon-forg-sort-by-tags-regexp
@table @asis
@item @code{tlon-forg-sort-by-tags-regexp}
Regexp used by @code{tlon-forg-sort-by-tag} to identify sortable tags. @*
@end table
@vindex tlon-forg-gh-project-query
@table @asis
@item @code{tlon-forg-gh-project-query}
GraphQL query string for fetching issue details including project fields via the `gh` CLI (experimental). @*
@end table
@vindex tlon-gh-field-ids
@table @asis
@item @code{tlon-gh-field-ids}
Alist mapping field names (e.g., @samp{:effortid}) to their GitHub ProjectV2 field IDs (experimental). @*
@end table

@node File Path Management
@subsection File Path Management

@vindex tlon-todos-jobs-file
@table @asis
@item @code{tlon-todos-jobs-file}
Variable holding the path to the Org file containing job-related TODOs. Set dynamically via @code{tlon-get-todos-jobs-file}. @*
@end table
@vindex tlon-todos-generic-file
@table @asis
@item @code{tlon-todos-generic-file}
Variable holding the path to the Org file containing generic TODOs. Set dynamically via @code{tlon-get-todos-generic-file}. @*
@end table
@findex tlon-get-todos-jobs-file
@table @asis
@item @code{tlon-get-todos-jobs-file}
Retrieves the path to the jobs TODO file using its Org ID (@samp{paths-tlon-todos-jobs-id}) and caches it. @*
@end table
@findex tlon-get-todos-generic-file
@table @asis
@item @code{tlon-get-todos-generic-file}
Retrieves the path to the generic TODO file using its Org ID (@samp{paths-tlon-todos-generic-id}) and caches it. @*
@end table
@findex tlon-get-todos-file-from-issue
@table @asis
@item @code{tlon-get-todos-file-from-issue}
Returns the appropriate TODO file path (jobs or generic) based on whether the @samp{ISSUE} is a job (@code{tlon-issue-is-job-p}). @*
@end table
@findex tlon-get-todo-position
@table @asis
@item @code{tlon-get-todo-position}
Finds the starting position of a heading matching @samp{STRING} in @samp{FILE}. If @samp{SUBSTRING} is non-nil, matches anywhere in the heading; otherwise, requires an exact match. Uses @code{org-find-exact-headline-in-buffer} or @code{tlon-find-headline-substring-in-file}. @*
@end table
@findex tlon-find-headline-substring-in-file
@table @asis
@item @code{tlon-find-headline-substring-in-file}
Helper to find the position of a heading containing @samp{TODO} as a substring within @samp{FILE}. @*
@end table
@findex tlon-get-todo-position-from-issue
@table @asis
@item @code{tlon-get-todo-position-from-issue}
Finds the position of the TODO associated with @samp{ISSUE}. For jobs, searches for the heading name; for generic issues, searches for the @samp{orgit-topic:} link substring. @*
@end table

@node Issue and TODO Data Retrieval
@subsection Issue and TODO Data Retrieval

@findex tlon-get-issue
@table @asis
@item @code{tlon-get-issue}
Retrieves the @samp{forge-topic} object for an issue specified by @samp{NUMBER} and @samp{REPO}, or by extracting these from the current Org heading. @*
@end table
@findex tlon-get-issue-buffer
@table @asis
@item @code{tlon-get-issue-buffer}
Returns the buffer visiting the specified issue (or the one at point/heading). Uses @code{tlon-visit-issue} internally. @*
@end table
@findex tlon-get-element-from-heading
@table @asis
@item @code{tlon-get-element-from-heading}
Extracts text matching @samp{REGEXP} from the Org heading at point. @*
@end table
@findex tlon-get-issue-number-from-heading
@table @asis
@item @code{tlon-get-issue-number-from-heading}
Extracts the issue number (e.g., #123) from the heading. @*
@end table
@findex tlon-get-repo-from-heading
@table @asis
@item @code{tlon-get-repo-from-heading}
Extracts the repository abbreviation (e.g., [repo-abbrev]) from the heading and looks up the full directory path. @*
@end table
@findex tlon-get-issue-number-from-open-issues
@table @asis
@item @code{tlon-get-issue-number-from-open-issues}
Prompts the user to select an open issue from the current repository using completion and returns its number. @*
@end table
@findex tlon-get-issues
@table @asis
@item @code{tlon-get-issues}
Returns a list of all open @samp{forge-issue} objects for the specified @samp{REPO} (or current repo). @*
@end table
@findex tlon-get-latest-issue
@table @asis
@item @code{tlon-get-latest-issue}
Returns the number and title of the most recently created open issue in the @samp{REPO}. @*
@end table
@findex tlon-count-issues
@table @asis
@item @code{tlon-count-issues}
Returns the count of open issues in the @samp{REPO}. @*
@end table
@findex tlon-get-labels-of-type
@table @asis
@item @code{tlon-get-labels-of-type}
Returns labels of a specific @samp{TYPE} ('tag or 'phase) from an @samp{ISSUE}. @*
@end table
@findex tlon-get-status-in-issue
@table @asis
@item @code{tlon-get-status-in-issue}
Returns the status (``open'' or ``completed'') of an @samp{ISSUE}, optionally @samp{UPCASED}. @*
@end table
@findex tlon-get-status-in-todo
@table @asis
@item @code{tlon-get-status-in-todo}
Returns the Org TODO state if it's one of @code{tlon-todo-statuses}. @*
@end table
@findex tlon-get-phase-in-labels
@table @asis
@item @code{tlon-get-phase-in-labels}
Finds the unique valid phase label within a list of @samp{LABELS}. @*
@end table
@findex tlon-get-phase-in-issue
@table @asis
@item @code{tlon-get-phase-in-issue}
Returns the unique valid job phase label for an @samp{ISSUE}. @*
@end table
@findex tlon-get-assignee
@table @asis
@item @code{tlon-get-assignee}
Returns the login name of the first assignee of an @samp{ISSUE}. @*
@end table
@findex tlon-forg-get-labels
@table @asis
@item @code{tlon-forg-get-labels}
Returns a list of all label names for an @samp{ISSUE}. @*
@end table
@findex tlon-get-tags-in-todo
@table @asis
@item @code{tlon-get-tags-in-todo}
Returns the valid Org tags (from @code{tlon-todo-tags}) on the heading at point. @*
@end table
@findex tlon-get-element
@table @asis
@item @code{tlon-get-element}
Generic function to get an @samp{ELEMENT} (slot) from an @samp{ISSUE} object. @*
@end table
@findex tlon-get-first-element
@table @asis
@item @code{tlon-get-first-element}
Gets the first item from an @samp{ELEMENT} (slot) that holds a list (like assignees, labels). @*
@end table
@findex tlon-get-first-label
@table @asis
@item @code{tlon-get-first-label}
Returns the name of the first label of an @samp{ISSUE}. @*
@end table
@findex tlon-get-state
@table @asis
@item @code{tlon-get-state}
Returns the state symbol ('open or 'completed) of an @samp{ISSUE}. @*
@end table
@findex tlon-get-issue-name
@table @asis
@item @code{tlon-get-issue-name}
Formats the issue name as ``#NUMBER TITLE''. @*
@end table
@findex tlon-get-issue-link
@table @asis
@item @code{tlon-get-issue-link}
Creates an Org link string (@samp{orgit-topic:ID}) for an @samp{ISSUE}. @*
@end table
@findex tlon-make-todo-name-from-issue
@table @asis
@item @code{tlon-make-todo-name-from-issue}
Constructs the full Org heading string for an @samp{ISSUE}, including status, repo abbreviation, optional job action, the issue link, and tags. Handles @samp{NO-ACTION} and @samp{NO-STATUS} flags. @*
@end table
@findex tlon-get-file-from-issue
@table @asis
@item @code{tlon-get-file-from-issue}
Extracts a key from the issue name and finds the corresponding file path using @code{tlon-get-file-from-key}. @*
@end table
@findex tlon-get-parent-todo
@table @asis
@item @code{tlon-get-parent-todo}
Finds the parent heading of a given @samp{TODO} name within the jobs file. @*
@end table

@node Issue and TODO Modification
@subsection Issue and TODO Modification

@findex tlon-set-repo-in-heading
@table @asis
@item @code{tlon-set-repo-in-heading}
Prompts the user to select a repository and inserts its abbreviation tag (e.g., [repo-abbrev]) into the Org heading if not already present. @*
@end table
@findex tlon-set-issue-number-in-heading
@table @asis
@item @code{tlon-set-issue-number-in-heading}
Inserts the @samp{ISSUE-NUMBER} (e.g., #123) into the Org heading if not already present. @*
@end table
@findex tlon-close-issue
@table @asis
@item @code{tlon-close-issue}
Sets the state of an @samp{ISSUE} to 'completed using @samp{forge--set-topic-state}. @*
@end table
@findex tlon-close-issue-number
@table @asis
@item @code{tlon-close-issue-number}
Visits the issue specified by @samp{ISSUE-NUMBER} and @samp{REPO} and then closes it using @code{tlon-close-issue}. @*
@end table
@findex tlon-set-labels
@table @asis
@item @code{tlon-set-labels}
Sets the labels for an @samp{ISSUE}. Can optionally replace existing labels of a specific @samp{TYPE} (status or phase) or simply append new labels. Uses @samp{forge--set-topic-labels}. @*
@end table
@findex tlon-set-job-label
@table @asis
@item @code{tlon-set-job-label}
Prompts the user to select a valid job label from @code{tlon-job-labels}. @*
@end table
@findex tlon-set-status
@table @asis
@item @code{tlon-set-status}
Prompts the user to select a valid TODO status from @code{tlon-todo-statuses}. @*
@end table
@findex tlon-set-assignee
@table @asis
@item @code{tlon-set-assignee}
Sets the assignee for an @samp{ISSUE} using @samp{forge--set-topic-assignees}. Takes the @samp{ASSIGNEE} login string. @*
@end table
@findex tlon-select-assignee
@table @asis
@item @code{tlon-select-assignee}
Prompts the user to select a GitHub user (from @code{tlon-user-lookup-all}) to be the assignee. @*
@end table
@findex tlon-set-initial-label-and-assignee
@table @asis
@item @code{tlon-set-initial-label-and-assignee}
Sets the issue label to ``Awaiting processing'' and assigns it to the current user. Used when creating master job TODOs. @*
@end table
@findex tlon-update-todo-from-issue
@table @asis
@item @code{tlon-update-todo-from-issue}
Replaces the current Org heading line with the provided @samp{ISSUE-NAME} string during reconciliation. @*
@end table
@findex tlon-update-issue-from-todo
@table @asis
@item @code{tlon-update-issue-from-todo}
Placeholder function for updating an issue based on a TODO heading during reconciliation (currently signals an error). @*
@end table
@findex tlon-mark-todo-done
@table @asis
@item @code{tlon-mark-todo-done}
Finds the @samp{TODO} heading in @samp{FILE} and sets its state to ``DONE''. @*
@end table

@node Capture and Reconciliation Helpers
@subsection Capture and Reconciliation Helpers

@findex tlon-pull-silently
@table @asis
@item @code{tlon-pull-silently}
Performs a @samp{forge--pull} operation, suppressing output messages, optionally displaying a custom @samp{MESSAGE} and running a @samp{CALLBACK} function upon completion. @*
@end table
@findex tlon-capture-all-issues-after-pull
@table @asis
@item @code{tlon-capture-all-issues-after-pull}
Callback function for @code{tlon-capture-all-issues} that initiates the capture process after the initial pull completes. @*
@end table
@findex tlon-store-todo
@table @asis
@item @code{tlon-store-todo}
Uses @samp{org-capture} with a specific @samp{TEMPLATE} (``tbG'' or ``tbJ'') to store a new TODO for the @samp{ISSUE}, unless one already exists. Handles master job TODO creation. @*
@end table
@findex tlon-capture-handle-assignee
@table @asis
@item @code{tlon-capture-handle-assignee}
Implements the logic defined by @code{tlon-when-assignee-is-nil} and @code{tlon-when-assignee-is-someone-else} during issue capture. Returns @samp{t} if capture should proceed, @samp{nil} otherwise. May call @code{tlon-forg-change-assignee}. @*
@end table
@findex tlon-forg-change-assignee
@table @asis
@item @code{tlon-forg-change-assignee}
Changes the assignee of the @samp{ISSUE} to the current user and waits (pulling silently) until the change is reflected locally. @*
@end table
@findex tlon-capture-handle-phase
@table @asis
@item @code{tlon-capture-handle-phase}
Ensures an @samp{ISSUE} being captured as a job has a valid phase label, prompting the user to select one if missing. @*
@end table
@findex tlon-issue-is-job-p
@table @asis
@item @code{tlon-issue-is-job-p}
Returns @samp{t} if the @samp{ISSUE} title starts with ``Job: ''. @*
@end table
@findex tlon-create-job-todo-from-issue
@table @asis
@item @code{tlon-create-job-todo-from-issue}
Handles phase checking and calls @code{tlon-store-or-refile-job-todo} for job issues. @*
@end table
@findex tlon-store-master-job-todo
@table @asis
@item @code{tlon-store-master-job-todo}
Creates the main parent heading for a job if it doesn't exist. Optionally sets the initial issue label and assignee. @*
@end table
@findex tlon-store-or-refile-job-todo
@table @asis
@item @code{tlon-store-or-refile-job-todo}
Creates a new job TODO using @code{tlon-store-todo} and then refiles it under its corresponding master job heading (found using @code{tlon-get-todo-position}). If the master heading doesn't exist, prompts to create it via @code{tlon-store-master-job-todo}. Uses @samp{org-extras} functions for refiling. @*
@end table
@findex tlon-reconcile-all-issues-and-todos-after-pull
@table @asis
@item @code{tlon-reconcile-all-issues-and-todos-after-pull}
Callback function for @code{tlon-reconcile-all-issues-and-todos} that initiates the reconciliation process after the initial pull completes. @*
@end table
@findex tlon-reconcile-issue-and-todo-from-issue
@table @asis
@item @code{tlon-reconcile-issue-and-todo-from-issue}
Core reconciliation logic called by @code{tlon-reconcile-issue-and-todo}. Compares expected and actual TODO names and calls @code{tlon-reconcile-issue-and-todo-prompt} if they differ. @*
@end table
@findex tlon-reconcile-issue-and-todo-prompt
@table @asis
@item @code{tlon-reconcile-issue-and-todo-prompt}
Handles the user interaction or automatic action based on @code{tlon-forg-when-reconciling} when a discrepancy is found. Calls either @code{tlon-update-todo-from-issue} or @code{tlon-update-issue-from-todo}. @*
@end table

@node Validation and Checks
@subsection Validation and Checks

@findex tlon-assignee-is-current-user-p
@table @asis
@item @code{tlon-assignee-is-current-user-p}
Returns @samp{t} if the @samp{ISSUE}'s assignee matches the current user (or @code{tlon-forg-enforce-user}). @*
@end table
@findex tlon-todo-has-valid-status-p
@table @asis
@item @code{tlon-todo-has-valid-status-p}
Returns @samp{t} if the Org heading at point has a TODO state listed in @code{tlon-todo-statuses}. @*
@end table
@findex tlon-check-label-and-assignee
@table @asis
@item @code{tlon-check-label-and-assignee}
Checks if the label and assignee of the issue associated with the currently clocked task match the clocked action and the current user. Used before starting a job phase. @*
@end table

@node GitHub Project Integration (Experimental)
@subsection GitHub Project Integration (Experimental)

These functions use the `gh` command-line tool and GraphQL to interact with GitHub Projects (V2). This functionality appears experimental or incomplete. @*

@findex tlon-gh-get-issue-fields
@table @asis
@item @code{tlon-gh-get-issue-fields}
Executes the GraphQL query defined in @code{tlon-forg-gh-project-query} using `gh api graphql` to fetch project-related fields for a specific issue. Returns the raw JSON response. @*
@end table
@findex tlon-gh-parse-issue-fields
@table @asis
@item @code{tlon-gh-parse-issue-fields}
Parses the raw JSON list returned by @code{tlon-gh-get-issue-fields} into a structured property list containing title, assignees, labels, effort, and status. @*
@end table

@node Miscellaneous Helpers
@subsection Miscellaneous Helpers

@findex tlon-open-todo
@table @asis
@item @code{tlon-open-todo}
Helper function to open @samp{FILE} and go to @samp{POSITION}. @*
@end table
@findex tlon-todo-issue-funcall
@table @asis
@item @code{tlon-todo-issue-funcall}
Calls @samp{TODO-FUN} if in Org mode at a heading, or @samp{ISSUE-FUN} if in a Forge buffer with an issue context. Used by counterpart and reconcile commands. @*
@end table
@findex tlon-forg-tag-sorter
@table @asis
@item @code{tlon-forg-tag-sorter}
The custom comparison function used by @code{tlon-forg-sort-by-tag}. Extracts the first tag matching @code{tlon-forg-sort-by-tags-regexp} or returns ``~'' for sorting unmatched entries last. @*
@end table
@findex tlon-create-issue
@table @asis
@item @code{tlon-create-issue}
Creates a GitHub issue using @samp{ghub-post}. @*
@end table
@findex tlon-create-issue-in-dir
@table @asis
@item @code{tlon-create-issue-in-dir}
Helper for @code{tlon-report-bug}, sets up Magit and calls @samp{forge-create-issue}. @*
@end table
@findex tlon-prepopulate-bug-report-buffer
@table @asis
@item @code{tlon-prepopulate-bug-report-buffer}
Inserts a template into the buffer created by @code{tlon-report-bug}. @*
@end table
@findex tlon-symbol-reader
@table @asis
@item @code{tlon-symbol-reader}
Helper for transient menus to read a symbol choice using completion. @*
@end table
@findex tlon-when-assignee-is-nil-infix
@table @asis
@item @code{tlon-when-assignee-is-nil-infix}
Transient infix command to set @code{tlon-when-assignee-is-nil}. @*
@end table
@findex tlon-when-assignee-is-someone-else-infix
@table @asis
@item @code{tlon-when-assignee-is-someone-else-infix}
Transient infix command to set @code{tlon-when-assignee-is-someone-else}. @*
@end table
@findex tlon-forg-when-reconciling-infix
@table @asis
@item @code{tlon-forg-when-reconciling-infix}
Transient infix command to set @code{tlon-forg-when-reconciling}. @*
@end table
@findex tlon-infix-toggle-include-archived
@table @asis
@item @code{tlon-infix-toggle-include-archived}
Transient infix command to toggle @code{tlon-forg-include-archived}. @*
@end table

@node Glossary Management (@samp{tlon-glossaryel})
@chapter Glossary Management (@samp{tlon-glossary.el})

This module provides functions for managing a multilingual glossary stored in a JSON file. It allows users to edit entries, add translations, and extract the glossary in different formats for various recipients (humans, DeepL editor, DeepL API). @*

@menu
* Configuration: Configuration (4). 
* Commands: Commands (10). 
* Internal Functions and Variables: Internal Functions and Variables (9). 
@end menu

@node Configuration (4)
@section Configuration

@menu
* Glossary Source File::
* Glossary Recipients::
@end menu

@node Glossary Source File
@subsection Glossary Source File

@vindex tlon-file-glossary-source
The constant @code{tlon-file-glossary-source} defines the path to the JSON file containing the master glossary data. By default, it points to @samp{glossary.json} within the @samp{babel-core} repository. @*

@node Glossary Recipients
@subsection Glossary Recipients

@vindex tlon-glossary-recipients
The constant @code{tlon-glossary-recipients} is an alist defining the email addresses associated with specific target languages for sharing human-readable glossaries. Each entry is a plist with @samp{:language} (language code string) and @samp{:email} (email address string). @*

@lisp
(defconst tlon-glossary-recipients
  '((:language "fr" :email "tlon-french@@googlegroups.com")
    (:language "it" :email "tlon-italian@@googlegroups.com")))
@end lisp

@node Commands (10)
@section Commands

This section details the interactive commands provided by @samp{tlon-glossary.el}. @*

@menu
* Edit Glossary Entry::
* Extract Glossary::
* Share Glossary::
* Glossary Menu::
@end menu

@node Edit Glossary Entry
@subsection Edit Glossary Entry

@findex tlon-edit-glossary
The command @code{tlon-edit-glossary} provides an interactive way to create or update entries in the glossary file (@code{tlon-file-glossary-source}). @*

@enumerate
@item
It parses the existing glossary using @code{tlon-parse-glossary}. @*
@item
It prompts the user to choose an existing English term (using completion) or add a new one. @*
@item
If the term is new: @*
@itemize
@item
It prompts the user to select the term type (@samp{variable} or @samp{invariant}) using @code{tlon-select-term-type}. @*
@item
It creates a new entry structure using @code{tlon-create-entry}. For invariant terms, it automatically adds entries for all target languages, using the English term as the initial translation. @*
@end itemize
@item
If the term exists or is newly created and is not of type @samp{invariant}: @*
@itemize
@item
It calls @code{tlon-edit-translation-in-entry} to prompt the user for a target language and the corresponding translation for the selected English term. It updates the entry with the new or modified translation. @*
@end itemize
@item
It updates the main glossary data structure with the modified or new entry using @code{tlon-update-glossary}. @*
@item
It writes the updated glossary back to the JSON file using @code{tlon-write-data}. @*
@end enumerate

@node Extract Glossary
@subsection Extract Glossary

@findex tlon-extract-glossary
The command @code{tlon-extract-glossary} extracts a language-specific glossary from the main JSON file and saves it in a format suitable for a specified recipient. @*

@enumerate
@item
It prompts the user to select the target @samp{LANGUAGE} using @code{tlon-select-language}. @*
@item
It prompts the user to select the @samp{RECIPIENT} type (@samp{human}, @samp{deepl-editor}, or @samp{deepl-api}) using completion. @*
@item
It determines the target file path and extension based on the language and recipient using @code{tlon-glossary-target-path}. @*
@item
It reads the source glossary JSON file. @*
@item
It creates or opens the target file and inserts the formatted glossary content using @code{tlon-insert-formatted-glossary}, filtering and formatting entries based on the recipient: @*
@itemize
@item
@samp{human}: Includes only ``variable'' type entries, formatted as CSV (@samp{"Source","Target"}). @*
@item
@samp{deepl-editor}: Includes all entries, formatted as CSV (@samp{"Source","Target","EN","LANG"}). @*
@item
@samp{deepl-api}: Includes all entries, formatted as TSV (@samp{Source\tTarget}). @*
@end itemize
@item
It saves the target file. @*
@item
If the recipient is @samp{human}, it asks the user if they want to share the extracted glossary via email using @code{tlon-share-glossary}. @*
@item
For other recipients, it messages the path to the extracted file. @*
@end enumerate

@node Share Glossary
@subsection Share Glossary

@findex tlon-share-glossary
The command @code{tlon-share-glossary} sends an extracted glossary file as an email attachment to the designated translators for a specific language. @*

@enumerate
@item
It prompts the user to select the glossary @samp{ATTACHMENT} file (defaulting to the downloads directory). @*
@item
It prompts the user to select the @samp{LANGUAGE} of the glossary (unless provided as an argument). @*
@item
It looks up the recipient email address for the language in @code{tlon-glossary-recipients} using @code{tlon-lookup}. @*
@item
It looks up the full language name (e.g., ``French'') using @code{tlon-lookup} on @code{tlon-languages-properties} and sets the @code{tlon-email-language} variable. @*
@item
It calls @code{tlon-email-send} with the @samp{"share-glossary.org"} template, the recipient email, and the attachment path. @*
@end enumerate

@node Glossary Menu
@subsection Glossary Menu

@findex tlon-glossary-menu
The command @code{tlon-glossary-menu} activates a @samp{transient} menu interface providing quick access to the main glossary functions: @*
@table @asis
@item @samp{e}
Edit glossary entry (@code{tlon-edit-glossary}) @*
@item @samp{x}
Extract glossary (@code{tlon-extract-glossary}) @*
@item @samp{s}
Share glossary (@code{tlon-share-glossary}) @*
@end table

@node Internal Functions and Variables (9)
@section Internal Functions and Variables

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization. @*

@menu
* Glossary Data Handling::
* Glossary Extraction Formatting::
* Git Integration (Currently Unused/TODO)::
@end menu

@node Glossary Data Handling
@subsection Glossary Data Handling

@findex tlon-parse-glossary
@table @asis
@item @code{tlon-parse-glossary}
Reads and parses the JSON glossary file specified by @code{tlon-file-glossary-source} into an Emacs Lisp alist using @code{tlon-read-json}. @*
@end table

@findex tlon-get-english-terms
@table @asis
@item @code{tlon-get-english-terms}
Extracts a list of all English terms (the @samp{en} value) from the parsed glossary alist. Used for completion in @code{tlon-edit-glossary}. @*
@end table

@findex tlon-find-entry-by-term
@table @asis
@item @code{tlon-find-entry-by-term}
Searches the parsed glossary alist for an entry whose English term (@samp{en} value) matches the given @samp{TERM}. Returns the matching entry alist or nil. @*
@end table

@findex tlon-select-term-type
@table @asis
@item @code{tlon-select-term-type}
Prompts the user with completion to select a term type (@samp{variable} or @samp{invariant}) and returns the selected string. @*
@end table

@findex tlon-create-entry
@table @asis
@item @code{tlon-create-entry}
Creates a new glossary entry alist for a given English @samp{TERM} and @samp{TYPE}. If the type is @samp{invariant}, it pre-populates translations for all @code{tlon-project-target-languages} with the English term itself. @*
@end table

@findex tlon-edit-translation-in-entry
@table @asis
@item @code{tlon-edit-translation-in-entry}
Interactively prompts the user to select a target language and provide or update the translation for the given English @samp{TERM} within the provided @samp{ENTRY} alist. Returns the modified entry. @*
@end table

@findex tlon-update-glossary
@table @asis
@item @code{tlon-update-glossary}
Takes the main glossary alist, a potentially modified @samp{ENTRY}, and the corresponding English @samp{TERM}. If an entry for @samp{TERM} already exists in the glossary, it replaces it with @samp{ENTRY}. If not, it appends @samp{ENTRY} to the glossary. Returns the updated glossary alist. @*
@end table

@node Glossary Extraction Formatting
@subsection Glossary Extraction Formatting

@findex tlon-glossary-target-path
@table @asis
@item @code{tlon-glossary-target-path}
Determines the full output file path for an extracted glossary based on the target @samp{LANGUAGE} and @samp{RECIPIENT}. It sets the file extension to @samp{.csv} for @samp{human} and @samp{deepl-editor}, and @samp{.tsv} for @samp{deepl-api}. Uses @code{tlon-glossary-make-file} internally. @*
@end table

@findex tlon-glossary-make-file
@table @asis
@item @code{tlon-glossary-make-file}
Constructs the filename (e.g., @samp{EN-FR.csv}) and combines it with the user's download directory path (@code{paths-dir-downloads}). @*
@end table

@findex tlon-insert-formatted-glossary
@table @asis
@item @code{tlon-insert-formatted-glossary}
Iterates through the parsed @samp{JSON} glossary data. For each entry, it extracts the source (@samp{en}) and target (@samp{language}) terms. Based on the @samp{RECIPIENT}, it formats the entry as CSV or TSV and inserts it into the current buffer. For @samp{human} recipients, it only includes entries of type @samp{variable}. @*
@end table

@node Git Integration (Currently Unused/TODO)
@subsection Git Integration (Currently Unused/TODO)

@findex tlon-glossary-prompt-for-explanation
@table @asis
@item @code{tlon-glossary-prompt-for-explanation}
(TODO) Prompts the user for an optional explanation of a glossary change, intended for commit messages. @*
@end table

@findex tlon-glossary-commit
@table @asis
@item @code{tlon-glossary-commit}
(TODO) Intended to handle the Git workflow for glossary changes: pulling, staging the glossary file, committing with a formatted message (including action, term, and optional explanation), and pushing. Requires @samp{magit} functions. Currently marked as unused and needing fixes. @*
@end table

@node Image Processing (@samp{tlon-imagesel})
@chapter Image Processing (@samp{tlon-images.el})

This module provides functionality for processing images, primarily using the external @samp{ImageMagick} command-line tool. It allows for operations like reducing brightness, inverting colors, and making images non-transparent. It also integrates with the @samp{invertornot.com} API to determine if an image's colors can be safely inverted. @*

@menu
* Dependencies: Dependencies (8). 
* User Options: User Options (4). 
* Commands: Commands (11). 
* Internal Functions and Variables: Internal Functions and Variables (10). 
@end menu

@node Dependencies (8)
@section Dependencies

@table @asis
@item @samp{ImageMagick}
Must be installed and accessible in the system's PATH for image processing commands to work. @*
@item @samp{transient}
Required for the menu interface. @*
@item @samp{window-extras}
Used by @code{tlon-images-maybe-open-after-processing} for window management. @*
@end table

@node User Options (4)
@section User Options

@vindex tlon-images-default-brightness-reduction
@table @asis
@item @code{tlon-images-default-brightness-reduction}
Default percentage (integer) by which to reduce image brightness when using @code{tlon-images-reduce-brightnesss} without specifying a percentage. Defaults to 20. @*
@end table

@vindex tlon-images-open-after-processing
@table @asis
@item @code{tlon-images-open-after-processing}
Boolean flag. If non-nil (the default), the original (copied as light theme) and processed (dark theme) images will be opened in separate windows after processing via @code{tlon-images-reduce-brightnesss} or @code{tlon-images-invert-colors}. Uses @code{tlon-images-maybe-open-after-processing}. @*
@end table

@vindex tlon-images-process-without-asking
@table @asis
@item @code{tlon-images-process-without-asking}
Boolean flag. If non-nil, commands like @code{tlon-images-reduce-brightnesss} will process the image at point (in Dired) or the current buffer's file without prompting for confirmation via @code{tlon-images-read-image}. Defaults to nil. @*
@end table

@node Commands (11)
@section Commands

@menu
* Auto Process Image::
* Reduce Image Brightness::
* Invert Image Colors::
* Make Image Non-Transparent::
* Transient Menu: Transient Menu (8). 
@end menu

@node Auto Process Image
@subsection Auto Process Image

@findex tlon-images-auto-process
The command @code{tlon-images-auto-process} attempts to intelligently process an image for a dark theme. @*

@enumerate
@item
It prompts for the @samp{IMAGE} file using @code{tlon-images-read-image}. @*
@item
It determines the output filename using @code{tlon-images-get-themed-file-name} with the @samp{dark} theme. @*
@item
It checks if the image can be safely inverted using @code{tlon-images-can-invert-p} (which calls the @samp{invertornot.com} API). @*
@item
If inversion is safe, it calls @code{tlon-images-invert-colors}. @*
@item
Otherwise, it calls @code{tlon-images-reduce-brightnesss} using the default reduction percentage. @*
@end enumerate

@node Reduce Image Brightness
@subsection Reduce Image Brightness

@findex tlon-images-reduce-brightnesss
The command @code{tlon-images-reduce-brightnesss} reduces the brightness of an image using ImageMagick. @*

@enumerate
@item
It prompts for the @samp{SOURCE} image using @code{tlon-images-read-image} (unless provided). @*
@item
It determines the @samp{TARGET} filename (defaulting to a dark-themed version via @code{tlon-images-get-themed-file-name}) unless provided. @*
@item
It prompts for the reduction @samp{PERCENT} (defaulting to @code{tlon-images-default-brightness-reduction}) unless provided. Note: The percentage passed to ImageMagick's @samp{-modulate} is calculated as @samp{100 - PERCENT}. @*
@item
It constructs the ImageMagick command using @code{tlon-imagemagick-reduce-brightness}. @*
@item
It calls @code{tlon-images-process-image} to execute the command, copy the original to a light-themed file, handle output, and potentially open the images. @*
@end enumerate

@node Invert Image Colors
@subsection Invert Image Colors

@findex tlon-images-invert-colors
The command @code{tlon-images-invert-colors} inverts the colors of an image using ImageMagick. @*

@enumerate
@item
It prompts for the @samp{SOURCE} image using @code{tlon-images-read-image} (unless provided). @*
@item
It determines the @samp{TARGET} filename (defaulting to a dark-themed version via @code{tlon-images-get-themed-file-name}) unless provided. @*
@item
It constructs the ImageMagick command using @code{tlon-imagemagick-invert-colors}. @*
@item
It calls @code{tlon-images-process-image} to execute the command, copy the original to a light-themed file, handle output, and potentially open the images. @*
@end enumerate

@node Make Image Non-Transparent
@subsection Make Image Non-Transparent

@findex tlon-images-make-nontransparent
The command @code{tlon-images-make-nontransparent} removes transparency from an image, replacing it with a solid background color using ImageMagick. @*

@enumerate
@item
It prompts for the @samp{SOURCE} image using @code{tlon-images-read-image} (unless provided). @*
@item
It determines the @samp{TARGET} filename (defaulting to the source file itself, thus overwriting it) unless provided. @*
@item
It prompts for the @samp{BACKGROUND} color (defaulting to ``white'') unless provided. @*
@item
It constructs the ImageMagick command using @code{tlon-imagemagick-make-nontransparent}. @*
@item
It executes the command using @samp{shell-command-to-string}. @*
@item
It calls @code{tlon-images-handle-output} to display success or error messages. @*
@end enumerate

@node Transient Menu (8)
@subsection Transient Menu

@findex tlon-images-menu
The command @code{tlon-images-menu} activates a @samp{transient} menu interface for image processing. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Commands}: @*
@table @asis
@item @samp{a}
Auto process (@code{tlon-images-auto-process}) @*
@item @samp{r}
Reduce brightness (@code{tlon-images-reduce-brightnesss}) @*
@item @samp{i}
Invert colors (@code{tlon-images-invert-colors}) @*
@item @samp{n}
Make non-transparent (@code{tlon-images-make-nontransparent}) @*
@end table
@item
@strong{Options}: @*
@table @asis
@item @samp{-o}
Toggle opening images after processing (@code{tlon-images-toggle-open-after-processing} infix, modifies @code{tlon-images-open-after-processing}) @*
@item @samp{-p}
Toggle processing without asking (@code{tlon-images-toggle-process-without-asking} infix, modifies @code{tlon-images-process-without-asking}) @*
@item @samp{-r}
Set brightness reduction percentage (@code{tlon-images-brightness-reduction-infix}, modifies @code{tlon-images-default-brightness-reduction}) @*
@end table
@end itemize

@node Internal Functions and Variables (10)
@section Internal Functions and Variables

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization. @*

@menu
* ImageMagick Command Constants::
* InvertOrNot API Integration::
* Helper Functions: Helper Functions (2). 
* Transient Infix Commands: Transient Infix Commands (1). 
@end menu

@node ImageMagick Command Constants
@subsection ImageMagick Command Constants

@vindex tlon-imagemagick-reduce-brightness
@table @asis
@item @code{tlon-imagemagick-reduce-brightness}
Format string for the @samp{magick} command to reduce brightness using @samp{-modulate}. Placeholders: %1$s (input), %2$s (output), %3$s (brightness percentage for modulate). @*
@end table

@vindex tlon-imagemagick-invert-colors
@table @asis
@item @code{tlon-imagemagick-invert-colors}
Format string for the @samp{magick} command to invert colors using @samp{-channel RGB -negate}. Placeholders: %s (input), %s (output). @*
@end table

@vindex tlon-imagemagick-make-nontransparent
@table @asis
@item @code{tlon-imagemagick-make-nontransparent}
Format string for the @samp{magick} command to remove transparency using @samp{-background} and @samp{-flatten}. Placeholders: %1$s (input), %2$s (output), %3$s (background color). @*
@end table

@node InvertOrNot API Integration
@subsection InvertOrNot API Integration

@vindex tlon-invertornot-generic-endpoint
@table @asis
@item @code{tlon-invertornot-generic-endpoint}
Base URL for the @samp{invertornot.com} API@. @*
@end table

@findex tlon-images-post-file-to-invertornot
@table @asis
@item @code{tlon-images-post-file-to-invertornot}
Sends an image @samp{FILE} to the @samp{invertornot.com/api/file} endpoint using a multipart/form-data POST request. Returns the parsed JSON response via @code{tlon-images-handle-synchronous-response}. @*
@end table

@findex tlon-images-post-url-to-invertornot
@table @asis
@item @code{tlon-images-post-url-to-invertornot}
Sends an @samp{IMAGE-URL} to the @samp{invertornot.com/api/url} endpoint using a JSON POST request. Returns the parsed JSON response via @code{tlon-images-handle-synchronous-response}. @*
@end table

@findex tlon-images-handle-synchronous-response
@table @asis
@item @code{tlon-images-handle-synchronous-response}
Helper function to process the buffer returned by @samp{url-retrieve-synchronously}, extract the JSON payload, and parse it into an alist. @*
@end table

@findex tlon-images-can-invert-p
@table @asis
@item @code{tlon-images-can-invert-p}
Takes an @samp{IMAGE} file path, sends it to the @samp{invertornot.com} API using @code{tlon-images-post-file-to-invertornot}, and checks the @samp{invert} field in the response. Returns @samp{t} if the value is 1, @samp{nil} if 0, and signals an error otherwise. @*
@end table

@node Helper Functions (2)
@subsection Helper Functions

@findex tlon-images-read-image
@table @asis
@item @code{tlon-images-read-image}
Prompts the user for an image file path. If called within Dired, defaults to the file at point. If the current buffer has a file, defaults to that. If @code{tlon-images-process-without-asking} is non-nil, it skips the prompt and uses the default directly. @*
@end table

@findex tlon-images-process-image
@table @asis
@item @code{tlon-images-process-image}
Core utility for processing images. Takes @samp{SOURCE}, @samp{TARGET}, the ImageMagick @samp{COMMAND} string, and a @samp{MESSAGE-FMT} string. @*
@enumerate
@item
Executes the @samp{COMMAND} using @samp{shell-command-to-string}. @*
@item
Copies the @samp{SOURCE} file to a light-themed filename (using @code{tlon-images-get-themed-file-name}). @*
@item
Calls @code{tlon-images-maybe-open-after-processing} with the light and dark themed files. @*
@item
Calls @code{tlon-images-handle-output} with the command output and the formatted message. @*
@end enumerate
@end table

@findex tlon-images-handle-output
@table @asis
@item @code{tlon-images-handle-output}
Checks the @samp{OUTPUT} string from a shell command. If empty, displays the success @samp{MESSAGE}. If non-empty, signals a user error with the output content. @*
@end table

@findex tlon-images-get-themed-file-name
@table @asis
@item @code{tlon-images-get-themed-file-name}
Takes a @samp{FILE} path and a @samp{THEME} symbol (@samp{light} or @samp{dark}). Returns a new filename with @samp{-[theme].ext} appended before the extension (e.g., @samp{image.png} becomes @samp{image-dark.png}). @*
@end table

@findex tlon-images-maybe-open-after-processing
@table @asis
@item @code{tlon-images-maybe-open-after-processing}
If @code{tlon-images-open-after-processing} is non-nil, it opens the @samp{ORIGINAL} (light theme) and @samp{PROCESSED} (dark theme) files in separate windows, splitting the frame if necessary using @samp{window-extras} functions. @*
@end table

@node Transient Infix Commands (1)
@subsection Transient Infix Commands

These functions define the behavior of the options within the @code{tlon-images-menu}. @*

@findex tlon-images-brightness-reduction-infix
@table @asis
@item @code{tlon-images-brightness-reduction-infix}
Reads a number from the user to set the local value of @code{tlon-images-default-brightness-reduction} for the current menu invocation. @*
@end table

@findex tlon-images-toggle-open-after-processing
@table @asis
@item @code{tlon-images-toggle-open-after-processing}
Toggles the boolean value of @code{tlon-images-open-after-processing} for the current menu invocation using @code{tlon-transient-toggle-variable-value}. @*
@end table

@findex tlon-images-toggle-process-without-asking
@table @asis
@item @code{tlon-images-toggle-process-without-asking}
Toggles the boolean value of @code{tlon-images-process-without-asking} for the current menu invocation using @code{tlon-transient-toggle-variable-value}. @*
@end table

@node Job Management (@samp{tlon-jobsel})
@chapter Job Management (@samp{tlon-jobs.el})

This module manages the workflow for processing ``Babel jobs,'' which typically involve translating documents. It integrates Org mode's clocking mechanism, GitHub issues (via @samp{orgit-forge}), and Git version control (via @samp{magit}) to track the progress of jobs through various phases like processing, translation, revision, checking, and review. @*

@menu
* Configuration: Configuration (5). 
* Commands: Commands (12). 
* Internal Functions and Variables: Internal Functions and Variables (11). 
@end menu

@node Configuration (5)
@section Configuration

@menu
* Job Labels and Phases::
* Org ID Constants::
* Jobs File Variable::
@end menu

@node Job Labels and Phases
@subsection Job Labels and Phases

@vindex tlon-job-labels
The constant @code{tlon-job-labels} defines the different stages or phases a job goes through. It's an alist where each element represents a phase and contains properties like the display label, the action verb associated with the phase, and the default assignee for that phase. @*

@lisp
(defconst tlon-job-labels
  '((:label "Awaiting processing" :action "Process" :assignee "worldsaround")
    (:label "Awaiting translation" :action "Translate" :assignee "")
    ;; ... other phases ...
    (:label "Published" :action "Publish" :assignee "")))
@end lisp

This structure drives the workflow logic, determining the next step and assignee after a phase is completed. @*

@node Org ID Constants
@subsection Org ID Constants

@vindex tlon-jobs-manual-processing-id
@table @asis
@item @code{tlon-jobs-manual-processing-id}
The Org ID of the specific heading within @samp{manual.org} that contains instructions relevant to the ``processing'' phase. Used by @code{tlon-jobs-initialize-processing}. @*
@end table

@vindex tlon-jobs-id
@table @asis
@item @code{tlon-jobs-id}
The Org ID of the main ``jobs'' heading in the central @samp{jobs.org} file. This file serves as the primary tracker for all jobs. @*
@end table

@node Jobs File Variable
@subsection Jobs File Variable

@vindex tlon-jobs-file
The variable @code{tlon-jobs-file} holds the path to the @samp{jobs.org} file. It is set dynamically by @code{tlon-jobs-get-file} and should not be configured manually. @*

@node Commands (12)
@section Commands

This section details the interactive commands provided by @samp{tlon-jobs.el}. @*

@menu
* Start or Finish Job Phase::
* Create Job::
* Create Job Record::
* Create Heading in jobs.org: Create Heading in jobsorg. 
* Transient Menu: Transient Menu (9). 
@end menu

@node Start or Finish Job Phase
@subsection Start or Finish Job Phase

@findex tlon-jobs-start-or-finish-phase
The command @code{tlon-jobs-start-or-finish-phase} is the central command for advancing the job workflow. It determines the current context (Org mode for starting, Markdown mode for finishing) and the action associated with the currently clocked task (@code{tlon-get-clock-action}). @*

@itemize
@item
@strong{Initialization (in Org mode):} @*
@enumerate
@item
Clocks into the task. @*
@item
Saves the buffer. @*
@item
Determines the initialization function based on the action (e.g., @code{tlon-jobs-initialize-processing}). @*
@item
Calls the general @code{tlon-jobs-initialize} function, which performs common setup tasks: @*
@itemize
@item
Checks the associated repository's label and assignee (@code{tlon-check-label-and-assignee}). @*
@item
Ensures the repository is on the ``main'' branch (@code{tlon-check-branch}). @*
@item
Pulls the latest changes from upstream (@code{magit-pull-from-upstream}). @*
@item
Sets up the window configuration with original and translation files (@code{tlon-set-windows}). @*
@item
Opens the associated GitHub issue (@code{orgit-topic-open}). @*
@item
Copies the original buffer content. @*
@end itemize
@item
Calls the specific initialization function for the current phase (e.g., opening the manual for processing, opening DeepL for translation, setting up diffs for review). @*
@end enumerate

@item
@strong{Finalization (in Markdown mode):} @*
@enumerate
@item
Closes split mode if active (@code{tlon-split-mode -1}). @*
@item
Saves the buffer. @*
@item
Calls @code{tlon-jobs-finalize}, which performs common finalization tasks: @*
@itemize
@item
Checks the repository branch and label/assignee. @*
@item
Performs phase-specific checks (e.g., prompts for Jinx/Flycheck confirmation after translation). @*
@item
Saves the modified original (if processing) or translation file. @*
@item
Commits and pushes the changes for the translation file (and original if processing) using @code{tlon-commit-and-push}. @*
@item
Updates the associated GitHub issue: sets the next label (@code{tlon-get-clock-next-label}) and assignee (@code{tlon-jobs-get-next-assignee}), potentially closing the issue after the ``Review'' phase using @code{tlon-jobs-act-on-issue}. @*
@item
Updates the corresponding TODO items in @samp{jobs.org} and the main TODO file using @code{tlon-jobs-finalize-set-todos}. @*
@end itemize
@end enumerate
@end itemize

@node Create Job
@subsection Create Job

@findex tlon-create-job
The command @code{tlon-create-job} orchestrates the entire process of creating a new job based on a Bib@TeX{} entry at point in an Ebib buffer. @*

@enumerate
@item
Imports the document associated with the Bib@TeX{} entry using @code{tlon-import-document}, which returns the Bib@TeX{} key. @*
@item
Creates the initial translation file structure using @code{tlon-create-translation-file}. @*
@item
Creates the necessary records for the job (GitHub issue and @samp{jobs.org} heading) using @code{tlon-create-record-for-job}. @*
@end enumerate

@node Create Job Record
@subsection Create Job Record

@findex tlon-create-record-for-job
The command @code{tlon-create-record-for-job} creates the tracking records for a job based on a Bib@TeX{} @samp{KEY}. If @samp{KEY} is not provided, it attempts to find it in the current buffer (Markdown or Ebib). @*

@enumerate
@item
Creates a GitHub issue titled ``Job: `KEY`'' using @code{tlon-create-issue-from-key}. @*
@item
Creates a corresponding heading in @samp{jobs.org} using @code{tlon-create-heading-for-job}, optionally committing the change. @*
@end enumerate

@node Create Heading in jobsorg
@subsection Create Heading in jobs.org

@findex tlon-create-heading-for-job
The command @code{tlon-create-heading-for-job} adds a new heading to the @samp{jobs.org} file for tracking a specific job based on its Bib@TeX{} @samp{KEY}. @*

@enumerate
@item
Determines the @samp{KEY} (from argument or current buffer). @*
@item
Formats the heading as @samp{[cite:@@KEY]}. @*
@item
Finds the associated repository and its abbreviation (@code{tlon-repo-lookup}). @*
@item
Opens @samp{jobs.org} (finding the buffer or file). @*
@item
If the heading doesn't exist: @*
@itemize
@item
Navigates to the main jobs section (using @code{tlon-jobs-id}). @*
@item
Inserts the new heading. @*
@item
Sets the TODO state to ``TODO''. @*
@item
Adds the repository abbreviation as a tag. @*
@item
Sorts the headings in the file (@code{tlon-sort-headings}). @*
@item
Saves the buffer. @*
@end itemize
@item
Optionally commits the change to @samp{jobs.org} using @code{tlon-commit-and-push} if @samp{COMMIT} is non-nil. @*
@end enumerate

@node Transient Menu (9)
@subsection Transient Menu

@findex tlon-jobs-menu
The command @code{tlon-jobs-menu} activates a @samp{transient} menu interface for job-related operations. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Job phases}: @*
@table @asis
@item @samp{j}
Start or finish phase (@code{tlon-jobs-start-or-finish-phase}) @*
@end table
@item
@strong{Job creation}: @*
@table @asis
@item @samp{c c}
Create job (@code{tlon-create-job}) @*
@item @samp{c d}
1 Import document (@code{tlon-import-document}) @*
@item @samp{c f}
2 Create translation file (@code{tlon-create-translation-file}) @*
@item @samp{c r}
3 Create record for job (@code{tlon-create-record-for-job}) @*
@end table
@item
@strong{Add or modify}: @*
@table @asis
@item @samp{a s}
Section correspondence (@code{tlon-section-correspondence-dwim}) @*
@item @samp{a u}
URL correspondence (@code{tlon-edit-url-correspondences}) @*
@end table
@item
@strong{jobs.org}: @*
@table @asis
@item @samp{r}
Create record (@code{tlon-create-record-for-job}) @*
@item @samp{h}
Create heading (@code{tlon-create-heading-for-job}) @*
@item @samp{t}
Sort headings (@code{tlon-sort-headings}) @*
@end table
@end itemize

@node Internal Functions and Variables (11)
@section Internal Functions and Variables

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization. @*

@menu
* File and Path Management::
* Job Phase Logic::
* Issue and TODO Interaction::
* jobs.org Helpers: jobsorg Helpers. 
@end menu

@node File and Path Management
@subsection File and Path Management

@findex tlon-jobs-get-file
@table @asis
@item @code{tlon-jobs-get-file}
Retrieves the path to the @samp{jobs.org} file, using the Org ID @code{tlon-jobs-id} and caching the result in @code{tlon-jobs-file} via @code{tlon-get-or-set-org-var}. @*
@end table

@node Job Phase Logic
@subsection Job Phase Logic

@findex tlon-jobs-get-action-in-label
@table @asis
@item @code{tlon-jobs-get-action-in-label}
Extracts the action verb (e.g., ``Process'', ``Translate'') from a job phase @samp{LABEL} string (e.g., ``Awaiting processing''). @*
@end table

@findex tlon-jobs-initialize
@table @asis
@item @code{tlon-jobs-initialize}
Performs common setup tasks when starting any job phase (checking repo, pulling, setting up windows, opening issue, copying buffer). Takes the specific phase initialization function (@samp{FUN}) as an argument and calls it after the common setup. @*
@end table

@findex tlon-jobs-finalize
@table @asis
@item @code{tlon-jobs-finalize}
Performs common cleanup and update tasks when finishing any job phase (checking repo, committing files, updating GitHub issue label/assignee, updating TODOs). @*
@end table

@findex tlon-jobs-get-next-assignee
@table @asis
@item @code{tlon-jobs-get-next-assignee}
Determines the assignee for the @strong{next} phase. It considers the current user and the designated assignee for the current phase versus the next phase, potentially assigning a substitute if the current user isn't the designated one for the current phase. @*
@end table

@findex tlon-jobs-initialize-processing
@table @asis
@item @code{tlon-jobs-initialize-processing}
Specific setup for the ``Process'' phase: opens the original file and the relevant section in @samp{manual.org} (using @code{tlon-jobs-manual-processing-id}), narrows the view, and opens the issue. @*
@end table

@findex tlon-jobs-initialize-translation
@table @asis
@item @code{tlon-jobs-initialize-translation}
Specific setup for the ``Translate'' phase: opens the DeepL application using @code{macos-open-app}. @*
@end table

@findex tlon-jobs-initialize-revision
@table @asis
@item @code{tlon-jobs-initialize-revision}
Specific setup for the ``Revise'' phase: activates split mode (@code{tlon-split-mode}). @*
@end table

@findex tlon-jobs-initialize-check
@table @asis
@item @code{tlon-jobs-initialize-check}
Specific setup for the ``Check'' phase: rearranges windows, starts Markdown preview, and initiates text-to-speech using @code{read-aloud-buf}. @*
@end table

@findex tlon-jobs-initialize-review
@table @asis
@item @code{tlon-jobs-initialize-review}
Specific setup for the ``Review'' phase: opens an @samp{ediff} session showing changes since the last user commit (@code{tlon-log-buffer-latest-user-commit-ediff}), sets up @samp{jinx} for spell/grammar checking in the target language, and moves to the beginning of the buffer. @*
@end table

@node Issue and TODO Interaction
@subsection Issue and TODO Interaction

@findex tlon-jobs-act-on-issue
@table @asis
@item @code{tlon-jobs-act-on-issue}
Updates a GitHub issue associated with an @samp{ORIGINAL-KEY}. It finds the issue (using @code{tlon-issue-lookup}), sets the specified @samp{LABEL} and @samp{ASSIGNEE} using @code{tlon-set-labels} and @code{tlon-set-assignee}, and optionally closes the issue if @samp{CLOSE} is non-nil. @*
@end table

@findex tlon-jobs-finalize-set-todos
@table @asis
@item @code{tlon-jobs-finalize-set-todos}
Marks the relevant TODO items as DONE during the finalization process. It marks the clocked task itself as DONE in the main TODO file (@code{tlon-get-todos-jobs-file}). For ``Review'' and ``Check'' phases, it also marks the parent TODO as DONE@. For the ``Review'' phase, it additionally marks the corresponding job heading in @samp{jobs.org} as DONE, sorts the headings, and commits the change. @*
@end table

@node jobsorg Helpers
@subsection jobs.org Helpers

@findex tlon-jobs-get-key-in-heading
@table @asis
@item @code{tlon-jobs-get-key-in-heading}
Extracts the Bib@TeX{} key from the Org heading at point, assuming the format @samp{[cite:@@KEY]} or ``Job: `KEY`.md``. @*
@end table

@findex tlon-jobs-goto-heading
@table @asis
@item @code{tlon-jobs-goto-heading}
Moves the point to the heading corresponding to the given Bib@TeX{} @samp{KEY} within the @samp{jobs.org} file. @*
@end table

@node Markdown Functionality (@samp{tlon-mdel})
@chapter Markdown Functionality (@samp{tlon-md.el})

This module provides specialized functionality for working with Markdown files within the Tlön workflow. It includes commands for inserting and managing various Markdown, HTML, MDX, and SSML elements, handling footnotes, sorting content, and interacting with YAML front matter. It also defines numerous constants (mostly regular expressions) for identifying these elements. @*

@menu
* Dependencies: Dependencies (9). 
* User Options: User Options (5). 
* Commands: Commands (13). 
* Internal Functions and Variables: Internal Functions and Variables (12). 
@end menu

@node Dependencies (9)
@section Dependencies

@itemize
@item
@samp{markdown-mode-extras} @*
@item
@samp{tlon-core} @*
@item
@samp{tlon-yaml} @*
@end itemize

@node User Options (5)
@section User Options

@vindex tlon-md-special-characters
@table @asis
@item @code{tlon-md-special-characters}
An alist defining special characters that can be inserted using the @code{tlon-insert-special-character} command. The key is the descriptive name (e.g., ``en dash'') and the value is the character itself (e.g., ``–''). @*
@end table

@node Commands (13)
@section Commands

This section details the interactive commands provided by @samp{tlon-md.el}. @*

@menu
* YAML Front Matter::
* Links and Sorting::
* Tag Insertion/Editing (HTML, MDX, SSML): Tag Insertion/Editing (HTML MDX SSML). 
* Note Classification::
* Miscellaneous Commands::
@end menu

@node YAML Front Matter
@subsection YAML Front Matter

@findex tlon-edit-yaml-field
@table @asis
@item @code{tlon-edit-yaml-field}
Edits the YAML field at point. It retrieves the key and value using @code{tlon-yaml-get-field-at-point} and then prompts the user to re-insert/modify them using @code{tlon-yaml-insert-field}. @*
@end table

@node Links and Sorting
@subsection Links and Sorting

@findex tlon-insert-internal-link
@table @asis
@item @code{tlon-insert-internal-link}
Inserts a Markdown link to another Tlön entity (article, author, tag). It uses completion based on titles found in the repository's metadata (@code{tlon-metadata-in-repo}). It handles existing links at point and uses the active region as default link text. @*
@end table

@findex tlon-md-sort-related-entries
@table @asis
@item @code{tlon-md-sort-related-entries}
Sorts the list items (assumed to be links separated by `` • '') alphabetically within the ``Entradas relacionadas'' section of the current buffer. Uses @code{tlon-md-sort-elements-in-paragraph} internally. @*
@end table

@node Tag Insertion/Editing (HTML MDX SSML)
@subsection Tag Insertion/Editing (HTML, MDX, SSML)

These commands insert or edit specific tags at point or around the selected region. They generally use @code{tlon-md-insert-or-edit-tag} internally, which checks if the tag already exists at point and either edits it or inserts a new one. Many prompt for necessary attributes. @*

@itemize
@item
@strong{HTML Tags}: @*
@findex tlon-html-insert-subscript
@table @asis
@item @code{tlon-html-insert-subscript}
Inserts/edits @samp{<sub>} tags. @*
@end table
@findex tlon-html-insert-superscript
@table @asis
@item @code{tlon-html-insert-superscript}
Inserts/edits @samp{<sup>} tags. @*
@end table
@findex tlon-html-insert-quote
@table @asis
@item @code{tlon-html-insert-quote}
Inserts/edits @samp{<q>} tags (inline quote). @*
@end table

@item
@strong{MDX Tags}: @*
@findex tlon-mdx-insert-aside
@table @asis
@item @code{tlon-mdx-insert-aside}
Inserts/edits @samp{<Aside>} tags. @*
@end table
@findex tlon-mdx-insert-cite
@table @asis
@item @code{tlon-mdx-insert-cite}
Inserts/edits @samp{<Cite>} tags. Prompts for Bib@TeX{} key (@samp{bibKey}), locator, and length (short/long) using custom readers (@code{tlon-md-cite-bibkey-reader}, @code{tlon-md-cite-locator-reader}, @code{tlon-md-cite-length-reader}). @*
@end table
@findex tlon-mdx-insert-figure
@table @asis
@item @code{tlon-mdx-insert-figure}
Inserts/edits @samp{<Figure>} tags. Prompts for image URL (@samp{src}) and alt text (@samp{alt}). @*
@end table
@findex tlon-mdx-insert-language
@table @asis
@item @code{tlon-mdx-insert-language}
Inserts/edits @samp{<Language>} tags. Prompts for language ID (@samp{id}). @*
@end table
@findex tlon-mdx-insert-literal-link
@table @asis
@item @code{tlon-mdx-insert-literal-link}
Inserts/edits @samp{<LiteralLink>} tags. Prompts for the link URL (@samp{src}). @*
@end table
@findex tlon-mdx-insert-math
@table @asis
@item @code{tlon-mdx-insert-math}
Inserts/edits @samp{<Math>} tags. Prompts for alt text (@samp{alt}) and display type (inline/display) using @code{tlon-md-math-display-reader}. Suggests using @code{tlon-ai-translate-math} for AI-generated alt text. @*
@end table
@findex tlon-mdx-insert-embedded
@table @asis
@item @code{tlon-mdx-insert-embedded}
Inserts/edits @samp{<Embedded>} tags (self-closing). Prompts for chart URL (@samp{src}), alt text (@samp{alt}), and height (@samp{height}). @*
@end table
@findex tlon-mdx-insert-replace-audio
@table @asis
@item @code{tlon-mdx-insert-replace-audio}
Inserts/edits @samp{<ReplaceAudio>} tags. Prompts for the audio text (@samp{text}) and optional voice role (@samp{role}) using @code{tlon-md-replace-audio-voice-reader}. @*
@end table
@findex tlon-mdx-insert-romantlon-insert-mdx-roman
@table @asis
@item @code{tlon-mdx-insert-romantlon-insert-mdx-roman}
Inserts/edits @samp{<Roman>} tags (for Roman numerals in small caps with correct TTS). @*
@end table
@findex tlon-mdx-insert-small-caps
@table @asis
@item @code{tlon-mdx-insert-small-caps}
Inserts/edits @samp{<SmallCaps>} tags (for general small caps text). @*
@end table
@findex tlon-mdx-insert-table
@table @asis
@item @code{tlon-mdx-insert-table}
(Not yet developed) Intended for inserting complex @samp{<Table>} tags. @*
@end table
@findex tlon-mdx-insert-simple-table
@table @asis
@item @code{tlon-mdx-insert-simple-table}
Inserts/edits @samp{<SimpleTable>} tags. Prompts for alt text (@samp{alt}) and inclusion scope (@samp{include}) using @code{tlon-md-simple-table-include-reader}. @*
@end table
@findex tlon-mdx-insert-visually-hidden
@table @asis
@item @code{tlon-mdx-insert-visually-hidden}
Inserts/edits @samp{<VisuallyHidden>} tags. @*
@end table
@findex tlon-mdx-insert-voice-role
@table @asis
@item @code{tlon-mdx-insert-voice-role}
Inserts/edits @samp{<VoiceRole>} tags. Prompts for the voice role (@samp{role}) using @code{tlon-md-replace-audio-voice-reader}. @*
@end table

@item
@strong{SSML Tags}: @*
@findex tlon-tts-insert-ssml-break
@table @asis
@item @code{tlon-tts-insert-ssml-break}
Inserts/edits @samp{<break>} tags (self-closing). Prompts for time duration (@samp{time}). @*
@end table
@findex tlon-tts-insert-ssml-emphasis
@table @asis
@item @code{tlon-tts-insert-ssml-emphasis}
Inserts/edits @samp{<emphasis>} tags. Prompts for emphasis level (@samp{level}) using @code{tlon-md-emphasis-level-reader}. @*
@end table
@findex tlon-tts-insert-ssml-lang
@table @asis
@item @code{tlon-tts-insert-ssml-lang}
Inserts/edits @samp{<lang>} tags. Prompts for language code (@samp{xml:lang}) using @code{tlon-md-lang-reader}. @*
@end table
@findex tlon-tts-insert-ssml-phoneme
@table @asis
@item @code{tlon-tts-insert-ssml-phoneme}
Inserts/edits @samp{<phoneme>} tags. Prompts for alphabet type (@samp{alphabet}) using @code{tlon-md-phoneme-alphabet-reader} and phonetic symbols (@samp{ph}). @*
@end table
@findex tlon-tts-insert-ssml-say-as
@table @asis
@item @code{tlon-tts-insert-ssml-say-as}
Inserts/edits @samp{<say-as>} tags. Prompts for interpretation type (@samp{interpret-as}) using @code{tlon-md-say-as-interpret-as-reader}. @*
@end table
@end itemize

@node Note Classification
@subsection Note Classification

These commands manage the classification of footnotes as either standard footnotes or sidenotes using @samp{<Footnote>} and @samp{<Sidenote>} MDX tags. @*

@findex tlon-insert-footnote-marker
@table @asis
@item @code{tlon-insert-footnote-marker}
Inserts a @samp{<Footnote />} marker at the beginning of the footnote content at point. If @samp{OVERWRITE} is non-nil (or called interactively), it replaces an existing @samp{<Sidenote />} marker. @*
@end table
@findex tlon-insert-sidenote-marker
@table @asis
@item @code{tlon-insert-sidenote-marker}
Inserts a @samp{<Sidenote />} marker at the beginning of the footnote content at point. If @samp{OVERWRITE} is non-nil (or called interactively), it replaces an existing @samp{<Footnote />} marker. @*
@end table
@findex tlon-auto-classify-note-at-point
@table @asis
@item @code{tlon-auto-classify-note-at-point}
Automatically classifies the footnote at point based on its content (using @code{tlon-note-automatic-type}) and inserts the corresponding marker (@samp{<Footnote />} or @samp{<Sidenote />}), overwriting any existing marker. @*
@end table
@findex tlon-auto-classify-notes-in-file
@table @asis
@item @code{tlon-auto-classify-notes-in-file}
Applies @code{tlon-auto-classify-note-at-point} to all footnotes in the current buffer (or specified @samp{FILE}). @*
@end table
@findex tlon-auto-classify-notes-in-directory
@table @asis
@item @code{tlon-auto-classify-notes-in-directory}
Applies @code{tlon-auto-classify-notes-in-file} to all Markdown files in the specified @samp{DIR} (or current directory). @*
@end table
@findex tlon-classify-note-at-point
@table @asis
@item @code{tlon-classify-note-at-point}
Manually classify the note at point. Prompts the user to choose between ``footnote'' and ``sidenote'' and inserts the corresponding marker, optionally overwriting an existing one. @*
@end table

@node Miscellaneous Commands
@subsection Miscellaneous Commands

@findex tlon-offset-timestamps
@table @asis
@item @code{tlon-offset-timestamps}
Increases all MM:SS timestamps (in the format @samp{[MM:SS]}) within the current buffer by a specified @samp{OFFSET} (also in MM:SS format). @*
@end table
@findex tlon-insert-special-character
@table @asis
@item @code{tlon-insert-special-character}
Prompts the user (with completion based on @code{tlon-md-special-characters}) to select a special character and inserts it at point. @*
@end table
@findex tlon-md-beginning-of-buffer-dwim
@table @asis
@item @code{tlon-md-beginning-of-buffer-dwim}
Moves point to the beginning of the main content area, skipping the YAML front matter. Called twice, moves to the beginning of the buffer. @*
@end table
@findex tlon-md-end-of-buffer-dwim
@table @asis
@item @code{tlon-md-end-of-buffer-dwim}
Moves point to the end of the main content area, stopping before the ``Local Variables'' block. Called twice, moves to the end of the buffer. @*
@end table
@findex tlon-md-menu
@table @asis
@item @code{tlon-md-menu}
Activates a @samp{transient} menu interface providing quick access to many of the commands in this module, grouped by category (YAML, TTS, Note markers, Citations, Quotes, Images, Link, Sub/Superscripts, Misc, Caps, Table). @*
@end table

@node Internal Functions and Variables (12)
@section Internal Functions and Variables

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization. @*

@menu
* Constants: Constants (3). 
* Tag Section Handling::
* Link and Sorting Helpers::
* Tag Handling Logic::
* Attribute Readers::
* Note Handling::
* Miscellaneous Helpers: Miscellaneous Helpers (1). 
@end menu

@node Constants (3)
@subsection Constants

@itemize
@item
@strong{Local Variables Delimiters}: @code{tlon-md-local-variables-line-start}, @code{tlon-md-local-variables-line-end}. @*
@item
@strong{Tag Sections}: @code{tlon-md-canonical-tag-sections} (defines standard section names like ``Further reading'' in different languages). @*
@item
@strong{Markdown Regexps}: @*
@itemize
@item
@code{markdown-regex-italic} (modified default), @code{tlon-md-regexp-link-formatter}, @code{tlon-md-image}, @code{tlon-md-image-sans-alt}, @code{tlon-md-blockquote}, @code{tlon-md-math-power}, @code{tlon-md-math-big-number}, @code{tlon-md-footnote-start}, @code{tlon-md-heading-template}, @code{tlon-md-heading}, @code{tlon-md-subheading}. @*
@end itemize
@item
@strong{SSML Constants}: @code{tlon-md-ssml-emphasis-levels}, @code{tlon-tts-ssml-default-emphasis-level}, @code{tlon-md-ssml-phoneme-alphabets}, @code{tlon-tts-ssml-phoneme-default-alphabet}, @code{tlon-md-ssml-interpret-as-values}. @*
@item
@strong{Tag Specifications}: @code{tlon-tag-specs} (central alist defining properties for all supported HTML, MDX, and SSML tags: type, attributes, self-closing status, documentation, attribute readers/prompts, capture groups). @*
@end itemize

@node Tag Section Handling
@subsection Tag Section Handling

@findex tlon-md-get-tag-section
@table @asis
@item @code{tlon-md-get-tag-section}
Translates a canonical section name (e.g., ``Further reading'') to its equivalent in a @samp{TARGET-LANGUAGE} based on @code{tlon-md-canonical-tag-sections}. @*
@end table

@node Link and Sorting Helpers
@subsection Link and Sorting Helpers

@findex tlon-md-get-title-in-link-target
@table @asis
@item @code{tlon-md-get-title-in-link-target}
Retrieves the @samp{title} metadata for the file specified in a Markdown link's @samp{TARGET}. @*
@end table
@findex tlon-md-sort-elements-in-paragraph
@table @asis
@item @code{tlon-md-sort-elements-in-paragraph}
Helper function to sort elements within the current paragraph separated by a given @samp{SEPARATOR}. Used by @code{tlon-md-sort-related-entries}. @*
@end table

@node Tag Handling Logic
@subsection Tag Handling Logic

This group contains the core logic for inserting, editing, formatting, and parsing the various tags (HTML, MDX, SSML). @*

@findex tlon-md-insert-or-edit-tag
@table @asis
@item @code{tlon-md-insert-or-edit-tag}
Decides whether to insert a new tag or edit an existing one at point based on @code{tlon-looking-at-tag-p}. @*
@end table
@findex tlon-looking-at-tag-p
@table @asis
@item @code{tlon-looking-at-tag-p}
Checks if point is currently looking at a specific @samp{TAG} using its regex pattern. @*
@end table
@findex tlon-md-edit-tag
@table @asis
@item @code{tlon-md-edit-tag}
Edits the tag at point. Can optionally take pre-defined attribute @samp{VALUES} and @samp{CONTENT}. Uses @code{tlon-get-tag-at-point}, @code{tlon-md-get-tag-pattern}, @code{tlon-get-tag-attribute-values}, and @code{tlon-md-return-tag}. @*
@end table
@findex tlon-md-set-tag-attribute-value
@table @asis
@item @code{tlon-md-set-tag-attribute-value}
Creates a new list of attribute values with the specified @samp{ATTRIBUTE} set to @samp{VALUE} for a given @samp{TAG}. @*
@end table
@findex tlon-md-insert-attribute-value
@table @asis
@item @code{tlon-md-insert-attribute-value}
Inserts or replaces a specific @samp{ATTRIBUTE} @samp{VALUE} in the tag at point by calling @code{tlon-md-edit-tag}. @*
@end table
@findex tlon-md-return-tag
@table @asis
@item @code{tlon-md-return-tag}
Core function to generate or insert a tag string. Takes the @samp{TAG} name, optional attribute @samp{VALUES}, optional @samp{CONTENT}, and a @samp{FORMAT} specifier (`get-match-string`, `get-placeholders`, `get-values`, `insert-values`, `insert-prompt`). Calls @code{tlon-md-format-tag} and @code{tlon-md-act-on-returned-tag}. @*
@end table
@findex tlon-md-act-on-returned-tag
@table @asis
@item @code{tlon-md-act-on-returned-tag}
Performs the final action based on the @samp{FORMAT} specifier (insert string or return it). @*
@end table
@findex tlon-md-format-tag
@table @asis
@item @code{tlon-md-format-tag}
Formats the opening and closing tags (or just the opening tag for self-closing ones) based on the @samp{TAG} name, @samp{VALUES}, and @samp{FORMAT}. Calls @code{tlon-md-format-tag-with-attributes}. Returns a cons cell @samp{(OPEN . CLOSE)} or a list @samp{(OPEN)}. @*
@end table
@findex tlon-md-get-tag-filled
@table @asis
@item @code{tlon-md-get-tag-filled}
Returns a complete tag string with specified @samp{VALUES} and @samp{CONTENT}. Uses @code{tlon-md-format-tag} with `get-values` format. @*
@end table
@findex tlon-md-get-tag-to-fill
@table @asis
@item @code{tlon-md-get-tag-to-fill}
Returns a tag string template with placeholders for content and attributes. Uses @code{tlon-md-format-tag} with `get-placeholders` format. @*
@end table
@findex tlon-get-tag-at-point
@table @asis
@item @code{tlon-get-tag-at-point}
Identifies the name of the tag at point by checking against all tags defined in @code{tlon-tag-specs}. @*
@end table
@findex tlon-get-tag-groups
@table @asis
@item @code{tlon-get-tag-groups}
Returns a list of the regex capture group numbers for a @samp{TAG}'s attributes (or attribute values if @samp{VALUES} is non-nil), based on @code{tlon-tag-specs}. @*
@end table
@findex tlon-get-tag-attribute-names
@table @asis
@item @code{tlon-get-tag-attribute-names}
Returns a list of attribute names for a @samp{TAG} from @code{tlon-tag-specs}. @*
@end table
@findex tlon-get-tag-attribute-values
@table @asis
@item @code{tlon-get-tag-attribute-values}
Extracts the current values of all attributes for the @samp{TAG} at point using regex match data and group numbers from @code{tlon-tag-specs}. @*
@end table
@findex tlon-md-lookup-tag-attribute-property
@table @asis
@item @code{tlon-md-lookup-tag-attribute-property}
Retrieves a specific @samp{PROPERTY} (e.g., @samp{:group}, @samp{:required}) for a named @samp{ATTRIBUTE} of a @samp{TAG} from @code{tlon-tag-specs}. @*
@end table
@findex tlon-md-format-tag-with-attributes
@table @asis
@item @code{tlon-md-format-tag-with-attributes}
Formats the attribute part of a tag string based on the @samp{TAG}, optional @samp{VALUES}, and @samp{FORMAT}. Iterates through attributes, calls @code{tlon-md-format-attribute-with-placeholder}, and handles user input via attribute readers or prompts if @samp{FORMAT} is `insert-prompt`. @*
@end table
@findex tlon-md-format-attribute-with-placeholder
@table @asis
@item @code{tlon-md-format-attribute-with-placeholder}
Creates a format string for a single attribute (e.g., = name=``%s''= or = name=``@math{?:%s}''= if @samp{CAPTURE} is t). @*
@end table
@findex tlon-make-attribute-pattern-searchable
@table @asis
@item @code{tlon-make-attribute-pattern-searchable}
Converts an attribute format string into a searchable regex pattern, adding capture groups and making it optional if @samp{REQUIRED} is nil. @*
@end table
@findex tlon-md-format-tag-with-attributes-from-user
@table @asis
@item @code{tlon-md-format-tag-with-attributes-from-user}
Helper to call the attribute reader function (@samp{FUN}) and ensure a value is provided if @samp{REQUIRED-P} is non-nil. @*
@end table
@findex tlon-md-get-tag-pattern
@table @asis
@item @code{tlon-md-get-tag-pattern}
Generates the complete regex pattern for matching a given @samp{TAG}, including its attributes. Uses @code{tlon-md-format-tag} with `get-match-string` format. @*
@end table

@node Attribute Readers
@subsection Attribute Readers

These functions are used by @code{tlon-md-format-tag-with-attributes} when prompting the user for specific attribute values. @*

@findex tlon-md-cite-bibkey-reader
@table @asis
@item @code{tlon-md-cite-bibkey-reader}
Reads @samp{bibKey} using @samp{citar-select-refs}. @*
@end table
@findex tlon-md-cite-locator-reader
@table @asis
@item @code{tlon-md-cite-locator-reader}
Reads @samp{locator} using completion against @code{tlon-locators}. @*
@end table
@findex tlon-md-cite-length-reader
@table @asis
@item @code{tlon-md-cite-length-reader}
Reads citation length (``short'' or ``long'') and returns the appropriate attribute string (`` short'' or ``''). @*
@end table
@findex tlon-md-emphasis-level-reader
@table @asis
@item @code{tlon-md-emphasis-level-reader}
Reads @samp{level} for @samp{<emphasis>} using completion against @code{tlon-md-ssml-emphasis-levels}. @*
@end table
@findex tlon-md-lang-reader
@table @asis
@item @code{tlon-md-lang-reader}
Reads @samp{xml:lang} using @code{tlon-select-language}. @*
@end table
@findex tlon-md-math-display-reader
@table @asis
@item @code{tlon-md-math-display-reader}
Reads display type (``inline'' or ``display'') for @samp{<Math>} and returns the attribute string (`` inline'' or `` display''). @*
@end table
@findex tlon-md-phoneme-alphabet-reader
@table @asis
@item @code{tlon-md-phoneme-alphabet-reader}
Reads @samp{alphabet} for @samp{<phoneme>} using completion against @code{tlon-md-ssml-phoneme-alphabets}. @*
@end table
@findex tlon-md-replace-audio-voice-reader
@table @asis
@item @code{tlon-md-replace-audio-voice-reader}
Reads @samp{role} for @samp{<ReplaceAudio>} or @samp{<VoiceRole>} using completion against a predefined list of roles. @*
@end table
@findex tlon-md-say-as-interpret-as-reader
@table @asis
@item @code{tlon-md-say-as-interpret-as-reader}
Reads @samp{interpret-as} for @samp{<say-as>} using completion against @code{tlon-md-ssml-interpret-as-values}. @*
@end table
@findex tlon-md-simple-table-include-reader
@table @asis
@item @code{tlon-md-simple-table-include-reader}
Reads @samp{include} scope for @samp{<SimpleTable>} (``nothing'', ``everything'', ``body'') and returns the formatted attribute string. @*
@end table

@node Note Handling
@subsection Note Handling

@findex tlon-insert-note-marker
@table @asis
@item @code{tlon-insert-note-marker}
Helper function to insert a @samp{MARKER} (@samp{<Footnote />} or @samp{<Sidenote />}) at the beginning of the footnote content at point, optionally overwriting the other marker type. @*
@end table
@findex tlon-md-get-note
@table @asis
@item @code{tlon-md-get-note}
Returns the text content of footnote @samp{N} (or the one at point). Optionally returns only the content after the marker if @samp{CONTENT-ONLY} is non-nil. Uses @code{tlon-md-get-note-bounds}. @*
@end table
@findex tlon-md-get-note-bounds
@table @asis
@item @code{tlon-md-get-note-bounds}
Returns a cons cell @samp{(START . END)} representing the boundaries of footnote @samp{N} (or the one at point). Uses @code{markdown-footnote-find-text}, @code{tlon-md-get-note-beginning}, and @code{tlon-md-get-note-end}. @*
@end table
@findex tlon-md-get-note-beginning
@table @asis
@item @code{tlon-md-get-note-beginning}
Finds the starting position of the footnote definition (e.g., @samp{[^N]:}) or the start of the content after the marker if @samp{CONTENT-ONLY} is non-nil. Uses @samp{markdown-footnote-text-positions} or regex search. @*
@end table
@findex tlon-md-get-note-end
@table @asis
@item @code{tlon-md-get-note-end}
Finds the end position of the footnote at point by searching for the start of the next footnote definition. @*
@end table
@findex tlon-get-note-type
@table @asis
@item @code{tlon-get-note-type}
Determines if a @samp{NOTE} string (or the note at point) contains a @samp{<Footnote>} or @samp{<Sidenote>} tag and returns the corresponding symbol (`footnote` or `sidenote`). @*
@end table
@findex tlon-note-automatic-type
@table @asis
@item @code{tlon-note-automatic-type}
Implements the automatic classification logic: returns `footnote` if the @samp{NOTE} contains a @samp{<Cite>} tag and has 4 or fewer words (excluding citations), otherwise returns `sidenote`. @*
@end table

@node Miscellaneous Helpers (1)
@subsection Miscellaneous Helpers

@findex tlon-ensure-markdown-mode
@table @asis
@item @code{tlon-ensure-markdown-mode}
Checks if the current buffer is in a mode derived from @samp{markdown-mode} and signals an error if not. @*
@end table
@findex tlon-md-beginning-of-content
@table @asis
@item @code{tlon-md-beginning-of-content}
Returns the position after the YAML front matter (using @code{tlon-md-end-of-metadata}) or the beginning of the buffer. @*
@end table
@findex tlon-md-end-of-content
@table @asis
@item @code{tlon-md-end-of-content}
Returns the position before the ``Local Variables'' block (using @code{tlon-md-beginning-of-local-variables}) or the end of the buffer. @*
@end table
@findex tlon-md-beginning-of-local-variables
@table @asis
@item @code{tlon-md-beginning-of-local-variables}
Finds the start position of the ``Local Variables'' block using @code{tlon-get-delimited-region-pos}. @*
@end table
@findex tlon-md-end-of-metadata
@table @asis
@item @code{tlon-md-end-of-metadata}
Finds the end position of the YAML front matter using @code{tlon-get-delimited-region-pos}. @*
@end table
@findex tlon-md-get-local-variables
@table @asis
@item @code{tlon-md-get-local-variables}
Returns the text content of the ``Local Variables'' block. @*
@end table
@findex tlon-md-get-metadata
@table @asis
@item @code{tlon-md-get-metadata}
Returns the text content of the YAML front matter. @*
@end table
@findex tlon-md-read-content
@table @asis
@item @code{tlon-md-read-content}
Reads the content of a @samp{FILE} (or current buffer) excluding the front matter and local variables sections. @*
@end table

@node Meeting Management (@samp{tlon-meetel})
@chapter Meeting Management (@samp{tlon-meet.el})

This module provides tools for managing meetings within the Tlön workflow. It focuses on creating and accessing dedicated Forge issues for meetings (both individual and group), linking discussions to these issues, and processing meeting recordings (diarization and AI summarization). @*

@menu
* Dependencies: Dependencies (10). 
* User Options: User Options (6). 
* Commands: Commands (14). 
* Org Mode Integration::
* Internal Functions and Variables: Internal Functions and Variables (13). 
@end menu

@node Dependencies (10)
@section Dependencies

@itemize
@item
@samp{org} @*
@item
@samp{tlon-forg} @*
@item
@samp{tlon-ai} @*
@item
@samp{transient} @*
@item
An external diarization script (configurable via @code{tlon-meet-diarize-script}). @*
@end itemize

@node User Options (6)
@section User Options

@vindex tlon-meet-diarize-script
@table @asis
@item @code{tlon-meet-diarize-script}
Path to the Python script used for audio diarization (default: @samp{"diarize.py"}). @*
@end table

@vindex tlon-meet-summary-prompt
@table @asis
@item @code{tlon-meet-summary-prompt}
The prompt template used for generating AI summaries of meeting transcripts. It should contain @samp{%s} which will be replaced by the transcript text. @*
@end table

@vindex tlon-meet-recordings-directory
@table @asis
@item @code{tlon-meet-recordings-directory}
The directory where Google Meet recordings are typically stored (default: @samp{~/My Drive/Meet Recordings/}). @*
@end table

@vindex tlon-zoom-recordings-directory
@table @asis
@item @code{tlon-zoom-recordings-directory}
The directory where Zoom recordings are typically stored (default: @samp{~/Documents/Zoom/}). @*
@end table

@vindex tlon-default-conference-app
@table @asis
@item @code{tlon-default-conference-app}
The default conferencing application, used to determine the default directory when searching for recordings (choice between @samp{meet} or @samp{zoom}, default: @samp{meet}). @*
@end table

@node Commands (14)
@section Commands

This section details the interactive commands provided by @samp{tlon-meet.el}. @*

@menu
* Create or Visit Meeting Issues::
* Linking Issues for Discussion::
* Recording Processing::
* Transient Menu: Transient Menu (10). 
@end menu

@node Create or Visit Meeting Issues
@subsection Create or Visit Meeting Issues

@findex tlon-create-or-visit-meeting-issue
@table @asis
@item @code{tlon-create-or-visit-meeting-issue}
The main entry point for accessing meeting issues. Prompts the user to select another participant (using completion from @code{tlon-user-lookup-all}) or ``group''. If a person is selected, it calls @code{tlon-create-or-visit-individual-meeting-issue}. If ``group'' is selected, it calls @code{tlon-create-or-visit-group-meeting-issue}. @*
@end table

@findex tlon-create-or-visit-individual-meeting-issue
@table @asis
@item @code{tlon-create-or-visit-individual-meeting-issue}
Creates or visits the Forge issue for a 1-on-1 meeting with a specific @samp{PERSON}. Prompts for the @samp{PERSON} if not provided. Prompts for the @samp{DATE} using @samp{org-read-date}. Determines the correct meeting repository using @code{tlon-get-meeting-repo} and then calls @code{tlon-create-or-visit-meeting-issue-date}. @*
@end table

@findex tlon-create-or-visit-group-meeting-issue
@table @asis
@item @code{tlon-create-or-visit-group-meeting-issue}
Creates or visits the Forge issue for a group meeting. Prompts for the @samp{DATE} using @samp{org-read-date}. Uses the repository designated as @samp{meetings-group} (via @code{tlon-repo-lookup}) and calls @code{tlon-create-or-visit-meeting-issue-date}. @*
@end table

@findex tlon-create-or-visit-meeting-issue-leo-pablo
@table @asis
@item @code{tlon-create-or-visit-meeting-issue-leo-pablo}
Convenience command specifically for Leo-Pablo meetings. Determines the other participant based on @samp{user-full-name} and calls @code{tlon-create-or-visit-individual-meeting-issue} with the appropriate person and date (prompting if not provided). @*
@end table

@findex tlon-create-or-visit-meeting-issue-fede-pablo
@table @asis
@item @code{tlon-create-or-visit-meeting-issue-fede-pablo}
Convenience command specifically for Fede-Pablo meetings. Similar logic to the Leo-Pablo version. @*
@end table

@findex tlon-create-or-visit-meeting-issue-fede-leo
@table @asis
@item @code{tlon-create-or-visit-meeting-issue-fede-leo}
Convenience command specifically for Fede-Leo meetings. Similar logic to the Leo-Pablo version. @*
@end table

@node Linking Issues for Discussion
@subsection Linking Issues for Discussion

@findex tlon-discuss-issue-in-meeting
@table @asis
@item @code{tlon-discuss-issue-in-meeting}
Creates cross-references between the current Forge issue buffer and the relevant meeting issue buffer. @*
@enumerate
@item
Ensures the command is run from a @samp{forge-issue-mode} buffer. @*
@item
Gets the link to the current issue. @*
@item
Switches to the appropriate meeting issue buffer (determined by participants, prompting if necessary via @code{tlon-create-or-visit-meeting-issue}). @*
@item
Gets the link to the meeting issue. @*
@item
Enters edit mode for the last post in the meeting issue and inserts a line like ``- Discutir [link-to-original-issue].'' @*
@item
Submits the post. @*
@item
Switches back to the original issue buffer. @*
@item
Creates a new post and inserts ``A discutir en [link-to-meeting-issue].'' @*
@item
Submits the post. @*
@end enumerate
@end table

@node Recording Processing
@subsection Recording Processing

@findex tlon-meet-diarize-and-summarize
@table @asis
@item @code{tlon-meet-diarize-and-summarize}
Processes an audio recording file to generate a transcript and an AI summary. @*
@enumerate
@item
Prompts the user to select an @samp{AUDIO-FILE}, defaulting to the directory specified by @code{tlon-default-conference-app} (@code{tlon-meet-recordings-directory} or @code{tlon-zoom-recordings-directory}). @*
@item
Extracts the date from the filename (if possible, using regex) or defaults to the current date. @*
@item
Creates and displays a ``@strong{Diarization Output}'' buffer. @*
@item
Runs the diarization script specified by @code{tlon-meet-diarize-script} asynchronously on the @samp{AUDIO-FILE}. @*
@item
When the script finishes, it checks for the existence of the transcript file (expected name: @samp{[audio-filename-sans-extension]-transcript.txt}). @*
@item
If the transcript exists, it calls @code{tlon-meet--generate-summary}. @*
@item
If the transcript doesn't exist, it reports an error in the output buffer. @*
@end enumerate
@end table

@node Transient Menu (10)
@subsection Transient Menu

@findex tlon-meet-menu
The command @code{tlon-meet-menu} activates a @samp{transient} menu interface for meeting-related operations. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Meetings}: @*
@table @asis
@item @samp{l p}
Leo-Pablo meeting (@code{tlon-create-or-visit-meeting-issue-leo-pablo}) @*
@item @samp{f p}
Fede-Pablo meeting (@code{tlon-create-or-visit-meeting-issue-fede-pablo}) @*
@item @samp{f l}
Fede-Leo meeting (@code{tlon-create-or-visit-meeting-issue-fede-leo}) @*
@item @samp{g}
Group meeting (@code{tlon-create-or-visit-group-meeting-issue}) @*
@item @samp{i}
Discuss issue in meeting (@code{tlon-discuss-issue-in-meeting}) @*
@item @samp{d}
Diarize and summarize (@code{tlon-meet-diarize-and-summarize}) @*
@end table
@end itemize

@node Org Mode Integration
@section Org Mode Integration

@findex tlon-set-meeting-buffers
@table @asis
@item @code{tlon-set-meeting-buffers}
This function is designed to be used as advice or a hook, typically triggered when opening a link from an Org agenda heading. It parses the heading text to identify the meeting type (e.g., ``Leo<>Pablo'', ``Group meeting'') and calls the corresponding @code{tlon-create-or-visit-...} command for the current date. It also calls @samp{org-open-at-point} to follow the original link (e.g., Zoom/Meet URL). @*
@end table

@findex tlon-goto-meeting-when-clocking-in
@table @asis
@item @code{tlon-goto-meeting-when-clocking-in}
A hook function intended for @samp{org-clock-in-hook}. When clocking into a task in Org mode, it calls @code{tlon-set-meeting-buffers} to automatically open the relevant meeting issue alongside any meeting link. @*
@end table

@node Internal Functions and Variables (13)
@section Internal Functions and Variables

This section lists non-interactive functions used internally or potentially useful for advanced customization. @*

@menu
* Issue Handling Helpers::
* Diarize and Summarize Helpers::
* Repository and User Helpers::
@end menu

@node Issue Handling Helpers
@subsection Issue Handling Helpers

@findex tlon-create-or-visit-meeting-issue-date
@table @asis
@item @code{tlon-create-or-visit-meeting-issue-date}
The core logic for finding or creating a meeting issue. Takes a @samp{DATE} string and the target repository @samp{DIR}. It waits for Forge updates (@code{tlon-wait-until-forge-updates}), looks up an existing issue matching the date (@code{tlon-issue-lookup}), and either visits it (@code{forge-visit-issue}) or creates a new one (@code{tlon-create-and-visit-issue}). @*
@end table

@findex tlon-wait-until-forge-updates
@table @asis
@item @code{tlon-wait-until-forge-updates}
Pulls changes using @samp{forge-pull} and waits (with a timeout) until the repository's @samp{updated} timestamp changes, ensuring local data is synchronized before proceeding. @*
@end table

@findex tlon-create-and-visit-issue
@table @asis
@item @code{tlon-create-and-visit-issue}
Creates a new Forge issue with the given @samp{TITLE} in the specified @samp{DIR} using @code{tlon-create-issue}, pulls changes, waits for the issue to appear locally, and then visits it. @*
@end table

@node Diarize and Summarize Helpers
@subsection Diarize and Summarize Helpers

@findex tlon-meet--generate-summary
@table @asis
@item @code{tlon-meet--generate-summary}
Reads the content of the @samp{TRANSCRIPT-FILE}, formats the AI prompt using @code{tlon-meet-summary-prompt}, and sends the request to the AI model via @code{tlon-make-gptel-request}. The callback function is @code{tlon-meet--save-summary}. @*
@end table

@findex tlon-meet--save-summary
@table @asis
@item @code{tlon-meet--save-summary}
Saves the generated @samp{SUMMARY} and the original @samp{TRANSCRIPT} to the appropriate meeting repository for the given @samp{DATE}. @*
@enumerate
@item
Determines the target repository by prompting the user via @code{tlon-meet--determine-repo}. @*
@item
Defines the output filenames: @samp{meeting-summaries.org} and @samp{[date]-transcript.txt}. @*
@item
Appends the summary to @samp{meeting-summaries.org} under a new heading for the date, creating the file and adding a title/options header if it doesn't exist. @*
@item
Saves the transcript to @samp{[date]-transcript.txt}. @*
@item
Stages both files using @samp{git add}. @*
@item
Commits the changes using @samp{git commit} with a message indicating the meeting date. @*
@item
Updates the ``@strong{Diarization Output}'' buffer with progress and final file paths. @*
@end enumerate
@end table

@findex tlon-meet--determine-repo
@table @asis
@item @code{tlon-meet--determine-repo}
Prompts the user to select the correct meeting repository directory from a list of all repositories with @samp{subtype} 'meetings. Takes the @samp{DATE} for context in the prompt. Returns the selected directory path. @*
@end table

@node Repository and User Helpers
@subsection Repository and User Helpers

@findex tlon-prompt-for-all-other-users
@table @asis
@item @code{tlon-prompt-for-all-other-users}
Prompts the user to select a person using completion. The candidates are all users defined in @code{tlon-users} except for the current user (@samp{user-full-name}). If the optional @samp{GROUP} argument is non-nil, ``group'' is added as a candidate. @*
@end table

@findex tlon-get-meeting-repo
@table @asis
@item @code{tlon-get-meeting-repo}
Finds the directory (:dir) of the meeting repository shared by @samp{PARTICIPANT1} and @samp{PARTICIPANT2}. It iterates through @code{tlon-repos}, looking for a repo with @samp{subtype} 'meetings that includes both participants in its @samp{:participants} list. @*
@end table

@node Repository Management (@samp{tlon-reposel})
@chapter Repository Management (@samp{tlon-repos.el})

This module provides functions for managing Tlön's Git repositories. It integrates with @samp{vc}, @samp{vc-extras}, @samp{forge}, @samp{forge-extras}, and @samp{pass-extras} to offer commands for creating, cloning, deleting, tracking, searching, and interacting with repositories, both locally and remotely (primarily on GitHub under the @samp{tlon-team} organization). @*

@menu
* Dependencies: Dependencies (11). 
* Commands: Commands (15). 
* Internal Functions and Variables: Internal Functions and Variables (14). 
@end menu

@node Dependencies (11)
@section Dependencies

@itemize
@item
@samp{forge-core}, @samp{forge-search}, @samp{forge-extras} @*
@item
@samp{shut-up} @*
@item
@samp{tlon-core} @*
@item
@samp{vc}, @samp{vc-extras} @*
@item
@samp{pass-extras} @*
@item
@samp{transient} @*
@end itemize

@node Commands (15)
@section Commands

This section details the interactive commands provided by @samp{tlon-repos.el}. @*

@menu
* Version Control (VC) Operations::
* Forge Integration::
* Git Crypt::
* Transient Menu: Transient Menu (11). 
@end menu

@node Version Control (VC) Operations
@subsection Version Control (VC) Operations

@findex tlon-create-repo
@table @asis
@item @code{tlon-create-repo}
Creates a new repository on GitHub under the @samp{tlon-team} organization. Prompts for the repository @samp{NAME}. Delegates to @samp{vc-extras-create-repo}. @*
@end table

@findex tlon-clone-repo
@table @asis
@item @code{tlon-clone-repo}
Clones an existing Tlön repository from the @samp{tlon-team} organization into the directory specified by @samp{paths-dir-tlon-repos}. Prompts for the repository @samp{NAME} if not provided. Optionally skips adding the repo to the Forge database if @samp{NO-FORGE} is non-nil. Delegates to @samp{vc-extras-clone-repo}. @*
@end table

@findex tlon-clone-missing-repos
@table @asis
@item @code{tlon-clone-missing-repos}
Clones all Tlön repositories defined in the configuration (@samp{tlon-repo-lookup-all :dir}) that do not exist locally. Clones are performed asynchronously and do @strong{not} automatically add the repos to the Forge database (use @code{tlon-forge-track-missing-repos} for that). @*
@end table

@findex tlon-delete-local-repo
@table @asis
@item @code{tlon-delete-local-repo}
Deletes a local copy of a Tlön repository. Prompts the user to select a repository from the intersection of configured Tlön repos and locally existing ones (using @code{tlon-get-local-repos}) if @samp{NAME} is not provided. Delegates deletion to @samp{vc-extras-delete-local-repo}. @*
@end table

@node Forge Integration
@subsection Forge Integration

@findex tlon-forge-track-repo
@table @asis
@item @code{tlon-forge-track-repo}
Adds a local Tlön repository to the Forge database, enabling Forge features like issue tracking and pull request management. Prompts for the repository @samp{NAME} using @code{tlon-get-local-repos} if not provided. Uses @samp{forge-extras-track-repository}. @*
@end table

@findex tlon-forge-track-missing-repos
@table @asis
@item @code{tlon-forge-track-missing-repos}
Iterates through all configured Tlön repositories that exist locally and adds any untracked ones to the Forge database using @samp{forge-extras-track-repo-all-topics}. Waits until each repo is successfully tracked before proceeding. @*
@end table

@findex tlon-pull-issues-in-all-repos
@table @asis
@item @code{tlon-pull-issues-in-all-repos}
Pulls the latest issues and pull requests from the remote for @strong{all} tracked Tlön repositories. Iterates through configured repos and calls @code{tlon-pull-issues-in-repo} for each. @*
@end table

@findex tlon-forge-search
@table @asis
@item @code{tlon-forge-search}
Searches for a given @samp{STRING} across all tracked Tlön repositories (or a specified subset @samp{REPOS}) using Forge's search functionality. It temporarily opens Magit buffers, performs the search via @samp{forge-search}, and then closes the Magit buffers if they weren't already open. Reports the number of repositories with matches and the time taken. Kills previous search result buffers before starting. @*
@end table

@node Git Crypt
@subsection Git Crypt

@findex tlon-git-crypt-unlock
@table @asis
@item @code{tlon-git-crypt-unlock}
Unlocks specific Tlön repositories that use @samp{git-crypt} (currently @samp{uqbar/uqbar-api}, @samp{uqbar/uqbar-front}, @samp{uqbar}). Prompts the user to select the repository and uses @samp{pass-extras-git-crypt-unlock~ with the corresponding password store entry (e.g., =tlon/core/git-crypt/uqbar/uqbar-api}). @*
@end table

@node Transient Menu (11)
@subsection Transient Menu

@findex tlon-repos-menu
The command @code{tlon-repos-menu} activates a @samp{transient} menu interface for repository management. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Git}: @*
@table @asis
@item @samp{l}
Clone repo (@code{tlon-clone-repo}) @*
@item @samp{L}
Clone all missing repos (@code{tlon-clone-missing-repos}) @*
@item @samp{s}
Split local repo (@code{vc-extras-split-local-repo}) @*
@item @samp{d}
Delete local repo (@code{tlon-delete-local-repo}) @*
@item @samp{c}
Create remote repo (@code{tlon-create-repo}) @*
@item @samp{u}
Unlock uqbar git-crypt (@code{tlon-git-crypt-unlock}) @*
@item @samp{?}
Check authentication (@code{vc-extras-check-gh-authenticated}) @*
@end table
@item
@strong{Forge}: @*
@table @asis
@item @samp{a}
Track repo (@code{tlon-forge-track-repo}) @*
@item @samp{A}
Track all missing repos (@code{tlon-forge-track-missing-repos}) @*
@item @samp{r}
Untrack repo (@code{forge-remove-repository}) @*
@item @samp{R}
Untrack all repos (db reset) (@code{forge-reset-database}) @*
@item @samp{t}
List tracked repos (@code{forge-list-repositories}) @*
@item @samp{p}
Pull issues in repo (@code{tlon-pull-issues-in-repo}) @*
@item @samp{P}
Pull issues in all repos (@code{tlon-pull-issues-in-all-repos}) @*
@end table
@end itemize

@node Internal Functions and Variables (14)
@section Internal Functions and Variables

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization. @*

@findex tlon-get-local-repos
@table @asis
@item @code{tlon-get-local-repos}
Prompts the user to select a Tlön repository name using completion. The candidates are the intersection of all configured Tlön repositories (~tlon-repo-lookup-all :name=) and the repositories found locally within the Tlön repos directory (~vc-extras-list-local-candidates ``tlon-team''=). Signals an error if no local Tlön repos are found. @*
@end table

@findex tlon-pull-issues-in-repo
@table @asis
@item @code{tlon-pull-issues-in-repo}
Pulls issues and pull requests for a single repository specified by @samp{DIR} (or the current directory). Uses @samp{forge-get-repository} to check if the repo is tracked and then calls @samp{forge--pull} (suppressing its messages with @samp{shut-up}). @*
@end table

@findex tlon-forge-menu
@table @asis
@item @code{tlon-forge-menu}
A @samp{transient} menu definition that @strong{overrides} the default @samp{forge-dispatch} command. It provides a customized menu structure for Forge commands within the Tlön context, including options to search across all Tlön repos (@code{tlon-forge-search}). @*
@end table

@node Search Functionality (@samp{tlon-searchel})
@chapter Search Functionality (@samp{tlon-search.el})

This module provides miscellaneous search commands, integrating with @samp{magit}, @samp{consult}, @samp{forge}, and external web services for various search needs within the Tlön workflow. @*

@menu
* Dependencies: Dependencies (12). 
* Commands: Commands (16). 
* Internal Functions and Variables: Internal Functions and Variables (15). 
@end menu

@node Dependencies (12)
@section Dependencies

@itemize
@item
@samp{tlon} (specifically @samp{tlon-core}) @*
@item
@samp{transient} @*
@item
@samp{magit-log} @*
@item
@samp{consult} @*
@item
@samp{forge} @*
@item
@samp{goldendict-ng} (optional, for translation) @*
@end itemize

@node Commands (16)
@section Commands

This section details the interactive commands provided by @samp{tlon-search.el}. @*

@menu
* Search Commits::
* Search Commit Diffs::
* Search Files (Ripgrep)::
* Search for Translation::
* Search Menu::
@end menu

@node Search Commits
@subsection Search Commits

@findex tlon-search-commits
The command @code{tlon-search-commits} searches for a @samp{SEARCH-STRING} within the commit messages of a Git repository. @*
@enumerate
@item
Prompts the user for the @samp{SEARCH-STRING}. @*
@item
Optionally takes a @samp{REPO} directory path. If nil, uses the current repository (@samp{default-directory}). @*
@item
Calls @samp{magit-log-all} with the @samp{--grep} argument and the @samp{SEARCH-STRING} to display the matching commits in a Magit log buffer. @*
@end enumerate

@node Search Commit Diffs
@subsection Search Commit Diffs

@findex tlon-search-commit-diffs
The command @code{tlon-search-commit-diffs} searches for a @samp{SEARCH-STRING} within the content (diffs) of commits in a Git repository. @*
@enumerate
@item
Prompts the user for the @samp{SEARCH-STRING}. @*
@item
Optionally takes a @samp{REPO} directory path. If nil, uses the current repository (@samp{default-directory}). @*
@item
Calls @samp{magit-log-all} with the @samp{-S} argument (pickaxe search) and the @samp{SEARCH-STRING} to display commits where the string was added or removed. @*
@end enumerate

@node Search Files (Ripgrep)
@subsection Search Files (Ripgrep)

@findex tlon-search-files
The command @code{tlon-search-files} searches for a @samp{SEARCH-STRING} within the files of a Tlön repository using @samp{consult-ripgrep}. @*
@enumerate
@item
Prompts the user for the @samp{SEARCH-STRING}. @*
@item
Optionally takes a @samp{REPO} directory path. If nil, it determines the current repository using @code{tlon-get-repo} (including all sub-repositories). @*
@item
Calls @samp{consult-ripgrep} with the determined repository path and the search string, presenting results in the minibuffer with live preview. @*
@end enumerate

@node Search for Translation
@subsection Search for Translation

@findex tlon-search-for-translation
The command @code{tlon-search-for-translation} searches for a Spanish translation of an English @samp{STRING} using various online resources and the local @samp{goldendict-ng} application. @*
@enumerate
@item
Prompts the user for the English @samp{STRING} to translate. @*
@item
Defines a list of URL templates for different translation websites (Spanish Stack Exchange, Bab.la, Wikipedia, Reverso Context, Linguee). @*
@item
Iterates through the URLs, formats them with the URL-encoded @samp{STRING}, and opens each in a new browser buffer using @samp{browse-url}. @*
@item
Calls @samp{goldendict-ng-search-string} to search for the @samp{STRING} in the locally installed GoldenDict-NG application (if configured). @*
@end enumerate

@node Search Menu
@subsection Search Menu

@findex tlon-search-menu
The command @code{tlon-search-menu} activates a @samp{transient} menu interface for accessing the various search commands. @*

It provides the following options under the ``Search'' group: @*
@table @asis
@item @samp{c}
Commits (@code{tlon-search-commits}) @*
@item @samp{d}
Commit diffs (@code{tlon-search-commit-diffs}) @*
@item @samp{f}
Files (@code{tlon-search-files}) @*
@item @samp{i}
Issues (current repo) (@code{forge-search}) @*
@item @samp{I}
Issues (all repos) (@code{tlon-forge-search}) @*
@item @samp{t}
Translation (@code{tlon-search-for-translation}) @*
@end table

@node Internal Functions and Variables (15)
@section Internal Functions and Variables

This module primarily consists of interactive commands and the transient menu definition. There are no significant internal-only functions or variables exposed for general customization beyond the declared dependencies. @*

@node Split Window Alignment (@samp{tlon-splitel})
@chapter Split Window Alignment (@samp{tlon-split.el})

This module provides a minor mode, @code{tlon-split-mode}, designed to facilitate working with two vertically split windows, typically containing an original document and its translation. Its primary function is to automatically align the content (specifically paragraphs) between the two windows as the user navigates the source window. @*

@menu
* Dependencies: Dependencies (13). 
* User Options: User Options (7). 
* Commands: Commands (17). 
* Internal Functions and Variables: Internal Functions and Variables (16). 
@end menu

@node Dependencies (13)
@section Dependencies

@itemize
@item
@samp{tlon-counterpart} @*
@item
@samp{tlon-md} @*
@item
@samp{transient} @*
@end itemize

@node User Options (7)
@section User Options

@vindex tlon-split-screen-line-threshold
@table @asis
@item @code{tlon-split-screen-line-threshold}
An integer specifying the minimum number of screen lines the cursor must be below the start of the buffer content for automatic paragraph alignment (@code{tlon-split-autoalign-paragraphs}) to activate. This prevents alignment attempts when near the top of the buffer where paragraph counting might be less reliable or meaningful. Defaults to 60. @*
@end table

@node Commands (17)
@section Commands

@menu
* Toggle Split Mode::
* Manual Alignment::
* Reset Split Mode Hook::
* Sentence Highlighting (Experimental/Unused)::
* Transient Menu: Transient Menu (12). 
@end menu

@node Toggle Split Mode
@subsection Toggle Split Mode

@findex tlon-split-mode
The command @code{tlon-split-mode} toggles the minor mode on or off in the current buffer. When enabled, it activates the automatic paragraph alignment behavior via the `post-command-hook`. @*

@node Manual Alignment
@subsection Manual Alignment

@findex tlon-split-align-screen-lines
@table @asis
@item @code{tlon-split-align-screen-lines}
Manually aligns the other window so that its cursor is on the same screen line number as the cursor in the current window. Scrolls the other window up or down as needed. @*
@end table

@findex tlon-split-align-paragraphs
@table @asis
@item @code{tlon-split-align-paragraphs}
Manually aligns the other window based on paragraph count. It calculates the paragraph number the cursor is currently in within the source window (using @code{tlon-get-number-of-paragraphs}) and scrolls the other window so that the corresponding paragraph is visible and roughly aligned (using @code{recenter} and @code{scroll-down}). @*
@end table

@findex tlon-split-align-sentences
@table @asis
@item @code{tlon-split-align-sentences}
(TODO) Intended to align windows based on sentence count, assuming paragraphs are already aligned. Currently not implemented. @*
@end table

@node Reset Split Mode Hook
@subsection Reset Split Mode Hook

@findex tlon-split-mode-reset
The command @code{tlon-split-mode-reset} removes and re-adds the @code{tlon-split-autoalign-paragraphs} function to the `post-command-hook`. This can be useful if the hook's behavior seems incorrect or needs refreshing. @*

@node Sentence Highlighting (Experimental/Unused)
@subsection Sentence Highlighting (Experimental/Unused)

These commands relate to an experimental feature for highlighting corresponding sentences between windows, which is currently not actively used or fully developed. @*

@findex tlon-highlight-corresponding-sentence
@table @asis
@item @code{tlon-highlight-corresponding-sentence}
Highlights the sentence in the source window that corresponds (based on sentence count and offset) to the sentence at point in the target window. @*
@end table
@findex tlon-sentence-highlight-offset-set
@table @asis
@item @code{tlon-sentence-highlight-offset-set}
Calculates and sets the sentence offset (@code{tlon-sentence-highlight-offset}) between the source and target windows based on the current cursor positions. @*
@end table
@findex tlon-toggle-automatic-highlighting
@table @asis
@item @code{tlon-toggle-automatic-highlighting}
Toggles the automatic highlighting behavior by adding/removing @code{tlon-highlight-corresponding-sentence} from the `post-command-hook`. @*
@end table

@node Transient Menu (12)
@subsection Transient Menu

@findex tlon-split-menu
The command @code{tlon-split-menu} activates a @samp{transient} menu interface for split mode operations. @*

It provides the following options under the ``Split mode'' group: @*
@table @asis
@item @samp{s}
Toggle split mode (@code{tlon-split-mode}) @*
@item @samp{h}
Highlight corresponding sentence (@code{tlon-highlight-corresponding-sentence}) @*
@item @samp{o}
Set sentence offset (@code{tlon-sentence-highlight-offset-set}) @*
@item @samp{r}
Reset split mode hook (@code{tlon-split-mode-reset}) @*
@end table

@node Internal Functions and Variables (16)
@section Internal Functions and Variables

This section lists non-interactive functions and variables used internally. @*

@menu
* State Variables::
* Helper Functions: Helper Functions (3). 
@end menu

@node State Variables
@subsection State Variables

@vindex tlon-split-last-screen-line-pos
@table @asis
@item @code{tlon-split-last-screen-line-pos}
Stores the screen line number of the cursor's last known position. Used by @code{tlon-split-screen-line-changed-p} to detect movement. @*
@end table
@vindex tlon-sentence-highlight-offset
@table @asis
@item @code{tlon-sentence-highlight-offset}
Stores the calculated sentence offset for the experimental highlighting feature. @*
@end table
@vindex tlon-enable-automatic-highlighting
@table @asis
@item @code{tlon-enable-automatic-highlighting}
Boolean flag controlling the experimental automatic sentence highlighting. @*
@end table

@node Helper Functions (3)
@subsection Helper Functions

@findex tlon-split-screen-line-changed-p
@table @asis
@item @code{tlon-split-screen-line-changed-p}
Returns non-nil if the cursor has moved to a different screen line since the last check. Updates @code{tlon-split-last-screen-line-pos}. @*
@end table
@findex tlon-split-top-of-buffer-visible-p
@table @asis
@item @code{tlon-split-top-of-buffer-visible-p}
(Unused) Checks if the beginning of the buffer content (after metadata) is visible in the current window. @*
@end table
@findex tlon-split-screen-line-offset
@table @asis
@item @code{tlon-split-screen-line-offset}
Calculates the difference in screen line numbers between the cursor positions in the current and other windows. @*
@end table
@findex tlon-split-autoalign-paragraphs
@table @asis
@item @code{tlon-split-autoalign-paragraphs}
The function added to `post-command-hook` when @code{tlon-split-mode} is active. It checks if the mode is enabled, if the screen line has changed, and if the cursor is below the @code{tlon-split-screen-line-threshold}. If all conditions are met, it calls @code{tlon-split-align-paragraphs}. @*
@end table
@findex tlon-remove-source-overlays
@table @asis
@item @code{tlon-remove-source-overlays}
Removes sentence highlighting overlays (used by the experimental highlighting feature). @*
@end table
@findex tlon-current-window-line
@table @asis
@item @code{tlon-current-window-line}
Calculates the current screen line number relative to the top of the window (used by the experimental highlighting feature). @*
@end table

@node Text-to-Speech (@samp{tlon-ttsel})
@chapter Text-to-Speech (@samp{tlon-tts.el})

This module provides comprehensive text-to-speech (TTS) functionality, integrating with multiple cloud-based TTS engines (Microsoft Azure, Google Cloud, Amazon Polly, OpenAI, ElevenLabs). It handles text preparation (including SSML generation and listener cues), API requests, audio chunking and merging, and file management. @*

@menu
* Dependencies: Dependencies (14). 
* User Options: User Options (8). 
* Commands: Commands (18). 
* Internal Functions and Variables: Internal Functions and Variables (17). 
@end menu

@node Dependencies (14)
@section Dependencies

@itemize
@item
@samp{tlon-core} @*
@item
@samp{tlon-md} @*
@item
@samp{eieio} @*
@item
@samp{transient} @*
@item
@samp{flycheck} (optional, for staging buffer) @*
@item
@samp{markdown-mode} (optional, for staging buffer) @*
@item
@samp{json-mode} (optional, for ElevenLabs voice listing) @*
@item
External tools: @samp{ffmpeg} (for audio conversion/joining), @samp{curl} (for API requests), @samp{aws} CLI (for Polly), @samp{gcloud} CLI (for Google Cloud token), @samp{jq} (for Google Cloud response parsing). @*
@end itemize

@node User Options (8)
@section User Options

@menu
* General TTS Settings::
* Engine-Specific Settings::
@end menu

@node General TTS Settings
@subsection General TTS Settings

@vindex tlon-tts-global-engine
@table @asis
@item @code{tlon-tts-global-engine}
Specifies the default TTS engine to use (e.g., ``Microsoft Azure'', ``Google Cloud'', ``Amazon Polly'', ``OpenAI'', ``ElevenLabs''). @*
@end table

@vindex tlon-tts-use-alternate-voice
@table @asis
@item @code{tlon-tts-use-alternate-voice}
Boolean. If non-nil, uses a designated alternate voice (per engine configuration) for reading elements like notes, asides, blockquotes, etc., marked with listener cues. @*
@end table

@vindex tlon-tts-delete-file-chunks
@table @asis
@item @code{tlon-tts-delete-file-chunks}
Boolean. If non-nil, automatically deletes the individual audio chunk files after they have been successfully merged into the final output file. @*
@end table

@vindex tlon-tts-paragraph-break-duration
@table @asis
@item @code{tlon-tts-paragraph-break-duration}
String specifying the duration of the pause (SSML @samp{<break time}``@dots{}''>=) inserted after each paragraph (e.g., ``0.8s''). @*
@end table

@vindex tlon-tts-listener-cue-break-duration
@table @asis
@item @code{tlon-tts-listener-cue-break-duration}
String specifying the duration of the pause inserted before and after listener cues (e.g., ``0.5s''). @*
@end table

@node Engine-Specific Settings
@subsection Engine-Specific Settings

Each supported TTS engine has specific configuration options: @*

@itemize
@item
@strong{Audio Settings}: Variables like @code{tlon-microsoft-azure-audio-settings}, @code{tlon-google-cloud-audio-settings}, @code{tlon-amazon-polly-audio-settings}, @code{tlon-openai-audio-settings}, @code{tlon-elevenlabs-audio-settings} define the default audio output format (e.g., MP3 bitrate, PCM sample rate) and the corresponding file extension for each engine. These are cons cells @samp{("FORMAT_NAME" . "extension")}. @*
@item
@strong{Model Selection} (where applicable): @*
@vindex tlon-openai-model
@table @asis
@item @code{tlon-openai-model}
Specifies the OpenAI TTS model to use (e.g., ``gpt-4o-mini-tts'', ``tts-1'', ``tts-1-hd''). @*
@end table
@vindex tlon-elevenlabs-model
@table @asis
@item @code{tlon-elevenlabs-model}
Specifies the ElevenLabs model (e.g., ``eleven@math{_multilingual}@math{_v2}'', ``eleven@math{_turbo}@math{_v2}@math{_5}''). @*
@end table
@item
@strong{Region} (Amazon Polly): @*
@vindex tlon-amazon-polly-region
@table @asis
@item @code{tlon-amazon-polly-region}
Specifies the AWS region for Amazon Polly requests (e.g., ``us-east-1''). @*
@end table
@end itemize

@node Commands (18)
@section Commands

This section details the interactive commands provided by @samp{tlon-tts.el}. @*

@menu
* Core Workflow::
* Audio File Management::
* Reporting and Data Editing::
* Transient Menu: Transient Menu (13). 
@end menu

@node Core Workflow
@subsection Core Workflow

@findex tlon-tts-stage-content
@table @asis
@item @code{tlon-tts-stage-content}
(Autoloaded) Prepares content for narration. Reads the content (from region, specified file, or current buffer), creates a dedicated staging buffer (e.g., @samp{*TTS: filename*}), copies the content, sets up necessary file-local variables (source, language, engine, voice, etc.), and runs the preparation pipeline (@code{tlon-tts-prepare-staging-buffer}). @*
@end table

@findex tlon-tts-narrate-staged-content
@table @asis
@item @code{tlon-tts-narrate-staged-content}
(Autoloaded) Narrates the content currently prepared in the staging buffer. @*
@enumerate
@item
Ensures the current buffer is a staging buffer. @*
@item
Breaks the prepared text into chunks based on engine character limits and voice changes (@code{tlon-tts-prepare-chunks}). @*
@item
Iterates through the chunks, calling the appropriate engine's request function (@code{tlon-tts-generate-audio}) for each chunk, saving the audio to sequentially numbered files (e.g., @samp{filename-001.mp3}). @*
@item
Monitors the asynchronous audio generation processes. @*
@item
Once all chunks are generated: @*
@itemize
@item
Appends silence to chunks if needed (e.g., for ElevenLabs). @*
@item
Joins the audio chunks into a single output file (@code{tlon-tts-join-chunks}). @*
@item
Optionally deletes the chunk files (@code{tlon-tts-delete-chunks-of-file}). @*
@item
Opens the directory containing the final audio file in Dired. @*
@item
Opens the final audio file using the system's default player. @*
@end itemize
@end enumerate
@end table

@node Audio File Management
@subsection Audio File Management

@findex tlon-tts-join-chunks
@table @asis
@item @code{tlon-tts-join-chunks}
Joins sequentially numbered audio chunk files (e.g., @samp{file-001.mp3}, @samp{file-002.mp3}) into a single output file (e.g., @samp{file.mp3}) using @samp{ffmpeg}. Operates on the file at point in Dired or prompts for a file. @*
@end table

@findex tlon-tts-delete-chunks-of-file
@table @asis
@item @code{tlon-tts-delete-chunks-of-file}
Deletes all audio chunk files associated with a base filename. Also kills the corresponding staging buffer if it exists. Operates on the file at point in Dired or prompts for a file. @*
@end table

@findex tlon-tts-truncate-audio-file
@table @asis
@item @code{tlon-tts-truncate-audio-file}
Removes a specified number of milliseconds from the @strong{end} of an audio file using @samp{mp3splt}. Prompts for the file and the duration to remove. @*
@end table

@findex tlon-tts-move-file-to-audio-server
@table @asis
@item @code{tlon-tts-move-file-to-audio-server}
(Autoloaded) Moves a generated audio file to the designated audio repository directory (@samp{uqbar-audio}) based on the file's language. Prompts for the file to move. @*
@end table

@findex tlon-tts-open-audio-directory
@table @asis
@item @code{tlon-tts-open-audio-directory}
(Autoloaded) Opens the audio repository directory for the current language (or prompts for one) in Dired. @*
@end table

@node Reporting and Data Editing
@subsection Reporting and Data Editing

@findex tlon-tts-generate-report
@table @asis
@item @code{tlon-tts-generate-report}
Generates a report buffer (``@strong{TTS Report}'') highlighting potential issues in the current staging buffer that might affect TTS quality, such as missing acronym definitions, potential chemical symbols, emphasis markers, en dashes, and numbers lacking separators. @*
@end table

@findex tlon-tts-edit-global-abbreviations
@table @asis
@item @code{tlon-tts-edit-global-abbreviations}
(Autoloaded) Interactively edits the global abbreviations list stored in @samp{tlon-file-global-abbreviations}. @*
@end table

@findex tlon-tts-edit-global-phonetic-replacements
@table @asis
@item @code{tlon-tts-edit-global-phonetic-replacements}
(Autoloaded) Interactively edits the global phonetic replacements list stored in @samp{tlon-file-global-phonetic-replacements}. @*
@end table

@findex tlon-tts-edit-global-phonetic-transcriptions
@table @asis
@item @code{tlon-tts-edit-global-phonetic-transcriptions}
(Autoloaded) Interactively edits the global phonetic transcriptions list stored in @samp{tlon-file-global-phonetic-transcriptions}. @*
@end table

@findex tlon-add-local-abbreviation
@table @asis
@item @code{tlon-add-local-abbreviation}
(Autoloaded) Adds a file-local abbreviation to the @samp{tlon-local-abbreviations} variable in the current buffer's local variables section. @*
@end table

@findex tlon-add-local-replacement
@table @asis
@item @code{tlon-add-local-replacement}
(Autoloaded) Adds a file-local phonetic replacement to the @samp{tlon-local-replacements} variable in the current buffer's local variables section. @*
@end table

@node Transient Menu (13)
@subsection Transient Menu

@findex tlon-tts-menu
The command @code{tlon-tts-menu} (Autoloaded) activates a @samp{transient} menu interface for TTS operations. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Narration}: @*
@table @asis
@item @samp{s}
Stage content (@code{tlon-tts-stage-content}) @*
@item @samp{n}
Narrate staged content (@code{tlon-tts-narrate-staged-content}) @*
@item @samp{e}
Generate report (@code{tlon-tts-generate-report}) @*
@item
@strong{Narration options}: (These set the corresponding user options temporarily for the menu session) @*
@table @asis
@item @samp{-a}
Paragraph break duration (@code{tlon-tts-paragraph-break-duration-infix}) @*
@item @samp{-d}
Delete file chunks (@code{tlon-tts-menu-infix-toggle-delete-file-chunks}) @*
@item @samp{-e}
Engine (@code{tlon-tts-menu-infix-set-engine}) @*
@item @samp{-s}
Engine Settings (@code{tlon-tts-menu-infix-set-engine-settings}) @*
@item @samp{-p}
Prompt (Currently unused) (@code{tlon-tts-menu-infix-set-prompt}) @*
@item @samp{-v}
Use alternate voice (@code{tlon-tts-menu-infix-toggle-alternate-voice}) @*
@item @samp{-D}
Debug mode (@code{tlon-menu-infix-toggle-debug}) @*
@end table
@end table
@item
@strong{File processing}: @*
@table @asis
@item @samp{j}
Join file chunks (@code{tlon-tts-join-chunks}) @*
@item @samp{d}
Delete file chunks (@code{tlon-tts-delete-chunks-of-file}) @*
@item @samp{x}
Truncate audio file (@code{tlon-tts-truncate-audio-file}) @*
@item
@strong{Audio repo}: @*
@table @asis
@item @samp{o}
Open audio directory (@code{tlon-tts-open-audio-directory}) @*
@item @samp{m}
Move file to audio server (@code{tlon-tts-move-file-to-audio-server}) @*
@end table
@end table
@item
@strong{Edit}: @*
@itemize
@item
@strong{global}: @*
@table @asis
@item @samp{a}
Abbreviation (@code{tlon-tts-edit-global-abbreviations}) @*
@item @samp{r}
Replacement (@code{tlon-tts-edit-global-phonetic-replacements}) @*
@item @samp{t}
Transcription (@code{tlon-tts-edit-global-phonetic-transcriptions}) @*
@end table
@item
@strong{local}: @*
@table @asis
@item @samp{A}
Abbreviation (@code{tlon-add-local-abbreviation}) @*
@item @samp{R}
Replacement (@code{tlon-add-local-replacement}) @*
@end table
@end itemize
@end itemize

@node Internal Functions and Variables (17)
@section Internal Functions and Variables

This section lists key non-interactive functions, variables, and constants used internally. @*

@menu
* Configuration and Constants::
* Staging Buffer and Preparation::
* Chunking and Processing::
* Engine Request Functions::
* SSML and Text Processing Helpers::
* Audio File Helpers::
@end menu

@node Configuration and Constants
@subsection Configuration and Constants

@vindex tlon-tts-engines
@table @asis
@item @code{tlon-tts-engines}
Central alist defining properties for each supported TTS engine (name, voice variable, audio settings variable, request function, character limit, internal property key). @*
@end table
@vindex tlon-microsoft-azure-voices
@vindex tlon-google-cloud-voices
@vindex tlon-amazon-polly-voices
@vindex tlon-openai-voices
@vindex tlon-elevenlabs-voices
@table @asis
@item Voice Lists (e.g., @code{tlon-microsoft-azure-voices})
Alists defining preferred voices for each engine, including ID, language, gender, and optional role (main/alternate). @*
@end table
@vindex tlon-microsoft-azure-audio-choices
@vindex tlon-google-cloud-audio-choices
@vindex tlon-amazon-polly-audio-choices
@vindex tlon-openai-audio-choices
@vindex tlon-elevenlabs-audio-choices
@table @asis
@item Audio Choices (e.g., @code{tlon-microsoft-azure-audio-choices})
Alists defining available audio formats and extensions for each engine, used for completion in the transient menu. @*
@end table
@vindex tlon-microsoft-azure-request
@vindex tlon-google-cloud-request
@vindex tlon-amazon-polly-request
@vindex tlon-openai-tts-request
@vindex tlon-elevenlabs-tts-url
@table @asis
@item Request Formats (e.g., @code{tlon-microsoft-azure-request})
Format strings for the @samp{curl} or @samp{aws} commands used to make API requests for each engine. @*
@end table
@vindex tlon-microsoft-azure-char-limit
@vindex tlon-google-cloud-char-limit
@vindex tlon-amazon-polly-char-limit
@vindex tlon-openai-char-limit
@vindex tlon-elevenlabs-char-limit
@table @asis
@item Character Limits (e.g., @code{tlon-microsoft-azure-char-limit})
Maximum number of characters allowed per request for each engine. Used for chunking. @*
@end table
@vindex tlon-microsoft-azure-key
@vindex tlon-google-cloud-key
@vindex tlon-openai-key
@vindex tlon-elevenlabs-key
@table @asis
@item API Keys (e.g., @code{tlon-microsoft-azure-key})
Variables holding the API keys for each service, typically retrieved from @samp{auth-source}. @*
@end table
@vindex tlon-tts-supported-tags
@table @asis
@item @code{tlon-tts-supported-tags}
Alist defining SSML tags, their support status across engines, and how to handle them if unsupported (remove, chunkify). @*
@end table
@vindex tlon-tts-listener-cues
@table @asis
@item @code{tlon-tts-listener-cues}
Alist defining the start and end cue text for different content types (aside, blockquote, etc.) in various languages. @*
@end table
@vindex tlon-tts-listener-cue-patterns
@table @asis
@item @code{tlon-tts-listener-cue-patterns}
Alist mapping content types to the regex patterns used to identify them in the text. @*
@end table

@node Staging Buffer and Preparation
@subsection Staging Buffer and Preparation

@findex tlon-tts-get-staging-buffer-name
@table @asis
@item @code{tlon-tts-get-staging-buffer-name}
Generates the name for the staging buffer based on the source filename. @*
@end table
@findex tlon-tts-set-file-local-vars
@table @asis
@item @code{tlon-tts-set-file-local-vars}
Sets file-local variables in the staging buffer (source, language, engine, audio format, voice, locale). @*
@end table
@findex tlon-tts-prepare-staging-buffer
@table @asis
@item @code{tlon-tts-prepare-staging-buffer}
The main function that orchestrates the text preparation pipeline within the staging buffer. It calls numerous helper functions to: @*
@itemize
@item
Generate the initial report. @*
@item
Ensure images/tables have alt text. @*
@item
Process notes (footnotes/sidenotes). @*
@item
Remove unwanted sections (e.g., ``Further reading''). @*
@item
Remove horizontal lines. @*
@item
Replace Bib@TeX{} keys with citations. @*
@item
Add listener cues. @*
@item
Process links. @*
@item
Remove formatting (bold, italics, etc.). @*
@item
Add paragraph breaks. @*
@item
Process currencies and numerals. @*
@item
Process abbreviations (local and global). @*
@item
Process phonetic replacements and transcriptions. @*
@item
Handle unsupported SSML tags. @*
@item
Clean up extra newlines. @*
@item
(Potentially) Escape XML special characters. @*
@end itemize
@end table

@node Chunking and Processing
@subsection Chunking and Processing

@findex tlon-tts-prepare-chunks
@table @asis
@item @code{tlon-tts-prepare-chunks}
Calculates the engine's character limit and calls @code{tlon-tts-read-into-chunks}. @*
@end table
@findex tlon-tts-read-into-chunks
@table @asis
@item @code{tlon-tts-read-into-chunks}
Reads the staging buffer content (excluding local variables section) and splits it into chunks using @code{tlon-tts-break-into-chunks}. @*
@end table
@findex tlon-tts-break-into-chunks
@table @asis
@item @code{tlon-tts-break-into-chunks}
Core logic for splitting text into chunks based on paragraph boundaries, engine character limits, and voice changes specified by @samp{tlon-tts-voice-chunks}. @*
@end table
@findex tlon-tts-process-chunks
@table @asis
@item @code{tlon-tts-process-chunks}
Iterates through the generated @code{tlon-tts-chunks}, calling @code{tlon-tts-generate-audio} for each. @*
@end table
@findex tlon-tts-generate-audio
@table @asis
@item @code{tlon-tts-generate-audio}
Constructs the API request command using the appropriate engine-specific function (e.g., @code{tlon-tts-microsoft-azure-make-request}) and starts the asynchronous process. Sets up the process sentinel to handle completion (@code{tlon-tts-process-chunk}). @*
@end table

@node Engine Request Functions
@subsection Engine Request Functions

@findex tlon-tts-microsoft-azure-make-request
@findex tlon-tts-google-cloud-make-request
@findex tlon-tts-amazon-polly-make-request
@findex tlon-tts-openai-make-request
@findex tlon-tts-elevenlabs-make-request
@table @asis
@item Engine Request Functions (e.g., @code{tlon-tts-microsoft-azure-make-request})
Functions responsible for constructing the specific @samp{curl}, @samp{aws}, or other command-line request for each TTS engine, incorporating the text (wrapped in SSML), API key, selected voice, locale, audio format, and output destination. @*
@end table

@node SSML and Text Processing Helpers
@subsection SSML and Text Processing Helpers

@findex tlon-tts-process-unsupported-ssml-tags
@table @asis
@item @code{tlon-tts-process-unsupported-ssml-tags}
Determines which SSML tags are unsupported by the current engine and either removes them (@code{tlon-tts-remove-unsupported-ssml-tags}) or prepares for chunking based on them (@code{tlon-tts-chunkify-unsupported-ssml-tags}). @*
@end table
@findex tlon-tts-process-listener-cues
@table @asis
@item @code{tlon-tts-process-listener-cues}
Iterates through defined content types (tables, quotes, asides, etc.) and calls @code{tlon-tts-add-listener-cues} for each. @*
@end table
@findex tlon-tts-add-listener-cues
@table @asis
@item @code{tlon-tts-add-listener-cues}
Finds occurrences of a specific content type using regex patterns and replaces the matched text with the content wrapped in appropriate listener cues and potentially alternate voice tags (@code{tlon-tts-listener-cue-full-enclose}). @*
@end table
@findex tlon-tts-process-notes
@table @asis
@item @code{tlon-tts-process-notes}
Handles footnotes, replacing references with content (for sidenotes) or removing them, adding listener cues. @*
@end table
@findex tlon-tts-process-formatting
@table @asis
@item @code{tlon-tts-process-formatting}
Calls individual functions to remove various formatting tags (bold, italics, sup, sub, etc.). @*
@end table
@findex tlon-tts-process-numerals
@table @asis
@item @code{tlon-tts-process-numerals}
Calls functions to handle number formatting (powers, Roman numerals, thousands separators). @*
@end table
@findex tlon-tts-process-abbreviations
@table @asis
@item @code{tlon-tts-process-abbreviations}
Core logic for replacing abbreviations (local or global) with their expansions. @*
@end table
@findex tlon-tts-process-terms
@table @asis
@item @code{tlon-tts-process-terms}
Generic function for replacing terms based on a list (used for phonetic replacements and transcriptions). @*
@end table

@node Audio File Helpers
@subsection Audio File Helpers

@findex tlon-tts-get-chunk-name
@table @asis
@item @code{tlon-tts-get-chunk-name}
Generates the numbered filename for an audio chunk. @*
@end table
@findex tlon-tts-get-list-of-chunks
@table @asis
@item @code{tlon-tts-get-list-of-chunks}
Finds all chunk files matching a base filename pattern. @*
@end table
@findex tlon-tts-create-list-of-chunks
@table @asis
@item @code{tlon-tts-create-list-of-chunks}
Creates a temporary text file listing chunk filenames, required by @samp{ffmpeg} for concatenation. @*
@end table
@findex tlon-tts-append-silence-to-chunks
@table @asis
@item @code{tlon-tts-append-silence-to-chunks}
Appends silence to each chunk file using @samp{ffmpeg}, necessary for some engines like ElevenLabs. @*
@end table
@findex tlon-tts-append-silence-to-chunks-p
@table @asis
@item @code{tlon-tts-append-silence-to-chunks-p}
Determines if silence should be appended based on the TTS engine used for the file. @*
@end table

@node URL Handling (@samp{tlon-urlel})
@chapter URL Handling (@samp{tlon-url.el})

This module provides tools for checking dead URLs within files and replacing URLs across multiple Tlön content repositories. It integrates with the external @samp{linkchecker} command-line tool and the Wayback Machine (web.archive.org). @*

@menu
* Dependencies: Dependencies (15). 
* Commands: Commands (19). 
* Internal Functions and Variables: Internal Functions and Variables (18). 
@end menu

@node Dependencies (15)
@section Dependencies

@itemize
@item
@samp{tlon-core} @*
@item
@samp{transient} @*
@item
@samp{ffap} (Find File At Point, built-in) @*
@item
@samp{linkchecker} (External command-line tool) @*
@end itemize

@node Commands (19)
@section Commands

@menu
* Check URLs in File::
* Get Archived URL::
* Replace URL Across Projects::
* Transient Menu: Transient Menu (14). 
@end menu

@node Check URLs in File
@subsection Check URLs in File

@findex tlon-check-urls-in-file
The command @code{tlon-check-urls-in-file} (Autoloaded) checks all URLs found in a specified @samp{FILE} (or the current buffer's file) for dead links using the external @samp{linkchecker} tool asynchronously. @*
@enumerate
@item
Identifies the input file. @*
@item
Extracts all URLs from the file using @code{tlon-get-urls-in-file}. @*
@item
Creates a temporary output file for the @samp{linkchecker} results. @*
@item
Constructs the @samp{linkchecker} command, specifying the output file and the list of URLs to check (with @samp{--recursion-level=0} to prevent checking linked pages). @*
@item
Starts the @samp{linkchecker} process asynchronously using @samp{start-process-shell-command}. @*
@item
Sets a process sentinel: @*
@itemize
@item
When the process finishes (indicated by an event string starting with ``finished''), it displays a completion message. @*
@item
It then opens the temporary output file containing the @samp{linkchecker} results. @*
@item
It enables @samp{goto-address-mode} in the results buffer, making URLs clickable. @*
@end itemize
@end enumerate

@node Get Archived URL
@subsection Get Archived URL

@findex tlon-get-archived
The command @code{tlon-get-archived} (Autoloaded) constructs the Wayback Machine URL for the latest archived version of a given @samp{URL} and copies it to the kill ring. @*
@enumerate
@item
Prompts for the @samp{URL}, defaulting to the URL at point (@code{thing-at-point 'url t}). @*
@item
Formats the Wayback Machine URL as @samp{https://web.archive.org/web/2/URL}. @*
@item
Copies the formatted URL to the kill ring using @samp{kill-new}. @*
@item
Returns the archived URL string. @*
@end enumerate

@node Replace URL Across Projects
@subsection Replace URL Across Projects

@findex tlon-replace-url-across-projects
The command @code{tlon-replace-url-across-projects} performs a search-and-replace operation for URLs across all files within Tlön content repositories (both originals and translations). @*
@enumerate
@item
Prompts for the @samp{URL-DEAD} (the URL to replace), defaulting to the URL at point. @*
@item
Prompts for the @samp{URL-LIVE} (the replacement URL). @*
@item
Gathers a list of all repository directories marked as @samp{type} 'content using @code{tlon-repo-lookup-all}. @*
@item
Recursively finds all files within these directories using @samp{directory-files-recursively}. @*
@item
Iterates through each regular file: @*
@itemize
@item
Reads the file content into a temporary buffer. @*
@item
Checks if @samp{URL-DEAD} exists in the buffer. @*
@item
If found: @*
@itemize
@item
Increments a replacement counter. @*
@item
Records the directory of the affected file. @*
@item
Performs a global search-and-replace within the temporary buffer, replacing all occurrences of @samp{URL-DEAD} with @samp{URL-LIVE}. @*
@item
Writes the modified content back to the original file. @*
@end itemize
@end itemize
@item
After processing all files, displays a message indicating the total number of replacements made and the unique directories affected. @*
@end enumerate

@node Transient Menu (14)
@subsection Transient Menu

@findex tlon-url-menu
The command @code{tlon-url-menu} (Autoloaded) activates a @samp{transient} menu interface for URL-related operations. @*

It provides the following options under the ``'' (main) group: @*
@table @asis
@item @samp{a}
Get archived URL (@code{tlon-get-archived}) @*
@item @samp{c}
Check URLs in file (@code{tlon-check-urls-in-file}) @*
@item @samp{v}
Replace URL across projects (@code{tlon-replace-url-across-projects}) @*
@end table

@node Internal Functions and Variables (18)
@section Internal Functions and Variables

This section lists non-interactive functions used internally or potentially useful for advanced customization. @*

@findex tlon-get-urls-in-file
@table @asis
@item @code{tlon-get-urls-in-file}
Extracts a list of unique URLs from a given @samp{FILE} (or the current buffer's file). It inserts the file content into a temporary buffer, searches for potential URLs using @samp{browse-url-button-regexp}, validates them using @samp{ffap-url-p}, and returns a list of unique URLs found. @*
@end table

@findex tlon-get-urls-in-dir
@table @asis
@item @code{tlon-get-urls-in-dir}
Recursively finds all files with a specific @samp{EXTENSION} (defaulting to ``md'') within a given @samp{DIR} (defaulting to the current repository) and returns a combined list of all unique URLs found within those files by calling @code{tlon-get-urls-in-file} on each. @*
@end table

@findex tlon-save-list-of-urls
@table @asis
@item @code{tlon-save-list-of-urls}
Takes a list of @samp{URLS}, creates a temporary file, writes the URLs (one per line) prefixed with a @samp{# LinkChecker URL list} header, and returns the path to the temporary file. (Note: This function seems unused within the current module). @*
@end table

@node Word Counting and Statistics (@samp{tlon-countel})
@chapter Word Counting and Statistics (@samp{tlon-count.el})

This module provides functionality for counting words in files, directories, and repositories, as well as counting occurrences of Bib@TeX{} keys. It includes features for generating reports, exporting data to Google Drive, and calculating historical word counts (requires external tools). @*

@menu
* Dependencies: Dependencies (16). 
* Configuration: Configuration (6). 
* Commands: Commands (20). 
* Internal Functions and Variables: Internal Functions and Variables (19). 
@end menu

@node Dependencies (16)
@section Dependencies

@itemize
@item
@samp{tlon-md} @*
@item
@samp{tlon-yaml} @*
@item
@samp{dired}, @samp{dired-x} (for file selection and interaction) @*
@item
@samp{transient} (for the menu) @*
@item
@samp{gdrive} (external CLI tool, for Google Drive export) @*
@item
@samp{gdu} (external CLI tool, for historic word count) @*
@item
@samp{gnuplot} (external CLI tool, for historic word count) @*
@end itemize

@node Configuration (6)
@section Configuration

@vindex tlon-count-gdrive-directory-ids
@table @asis
@item @code{tlon-count-gdrive-directory-ids}
An alist mapping language codes (e.g., ``en'', ``es'') to their corresponding Google Drive folder IDs. Used by @code{tlon-count-export-to-google-drive} to determine the upload destination. @*
@end table

@node Commands (20)
@section Commands

This section details the interactive commands provided by @samp{tlon-count.el}. @*

@menu
* Word Counting::
* Org Table Generation and Export::
* Bib@TeX{} Key Counting::
* Historic Word Count::
* Transient Menu: Transient Menu (15). 
@end menu

@node Word Counting
@subsection Word Counting

These commands calculate the number of ``substantive'' words (total words minus words in YAML front matter and local variables sections) in specified locations. They share common optional arguments: @*

@table @asis
@item @samp{FORMAT}
Determines the output format: @*
@table @asis
@item @samp{list}
Returns a list of cons cells @samp{((COUNT . FILENAME) ...)}. @*
@item @samp{count}
Returns the total word count as a number. @*
@item @samp{summary} (or any other value/nil)
Displays a message like ``%s words in %s files.'' and copies the total count to the kill ring. @*
@end table
@item @samp{REGEXP}
A regular expression (string) to filter filenames. If nil, defaults to matching Markdown files (@samp{\\.md$}). @*
@end table

@findex tlon-count-words-in-repo
@table @asis
@item @code{tlon-count-words-in-repo}
Counts words in files matching @samp{REGEXP} within a specified Tlön repository. Prompts for the @samp{REPO-NAME} (completing from translation repositories) if not provided. Uses @code{tlon-repo-lookup} to find the directory and then calls @code{tlon-count-words-in-dir} recursively. @*
@end table

@findex tlon-count-words-in-dir
@table @asis
@item @code{tlon-count-words-in-dir}
Counts words in files matching @samp{REGEXP} within a specified directory @samp{DIR}. If @samp{DIR} is nil, tries to use the directory at point; otherwise, prompts for one. If the optional @samp{RECURSIVELY} argument is non-nil, it searches subdirectories as well. Calls @code{tlon-count-words-in-files} with the collected file list. @*
@end table

@findex tlon-count-words-in-files
@table @asis
@item @code{tlon-count-words-in-files}
Counts words in a list of @samp{FILES}. If @samp{FILES} is nil, it attempts to use the files marked in the current Dired buffer (@code{dired-get-marked-files}). It iterates through each file, calculates the substantive word count using @code{tlon-count-substantive-words}, and returns the result based on the @samp{FORMAT} argument. @*
@end table

@node Org Table Generation and Export
@subsection Org Table Generation and Export

@findex tlon-count-create-table-for-dir
@table @asis
@item @code{tlon-count-create-table-for-dir}
Creates an Org mode table summarizing word counts for Markdown files in a directory @samp{DIR}. @*
@enumerate
@item
Prompts for @samp{DIR} (defaulting to the directory at point in Dired). @*
@item
Calls @code{tlon-count-words-in-dir} with @samp{FORMAT} 'list to get the data. @*
@item
Determines the output Org file path using @code{tlon-count-get-table-output-path} (typically in the @samp{stats/} subdirectory of the @samp{babel} repo). @*
@item
Inserts the data into a new buffer as an Org table using @code{tlon-count-insert-table-from-list} and saves it to the destination file. @*
@item
Exports the Org table to a TSV file using @code{tlon-count-export-org-table}. @*
@item
Exports the generated TSV file to the appropriate Google Drive folder using @code{tlon-count-export-to-google-drive}. @*
@end enumerate
@end table

@findex tlon-count-export-org-table
@table @asis
@item @code{tlon-count-export-org-table}
Exports the first Org table found in @samp{FILE} (or the current buffer's file) to a TSV file. The destination TSV file path is derived from the source Org file path using @code{tlon-count-get-tsv-file}. Uses @samp{org-table-export} with the ``orgtbl-to-tsv'' format. @*
@end table

@findex tlon-count-export-to-google-drive
@table @asis
@item @code{tlon-count-export-to-google-drive}
Exports a local @samp{FILE} (typically a TSV generated by @code{tlon-count-export-org-table}) to Google Drive. @*
@enumerate
@item
Determines the target language from the filename using @code{tlon-get-language-in-file}. @*
@item
Looks up the corresponding Google Drive folder ID in @code{tlon-count-gdrive-directory-ids}. @*
@item
Uses the external @samp{gdrive} command-line tool to upload the file to the specified parent folder ID@. @*
@item
Opens the target Google Drive folder in the browser using @samp{browse-url}. @*
@end enumerate
@end table

@node Bib@TeX{} Key Counting
@subsection Bib@TeX{} Key Counting

@findex tlon-count-bibtex-keys-in-dir
@table @asis
@item @code{tlon-count-bibtex-keys-in-dir}
Counts the occurrences of each Bib@TeX{} key (within @samp{<Cite ...>} tags) across all non-hidden files in a directory @samp{DIR}. @*
@enumerate
@item
Prompts for @samp{DIR} if not provided. @*
@item
If the optional prefix argument @samp{RECURSIVE} is non-nil, includes files in subdirectories. @*
@item
Gets the list of files using @code{tlon-get-files-in-dir}. @*
@item
Defines the pattern for Bib@TeX{} keys using @code{tlon-md-get-tag-pattern "Cite"}. @*
@item
Iterates through each file, extracting key counts into a hash table using @code{tlon-extract-bibkeys-from-file}. @*
@item
Merges the counts from each file into a total count hash table using @code{tlon-merge-key-counts}. @*
@item
Sorts the keys by count (descending) using @code{tlon-sort-key-counts}. @*
@item
Displays the sorted counts in a dedicated buffer (``@emph{Bib@TeX{} Key Counts}'') using @code{tlon-display-key-counts}. @*
@end enumerate
@end table

@node Historic Word Count
@subsection Historic Word Count

@findex tlon-historic-word-count
@table @asis
@item @code{tlon-historic-word-count}
Computes and potentially visualizes the historic word count for a repository over a specified number of past days. @strong{Requires the external tools @samp{gdu} and @samp{gnuplot} to be installed.} @*
@enumerate
@item
Prompts for @samp{REPO-NAME} (completing from translation repositories). @*
@item
Prompts for the number of @samp{DAYS} into the past. @*
@item
Prompts for the average characters per word (@samp{CHARS-PER-WORD}, default 5.5). @*
@item
Executes an external shell script (@samp{count/historic-word-count} located in the @samp{babel} repo) which uses @samp{gdu} to get directory sizes over time and potentially @samp{gnuplot} to visualize the estimated word count (size / chars-per-word). @*
@item
Displays the script's output in the ``@strong{Directory Size}'' buffer. @*
@end enumerate
@end table

@node Transient Menu (15)
@subsection Transient Menu

@findex tlon-count-menu
The command @code{tlon-count-menu} activates a @samp{transient} menu interface for counting operations. @*

It provides the following groups and commands: @*
@itemize
@item
@strong{Count words}: @*
@table @asis
@item @samp{w f}
in file(s) (@code{tlon-count-words-in-files}) @*
@item @samp{w d}
in dir (@code{tlon-count-words-in-dir}) @*
@item @samp{w r}
in repo (@code{tlon-count-words-in-repo}) @*
@item @samp{w t}
Create table for dir (@code{tlon-count-create-table-for-dir}) @*
@end table
@item
@strong{Count Bib@TeX{} keys}: @*
@table @asis
@item @samp{k d}
in dir (@code{tlon-count-bibtex-keys-in-dir}) @*
@end table
@end itemize

@node Internal Functions and Variables (19)
@section Internal Functions and Variables

This section lists non-interactive functions used internally or potentially useful for advanced customization. @*

@menu
* Word Count Filtering::
* Org Table and Export Helpers::
* Bib@TeX{} Key Counting Helpers::
@end menu

@node Word Count Filtering
@subsection Word Count Filtering

@findex tlon-count-substantive-words
@table @asis
@item @code{tlon-count-substantive-words}
Calculates the number of ``substantive'' words in the current buffer. It does this by taking the total word count (@samp{count-words}) and subtracting the count of ``extraneous'' words calculated by @code{tlon-count-extraneous-words}. @*
@end table

@findex tlon-count-extraneous-words
@table @asis
@item @code{tlon-count-extraneous-words}
Calculates the number of ``extraneous'' words in the current buffer. These are defined as words within the YAML front matter section (retrieved via @code{tlon-yaml-get-metadata}) and the local variables section (retrieved via @code{tlon-md-get-local-variables}). @*
@end table

@node Org Table and Export Helpers
@subsection Org Table and Export Helpers

@findex tlon-count-insert-table-from-list
@table @asis
@item @code{tlon-count-insert-table-from-list}
Takes a @samp{LIST} of cons cells @samp{((COUNT . FILENAME) ...)} and inserts it as an Org mode table into a new buffer (``@strong{Tlön stats}''). If @samp{DESTINATION} file path is provided, saves the buffer to that file. @*
@end table

@findex tlon-count-get-table-output-path
@table @asis
@item @code{tlon-count-get-table-output-path}
Constructs the full path for the output Org table file based on the input directory @samp{DIR}. The target directory is @samp{stats/} within the @samp{babel} repository, and the filename is derived from the base name of @samp{DIR} with an @samp{.org} extension. @*
@end table

@findex tlon-count-get-tsv-file
@table @asis
@item @code{tlon-count-get-tsv-file}
Constructs the full path for the output TSV file based on the input Org @samp{FILE} path. The TSV file is placed in the same directory as the Org file, with the same base name but a @samp{.tsv} extension. @*
@end table

@node Bib@TeX{} Key Counting Helpers
@subsection Bib@TeX{} Key Counting Helpers

@findex tlon-get-files-in-dir
@table @asis
@item @code{tlon-get-files-in-dir}
Returns a list of all non-hidden files in @samp{DIR}. If @samp{RECURSIVE} is non-nil, includes files in subdirectories. Excludes directories themselves from the list. @*
@end table

@findex tlon-extract-bibkeys-from-file
@table @asis
@item @code{tlon-extract-bibkeys-from-file}
Reads a @samp{FILE}, searches for occurrences matching the @samp{BIBKEY-PATTERN} (regex for @samp{<Cite ...>}), extracts the Bib@TeX{} key (match group 3), and returns a hash table mapping keys to their counts within that file. @*
@end table

@findex tlon-merge-key-counts
@table @asis
@item @code{tlon-merge-key-counts}
Merges the key counts from @samp{HASH-TABLE2} into @samp{HASH-TABLE1}. If a key exists in both, their counts are added. Modifies and returns @samp{HASH-TABLE1}. @*
@end table

@findex tlon-sort-key-counts
@table @asis
@item @code{tlon-sort-key-counts}
Converts a @samp{KEY-COUNTS} hash table into a list of cons cells @samp{((KEY . COUNT) ...)} and sorts it in descending order based on the count (CDR). @*
@end table

@findex tlon-display-key-counts
@table @asis
@item @code{tlon-display-key-counts}
Takes a @samp{SORTED-KEYS} list (as returned by @code{tlon-sort-key-counts}) and displays it in a formatted way (count followed by key) in the dedicated ``@emph{Bib@TeX{} Key Counts}'' buffer. @*
@end table

@node Indices
@chapter Indices

@menu
* Function index::
* Variable index::
* Concept index::
@end menu

@node Function index
@section Function index

@printindex fn

@node Variable index
@section Variable index

@printindex vr

@node Concept index
@section Concept index

@printindex cp

@bye
