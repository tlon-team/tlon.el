#+title: tlon - YouTube Functionality
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

* YouTube Functionality (=tlon-youtube.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube
:END:

This module provides functionality to process and upload podcast episodes to YouTube.

** Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-menu
:END:

#+findex: tlon-youtube-menu
+ ~tlon-youtube-menu~ :: Opens the main transient menu for YouTube-related operations. This menu allows access to commands and options for video generation and YouTube integration.

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-options
:END:

#+vindex: tlon-youtube-video-resolution
+ ~tlon-youtube-video-resolution~ :: A cons cell `(WIDTH . HEIGHT)` specifying the video resolution for generated videos. Defaults to 720p `(1280 . 720)`. Common resolutions include:
  - 720p:  `(1280 . 720)`
  - 1080p: `(1920 . 1080)`
  - 1440p: `(2560 . 1440)`
  - 4K (2160p): `(3840 . 2160)`
  This option can be configured via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

#+vindex: tlon-youtube-api-key
+ ~tlon-youtube-api-key~ :: YouTube Data API v3 key for API requests. This should be obtained from the Google Cloud Console. Currently used for read-only operations.

#+vindex: tlon-youtube-client-id
+ ~tlon-youtube-client-id~ :: OAuth 2.0 client ID for YouTube API authentication. This should be obtained from the Google Cloud Console and is required for uploading videos and thumbnails.

#+vindex: tlon-youtube-client-secret
+ ~tlon-youtube-client-secret~ :: OAuth 2.0 client secret for YouTube API authentication. This should be obtained from the Google Cloud Console and is required for uploading videos and thumbnails.

#+vindex: tlon-youtube-default-privacy
+ ~tlon-youtube-default-privacy~ :: Default privacy setting for uploaded videos. Valid values are "private", "unlisted", or "public". Defaults to "private".

** Video Generation
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-video-generation
:END:

#+findex: tlon-youtube-generate-wavelength-video
+ ~tlon-youtube-generate-wavelength-video~ :: Generates a video with an animated wavelength from an audio file using ~seewav~. The command runs asynchronously and opens the generated video file externally upon completion. The resolution of the video is determined by the ~tlon-youtube-video-resolution~ user option. Prompts the user to select an audio file from the "uqbar-audio" repository. The output video is saved in the ~paths-dir-downloads~ directory with a ~.mp4~ extension, using the original audio file name. This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

#+findex: tlon-youtube-generate-thumbnail
+ ~tlon-youtube-generate-thumbnail~ :: Generates a thumbnail image for a video.
  The dimensions of the thumbnail are determined by the ~tlon-youtube-video-resolution~ user option.
  It prompts the user for a video title and author(s).
  The Tlön logo (from the "tlon.team-content" repository, specifically ~images/ea-logo-transparent.png~) is automatically trimmed, resized, and added to the thumbnail.
  The output image is saved as ~thumbnail.png~ in the ~paths-dir-downloads~ directory.
  This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

** YouTube API Integration
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-api
:END:

#+findex: tlon-youtube-upload-video
+ ~tlon-youtube-upload-video~ :: Uploads a video file to YouTube using the YouTube Data API v3 resumable upload method. This command uses the ~curl~ command-line tool to perform a two-step upload process: first initializing the upload to get an upload URL, then uploading the actual video file. Prompts the user to select a video file (filtered to show only ~.mp4~ files), enter a title and description, choose a privacy setting ("private", "unlisted", or "public"), and optionally select a playlist to add the video to. The resumable upload method is more reliable for larger files and processes correctly. If a playlist is selected, the video will be automatically added to that playlist after successful upload. Requires ~tlon-youtube-client-id~ and ~tlon-youtube-client-secret~ to be configured for OAuth 2.0 authentication. This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

#+findex: tlon-youtube-prepare-upload-command
+ ~tlon-youtube-prepare-upload-command~ :: Prepares the `curl` command for a YouTube video upload without executing the final upload step. This command is useful for debugging, as it automatically runs the initialization step and then displays the exact `curl` command needed to upload the video file. Also prompts for playlist selection, though playlist addition is not included in the manual commands (it requires the automated upload process). The command can be copied and run manually in a terminal for testing purposes. This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

#+findex: tlon-youtube-upload-thumbnail
+ ~tlon-youtube-upload-thumbnail~ :: Uploads a thumbnail image to an existing YouTube video. Prompts the user to select a thumbnail file (filtered to show ~.png~, ~.jpg~, and ~.jpeg~ files) and enter the YouTube video ID. Requires the same authentication setup as ~tlon-youtube-upload-video~. This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

#+findex: tlon-youtube-add-to-playlist
+ ~tlon-youtube-add-to-playlist~ :: Adds an existing YouTube video to a playlist. Prompts the user to enter a YouTube video ID and select from the available playlists defined in ~tlon-youtube-playlists~. This is useful for testing the playlist functionality without having to upload a new video. Requires the same authentication setup as ~tlon-youtube-upload-video~. This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

#+findex: tlon-youtube-authorize
+ ~tlon-youtube-authorize~ :: Forces a new OAuth 2.0 authorization for the YouTube API. This is useful if the stored tokens are invalid or have been revoked. The authorization process is handled automatically by the `oauth2-auto.el` library, which starts a local server to capture the authorization token from your browser. This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

*** Authentication Setup
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-auth
:END:

To upload videos and thumbnails to YouTube, you must first authorize the Tlön application to access your Google Account. This is done using OAuth 2.0. The authorization process is handled by the `oauth2-auto.el` library, which provides a robust and automated flow.

**IMPORTANT**: For this to work, you *must* use an OAuth 2.0 Client ID of type **Desktop app**. If you have been using a "Web application" client ID, it will not work with this authorization flow.

Please follow these steps carefully to ensure you have the correct credentials:

1. Go to the [[https://console.cloud.google.com/apis/credentials][Credentials page]] in the Google Cloud Console.
2. Select the project you are using for Tlön.
3. Click *+ CREATE CREDENTIALS* at the top of the page and select *OAuth client ID*.
4. For the *Application type*, choose **Desktop app**. This is critical.
5. Give it a name (e.g., "Tlön Emacs Desktop App").
6. Click *CREATE*.
7. A window will pop up showing your new *Client ID* and *Client Secret*. Copy these values.
8. Configure `tlon-youtube-client-id` and `tlon-youtube-client-secret` in Emacs with these new values. You can set them in your `init.el` or via `M-x customize-group RET tlon-youtube RET`.

**** Getting Authorization
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-authorization
:END:

Once your **Desktop app** credentials are configured correctly, the authorization process is fully automated within Emacs. The first time you run a command that requires authentication (like ~tlon-youtube-upload-video~), `oauth2-auto.el` will automatically initiate the authorization flow.

**Automated Workflow:**
1. The first time you perform an action that requires authorization, your browser will open to Google's authorization page.
2. Sign in with your Google account and grant the requested permissions.
3. After you approve, Google will redirect your browser to a local server address that `oauth2-auto.el` is listening on.
4. The library will automatically capture the authorization code, exchange it for tokens, and store them securely.
5. A success message will appear in your browser, and you can simply close the tab.

There is no need to copy or paste anything. The access and refresh tokens are stored and managed automatically by `oauth2-auto.el`.

**That's it!** The system will automatically use the refresh token to get new access tokens when they expire, so you should only need to authorize once.

**Forcing Re-authorization:** If you ever need to re-authorize (e.g., if you revoke access from your Google Account settings), you can run ~M-x tlon-youtube-authorize~.
