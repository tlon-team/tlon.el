#+title: tlon - YouTube Functionality
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

* YouTube Functionality (=tlon-youtube.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube
:END:

This module provides functionality to process and upload podcast episodes to YouTube.

** Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-menu
:END:

#+findex: tlon-youtube-menu
+ ~tlon-youtube-menu~ :: Opens the main transient menu for YouTube-related operations. This menu allows access to commands and options for video generation and YouTube integration.

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-options
:END:

#+vindex: tlon-youtube-video-resolution
+ ~tlon-youtube-video-resolution~ :: A cons cell `(WIDTH . HEIGHT)` specifying the video resolution for generated videos. Defaults to 720p `(1280 . 720)`. Common resolutions include:
  - 720p:  `(1280 . 720)`
  - 1080p: `(1920 . 1080)`
  - 1440p: `(2560 . 1440)`
  - 4K (2160p): `(3840 . 2160)`
  This option can be configured via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

#+vindex: tlon-youtube-api-key
+ ~tlon-youtube-api-key~ :: YouTube Data API v3 key for API requests. This should be obtained from the Google Cloud Console. Currently used for read-only operations.

#+vindex: tlon-youtube-client-id
+ ~tlon-youtube-client-id~ :: OAuth 2.0 client ID for YouTube API authentication. This should be obtained from the Google Cloud Console and is required for uploading videos and thumbnails.

#+vindex: tlon-youtube-client-secret
+ ~tlon-youtube-client-secret~ :: OAuth 2.0 client secret for YouTube API authentication. This should be obtained from the Google Cloud Console and is required for uploading videos and thumbnails.

#+vindex: tlon-youtube-default-privacy
+ ~tlon-youtube-default-privacy~ :: Default privacy setting for uploaded videos. Valid values are "private", "unlisted", or "public". Defaults to "private".

** Video Generation
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-video-generation
:END:

#+findex: tlon-youtube-generate-wavelength-video
+ ~tlon-youtube-generate-wavelength-video~ :: Generates a video with an animated wavelength from an audio file using ~seewav~. The resolution of the video is determined by the ~tlon-youtube-video-resolution~ user option. Prompts the user to select an audio file from the "uqbar-audio" repository. The output video is saved in the ~paths-dir-downloads~ directory with a ~.mp4~ extension, using the original audio file name. This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

#+findex: tlon-youtube-generate-thumbnail
+ ~tlon-youtube-generate-thumbnail~ :: Generates a thumbnail image for a video.
  The dimensions of the thumbnail are determined by the ~tlon-youtube-video-resolution~ user option.
  It prompts the user for a video title and author(s).
  The TlÃ¶n logo (from the "tlon.team-content" repository, specifically ~images/ea-logo-transparent.png~) is automatically trimmed, resized, and added to the thumbnail.
  The output image is saved as ~thumbnail.png~ in the ~paths-dir-downloads~ directory.
  This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

** YouTube API Integration
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-api
:END:

#+findex: tlon-youtube-upload-video
+ ~tlon-youtube-upload-video~ :: Uploads a video file to YouTube using the YouTube Data API v3. This command uses the ~curl~ command-line tool to perform the upload. Prompts the user to select a video file (filtered to show only ~.mp4~ files), enter a title and description, and choose a privacy setting ("private", "unlisted", or "public"). Requires ~tlon-youtube-client-id~ and ~tlon-youtube-client-secret~ to be configured, as well as a valid OAuth 2.0 access token (set via the ~YOUTUBE_ACCESS_TOKEN~ environment variable). This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

#+findex: tlon-youtube-upload-thumbnail
+ ~tlon-youtube-upload-thumbnail~ :: Uploads a thumbnail image to an existing YouTube video. Prompts the user to select a thumbnail file (filtered to show ~.png~, ~.jpg~, and ~.jpeg~ files) and enter the YouTube video ID. Requires the same authentication setup as ~tlon-youtube-upload-video~. This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

#+findex: tlon-youtube-authorize
+ ~tlon-youtube-authorize~ :: Starts the OAuth 2.0 authorization flow for the YouTube API. This opens a browser window for you to authorize the application and automatically obtains both access and refresh tokens. You only need to run this once - the refresh token will be used to automatically get new access tokens when they expire. This command can also be accessed via the [[h:tlon-youtube-menu][tlon-youtube-menu]].

*** Authentication Setup
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-auth
:END:

To use the YouTube API integration features, you need to set up OAuth 2.0 credentials in the Google Cloud Console.

1. Go to the [[https://console.cloud.google.com/][Google Cloud Console]]
2. Create a new project or select an existing one
3. Enable the *YouTube Data API v3* for your project
4. Go to "Credentials" and click "Create Credentials" -> "OAuth client ID"
5. Select the application type **Desktop app**. This is important, as other types like "Web application" will not work with this workflow and will cause a `redirect_uri_mismatch` error.
6. Give the client ID a name (e.g., "tlon-emacs-client") and click "Create"
7. A dialog will show your "Client ID" and "Client Secret". Copy these.
8. Set the values for ~tlon-youtube-client-id~ and ~tlon-youtube-client-secret~ in your Emacs configuration. It is recommended to use a secure method like `auth-source` to store these, rather than setting them directly in your `init.el`.

**** Getting Authorization
:PROPERTIES:
:CUSTOM_ID: h:tlon-youtube-authorization
:END:

Once your credentials are set up, you need to authorize the application to access your YouTube account.

**Simple workflow:**
1. Run ~M-x tlon-youtube-authorize~
2. This will open your browser to Google's authorization page
3. Sign in with the Google account you want to upload videos to and authorize the application
4. After authorization, Google will display a page with an authorization code. Copy this code.
5. Paste the authorization code into the Emacs prompt
6. The system will automatically exchange the code for an access token and a refresh token. The refresh token will be stored securely for future sessions.

**That's it!** The system will automatically use the refresh token to get new access tokens when they expire (typically every hour), so you should only need to authorize once.

**When you get a 401 error:** The system will automatically attempt to refresh your access token. If that fails (e.g., if the refresh token is revoked), you may need to re-authorize by running ~M-x tlon-youtube-authorize~ again.
