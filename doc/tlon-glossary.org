#+title: tlon - Glossary Management
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

* Glossary Management (=tlon-glossary.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary
:END:

This module provides functions for managing a multilingual glossary stored in a JSON file. It allows users to edit entries, add translations, and extract the glossary in different formats for various recipients (humans, DeepL editor, DeepL API).

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-config
:END:

*** Glossary Source File
:PROPERTIES:
:CUSTOM_ID: h:tlon-file-glossary-source
:END:
#+vindex: tlon-file-glossary-source
The constant ~tlon-file-glossary-source~ defines the path to the JSON file containing the master glossary data. By default, it points to =glossary.json= within the =babel-core= repository.

*** Glossary Recipients
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-recipients
:END:
#+vindex: tlon-glossary-recipients
The constant ~tlon-glossary-recipients~ is an alist defining the email addresses associated with specific target languages for sharing human-readable glossaries. Each entry is a plist with =:language= (language code string) and =:email= (email address string).

#+begin_src emacs-lisp
(defconst tlon-glossary-recipients
  '((:language "fr" :email "tlon-french@googlegroups.com")
    (:language "it" :email "tlon-italian@googlegroups.com")))
#+end_src

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-commands
:END:

This section details the interactive commands provided by =tlon-glossary.el=.

*** Edit Glossary Entry
:PROPERTIES:
:CUSTOM_ID: h:tlon-edit-glossary
:END:
#+findex: tlon-edit-glossary
The command ~tlon-edit-glossary~ provides an interactive way to create or update entries in the glossary file (~tlon-file-glossary-source~).

1. It parses the existing glossary using ~tlon-parse-glossary~.
2. It prompts the user to choose an existing English term (using completion) or add a new one.
3. If the term is new:
   - It prompts the user to select the term type (=variable= or =invariant=) using ~tlon-select-term-type~.
   - It creates a new entry structure using ~tlon-create-entry~. For invariant terms, it automatically adds entries for all target languages, using the English term as the initial translation.
4. If the term exists or is newly created and is not of type =invariant=:
   - It calls ~tlon-edit-translation-in-entry~ to prompt the user for a target language and the corresponding translation for the selected English term. It updates the entry with the new or modified translation.
5. It updates the main glossary data structure with the modified or new entry using ~tlon-update-glossary~.
6. It writes the updated glossary back to the JSON file using ~tlon-write-data~.

*** Extract Glossary
:PROPERTIES:
:CUSTOM_ID: h:tlon-extract-glossary
:END:
#+findex: tlon-extract-glossary
The command ~tlon-extract-glossary~ extracts a language-specific glossary from the main JSON file and saves it in a format suitable for a specified recipient.

1. It prompts the user to select the target =LANGUAGE= using ~tlon-select-language~.
2. It prompts the user to select the =RECIPIENT= type (=human=, =deepl-editor=, or =deepl-api=) using completion.
3. It determines the target file path and extension based on the language and recipient using ~tlon-glossary-target-path~.
4. It reads the source glossary JSON file.
5. It creates or opens the target file and inserts the formatted glossary content using ~tlon-insert-formatted-glossary~, filtering and formatting entries based on the recipient:
   - =human=: Includes only "variable" type entries, formatted as CSV (="Source","Target"=).
   - =deepl-editor=: Includes all entries, formatted as CSV (="Source","Target","EN","LANG"=).
   - =deepl-api=: Includes all entries, formatted as TSV (=Source\tTarget=).
6. It saves the target file.
7. If the recipient is =human=, it asks the user if they want to share the extracted glossary via email using ~tlon-share-glossary~.
8. For other recipients, it messages the path to the extracted file.

*** Share Glossary
:PROPERTIES:
:CUSTOM_ID: h:tlon-share-glossary
:END:
#+findex: tlon-share-glossary
The command ~tlon-share-glossary~ sends an extracted glossary file as an email attachment to the designated translators for a specific language.

1. It prompts the user to select the glossary =ATTACHMENT= file (defaulting to the downloads directory).
2. It prompts the user to select the =LANGUAGE= of the glossary (unless provided as an argument).
3. It looks up the recipient email address for the language in ~tlon-glossary-recipients~ using ~tlon-lookup~.
4. It looks up the full language name (e.g., "French") using ~tlon-lookup~ on ~tlon-languages-properties~ and sets the ~tlon-email-language~ variable.
5. It calls ~tlon-email-send~ with the ="share-glossary.org"= template, the recipient email, and the attachment path.

*** Glossary Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-menu
:END:
#+findex: tlon-glossary-menu
The command ~tlon-glossary-menu~ activates a =transient= menu interface providing quick access to the main glossary functions:
+ =e= :: Edit glossary entry (~tlon-edit-glossary~)
+ =x= :: Extract glossary (~tlon-extract-glossary~)
+ =s= :: Share glossary (~tlon-share-glossary~)
+ =a= :: AI Create Language (~tlon-ai-create-glossary-language~)

*** AI Glossary Generation
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-create-glossary-language
:END:
#+findex: tlon-ai-create-glossary-language
The command ~tlon-ai-create-glossary-language~ uses an AI model to generate translations for *missing* terms for a specified target language in the glossary. This command can be run iteratively to gradually complete a language's glossary.

1. It prompts the user to select the target language code (e.g., "de") using ~tlon-select-language~.
2. It reads the current glossary data from ~tlon-file-glossary-source~.
3. It filters the glossary to find entries that *do not* have a translation for the selected target language.
4. It extracts the English terms (=en= value) from these missing entries.
5. If no terms are missing for the target language, it informs the user and exits.
6. It formats a prompt (~tlon-ai-create-glossary-language-prompt~) instructing the first AI (model defined by ~tlon-ai-glossary-model~) to generate translations for the provided list of English terms into the target language. The prompt asks the AI to return *only* the plain text translations, one per line.
7. It sends the request (containing the missing English terms as a newline-separated plain text list) to the first AI using ~tlon-make-gptel-request~.
8. The first callback function (~tlon-ai-create-glossary-language-callback~) receives the raw response from the first AI.
9. It saves this raw response to a temporary file in the downloads directory (e.g., =ai-glossary-fr-raw-temp.txt=).
10. This callback then formats a *second* prompt (~tlon-ai-verify-glossary-translations-prompt~) instructing a second AI (model defined by ~tlon-ai-glossary-verify-model~) to clean and verify the raw response. This prompt asks the AI to ensure the output is a plain text list with exactly the expected number of lines, removing any extraneous text or formatting and using placeholders if necessary.
11. It sends the verification request to the second AI.
12. The second callback function (~tlon-ai-process-verified-translations-callback~) handles the response from the verification AI:
    - It cleans the verified response (removes potential markdown fences).
    - It splits the cleaned response string into a list of translation strings using newlines as delimiters (=received-translations=).
    - It checks if the number of translation lines received matches the number of English terms originally sent (=missing-en-terms=). If not, it issues a warning message but *continues processing*.
    - It reconstructs the list of pairs by combining the original =missing-en-terms= list with the verified =received-translations=, processing only up to the minimum of the number expected and the number received. *Crucially, it skips any translation that is exactly the string =\"[TRANSLATION_UNAVAILABLE]\"=.*
    - It iterates through the reconstructed (and filtered) =["en_term", "translation"]= pairs:
      - It finds the corresponding entry in the *full* glossary data where the English term matches =en_term=.
      - If found, it adds the new language key-value pair (e.g., =("de" . "translation")=) to that entry (or updates it if it somehow already existed).
    - It writes the *entire updated glossary data structure* back to ~tlon-file-glossary-source~ using ~tlon-write-data~.
    - It reports the number of *non-placeholder* translations successfully merged.
    - *On success*, it deletes the temporary raw response file saved earlier.
    - If any step fails (AI error in either step, invalid format in verified response), it reports an error, logs the relevant AI response, and *leaves the temporary raw response file* in the downloads directory for inspection.

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** Glossary Data Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-data
:END:

#+findex: tlon-parse-glossary
+ ~tlon-parse-glossary~ :: Reads and parses the JSON glossary file specified by ~tlon-file-glossary-source~ into an Emacs Lisp alist using ~tlon-read-json~.

#+findex: tlon-get-english-terms
+ ~tlon-get-english-terms~ :: Extracts a list of all English terms (the =en= value) from the parsed glossary alist. Used for completion in ~tlon-edit-glossary~.

#+findex: tlon-find-entry-by-term
+ ~tlon-find-entry-by-term~ :: Searches the parsed glossary alist for an entry whose English term (=en= value) matches the given =TERM=. Returns the matching entry alist or nil.

#+findex: tlon-select-term-type
+ ~tlon-select-term-type~ :: Prompts the user with completion to select a term type (=variable= or =invariant=) and returns the selected string.

#+findex: tlon-create-entry
+ ~tlon-create-entry~ :: Creates a new glossary entry alist for a given English =TERM= and =TYPE=. If the type is =invariant=, it pre-populates translations for all ~tlon-project-target-languages~ with the English term itself.

#+findex: tlon-edit-translation-in-entry
+ ~tlon-edit-translation-in-entry~ :: Interactively prompts the user to select a target language and provide or update the translation for the given English =TERM= within the provided =ENTRY= alist. Returns the modified entry.

#+findex: tlon-update-glossary
+ ~tlon-update-glossary~ :: Takes the main glossary alist, a potentially modified =ENTRY=, and the corresponding English =TERM=. If an entry for =TERM= already exists in the glossary, it replaces it with =ENTRY=. If not, it appends =ENTRY= to the glossary. Returns the updated glossary alist.

*** Glossary Extraction Formatting
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-extraction
:END:

#+findex: tlon-glossary-target-path
+ ~tlon-glossary-target-path~ :: Determines the full output file path for an extracted glossary based on the target =LANGUAGE= and =RECIPIENT=. It sets the file extension to =.csv= for =human= and =deepl-editor=, and =.tsv= for =deepl-api=. Uses ~tlon-glossary-make-file~ internally.

#+findex: tlon-glossary-make-file
+ ~tlon-glossary-make-file~ :: Constructs the filename (e.g., =EN-FR.csv=) and combines it with the user's download directory path (~paths-dir-downloads~).

#+findex: tlon-insert-formatted-glossary
+ ~tlon-insert-formatted-glossary~ :: Iterates through the parsed =JSON= glossary data. For each entry, it extracts the source (=en=) and target (=language=) terms. Based on the =RECIPIENT=, it formats the entry as CSV or TSV and inserts it into the current buffer. For =human= recipients, it only includes entries of type =variable=.

*** Git Integration (Currently Unused/TODO)
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-git
:END:

#+findex: tlon-glossary-prompt-for-explanation
+ ~tlon-glossary-prompt-for-explanation~ :: (TODO) Prompts the user for an optional explanation of a glossary change, intended for commit messages.

#+findex: tlon-glossary-commit
+ ~tlon-glossary-commit~ :: (TODO) Intended to handle the Git workflow for glossary changes: pulling, staging the glossary file, committing with a formatted message (including action, term, and optional explanation), and pushing. Requires =magit= functions. Currently marked as unused and needing fixes.
