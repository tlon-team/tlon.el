#+title: tlon - Meeting Management
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

* Meeting Management (=tlon-meet.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet
:END:

This module provides tools for managing meetings within the Tl√∂n workflow. It focuses on creating and accessing dedicated Forge issues for meetings (both individual and group), linking discussions to these issues, processing meeting recordings (transcription, formatting, cleanup, summarization), and optionally monitoring recording directories for automatic processing.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-dependencies
:END:

+ =org=
+ =tlon-forg=
+ =tlon-ai=
+ =transient=
+ An external diarization script (configurable via ~tlon-meet-whisperx-file~).

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-options
:END:

#+vindex: tlon-meet-cleanup-transcript-prompt
+ ~tlon-meet-cleanup-transcript-prompt~ :: The prompt template used for asking the AI to clean up potential errors in a formatted transcript. It should contain =%s= which will be replaced by the transcript text.

#+vindex: tlon-meet-summarize-transcript-prompt
+ ~tlon-meet-summarize-transcript-prompt~ :: The prompt template used for generating AI summaries of meeting transcripts. It should contain =%s= which will be replaced by the transcript text. The AI is instructed to start the output with `** Meeting summary`.
 
#+vindex: tlon-meet-recordings-directory
+ ~tlon-meet-recordings-directory~ :: The directory where Google Meet recordings are typically stored (default: =~/My Drive/Meet Recordings/=).

#+vindex: tlon-zoom-recordings-directory
+ ~tlon-zoom-recordings-directory~ :: The directory where Zoom recordings are typically stored (default: =~/Documents/Zoom/=).

#+vindex: tlon-default-conference-app
+ ~tlon-default-conference-app~ :: The default conferencing application, used to determine the default directory when searching for recordings (choice between =meet= or =zoom=, default: =meet=).

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-commands
:END:

This section details the interactive commands provided by =tlon-meet.el=.

*** Create or Visit Meeting Issues
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-issue-commands
:END:

#+findex: tlon-create-or-visit-meeting-issue
+ ~tlon-create-or-visit-meeting-issue~ :: The main entry point for accessing meeting issues. Prompts the user to select another participant (using completion from ~tlon-user-lookup-all~) or "group". If a person is selected, it calls ~tlon-create-or-visit-individual-meeting-issue~. If "group" is selected, it calls ~tlon-create-or-visit-group-meeting-issue~.

#+findex: tlon-create-or-visit-individual-meeting-issue
+ ~tlon-create-or-visit-individual-meeting-issue~ :: Creates or visits the Forge issue for a 1-on-1 meeting with a specific =PERSON=. Prompts for the =PERSON= if not provided. Prompts for the =DATE= using =org-read-date=. Determines the correct meeting repository using ~tlon-get-meeting-repo~ and then calls ~tlon-create-or-visit-meeting-issue-date~.

#+findex: tlon-create-or-visit-group-meeting-issue
+ ~tlon-create-or-visit-group-meeting-issue~ :: Creates or visits the Forge issue for a group meeting. Prompts for the =DATE= using =org-read-date=. Uses the repository designated as =meetings-group= (via ~tlon-repo-lookup~) and calls ~tlon-create-or-visit-meeting-issue-date~.

#+findex: tlon-create-or-visit-meeting-issue-leo-pablo
+ ~tlon-create-or-visit-meeting-issue-leo-pablo~ :: Convenience command specifically for Leo-Pablo meetings. Determines the other participant based on =user-full-name= and calls ~tlon-create-or-visit-individual-meeting-issue~ with the appropriate person and date (prompting if not provided).

#+findex: tlon-create-or-visit-meeting-issue-fede-pablo
+ ~tlon-create-or-visit-meeting-issue-fede-pablo~ :: Convenience command specifically for Fede-Pablo meetings. Similar logic to the Leo-Pablo version.

#+findex: tlon-create-or-visit-meeting-issue-fede-leo
+ ~tlon-create-or-visit-meeting-issue-fede-leo~ :: Convenience command specifically for Fede-Leo meetings. Similar logic to the Leo-Pablo version.

*** Linking Issues for Discussion
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-discuss-commands
:END:

#+findex: tlon-discuss-issue-in-meeting
+ ~tlon-discuss-issue-in-meeting~ :: Creates cross-references between the current Forge issue buffer and the relevant meeting issue buffer.
  1. Ensures the command is run from a =forge-issue-mode= buffer.
  2. Gets the link to the current issue.
  3. Switches to the appropriate meeting issue buffer (determined by participants, prompting if necessary via ~tlon-create-or-visit-meeting-issue~).
  4. Gets the link to the meeting issue.
  5. Enters edit mode for the last post in the meeting issue and inserts a line like "- Discutir [link-to-original-issue]."
  6. Submits the post.
  7. Switches back to the original issue buffer.
  8. Creates a new post and inserts "A discutir en [link-to-meeting-issue]."
  9. Submits the post.

*** Recording Processing
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-recording-commands
:END:

#+findex: tlon-meet-transcribe-audio
+ ~tlon-meet-transcribe-audio~ :: Transcribes an =AUDIO-FILE= (audio or video) using =whisperx= with diarization and then formats the transcript using AI.
  1. Prompts the user to select an =AUDIO-FILE= (audio or video), defaulting to the directory specified by ~tlon-default-conference-app~ (~tlon-meet-recordings-directory~ or ~tlon-zoom-recordings-directory~) and filtering for common audio/video extensions.
  2. Prompts the user for the meeting =PARTICIPANTS= (nicknames).
  3. Creates and displays a "*Diarization Output*" buffer.
  4. Runs the =whisperx= command asynchronously on the =AUDIO-FILE= (audio or video) with the following arguments:
     - =--diarize= (enables speaker diarization)
     - =--language es= (sets the language to Spanish)
     - =--hf_token [YOUR_TOKEN]= (uses a Hugging Face token retrieved via =auth-source=)
     - =--output_dir .= (ensures output goes to the audio file's directory)
  5. *Participant Handling*: Interactively, it prompts for participants using ~tlon-meet--get-file-and-participants~, which attempts to infer participants from the filename (e.g., "Leo<>Pablo - YYYY MM DD...") and uses them as the initial suggestion in the prompt. The confirmed list of participants is then used for formatting.
  6. When the =whisperx= command finishes successfully, it checks for the existence of the transcript file (expected name: =[audio-filename-sans-extension].txt= in the same directory as the audio file).
  7. If the transcript exists, it deletes other generated files (=.vtt=, =.srt=, =.tsv=, =.json=) and then calls ~tlon-meet-format-transcript~ using the provided participant list. This function:
     a. Generates an initial formatted Markdown file (=.md=) using the AI and participant context.
     b. Deletes the original =.txt= file.
     c. Calls ~tlon-meet-cleanup-transcript~ to ask the AI to correct errors in the =.md= file, overwriting it with the cleaned version.
     d. If a callback function was provided (e.g., by ~tlon-meet-transcribe-and-summarize~), it is called *after* the cleanup step with the path to the final, cleaned =.md= file.
  7. If the =whisperx= command fails or the initial =.txt= transcript doesn't exist, it reports an error in the output buffer. Errors during formatting or cleanup are reported via messages. The callback (if provided) might still be called in case of cleanup errors, passing the path to the uncleaned =.md= file.

  *Note:* This command relies on the external =whisperx= command-line tool and its dependencies being installed and available in the system's PATH. It also requires a Hugging Face token with access to the necessary models (like =pyannote/speaker-diarization=). The token is retrieved using Emacs' =auth-source=. If you encounter errors:
    - Check the "*Diarization Output*" buffer for detailed error messages from =whisperx=.
    - Try running the =whisperx= command manually from your terminal using the command logged in the output buffer (e.g., =whisperx /path/to/audio.m4a --diarize --language es --hf_token ...=).
    - Ensure =whisperx= and its dependencies (PyTorch, etc.) are correctly installed in your Python environment.
    - Verify your Hugging Face token is valid and has the required permissions.
    - Consult the =whisperx= documentation for troubleshooting.

#+findex: tlon-meet-summarize-transcript
+ ~tlon-meet-summarize-transcript~ :: Generates an AI summary for a *formatted and cleaned* Markdown transcript file (=.md=) and saves results to the appropriate meeting repository.
  1. Prompts the user to select a =.md= transcript file.
  2. *Participant/Repo Handling*:
     - Interactively, it attempts to infer participants from the filename using ~tlon-meet--infer-details-from-filename~. It then prompts the user to confirm/correct these participants, using the inferred list as the default.
     - If participants are successfully determined (either interactively or passed non-interactively), it uses them to find the correct meeting repository (~tlon-get-meeting-repo~ or the group repo).
     - If participants cannot be determined or the user clears the selection, it falls back to prompting the user to manually select the target meeting repository.
  3. Extracts the date (using inference first, then fallback).
  4. Creates and displays a "*Meeting Summary Output*" buffer.
  5. Reads the =.md= transcript content.
  6. Sends the content to the AI using ~tlon-meet-summarize-transcript-prompt~.
  7. On success, calls ~tlon-meet--save-summary-and-transcript~ which:
     - Saves the summary to =meeting-summaries.org= in the determined repository.
     - Copies the =.md= transcript to =transcripts/YYYY-MM-DD.md= in the repository.
     - Commits and pushes both files.
     - *Deletes the original input =.md= transcript file* from its source location.
  8. Reports progress and errors in the output buffer.

#+findex: tlon-meet-transcribe-and-summarize
+ ~tlon-meet-transcribe-and-summarize~ :: The main command to process a new audio/video recording from start to finish. Can be called interactively or non-interactively (e.g., by the file monitor).
  1. Takes =AUDIO-FILE= (audio or video) and =PARTICIPANTS= as arguments.
  2. Interactively, prompts for the =AUDIO-FILE= (filtering for audio/video types) and =PARTICIPANTS= using ~tlon-meet--get-file-and-participants~, which attempts inference from the filename for the participant prompt.
  3. Calls ~tlon-meet-transcribe-audio~ with the file and participants. This performs transcription (whisperx), AI formatting, and AI cleanup.
  4. Sets up a callback function that, once the cleaned =.md= transcript is ready (passed via the callback from ~tlon-meet-transcribe-audio~), automatically calls ~tlon-meet-summarize-transcript~ non-interactively with the cleaned transcript path and the original participant list to generate the summary and save everything to the appropriate repository (including deleting the source =.md= file).

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-menu-cmd
:END:
#+findex: tlon-meet-menu
The command ~tlon-meet-menu~ activates a =transient= menu interface for meeting-related operations.

It provides the following groups and commands:
+ *Meetings*:
  + =l p= :: Leo-Pablo meeting (~tlon-create-or-visit-meeting-issue-leo-pablo~)
  + =f p= :: Fede-Pablo meeting (~tlon-create-or-visit-meeting-issue-fede-pablo~)
  + =f l= :: Fede-Leo meeting (~tlon-create-or-visit-meeting-issue-fede-leo~)
  + =g= :: Group meeting (~tlon-create-or-visit-group-meeting-issue~)]
   ["Processing"
    ("i"   "discuss issue in meeting"   tlon-discuss-issue-in-meeting)
    ("t"   "transcribe audio"           tlon-meet-transcribe-audio)
    ;; ("f"   "format transcript"          tlon-meet-format-transcript-command) ; Removed
    ;; ("c"   "cleanup transcript"         tlon-meet-cleanup-transcript-command) ; Removed
    ("s"   "summarize transcript"       tlon-meet-summarize-transcript)
    ("a"   "transcribe & summarize"     tlon-meet-transcribe-and-summarize)]

** Org Mode Integration
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-org-integration
:END:

#+findex: tlon-set-meeting-buffers
+ ~tlon-set-meeting-buffers~ :: This function is designed to be used as advice or a hook, typically triggered when opening a link from an Org agenda heading. It parses the heading text to identify the meeting type (e.g., "Leo<>Pablo", "Group meeting") and calls the corresponding ~tlon-create-or-visit-...~ command for the current date. It also calls =org-open-at-point= to follow the original link (e.g., Zoom/Meet URL).

#+findex: tlon-goto-meeting-when-clocking-in
+ ~tlon-goto-meeting-when-clocking-in~ :: A hook function intended for =org-clock-in-hook=. When clocking into a task in Org mode, it calls ~tlon-set-meeting-buffers~ to automatically open the relevant meeting issue alongside any meeting link.

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-internals
:END:

This section lists non-interactive functions used internally or potentially useful for advanced customization.

*** Issue Handling Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-issue-helpers
:END:

#+findex: tlon-create-or-visit-meeting-issue-date
+ ~tlon-create-or-visit-meeting-issue-date~ :: The core logic for finding or creating a meeting issue. Takes a =DATE= string and the target repository =DIR=. It waits for Forge updates (~tlon-wait-until-forge-updates~), looks up an existing issue matching the date (~tlon-issue-lookup~), and either visits it (~forge-visit-issue~) or creates a new one (~tlon-create-and-visit-issue~).

#+findex: tlon-wait-until-forge-updates
+ ~tlon-wait-until-forge-updates~ :: Pulls changes using =forge-pull= and waits (with a timeout) until the repository's =updated= timestamp changes, ensuring local data is synchronized before proceeding.

#+findex: tlon-create-and-visit-issue
+ ~tlon-create-and-visit-issue~ :: Creates a new Forge issue with the given =TITLE= in the specified =DIR= using ~tlon-create-issue~, pulls changes, waits for the issue to appear locally, and then visits it.

*** Transcript Processing Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-transcript-helpers
:END:

#+findex: tlon-meet--get-audio-file
+ ~tlon-meet--get-audio-file~ :: Prompts the user to select an audio or video file, defaulting to the directory configured via ~tlon-default-conference-app~. Does not filter by extension.

#+findex: tlon-meet--get-transcript-file
+ ~tlon-meet--get-transcript-file~ :: Prompts the user to select a transcript file (used interactively by ~tlon-meet-summarize-transcript~), defaulting to =.md= extension.

#+findex: tlon-meet--get-date-from-filename
+ ~tlon-meet--get-date-from-filename~ :: Extracts a YYYY-MM-DD date from a filename string or returns the current date.

#+findex: tlon-meet-format-transcript
+ ~tlon-meet-format-transcript~ :: Internal function called by ~tlon-meet-transcribe-audio~. Takes a raw transcript file (=.txt=) and participants, calls the AI formatter, saves the result to a =.md= file, deletes the original =.txt= file, then calls ~tlon-meet-cleanup-transcript~. If an optional =CALLBACK= function is provided, it is passed along to ~tlon-meet-cleanup-transcript~ and will be called *after* the cleanup step with the path to the final (cleaned or uncleaned) =.md= file.

#+findex: tlon-meet--generate-and-save-formatted-transcript-md
+ ~tlon-meet--generate-and-save-formatted-transcript-md~ :: Helper for ~tlon-meet-format-transcript~. Reads the =.txt= file, calls the AI formatter, saves the initial =.md= file, deletes the =.txt= file, and then calls ~tlon-meet-cleanup-transcript~, passing the original callback along.

#+findex: tlon-meet-cleanup-transcript
+ ~tlon-meet-cleanup-transcript~ :: Internal function called after formatting. Takes a formatted transcript file (=.md=), calls the AI cleanup prompt, overwrites the =.md= file with the cleaned result. If an optional =CALLBACK= function is provided, it is called with a single argument: the path to the (now potentially cleaned) =.md= file. The callback is also called if the AI cleanup fails, passing the path to the uncleaned file.

#+findex: tlon-meet--generate-and-save-summary
+ ~tlon-meet--generate-and-save-summary~ :: Helper for ~tlon-meet-summarize-transcript~. Reads the formatted =.md= transcript, calls the AI summarizer, and passes the result and necessary info to ~tlon-meet--save-summary-and-transcript~.

#+findex: tlon-meet--save-summary-and-transcript
+ ~tlon-meet--save-summary-and-transcript~ :: Saves the generated AI =SUMMARY= to =meeting-summaries.org=, copies the input formatted transcript (=INPUT-TRANSCRIPT-FILE=, which is a =.md= file) to =transcripts/[date].md= within the specified =REPO=, commits and pushes the changes, and *then deletes the original* =INPUT-TRANSCRIPT-FILE=. It handles file creation/appending, directory creation, git staging, committing, and pushing. Updates the =OUTPUT-BUFFER= with progress.
 
#+findex: tlon-meet--infer-details-from-filename
+ ~tlon-meet--infer-details-from-filename~ :: Attempts to parse a filename (e.g., "Leo<>Pablo - 2025 04 25 ...") to extract participant names and the date. Looks up nicknames based on names found. Returns a plist like =(:participants ("leo" "pablo") :date "2025-04-25")= or =nil=.

#+findex: tlon-meet--get-file-and-participants
+ ~tlon-meet--get-file-and-participants~ :: Interactive helper used by commands like ~tlon-meet-transcribe-audio~ and ~tlon-meet-transcribe-and-summarize~. Prompts for the audio/video file (using ~tlon-meet--get-audio-file~ which does *not* filter extensions), then attempts to infer participants using ~tlon-meet--infer-details-from-filename~. It then prompts the user to confirm/edit the participants, using the inferred list as the initial input. Returns a list containing the selected file path and the confirmed list of participant nicknames.

*** Repository and User Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-repo-user-helpers
:END:

#+findex: tlon-prompt-for-all-other-users
+ ~tlon-prompt-for-all-other-users~ :: Prompts the user to select a person using completion. The candidates are all users defined in ~tlon-users~ except for the current user (=user-full-name=). If the optional =GROUP= argument is non-nil, "group" is added as a candidate.

#+findex: tlon-get-meeting-repo
+ ~tlon-get-meeting-repo~ :: Finds the directory (:dir) of the meeting repository shared by =PARTICIPANT1= and =PARTICIPANT2=. It iterates through ~tlon-repos~, looking for a repo with =subtype= 'meetings that includes both participants in its =:participants= list.

** File Monitoring
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-monitoring
:END:

This module includes functionality to monitor a directory for new meeting recordings and automatically trigger the transcription and summarization process.

#+findex: tlon-meet-watch-recordings
+ ~tlon-meet-watch-recordings~ :: Internal function that starts monitoring the directory specified by ~tlon-meet-recordings-directory~ or ~tlon-zoom-recordings-directory~ (based on ~tlon-default-conference-app~). It is automatically invoked when the package loads on Pablo's machine (=system-name= \"Pablos-MacBook-Pro.local\"). Uses Emacs' file notification system (`file-notify-add-watch`) with the =created= flag. When a file creation event occurs, it calls ~tlon-meet--handle-new-recording~.

#+findex: tlon-meet-unwatch-recordings
+ ~tlon-meet-unwatch-recordings~ :: Internal function that stops the file monitoring started by ~tlon-meet-watch-recordings~ using `file-notify-rm-watch`.

#+findex: tlon-meet--handle-new-recording
+ ~tlon-meet--handle-new-recording~ :: The internal callback function triggered by file creation notifications (from `file-notify-add-watch` using the =created= flag). It receives an =EVENT= list of the form =(DESCRIPTOR ACTION FILE [FILE1])=. It checks if =ACTION= is =created=, if =FILE= is not nil, and crucially, if =FILE= *has no file extension* (using =null (file-name-extension FILE)=). If all these conditions are true, it attempts to infer participants and date from =FILE= using ~tlon-meet--infer-details-from-filename~. If successful, it calls ~tlon-meet-transcribe-and-summarize~ non-interactively with =FILE= and inferred participants after a short idle delay (to help ensure the file is fully written). If inference fails, it logs a message indicating manual processing is needed. This check prevents the callback from triggering on intermediate =.txt= or =.md= files created during processing.

#+vindex: tlon-meet--recording-watch-descriptor
+ ~tlon-meet--recording-watch-descriptor~ :: Internal variable holding the descriptor returned by `file-notify-add-watch`, used by the watch/unwatch functions.
