#+title: tlon - Word Counting and Statistics
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying
* Word Counting and Statistics (=tlon-count.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-count
:END:

This module provides functionality for counting words in files, directories, and repositories, as well as counting occurrences of BibTeX keys. It includes features for generating reports, exporting data to Google Drive, and calculating historical word counts (requires external tools).

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-dependencies
:END:

+ =tlon-md=
+ =tlon-yaml=
+ =dired=, =dired-x= (for file selection and interaction)
+ =transient= (for the menu)
+ =gdrive= (external CLI tool, for Google Drive export)
+ =gdu= (external CLI tool, for historic word count)
+ =gnuplot= (external CLI tool, for historic word count)

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-config
:END:

#+vindex: tlon-count-gdrive-directory-ids
+ ~tlon-count-gdrive-directory-ids~ :: An alist mapping language codes (e.g., "en", "es") to their corresponding Google Drive folder IDs. Used by ~tlon-count-export-to-google-drive~ to determine the upload destination.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-commands
:END:

This section details the interactive commands provided by =tlon-count.el=.

*** Word Counting
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-word-counting-cmds
:END:

These commands calculate the number of "substantive" words (total words minus words in YAML front matter and local variables sections) in specified locations. They share common optional arguments:

+ =FORMAT= :: Determines the output format:
  + =list= :: Returns a list of cons cells =((COUNT . FILENAME) ...)=.
  + =count= :: Returns the total word count as a number.
  + =summary= (or any other value/nil) :: Displays a message like "%s words in %s files." and copies the total count to the kill ring.
+ =REGEXP= :: A regular expression (string) to filter filenames. If nil, defaults to matching Markdown files (=\\.md$=).

#+findex: tlon-count-words-in-repo
+ ~tlon-count-words-in-repo~ :: Counts words in files matching =REGEXP= within a specified Tlön repository. Prompts for the =REPO-NAME= (completing from translation repositories) if not provided. Uses ~tlon-repo-lookup~ to find the directory and then calls ~tlon-count-words-in-dir~ recursively.

#+findex: tlon-count-words-in-dir
+ ~tlon-count-words-in-dir~ :: Counts words in files matching =REGEXP= within a specified directory =DIR=. If =DIR= is nil, tries to use the directory at point; otherwise, prompts for one. If the optional =RECURSIVELY= argument is non-nil, it searches subdirectories as well. Calls ~tlon-count-words-in-files~ with the collected file list.

#+findex: tlon-count-words-in-files
+ ~tlon-count-words-in-files~ :: Counts words in a list of =FILES=. If =FILES= is nil, it attempts to use the files marked in the current Dired buffer (~dired-get-marked-files~). It iterates through each file, calculates the substantive word count using ~tlon-count-substantive-words~, and returns the result based on the =FORMAT= argument.

*** Org Table Generation and Export
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-table-export-cmds
:END:

#+findex: tlon-count-create-table-for-dir
+ ~tlon-count-create-table-for-dir~ :: Creates an Org mode table summarizing word counts for Markdown files in a directory =DIR=.
  1. Prompts for =DIR= (defaulting to the directory at point in Dired).
  2. Calls ~tlon-count-words-in-dir~ with =FORMAT= 'list to get the data.
  3. Determines the output Org file path using ~tlon-count-get-table-output-path~ (typically in the =stats/= subdirectory of the =babel= repo).
  4. Inserts the data into a new buffer as an Org table using ~tlon-count-insert-table-from-list~ and saves it to the destination file.
  5. Exports the Org table to a TSV file using ~tlon-count-export-org-table~.
  6. Exports the generated TSV file to the appropriate Google Drive folder using ~tlon-count-export-to-google-drive~.

#+findex: tlon-count-export-org-table
+ ~tlon-count-export-org-table~ :: Exports the first Org table found in =FILE= (or the current buffer's file) to a TSV file. The destination TSV file path is derived from the source Org file path using ~tlon-count-get-tsv-file~. Uses =org-table-export= with the "orgtbl-to-tsv" format.

#+findex: tlon-count-export-to-google-drive
+ ~tlon-count-export-to-google-drive~ :: Exports a local =FILE= (typically a TSV generated by ~tlon-count-export-org-table~) to Google Drive.
  1. Determines the target language from the filename using ~tlon-get-language-in-file~.
  2. Looks up the corresponding Google Drive folder ID in ~tlon-count-gdrive-directory-ids~.
  3. Uses the external =gdrive= command-line tool to upload the file to the specified parent folder ID.
  4. Opens the target Google Drive folder in the browser using =browse-url=.

*** BibTeX Key Counting
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-bibtex-cmds
:END:

#+findex: tlon-count-bibtex-keys-in-dir
+ ~tlon-count-bibtex-keys-in-dir~ :: Counts the occurrences of each BibTeX key (within =<Cite ...>= tags) across all non-hidden files in a directory =DIR=.
  1. Prompts for =DIR= if not provided.
  2. If the optional prefix argument =RECURSIVE= is non-nil, includes files in subdirectories.
  3. Gets the list of files using ~tlon-get-files-in-dir~.
  4. Defines the pattern for BibTeX keys using ~tlon-md-get-tag-pattern "Cite"~.
  5. Iterates through each file, extracting key counts into a hash table using ~tlon-extract-bibkeys-from-file~.
  6. Merges the counts from each file into a total count hash table using ~tlon-merge-key-counts~.
  7. Sorts the keys by count (descending) using ~tlon-sort-key-counts~.
  8. Displays the sorted counts in a dedicated buffer ("/BibTeX Key Counts/") using ~tlon-display-key-counts~.

*** Historic Word Count
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-historic-cmds
:END:

#+findex: tlon-historic-word-count
+ ~tlon-historic-word-count~ :: Computes and potentially visualizes the historic word count for a repository over a specified number of past days. *Requires the external tools =gdu= and =gnuplot= to be installed.*
  1. Prompts for =REPO-NAME= (completing from translation repositories).
  2. Prompts for the number of =DAYS= into the past.
  3. Prompts for the average characters per word (=CHARS-PER-WORD=, default 5.5).
  4. Executes an external shell script (=count/historic-word-count= located in the =babel= repo) which uses =gdu= to get directory sizes over time and potentially =gnuplot= to visualize the estimated word count (size / chars-per-word).
  5. Displays the script's output in the "*Directory Size*" buffer.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-menu-cmd
:END:
#+findex: tlon-count-menu
The command ~tlon-count-menu~ activates a =transient= menu interface for counting operations.

It provides the following groups and commands:
+ *Count words*:
  + =w f= :: in file(s) (~tlon-count-words-in-files~)
  + =w d= :: in dir (~tlon-count-words-in-dir~)
  + =w r= :: in repo (~tlon-count-words-in-repo~)
  + =w t= :: Create table for dir (~tlon-count-create-table-for-dir~)
+ *Count BibTeX keys*:
  + =k d= :: in dir (~tlon-count-bibtex-keys-in-dir~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-internals
:END:

This section lists non-interactive functions used internally or potentially useful for advanced customization.

*** Word Count Filtering
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-filtering-internals
:END:

#+findex: tlon-count-substantive-words
+ ~tlon-count-substantive-words~ :: Calculates the number of "substantive" words in the current buffer. It does this by taking the total word count (=count-words=) and subtracting the count of "extraneous" words calculated by ~tlon-count-extraneous-words~.

#+findex: tlon-count-extraneous-words
+ ~tlon-count-extraneous-words~ :: Calculates the number of "extraneous" words in the current buffer. These are defined as words within the YAML front matter section (retrieved via ~tlon-yaml-get-metadata~) and the local variables section (retrieved via ~tlon-md-get-local-variables~).

*** Org Table and Export Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-table-export-internals
:END:

#+findex: tlon-count-insert-table-from-list
+ ~tlon-count-insert-table-from-list~ :: Takes a =LIST= of cons cells =((COUNT . FILENAME) ...)= and inserts it as an Org mode table into a new buffer ("*Tlön stats*"). If =DESTINATION= file path is provided, saves the buffer to that file.

#+findex: tlon-count-get-table-output-path
+ ~tlon-count-get-table-output-path~ :: Constructs the full path for the output Org table file based on the input directory =DIR=. The target directory is =stats/= within the =babel= repository, and the filename is derived from the base name of =DIR= with an =.org= extension.

#+findex: tlon-count-get-tsv-file
+ ~tlon-count-get-tsv-file~ :: Constructs the full path for the output TSV file based on the input Org =FILE= path. The TSV file is placed in the same directory as the Org file, with the same base name but a =.tsv= extension.

*** BibTeX Key Counting Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-bibtex-internals
:END:

#+findex: tlon-get-files-in-dir
+ ~tlon-get-files-in-dir~ :: Returns a list of all non-hidden files in =DIR=. If =RECURSIVE= is non-nil, includes files in subdirectories. Excludes directories themselves from the list.

#+findex: tlon-extract-bibkeys-from-file
+ ~tlon-extract-bibkeys-from-file~ :: Reads a =FILE=, searches for occurrences matching the =BIBKEY-PATTERN= (regex for =<Cite ...>=), extracts the BibTeX key (match group 3), and returns a hash table mapping keys to their counts within that file.

#+findex: tlon-merge-key-counts
+ ~tlon-merge-key-counts~ :: Merges the key counts from =HASH-TABLE2= into =HASH-TABLE1=. If a key exists in both, their counts are added. Modifies and returns =HASH-TABLE1=.

#+findex: tlon-sort-key-counts
+ ~tlon-sort-key-counts~ :: Converts a =KEY-COUNTS= hash table into a list of cons cells =((KEY . COUNT) ...)= and sorts it in descending order based on the count (CDR).

#+findex: tlon-display-key-counts
+ ~tlon-display-key-counts~ :: Takes a =SORTED-KEYS= list (as returned by ~tlon-sort-key-counts~) and displays it in a formatted way (count followed by key) in the dedicated "/BibTeX Key Counts/" buffer.


