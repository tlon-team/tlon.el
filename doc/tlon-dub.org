#+title: tlon - Dubbing
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying
* Dubbing (=tlon-dub.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub
:END:

This module provides functionality to interact with the ElevenLabs Dubbing API, allowing users to dub audio or video files into different languages.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-dependencies
:END:

+ =tlon-core=
+ =tlon-tts= (for API key retrieval and language selection)
+ =tlon-ai= (for AI model interaction and common AI utilities)
+ =json= (for parsing API responses)
+ =threads= (for the =cond->= macro)
+ =transient= (for the menu system)
+ =gptel=, =gptel-core= (for AI model selection infrastructure)
+ External tools: =curl= (for API requests), =whisperx= (for local transcription).

** Standard Workflow
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-workflow
:END:

This workflow presupposes that we already have (1) the original audio and video files, (2) a human-edited transcript and (3) a translation into the target language made from that transcript.

1. Generate a new transcript with =whisperx= from the original audio file using ~tlon-dub-transcribe-with-whisperx~. This will produce a JSON file with timestamps.
2. Propagate the timestamps from the =whisperx=-generated JSON file to the human-edited transcript. (This step currently requires external tooling or manual effort, potentially aided by AI.)
3. Propagate the timestamps from the human-edited transcript (now with timestamps) to the translation into the target language. (This step also currently requires external tooling or manual effort.)
4. Create a CSV file from the timestamped human-edited transcript and the timestamped translation. The CSV should be in the format required by ElevenLabs (speaker, start_time, end_time, transcription, translation). The function ~tlon-dub-convert-vtt-to-csv~ can be adapted or used as a reference if your timestamped transcripts are in VTT format.
5. Go to [[https://elevenlabs.io/app/dubbing]] and create a new manual dubbing project, uploading the original audio/video files and the CSV file created in the previous step.

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-options
:END:

#+vindex: tlon-dub-propagation-model
+ ~tlon-dub-propagation-model~ :: Specifies the AI model to use for the ~tlon-dub-propagate-timestamps~ command. The value is a cons cell where the =car= is the backend name (e.g., "ChatGPT", "Gemini") and the =cdr= is the model symbol (e.g., =gpt-4.5-preview=, =gemini-2.0-flash-exp=). If =nil=, the default =gptel-model= is used. This can be set via the ~tlon-dub-menu~.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-commands
:END:

#+findex: tlon-dub-start-project
+ ~tlon-dub-start-project~ :: (Autoloaded) Initiates a new dubbing project with ElevenLabs. Prompts for the source *audio/video file*, source language (ISO code), target language (ISO code), a name for the project, and optionally: a specific ElevenLabs voice ID, whether to create in *Dubbing Studio mode* (allows adjustments via the web UI), and the expected *number of speakers*. The function checks if the source file has a supported audio/video extension (e.g., mp3, wav, mp4, webm) before proceeding. It sends the request to the ElevenLabs API and displays the response, which typically includes the =dubbing_id=. *After successful creation, it automatically attempts to share the project with the user associated with the current API key (using the top-level =user_email= field and =tlon-email-shared=) with 'editor' permissions to enable further API interactions.* Signals an error if the file type is not supported or if project creation fails. Logs a warning if sharing fails.

#+findex: tlon-dub-get-project-metadata
+ ~tlon-dub-get-project-metadata~ :: (Autoloaded) Retrieves metadata for an existing ElevenLabs dubbing project. Prompts for the =dubbing_id= of the project. It sends a GET request to the API and displays the JSON response containing project details like status, languages, etc.

#+findex: tlon-dub-get-dubbing
+ ~tlon-dub-get-dubbing~ :: (Autoloaded) Retrieves and parses the dubbing (expected VTT format) for a specific language within an ElevenLabs dubbing project. Prompts for the =dubbing_id= and the desired =language_code= (e.g., "en", "es"). It attempts to parse the VTT file into a list of segments (plists with =:start=, =:end=, =:text=). Displays the parsed segments (pretty-printed) in a new buffer or the raw transcript if parsing fails. Returns the list of segments or the raw transcript string.

#+findex: tlon-dub-get-resource-data
+ ~tlon-dub-get-resource-data~ :: (Autoloaded) Retrieves the detailed resource structure for an ElevenLabs dubbing project. Prompts for the =dubbing_id=. This endpoint is expected to return JSON containing resource, speaker, and segment IDs needed for modification. Displays the parsed JSON response (pretty-printed) in a new buffer or the raw response if parsing fails.

#+findex: tlon-dub-add-speaker-segment
+ ~tlon-dub-add-speaker-segment~ :: (Autoloaded) Adds a new segment for a specific speaker within an ElevenLabs dubbing project. Prompts for the =dubbing_id=, =speaker_id=, segment =start_time= (float, seconds), =end_time= (float, seconds), and the segment =text=. Sends a POST request to the API and displays the response.
#+findex: tlon-dub-transcribe-with-whisperx
+ ~tlon-dub-transcribe-with-whisperx~ :: (Autoloaded) Generates a JSON transcript for a given audio or video file *asynchronously* using the `whisperx` command-line tool. Prompts the user to select an =audio-file=. The command then runs `whisperx` with `--compute_type float32`, `--output_format json`, and specifies the output directory (`--output_dir`) to be the same as the input file's directory. The output `.json` file is created by `whisperx` in that directory. A message is displayed in the echo area upon completion, and an output buffer (e.g., `*whisperx-filename.mp4-output*`) is created to show `whisperx`'s stdout/stderr.
#+findex: tlon-dub-propagate-timestamps
+ ~tlon-dub-propagate-timestamps~ :: (Autoloaded) Propagates timestamps from a =whisperx=-generated JSON transcript to a human-edited plain text transcript using an AI model. Prompts for the =whisperx-json-file= and the =human-transcript-file=. The AI attempts to align timestamps from the JSON file with the human-edited text. The resulting timestamped transcript (in VTT-like format) is saved to a new file specified by the user. The AI model used can be configured via ~tlon-dub-propagation-model~ in the ~tlon-dub-menu~.
#+findex: tlon-dub-propagate-english-timestamps
+ ~tlon-dub-propagate-english-timestamps~ :: (Autoloaded) Propagates timestamps from a timestamped English Markdown file to a translated Markdown file (which lacks timestamps) using an AI model. Prompts for the =english-timestamped-file= (typically the output of ~tlon-dub-propagate-machine-timestamps~) and the =translated-file=. The AI attempts to align the timestamps from the English file with the translated text. The resulting timestamped translated transcript is saved to a new file (e.g., =translated-file-timestamped.md=). The AI model used can be configured via ~tlon-dub-propagation-model~ in the ~tlon-dub-menu~.

** Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-menu
:END:

#+findex: tlon-dub-menu
+ ~tlon-dub-menu~ :: (Autoloaded) Displays a transient menu for Tl√∂n Dubbing functionalities. It provides access to commands for interacting with the ElevenLabs API, using =whisperx= for transcription, converting VTT files, and propagating timestamps. It also allows configuration of the AI model used for timestamp propagation.

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-internals
:END:

*** Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-helpers
:END:
#+findex: tlon-dub--get-content-type
+ ~tlon-dub--get-content-type~ :: Takes a filename and returns the corresponding MIME content type string (e.g., ="audio/mpeg"=, ="video/webm"=) based on its file extension. Returns =nil= if the extension is not recognized or not suitable for the dubbing API (e.g., text files).
#+findex: tlon-dub--parse-vtt
+ ~tlon-dub--parse-vtt~ :: Parses a string containing VTT transcript data. Returns a list of plists, where each plist represents a segment and contains =:start= (string), =:end= (string), and =:text= (string) keys. Returns nil or an incomplete list if parsing fails.
#+findex: tlon-dub--share-project-with-self
+ ~tlon-dub--share-project-with-self~ :: (Internal) Shares a given resource ID (dubbing project ID) with the *user associated with the current API key* (using the top-level =user_email= field in the JSON payload and the email stored in =tlon-email-shared=) granting the "editor" role. Called automatically after project creation. Returns =t= on success, =nil= on failure.

*** Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-constants
:END:
#+vindex: tlon-dub-api-base-url
+ ~tlon-dub-api-base-url~ :: The base URL for the ElevenLabs v1 API ("https://api.elevenlabs.io/v1").
#+vindex: tlon-dub-start-project-endpoint
+ ~tlon-dub-start-project-endpoint~ :: The specific API endpoint used for creating a new dubbing project ("/dubbing").
#+vindex: tlon-dub-get-project-metadata-endpoint
+ ~tlon-dub-get-project-metadata-endpoint~ :: The API endpoint format string used for retrieving metadata about a specific dubbing project ("/dubbing/%s"). Requires the =dubbing_id= to be formatted into the string.
#+vindex: tlon-dub-get-dubbing-endpoint
+ ~tlon-dub-get-dubbing-endpoint~ :: The API endpoint format string used for retrieving the dubbing of a project for a specific language ("/dubbing/%s/transcript/%s"). Requires the =dubbing_id= and =language_code= to be formatted into the string.
#+vindex: tlon-dub-get-resource-data-endpoint
+ ~tlon-dub-get-resource-data-endpoint~ :: The API endpoint format string used for retrieving the detailed resource structure of a dubbing project ("/dubbing/resource/%s"). Requires the =dubbing_id= to be formatted into the string.
#+vindex: tlon-dub-share-resource-endpoint
+ ~tlon-dub-share-resource-endpoint~ :: The API endpoint format string used for sharing a workspace resource ("/workspace/resources/%s/share"). Requires the =resource_id= (which is the =dubbing_id= for dubbing projects) to be formatted into the string.
#+vindex: tlon-dub-add-speaker-segment-endpoint
+ ~tlon-dub-add-speaker-segment-endpoint~ :: The API endpoint format string used for adding a segment to a specific speaker within a dubbing project ("/dubbing/resource/%s/speaker/%s/segment"). Requires the =dubbing_id= and =speaker_id= to be formatted into the string.
#+vindex: tlon-dub--vtt-timestamp-regex
+ ~tlon-dub--vtt-timestamp-regex~ :: Regexp to match a VTT timestamp line and capture start and end times (e.g., "00:00:00.240 --> 00:00:01.750"). Uses POSIX character classes.
#+vindex: tlon-dub--vtt-timestamp-marker-regex
+ ~tlon-dub--vtt-timestamp-marker-regex~ :: Regexp to identify the beginning of a VTT timestamp line (e.g., "00:00:00.240 -->"). Uses POSIX character classes.
#+vindex: tlon-dub--vtt-blank-line-regex
+ ~tlon-dub--vtt-blank-line-regex~ :: Regexp to match a blank or whitespace-only line.
#+vindex: tlon-dub-propagate-timestamps-prompt
+ ~tlon-dub-propagate-timestamps-prompt~ :: The prompt template used to instruct an AI model on how to propagate timestamps from a WhisperX JSON transcript to a human-edited plain text transcript. It specifies the input formats and the desired VTT-style output format.
#+vindex: tlon-dub-propagate-english-timestamps-prompt
+ ~tlon-dub-propagate-english-timestamps-prompt~ :: The prompt template used to instruct an AI model on how to propagate timestamps from a timestamped English Markdown file to a non-timestamped translated Markdown file. It specifies the input formats and the desired Markdown output format with timestamps.
