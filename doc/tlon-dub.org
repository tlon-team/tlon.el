#+title: tlon - Dubbing
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying
* Dubbing (=tlon-dub.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub
:END:

This module provides functionality to interact with the ElevenLabs Dubbing API, allowing users to dub audio or video files into different languages.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-dependencies
:END:

+ =tlon-core=
+ =tlon-tts= (for API key retrieval and language selection)
+ =tlon-ai= (for AI model interaction and common AI utilities)
+ =json= (for parsing API responses)
+ =threads= (for the =cond->= macro)
+ =transient= (for the menu system)
+ =gptel=, =gptel-core= (for AI model selection infrastructure)
+ External tools: =curl= (for API requests), =whisperx= (for local transcription).

** Standard Workflow
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-workflow
:END:

This workflow presupposes that we already have (1) the original audio and video files, (2) a human-edited transcript and (3) a translation into the target language made from that transcript.

1. Generate a JSON transcript with timestamps from the original audio file using ~tlon-dub-transcribe-with-whisperx~ (Audio -> JSON).
2. Create an English SRT file by combining the timestamps from the WhisperX JSON output with your human-edited English transcript (plain text/Markdown) using ~tlon-dub-propagate-machine-timestamps~ (JSON + en.txt -> en.srt).
3. Create a translated SRT file by combining the timestamps from the English SRT file with your translated transcript (plain text/Markdown) using ~tlon-dub-propagate-english-timestamps~ (en.srt + lang.txt -> lang.srt).
4. Create a CSV file from the English SRT and the translated SRT using ~tlon-dub-convert-srt-to-csv~ (en.srt + lang.srt -> .csv). This CSV will be in the format required by ElevenLabs (speaker, start_time, end_time, transcription, translation).
5. Go to [[https://elevenlabs.io/app/dubbing]] and create a new manual dubbing project, uploading the original audio/video files and the CSV file created in the previous step.

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-options
:END:

#+vindex: tlon-dub-propagation-model
+ ~tlon-dub-propagation-model~ :: Specifies the AI model to use for the ~tlon-dub-propagate-timestamps~ command. The value is a cons cell where the =car= is the backend name (e.g., "ChatGPT", "Gemini") and the =cdr= is the model symbol (e.g., =gpt-4.5-preview=, =gemini-2.0-flash-exp=). If =nil=, the default =gptel-model= is used. This can be set via the ~tlon-dub-menu~.
#+vindex: tlon-dub-alignment-model
+ ~tlon-dub-alignment-model~ :: Specifies the AI model to use for aligning sentences (e.g., in ~tlon-dub-align-punctuation~). Format is the same as ~tlon-dub-propagation-model~. If =nil=, the default =gptel-model= is used.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-commands
:END:

#+findex: tlon-dub-start-project
+ ~tlon-dub-start-project~ :: (Autoloaded) Initiates a new dubbing project with ElevenLabs. Prompts for the source *audio/video file*, source language (ISO code), target language (ISO code), a name for the project, and optionally: a specific ElevenLabs voice ID, whether to create in *Dubbing Studio mode* (allows adjustments via the web UI), and the expected *number of speakers*. The function checks if the source file has a supported audio/video extension (e.g., mp3, wav, mp4, webm) before proceeding. It sends the request to the ElevenLabs API and displays the response, which typically includes the =dubbing_id=. *After successful creation, it automatically attempts to share the project with the user associated with the current API key (using the top-level =user_email= field and =tlon-email-shared=) with 'editor' permissions to enable further API interactions.* Signals an error if the file type is not supported or if project creation fails. Logs a warning if sharing fails.

#+findex: tlon-dub-get-project-metadata
+ ~tlon-dub-get-project-metadata~ :: (Autoloaded) Retrieves metadata for an existing ElevenLabs dubbing project. Prompts for the =dubbing_id= of the project. It sends a GET request to the API and displays the JSON response containing project details like status, languages, etc.

#+findex: tlon-dub-get-dubbing
+ ~tlon-dub-get-dubbing~ :: (Autoloaded) Retrieves and parses the dubbing (expected VTT format) for a specific language within an ElevenLabs dubbing project. Prompts for the =dubbing_id= and the desired =language_code= (e.g., "en", "es"). It attempts to parse the VTT file into a list of segments (plists with =:start=, =:end=, =:text=). Displays the parsed segments (pretty-printed) in a new buffer or the raw transcript if parsing fails. Returns the list of segments or the raw transcript string.

#+findex: tlon-dub-get-resource-data
+ ~tlon-dub-get-resource-data~ :: (Autoloaded) Retrieves the detailed resource structure for an ElevenLabs dubbing project. Prompts for the =dubbing_id=. This endpoint is expected to return JSON containing resource, speaker, and segment IDs needed for modification. Displays the parsed JSON response (pretty-printed) in a new buffer or the raw response if parsing fails.

#+findex: tlon-dub-add-speaker-segment
+ ~tlon-dub-add-speaker-segment~ :: (Autoloaded) Adds a new segment for a specific speaker within an ElevenLabs dubbing project. Prompts for the =dubbing_id=, =speaker_id=, segment =start_time= (float, seconds), =end_time= (float, seconds), and the segment =text=. Sends a POST request to the API and displays the response.
#+findex: tlon-dub-transcribe-with-whisperx
+ ~tlon-dub-transcribe-with-whisperx~ :: (Autoloaded) Wrapper for ~tlon-whisperx-transcribe~. Generates a transcript for AUDIO-FILE asynchronously using whisperx. FORMAT defaults to the value of ~tlon-dub-transcription-format~.
#+findex: tlon-dub-diarize-with-whisperx
+ ~tlon-dub-diarize-with-whisperx~ :: (Autoloaded) Wrapper for ~tlon-whisperx-diarize~. Diarizes AUDIO-FILE with whisperx. Optional LANGUAGE defaults to "en". If SPEAKERS > 0, whisperx is instructed to use exactly that many speakers.
#+findex: tlon-dub-propagate-machine-timestamps
+ ~tlon-dub-propagate-machine-timestamps~ :: (Autoloaded) Propagates timestamps from a =whisperx=-generated JSON transcript to a human-edited plain text/Markdown transcript using an AI model. Prompts for the =machine-transcript= (JSON) and the =human-transcript= (text/Markdown). The AI attempts to align timestamps from the JSON file with the human-edited text. The resulting timestamped transcript is saved as a new SRT file (e.g., =human-transcript-timestamped.srt=). The AI model used can be configured via ~tlon-dub-propagation-model~.
#+findex: tlon-dub-propagate-english-timestamps
+ ~tlon-dub-propagate-english-timestamps~ :: (Autoloaded) Propagates timestamps from a timestamped English SRT file to a translated plain text/Markdown file (which lacks timestamps) using an AI model. Prompts for the =english-timestamped-file= (SRT, typically the output of ~tlon-dub-propagate-machine-timestamps~) and the =translated-file= (text/Markdown). The AI attempts to align the timestamps from the English SRT file with the translated text. The resulting timestamped translated transcript is saved as a new SRT file (e.g., =translated-file-timestamped.srt=). The AI model used can be configured via ~tlon-dub-propagation-model~.
#+findex: tlon-dub-convert-srt-to-csv
+ ~tlon-dub-convert-srt-to-csv~ :: (Autoloaded) Converts a pair of timestamped English and translated SRT files into a CSV file formatted for ElevenLabs. Prompts for the =english-srt-file=, the =translated-srt-file=, and an =output-csv-file= path. The output CSV has columns: =speaker,start_time,end_time,transcription,translation=. The function validates that both SRT files have the same number of segments and that corresponding segments share identical start and end timestamps; it raises an error if these conditions are not met.

#+findex: tlon-dub-align-punctuation
+ ~tlon-dub-align-punctuation~ :: (Autoloaded) Aligns punctuation between a text file and a Markdown file using AI. Both files contain transcripts of the same audio, but may differ in their punctuation. The AI will revise the Markdown file so that its sentence boundaries match those in the text file. Prompts for the =text-file= and the =markdown-file=. The resulting aligned Markdown file is saved with a "-aligned" suffix. The AI model used can be configured via ~tlon-dub-alignment-model~.

#+findex: tlon-dub-optimize-translation-length
+ ~tlon-dub-optimize-translation-length~ :: (Autoloaded) Optimizes translation length by shortening paragraphs that exceed a specified threshold. Prompts for an =english-srt-file=, a =translated-srt-file=, and a =threshold= ratio (default 1.2, meaning translations can be up to 20% longer than the English text). The function compares each segment's length between the English and translated files, identifies segments where the translation is too long, and uses AI to shorten those segments while preserving meaning. The result is saved to a new SRT file with "-optimized" suffix. The AI model used can be configured via ~tlon-dub-alignment-model~.

#+findex: tlon-dub-split-video-at-timestamps
+ ~tlon-dub-split-video-at-timestamps~ :: (Autoloaded) Splits a video into
  parts based on a list of timestamps. Prompts for the =video-file= and a
  =timestamps-file= (one timestamp per line, HH:MM:SS.mmm). Each part starts at
  its timestamp and ends 40 ms before the next one, or at the end of the video
  for the final part. The parts are saved as =<base>-partN.mp4= alongside the
  original file. Internally uses =ffmpeg -i <video> -ss <start> -to <end> -c
  copy <partN>.mp4=, omitting =-to= for the final part when the duration cannot
  be determined.

** Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-menu
:END:

#+findex: tlon-dub-menu
+ ~tlon-dub-menu~ :: (Autoloaded) Displays a transient menu for Tlön Dubbing functionalities.
  + *Transcription & Timestamps (srt)*:
    + =t= :: Transcribe with WhisperX (Audio -> srt) (~tlon-dub-transcribe-with-whisperx~)
    + =i= :: Diarize with WhisperX (Audio -> diarized srt/txt) (~tlon-dub-diarize-with-whisperx~)
    + =x= :: Clean diarized SRT (-> -cleaned.srt) (~tlon-dub-clean-diarized-srt~)
    + =o= :: Optimize Translation Length (en.srt + lang.srt -> optimized.srt) (~tlon-dub-optimize-translation-length~)
    + =c= :: Convert SRTs to CSV (en.srt + lang.srt -> .csv) (~tlon-dub-convert-srt-to-csv~)
    + =r= :: Resegment SRT (speaker/min-30s) (~tlon-dub-resegment-srt~)
    + =p= :: Split video by timestamps (video + txt -> parts)
      (~tlon-dub-split-video-at-timestamps~)
  + *ElevenLabs API*:
    + =s= :: Start New Dubbing Project (~tlon-dub-start-project~)
    + =d= :: Get Project Metadata (~tlon-dub-get-project-metadata~)
    + =g= :: Get Dubbing Transcript (VTT) (~tlon-dub-get-dubbing~)
    + =R= :: Get Resource Data (~tlon-dub-get-resource-data~)
    + =A= :: Add Speaker Segment (~tlon-dub-add-speaker-segment~)
  + *Options*:
    + =-m= :: Propagation model (~tlon-dub-infix-select-propagation-model~)
    + =-a= :: Alignment model (~tlon-dub-infix-select-alignment-model~)
    + =-f= :: Transcription format (~tlon-dub-infix-select-transcription-format~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-internals
:END:

*** Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-helpers
:END:
#+findex: tlon-dub--get-content-type
+ ~tlon-dub--get-content-type~ :: Takes a filename and returns the corresponding MIME content type string (e.g., ="audio/mpeg"=, ="video/webm"=) based on its file extension. Returns =nil= if the extension is not recognized or not suitable for the dubbing API (e.g., text files).
#+findex: tlon-dub--parse-vtt
+ ~tlon-dub--parse-vtt~ :: Parses a string containing VTT transcript data. Returns a list of plists, where each plist represents a segment and contains =:start= (string), =:end= (string), and =:text= (string) keys. Returns nil or an incomplete list if parsing fails.
#+findex: tlon-dub-convert-vtt-to-csv
+ ~tlon-dub-convert-vtt-to-csv~ :: Converts a VTT file (in the complex format with headers, blank lines, tagged text, and duplicated entries) to a CSV file suitable for ElevenLabs.
#+findex: tlon-dub--parse-srt
+ ~tlon-dub--parse-srt~ :: Parses an SRT =file= and returns a list of segments. Each segment is a plist with =:start= (string, "HH:MM:SS,mmm"), =:end= (string, "HH:MM:SS,mmm"), and =:text= (string) keys. Handles optional segment numbers, optional paragraph numbers that may precede the timestamp line, and CR/LF line endings. Returns =nil= if parsing fails or the file is empty.
#+findex: tlon-dub--csv-escape-string
+ ~tlon-dub--csv-escape-string~ :: Escapes a =str= for CSV output by doubling any internal double quotes and then enclosing the entire string in double quotes.
#+findex: tlon-dub--share-project-with-self
+ ~tlon-dub--share-project-with-self~ :: (Internal) Shares a given resource ID (dubbing project ID) with the *user associated with the current API key* (using the top-level =user_email= field in the JSON payload and the email stored in =tlon-email-shared=) granting the "editor" role. Called automatically after project creation. Returns =t= on success, =nil= on failure.

*** Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-dub-constants
:END:
#+vindex: tlon-dub-api-base-url
+ ~tlon-dub-api-base-url~ :: The base URL for the ElevenLabs v1 API ("https://api.elevenlabs.io/v1").
#+vindex: tlon-dub-start-project-endpoint
+ ~tlon-dub-start-project-endpoint~ :: The specific API endpoint used for creating a new dubbing project ("/dubbing").
#+vindex: tlon-dub-get-project-metadata-endpoint
+ ~tlon-dub-get-project-metadata-endpoint~ :: The API endpoint format string used for retrieving metadata about a specific dubbing project ("/dubbing/%s"). Requires the =dubbing_id= to be formatted into the string.
#+vindex: tlon-dub-get-dubbing-endpoint
+ ~tlon-dub-get-dubbing-endpoint~ :: The API endpoint format string used for retrieving the dubbing of a project for a specific language ("/dubbing/%s/transcript/%s"). Requires the =dubbing_id= and =language_code= to be formatted into the string.
#+vindex: tlon-dub-get-resource-data-endpoint
+ ~tlon-dub-get-resource-data-endpoint~ :: The API endpoint format string used for retrieving the detailed resource structure of a dubbing project ("/dubbing/resource/%s"). Requires the =dubbing_id= to be formatted into the string.
#+vindex: tlon-dub-share-resource-endpoint
+ ~tlon-dub-share-resource-endpoint~ :: The API endpoint format string used for sharing a workspace resource ("/workspace/resources/%s/share"). Requires the =resource_id= (which is the =dubbing_id= for dubbing projects) to be formatted into the string.
#+vindex: tlon-dub-add-speaker-segment-endpoint
+ ~tlon-dub-add-speaker-segment-endpoint~ :: The API endpoint format string used for adding a segment to a specific speaker within a dubbing project ("/dubbing/resource/%s/speaker/%s/segment"). Requires the =dubbing_id= and =speaker_id= to be formatted into the string.
#+vindex: tlon-dub--vtt-timestamp-line
+ ~tlon-dub--vtt-timestamp-line~ :: Regexp to match a VTT timestamp line and capture start and end times (e.g., "00:00:00.240 --> 00:00:01.750"). Uses POSIX character classes.
#+vindex: tlon-dub--vtt-timestamp-marker
+ ~tlon-dub--vtt-timestamp-marker~ :: Regexp to identify the beginning of a VTT timestamp line (e.g., "00:00:00.240 -->"). Uses POSIX character classes.
#+vindex: tlon-dub--blank-line-regex
+ ~tlon-dub--blank-line-regex~ :: Regexp to match a blank or whitespace-only line.
#+vindex: tlon-dub-propagate-machine-timestamps-prompt
+ ~tlon-dub-propagate-machine-timestamps-prompt~ :: The prompt template used to instruct an AI model on how to propagate timestamps from a WhisperX JSON transcript to a human-edited plain text/Markdown transcript, outputting an SRT file.
#+vindex: tlon-dub-propagate-english-timestamps-prompt
+ ~tlon-dub-propagate-english-timestamps-prompt~ :: The prompt template used to instruct an AI model on how to propagate timestamps from a timestamped English SRT file to a non-timestamped translated plain text/Markdown file, outputting an SRT file.
#+vindex: tlon-dub-align-punctuation-prompt
+ ~tlon-dub-align-punctuation-prompt~ :: The prompt template used to instruct an AI model on how to align punctuation between a text file and a Markdown file, ensuring that sentence boundaries in the Markdown file match those in the text file.
#+vindex: tlon-dub-shorten-translation-prompt
+ ~tlon-dub-shorten-translation-prompt~ :: The prompt template used to instruct an AI model on how to shorten a translated paragraph by a specified percentage while preserving its meaning and maintaining natural flow.
#+vindex: tlon-dub--srt-timestamp-regex
+ ~tlon-dub--srt-timestamp-regex~ :: Regexp to match an SRT timestamp line (e.g., "00:00:00,031 --> 00:00:06,360") and capture start and end times.
