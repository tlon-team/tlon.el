#+title: tlon
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+export_file_name: tlon.texi
#+texinfo_filename: tlon.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Tlon Babel: (tlon)
#+texinfo_dir_desc: Companion Emacs package for Tlön
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

~tlon~ provides all the Emacs functionality used by the Tlön team.

* AI Functionality (=tlon-ai.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai
:END:

This module provides integration with AI models for various tasks such as summarization, translation, image description, and code manipulation within the Tlön ecosystem. It leverages the =gptel= package and its extensions.

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-options
:END:

This section describes the user-configurable options available in =tlon-ai.el=.

*** Batch Processing Function
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-batch-fun
:END:
#+vindex: tlon-ai-batch-fun
The user option ~tlon-ai-batch-fun~ specifies a function to be run when ~tlon~ operates in batch mode. This allows for automated processing of multiple items using AI functions. Set this to the symbol of the desired function.

#+begin_src emacs-lisp
(setq tlon-ai-batch-fun 'my-batch-processing-function)
#+end_src

*** Overwrite Image Alt Text
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-overwrite-alt-text
:END:
#+vindex: tlon-ai-overwrite-alt-text
The user option ~tlon-ai-overwrite-alt-text~ controls whether existing alt text in image tags should be overwritten when generating new descriptions.

- If non-nil, existing alt text will be replaced by the newly generated text when using ~tlon-ai-set-image-alt-text-in-buffer~.
- If nil (the default), existing alt text will be preserved.

Note: The command ~tlon-ai-set-image-alt-text~ (operating on a single image tag at point) *always* overwrites existing alt text, regardless of this option's setting.

*** Edit Prompt Before Sending
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-edit-prompt
:END:
#+vindex: tlon-ai-edit-prompt
When the user option ~tlon-ai-edit-prompt~ is non-nil, ~tlon~ will prompt the user to edit the generated prompt string before sending it to the AI model. This allows for on-the-fly customization of AI requests.

#+begin_src emacs-lisp
(setq tlon-ai-edit-prompt t)
#+end_src

*** Auto Proofread Reference Articles
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-auto-proofread
:END:
#+vindex: tlon-ai-auto-proofread
If the user option ~tlon-ai-auto-proofread~ is set to a non-nil value, ~tlon~ will automatically initiate the proofreading process using the configured AI model after a reference article has been generated via ~tlon-ai-create-reference-article~.

*** Custom Models
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-custom-models
:END:

~tlon~ allows specifying different AI models for specific tasks, overriding the default =gptel= model configuration. This enables using models optimized for particular capabilities (e.g., large context window for summarization, advanced reasoning for proofreading).

Each option takes a cons cell =(BACKEND . MODEL)=, where =BACKEND= is a string (e.g., ="ChatGPT"=, ="Gemini"=) and =MODEL= is a symbol representing the specific model (e.g., =gpt-4.5-preview=, =gemini-2.0-flash-thinking-exp-01-21=). Refer to ~gptel-extras-ai-models~ for available options. If an option is nil, the default =gptel= model is used for that task.

#+vindex: tlon-ai-summarization-model
+ ~tlon-ai-summarization-model~ :: Model for summarizing text (e.g., generating abstracts, synopses). It's recommended to use a model with a large context window.
  #+begin_src emacs-lisp
  (setq tlon-ai-summarization-model '("Gemini" . gemini-2.0-flash-thinking-exp-01-21))
  #+end_src

#+vindex: tlon-ai-markdown-fix-model
+ ~tlon-ai-markdown-fix-model~ :: Model for fixing Markdown formatting issues, especially when comparing original and translated documents.
  #+begin_src emacs-lisp
  (setq tlon-ai-markdown-fix-model '("Gemini" . gemini-2.0-flash-thinking-exp-01-21))
  #+end_src

#+vindex: tlon-ai-create-reference-article-model
+ ~tlon-ai-create-reference-article-model~ :: Model used by ~tlon-ai-create-reference-article~ to draft encyclopedia-style articles based on provided source materials.
  #+begin_src emacs-lisp
  (setq tlon-ai-create-reference-article-model nil) ; Use default gptel model
  #+end_src

#+vindex: tlon-ai-proofread-reference-article-model
+ ~tlon-ai-proofread-reference-article-model~ :: Model used by ~tlon-ai-proofread-reference-article~ for correcting factual errors, calculation mistakes, etc., in generated reference articles. Often benefits from a more powerful model.
  #+begin_src emacs-lisp
  (setq tlon-ai-proofread-reference-article-model '("ChatGPT" . gpt-4.5-preview))
  #+end_src

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-commands
:END:

This section details the interactive commands provided by =tlon-ai.el=.

*** Translation Variants
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-translate
:END:
#+findex: tlon-ai-translate
The command ~tlon-ai-translate~ prompts for text and returns ten alternative Spanish translations using the configured AI model. The user can then select the preferred translation from the minibuffer, which is copied to the kill ring.

*** Writing Reference Articles
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-create-reference-article
:END:
#+findex: tlon-ai-create-reference-article
The command ~tlon-ai-create-reference-article~ generates a new encyclopedia-style article based on the current buffer's content and linked sources.

It extracts the title from the buffer's front matter (=title= key). It determines the language of the article from the current file. It constructs a prompt using ~tlon-ai-write-reference-article-prompt~, instructing the AI to synthesize information primarily from attached source files (added to the =gptel= context via ~tlon-add-add-sources-to-context~) and an optional glossary (added via ~tlon-add-glossary-to-context~).

The AI response (the generated article) is placed in a new buffer. If the user confirms, it can then be proofread using ~tlon-ai-proofread-reference-article~. The model used can be customized via ~tlon-ai-create-reference-article-model~.

*** Proofreading Reference Articles
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-proofread-reference-article
:END:
#+findex: tlon-ai-proofread-reference-article
The command ~tlon-ai-proofread-reference-article~ sends the content of the current buffer (assumed to be a reference article) to the AI for proofreading.

It uses the prompt defined in ~tlon-ai-proofread-reference-article-prompt~, instructing the AI to act as an expert proofreader, focusing on factual errors, calculation mistakes, and other important issues within the context of an encyclopedia of effective altruism. The language is determined from the current file.

The AI's response, containing the proofread version or comments, is displayed in a new buffer named "*Comments on [Article Title]*". The model used can be customized via ~tlon-ai-proofread-reference-article-model~.

*** Rewriting Text
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-rewrite
:END:
#+findex: tlon-ai-rewrite
The command ~tlon-ai-rewrite~ prompts for text (defaulting to the active region) and requests ten alternative Spanish rewrites from the AI using the prompt ~tlon-ai-rewrite-prompt~.

The user selects one of the suggested variants from the minibuffer. If a region was active, it is deleted and replaced with the selected variant. The selected variant is also copied to the kill ring.

*** Image Description
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-describe-image
:END:
#+findex: tlon-ai-describe-image
The command ~tlon-ai-describe-image~ generates a concise description (alt text) for an image file.

It prompts the user to select an image file if one isn't automatically detected (e.g., from a =Figure= tag at point or the file at point in Dired). It determines the desired language for the description based on the context (e.g., the language of the current buffer).

It uses the prompt from ~tlon-ai-describe-image-prompt~ for the determined language, instructing the AI to provide a one- or two-sentence description under 50 words. The image file is added to the =gptel= context for the request.

By default, the resulting description is displayed as a message. An optional CALLBACK argument can be provided programmatically to handle the response differently.

*** Setting Image Alt Text
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-set-image-alt-text
:END:
#+findex: tlon-ai-set-image-alt-text
The command ~tlon-ai-set-image-alt-text~ automatically generates and inserts an alt text description for an image tag (=Figure= or =OurWorldInData=) at point.

It extracts the image source (=src=) attribute from the tag, locates the corresponding image file (handling local paths and Our World In Data URLs), and then calls ~tlon-ai-describe-image~ to get the description. The generated alt text is then inserted into the =alt= attribute of the image tag at point. This command *always* overwrites any existing alt text.

#+findex: tlon-ai-set-image-alt-text-in-buffer
The command ~tlon-ai-set-image-alt-text-in-buffer~ iterates through all =Figure= and =OurWorldInData= tags in the current buffer and calls ~tlon-ai-set-image-alt-text~ for each one.

Whether it overwrites existing alt text depends on the value of the user option ~tlon-ai-overwrite-alt-text~.

*** Fixing Markdown Formatting
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-fix-markdown-format
:END:
#+findex: tlon-ai-fix-markdown-format
The command ~tlon-ai-fix-markdown-format~ attempts to restore lost or altered formatting in a translated Markdown file by comparing it paragraph by paragraph with its original counterpart.

It identifies the original file using ~tlon-get-counterpart~. It retrieves corresponding paragraphs from both files using ~tlon-get-corresponding-paragraphs~. For each pair of paragraphs, it sends a request to the AI using the prompt ~tlon-ai-fix-markdown-format-prompt~, asking it to apply the formatting from the original paragraph to the translated text.

The command processes paragraphs concurrently (up to a limit defined internally) and includes a retry mechanism with exponential backoff for failed requests. If a paragraph fails permanently after 3 retries, the process aborts.

Upon successful completion of all paragraphs, the reconstructed content is saved to a new file named =[original-filename]--fixed.md=. The user is then prompted to optionally start an =ediff= session between the original translation and the newly fixed file. The model used can be customized via ~tlon-ai-markdown-fix-model~.

*** Generating Abstracts and Synopses
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-get-abstracts
:END:

These commands generate summaries of documents using AI.

#+findex: tlon-get-abstract-with-or-without-ai
+ ~tlon-get-abstract-with-or-without-ai~ :: This command first attempts to extract an abstract using non-AI methods via ~tlon-fetch-and-set-abstract~. If that fails (e.g., no abstract found in metadata or the file), it falls back to generating one using AI via ~tlon-get-abstract-with-ai~.

#+findex: tlon-get-abstract-with-ai
+ ~tlon-get-abstract-with-ai~ :: Generates a standard abstract (typically 100-250 words) for the specified content (file, region, PDF/HTML associated with BibTeX entry, etc.). It first asks the AI to check if an abstract already exists in the text using the prompt ~tlon-ai-get-abstract-prompts~. If found, the AI returns it; otherwise, the AI generates a new abstract following the guidelines in ~tlon-ai-how-to-write-abstract-prompt~. The language is either detected automatically or selected by the user. The result is typically inserted into the =abstract= field of the corresponding BibTeX entry or copied to the kill ring. The model used can be customized via ~tlon-ai-summarization-model~.

#+findex: tlon-shorten-abstract-with-ai
+ ~tlon-shorten-abstract-with-ai~ :: Takes an existing abstract (typically from the =abstract= field of the BibTeX entry at point) and asks the AI to shorten it to meet the length requirements specified in ~tlon-tex-max-abstract-length~, using the prompt ~tlon-ai-shorten-abstract-prompts~. The shortened abstract replaces the original one in the BibTeX entry.

#+findex: tlon-get-synopsis-with-ai
+ ~tlon-get-synopsis-with-ai~ :: Generates a more detailed summary (synopsis, typically 1000-2000 words) of the specified content. It uses the prompt ~tlon-ai-get-synopsis-prompts~. The resulting synopsis is copied to the kill ring. The model used can be customized via ~tlon-ai-summarization-model~.

#+findex: tlon-get-abstract-with-ai-from-pdf
+ ~tlon-get-abstract-with-ai-from-pdf~ :: A convenience command that specifically targets the PDF file associated with the BibTeX entry at point and calls ~tlon-get-abstract-with-ai~ on it.

#+findex: tlon-get-abstract-with-ai-from-html
+ ~tlon-get-abstract-with-ai-from-html~ :: A convenience command that specifically targets the HTML file associated with the BibTeX entry at point and calls ~tlon-get-abstract-with-ai~ on it.

*** Setting Language in BibTeX Entries
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-set-language-bibtex
:END:
#+findex: tlon-ai-set-language-bibtex
The command ~tlon-ai-set-language-bibtex~ automatically detects and sets the =langid= field for the BibTeX entry at point.

It sends the BibTeX entry text to the AI using the prompt ~tlon-ai-detect-language-bibtex-prompt~.

- If the entry already has a =langid= field:
  - If the detected language matches the existing =langid=, no change is made (unless the existing =langid= needs validation/standardization).
  - If they conflict, the user is prompted to choose which language to use.
- If the entry has no =langid= field, the detected language is added.

The language code is validated and standardized using ~tlon~'s language functions before being set.

*** Phonetic Transcription
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-phonetically-transcribe
:END:
#+findex: tlon-ai-phonetically-transcribe
The command ~tlon-ai-phonetically-transcribe~ generates the International Phonetic Alphabet (IPA) transcription for a given text string.

It prompts for the text to transcribe (defaulting to the active region or word at point) and determines the language (from the file or user selection). It uses the prompt ~tlon-ai-transcribe-phonetically-prompt~ for the specified language. The resulting IPA transcription is copied to the kill ring.

#+findex: tlon-phonetically-transcribe-in-buffer
The command ~tlon-phonetically-transcribe-in-buffer~ iterates through each line in the current buffer, calls ~tlon-ai-phonetically-transcribe~ on the line's content, and inserts the resulting IPA transcription after the original line, separated by a comma.

*** Audio Transcription
:PROPERTIES:
:CUSTOM_ID: h:tlon-transcribe-audio
:END:
#+findex: tlon-transcribe-audio
The command ~tlon-transcribe-audio~ transcribes an audio file using OpenAI's Whisper API.

It prompts the user to select an audio file. It retrieves the OpenAI API key (prompting to set it if necessary via ~tlon-tts-openai-get-or-set-key~). It then makes an asynchronous request to the OpenAI API endpoint using =curl=, uploading the audio file.

A CALLBACK function must be provided programmatically to handle the result. The callback receives the transcript text on success, or nil on failure.

*** Mathematical Expression Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-math
:END:

#+findex: tlon-ai-convert-math
+ ~tlon-ai-convert-math~ :: Converts a natural language mathematical expression into LaTeX format. It prompts for the expression (defaulting to the region or =Math= tag content) and language. It uses the prompt ~tlon-ai-convert-math-prompt~. If point is on a =Math= tag, the LaTeX result is inserted as the second value in the =alt= attribute (preserving the original expression as the first value). Otherwise, the result is copied to the kill ring and messaged.

#+findex: tlon-ai-translate-math
+ ~tlon-ai-translate-math~ :: Converts a LaTeX mathematical expression into a natural language description (alt text). It prompts for the expression (defaulting to the region or =Math= tag content) and language. It uses the prompt ~tlon-ai-translate-math-prompt~. If point is on a =Math= tag, the natural language result is inserted as the first value in the =alt= attribute (preserving the LaTeX expression as the second value). Otherwise, the result is copied to the kill ring and messaged.

*** Fixing Encoding Errors
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-fix-encoding
:END:
#+findex: tlon-ai-fix-encoding-in-string
The command ~tlon-ai-fix-encoding-in-string~ attempts to correct encoding errors within a given string.

It typically operates on a JSON value identified at point using helper functions. It determines the language associated with the JSON key. It sends the string to the AI using the prompt ~tlon-ai-fix-encoding-prompt~, asking it to correct encoding issues like =cuýn= or =pronosticaci¾3\263n=. The corrected string is then copied to the kill ring.

#+findex: tlon-ai-fix-encoding-in-buffer
The command ~tlon-ai-fix-encoding-in-buffer~ is a specialized command designed to process a large JSON buffer containing potentially many encoding errors, chunk by chunk. It saves the corrected chunks to separate files. (This seems highly specific to a particular data processing task).

#+findex: tlon-ai-join-files
The command ~tlon-ai-join-files~ concatenates the content of chunk files (e.g., =chunk0.json=, =chunk1.json=, ...) generated by ~tlon-ai-fix-encoding-in-buffer~ back into a single output file (e.g., =fixed.json=).

*** Propagating Changes Across Repositories
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-propagate-changes
:END:
#+findex: tlon-ai-propagate-changes
The command ~tlon-ai-propagate-changes~ attempts to automatically apply changes made in the latest commit of the current file to its corresponding files in other ~tlon~ content repositories (originals and translations).

1. It identifies the current file, its repository, language, and the latest commit affecting it using ~tlon~ and Git functions.
2. It retrieves the diff for the file from that commit using =git show=.
3. It identifies all other ~tlon~ content repositories (excluding the source repo).
4. For each target repository:
   - It determines the corresponding target file using metadata lookups (~tlon-ai--find-target-file~), handling different scenarios (original to translation, translation to original, translation to translation).
   - If a target file is found and exists, it constructs a prompt asking the AI to apply the *semantic equivalent* of the source diff to the target file's content (provided in the prompt).
   - It sends the request to the AI.
   - The callback function (~tlon-ai--propagate-changes-callback~) receives the AI's response (the modified target content).
   - If the AI response is valid, the callback overwrites the target file with the new content.
   - It then stages and commits the changes in the target repository using Git, with a commit message indicating the source commit and repository.

This command relies heavily on accurate metadata (=original_path=) and consistent file structures across repositories.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-menu
:END:
#+findex: tlon-ai-menu
The command ~tlon-ai-menu~ displays a =transient= menu interface, providing quick access to most of the AI-related commands and options described above. It allows toggling options like =tlon-ai-overwrite-alt-text= and =tlon-ai-edit-prompt=, selecting models for specific tasks, setting batch functions, and invoking the various AI operations (summarization, image description, translation, etc.).

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-internals
:END:

This section lists some non-interactive functions and variables used internally by =tlon-ai.el=. While not intended for direct user interaction, understanding them can be helpful for customization or debugging.

+ ~tlon-make-gptel-request~: Core function for sending requests to the AI model via =gptel=. Handles prompt formatting, model selection, context checks, and callbacks.
+ ~tlon-ai-maybe-edit-prompt~: Conditionally allows editing the prompt based on ~tlon-ai-edit-prompt~.
+ ~tlon-warn-if-gptel-context~: Checks if the =gptel= context is empty and warns the user if not.
+ Callback functions (e.g., ~tlon-ai-callback-return~, ~tlon-ai-callback-copy~, ~tlon-ai-callback-save~, ~tlon-ai-callback-insert~, ~tlon-ai-callback-fail~): Handle responses from AI requests in various ways (returning value, copying, saving, inserting, error handling).
+ ~tlon-ai-batch-continue~: Helper for batch processing, moves to the next item and calls the batch function.
+ ~tlon-get-string-dwim~: Retrieves text content from various sources (file, region, buffer, PDF/HTML associated with BibTeX entry) for AI processing.
+ ~tlon-get-file-as-string~: Reads the content of a file (handling PDF conversion) into a string.
+ Prompt constants (e.g., ~tlon-ai-detect-language-prompt~, ~tlon-ai-translate-prompt~, ~tlon-ai-write-reference-article-prompt~, etc.): Store the various prompt templates used for different AI tasks, often including language-specific versions.
+ Change propagation helpers (~tlon-ai--get-commit-diff~, ~tlon-ai--find-target-file~, ~tlon-ai--commit-in-repo~, ~tlon-ai--propagate-changes-callback~): Internal functions used by ~tlon-ai-propagate-changes~.
+ Transient infix definitions (e.g., ~tlon-ai-infix-toggle-overwrite-alt-text~, ~tlon-ai-batch-fun-infix~, model selection infixes): Define the interactive elements within the ~tlon-ai-menu~.

* Clock Functionality (=tlon-clock.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock
:END:

This module provides functions for interacting with Org mode's clocking mechanism (=org-clock=), specifically tailored for the Tlön workflow. It allows retrieving information about the currently clocked task, such as associated files or issues, and performing actions based on that information.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-commands
:END:

This section details the interactive commands provided by =tlon-clock.el=.

*** Open Clocked Task's File
:PROPERTIES:
:CUSTOM_ID: h:tlon-open-clock-file
:END:
#+findex: tlon-open-clock-file
The command ~tlon-open-clock-file~ identifies the BibTeX key associated with the currently running Org clock task (using ~tlon-get-clock-key~) and opens the corresponding file (located via ~tlon-get-file-from-key~). This provides quick access to the primary document related to the clocked task.

*** Open Clocked Task's Issue
:PROPERTIES:
:CUSTOM_ID: h:tlon-open-clock-issue
:END:
#+findex: tlon-open-clock-issue
The command ~tlon-open-clock-issue~ finds an =orgit-forge= link within the currently clocked heading, extracts the issue identifier (GID), and opens the corresponding issue using =forge-visit-issue=. This requires the clocked heading to contain a link like =[[orgit-topic:ISSUE_GID][...]]= and for the =forge= package to be configured.

*** Copy Region or Buffer
:PROPERTIES:
:CUSTOM_ID: h:tlon-copy-dwim
:END:
#+findex: tlon-copy-dwim
The command ~tlon-copy-dwim~ ("Do What I Mean") copies text to the kill ring. If a region is active, it copies the region's content. If no region is active, it copies the entire content of the current buffer. This is a general utility command included in this module.

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** Getting Clock Information
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-getters
:END:

#+findex: tlon-get-clock
+ ~tlon-get-clock~ :: Returns the raw string of the currently clocked heading (=org-clock-current-task=). Errors if no clock is running.

#+findex: tlon-get-clock-key
+ ~tlon-get-clock-key~ :: Extracts the BibTeX key from the clocked heading string. It assumes the key is enclosed in backticks (e.g., ``key``) and uses the regular expression ~tlon-key-regexp~ to find it.

#+findex: tlon-get-clock-file
+ ~tlon-get-clock-file~ :: Retrieves the full file path associated with the BibTeX key found in the clocked heading. Uses ~tlon-get-clock-key~ and ~tlon-get-file-from-key~.

#+findex: tlon-get-clock-issue
+ ~tlon-get-clock-issue~ :: Finds the first =orgit-forge= link in the clocked heading (=org-clock-heading=) and returns the issue identifier (GID) part of the link (e.g., the part after =orgit-topic:=).

#+findex: tlon-get-clock-action
+ ~tlon-get-clock-action~ :: Extracts the assumed "action" from the clocked heading. It expects the action to be the second word in the heading string (after the first word, often a verb like "Translate"). It validates this word against the list of known actions defined in the Tlön labels configuration (~tlon-label-lookup-all :action~).

#+findex: tlon-get-clock-label
+ ~tlon-get-clock-label~ :: Retrieves the label associated with the action identified by ~tlon-get-clock-action~, using the Tlön labels configuration (~tlon-label-lookup~).

#+findex: tlon-get-clock-next-label
+ ~tlon-get-clock-next-label~ :: Determines the "next" label in the sequence defined by ~tlon-job-labels~, based on the label of the currently clocked action (~tlon-get-clock-label~). This relies on the order within the ~tlon-job-labels~ alist.

*** Utility Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-utils
:END:

#+findex: tlon-next-value
+ ~tlon-next-value~ :: A generic helper function to find the value associated with a =PROPERTY= that comes *after* the item with the specified =VALUE= in an =ALIST=. Used by ~tlon-get-clock-next-label~.

#+findex: tlon-copy-buffer
+ ~tlon-copy-buffer~ :: Copies the entire content of a specified =FILE= (or the current buffer) to the kill ring.

#+findex: tlon-copy-region
+ ~tlon-copy-region~ :: Copies the text between positions =BEG= and =END= to the kill ring.

#+findex: tlon-set-paths-from-clock
+ ~tlon-set-paths-from-clock~ :: Retrieves the BibTeX key from the clocked task and uses Tlön metadata to find the file paths for both the original document and its corresponding translation. Returns these paths and the key as multiple values.

#+findex: tlon-set-windows
+ ~tlon-set-windows~ :: A utility function (likely requiring =window-extras= and =winum= packages) to open two specified files (=ORIGINAL-PATH= and =TRANSLATION-PATH=) in specific windows (window 1 and window 2, respectively), splitting the frame if necessary.

*** Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-variables
:END:

#+vindex: tlon-key-regexp
+ ~tlon-key-regexp~ :: The constant regular expression used by ~tlon-get-clock-key~ to identify BibTeX keys within clocked task headings. It specifically looks for text enclosed in backticks, optionally followed by =.md=.

* Glossary Management (=tlon-glossary.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary
:END:

This module provides functions for managing a multilingual glossary stored in a JSON file. It allows users to edit entries, add translations, and extract the glossary in different formats for various recipients (humans, DeepL editor, DeepL API).

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-config
:END:

*** Glossary Source File
:PROPERTIES:
:CUSTOM_ID: h:tlon-file-glossary-source
:END:
#+vindex: tlon-file-glossary-source
The constant ~tlon-file-glossary-source~ defines the path to the JSON file containing the master glossary data. By default, it points to =glossary.json= within the =babel-core= repository.

*** Glossary Recipients
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-recipients
:END:
#+vindex: tlon-glossary-recipients
The constant ~tlon-glossary-recipients~ is an alist defining the email addresses associated with specific target languages for sharing human-readable glossaries. Each entry is a plist with =:language= (language code string) and =:email= (email address string).

#+begin_src emacs-lisp
(defconst tlon-glossary-recipients
  '((:language "fr" :email "tlon-french@googlegroups.com")
    (:language "it" :email "tlon-italian@googlegroups.com")))
#+end_src

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-commands
:END:

This section details the interactive commands provided by =tlon-glossary.el=.

*** Edit Glossary Entry
:PROPERTIES:
:CUSTOM_ID: h:tlon-edit-glossary
:END:
#+findex: tlon-edit-glossary
The command ~tlon-edit-glossary~ provides an interactive way to create or update entries in the glossary file (~tlon-file-glossary-source~).

1. It parses the existing glossary using ~tlon-parse-glossary~.
2. It prompts the user to choose an existing English term (using completion) or add a new one.
3. If the term is new:
   - It prompts the user to select the term type (=variable= or =invariant=) using ~tlon-select-term-type~.
   - It creates a new entry structure using ~tlon-create-entry~. For invariant terms, it automatically adds entries for all target languages, using the English term as the initial translation.
4. If the term exists or is newly created and is not of type =invariant=:
   - It calls ~tlon-edit-translation-in-entry~ to prompt the user for a target language and the corresponding translation for the selected English term. It updates the entry with the new or modified translation.
5. It updates the main glossary data structure with the modified or new entry using ~tlon-update-glossary~.
6. It writes the updated glossary back to the JSON file using ~tlon-write-data~.

*** Extract Glossary
:PROPERTIES:
:CUSTOM_ID: h:tlon-extract-glossary
:END:
#+findex: tlon-extract-glossary
The command ~tlon-extract-glossary~ extracts a language-specific glossary from the main JSON file and saves it in a format suitable for a specified recipient.

1. It prompts the user to select the target =LANGUAGE= using ~tlon-select-language~.
2. It prompts the user to select the =RECIPIENT= type (=human=, =deepl-editor=, or =deepl-api=) using completion.
3. It determines the target file path and extension based on the language and recipient using ~tlon-glossary-target-path~.
4. It reads the source glossary JSON file.
5. It creates or opens the target file and inserts the formatted glossary content using ~tlon-insert-formatted-glossary~, filtering and formatting entries based on the recipient:
   - =human=: Includes only "variable" type entries, formatted as CSV (="Source","Target"=).
   - =deepl-editor=: Includes all entries, formatted as CSV (="Source","Target","EN","LANG"=).
   - =deepl-api=: Includes all entries, formatted as TSV (=Source\tTarget=).
6. It saves the target file.
7. If the recipient is =human=, it asks the user if they want to share the extracted glossary via email using ~tlon-share-glossary~.
8. For other recipients, it messages the path to the extracted file.

*** Share Glossary
:PROPERTIES:
:CUSTOM_ID: h:tlon-share-glossary
:END:
#+findex: tlon-share-glossary
The command ~tlon-share-glossary~ sends an extracted glossary file as an email attachment to the designated translators for a specific language.

1. It prompts the user to select the glossary =ATTACHMENT= file (defaulting to the downloads directory).
2. It prompts the user to select the =LANGUAGE= of the glossary (unless provided as an argument).
3. It looks up the recipient email address for the language in ~tlon-glossary-recipients~ using ~tlon-lookup~.
4. It looks up the full language name (e.g., "French") using ~tlon-lookup~ on ~tlon-languages-properties~ and sets the ~tlon-email-language~ variable.
5. It calls ~tlon-email-send~ with the ="share-glossary.org"= template, the recipient email, and the attachment path.

*** Glossary Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-menu
:END:
#+findex: tlon-glossary-menu
The command ~tlon-glossary-menu~ activates a =transient= menu interface providing quick access to the main glossary functions:
+ =e= :: Edit glossary entry (~tlon-edit-glossary~)
+ =x= :: Extract glossary (~tlon-extract-glossary~)
+ =s= :: Share glossary (~tlon-share-glossary~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** Glossary Data Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-data
:END:

#+findex: tlon-parse-glossary
+ ~tlon-parse-glossary~ :: Reads and parses the JSON glossary file specified by ~tlon-file-glossary-source~ into an Emacs Lisp alist using ~tlon-read-json~.

#+findex: tlon-get-english-terms
+ ~tlon-get-english-terms~ :: Extracts a list of all English terms (the =en= value) from the parsed glossary alist. Used for completion in ~tlon-edit-glossary~.

#+findex: tlon-find-entry-by-term
+ ~tlon-find-entry-by-term~ :: Searches the parsed glossary alist for an entry whose English term (=en= value) matches the given =TERM=. Returns the matching entry alist or nil.

#+findex: tlon-select-term-type
+ ~tlon-select-term-type~ :: Prompts the user with completion to select a term type (=variable= or =invariant=) and returns the selected string.

#+findex: tlon-create-entry
+ ~tlon-create-entry~ :: Creates a new glossary entry alist for a given English =TERM= and =TYPE=. If the type is =invariant=, it pre-populates translations for all ~tlon-project-target-languages~ with the English term itself.

#+findex: tlon-edit-translation-in-entry
+ ~tlon-edit-translation-in-entry~ :: Interactively prompts the user to select a target language and provide or update the translation for the given English =TERM= within the provided =ENTRY= alist. Returns the modified entry.

#+findex: tlon-update-glossary
+ ~tlon-update-glossary~ :: Takes the main glossary alist, a potentially modified =ENTRY=, and the corresponding English =TERM=. If an entry for =TERM= already exists in the glossary, it replaces it with =ENTRY=. If not, it appends =ENTRY= to the glossary. Returns the updated glossary alist.

*** Glossary Extraction Formatting
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-extraction
:END:

#+findex: tlon-glossary-target-path
+ ~tlon-glossary-target-path~ :: Determines the full output file path for an extracted glossary based on the target =LANGUAGE= and =RECIPIENT=. It sets the file extension to =.csv= for =human= and =deepl-editor=, and =.tsv= for =deepl-api=. Uses ~tlon-glossary-make-file~ internally.

#+findex: tlon-glossary-make-file
+ ~tlon-glossary-make-file~ :: Constructs the filename (e.g., =EN-FR.csv=) and combines it with the user's download directory path (~paths-dir-downloads~).

#+findex: tlon-insert-formatted-glossary
+ ~tlon-insert-formatted-glossary~ :: Iterates through the parsed =JSON= glossary data. For each entry, it extracts the source (=en=) and target (=language=) terms. Based on the =RECIPIENT=, it formats the entry as CSV or TSV and inserts it into the current buffer. For =human= recipients, it only includes entries of type =variable=.

*** Git Integration (Currently Unused/TODO)
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-git
:END:

#+findex: tlon-glossary-prompt-for-explanation
+ ~tlon-glossary-prompt-for-explanation~ :: (TODO) Prompts the user for an optional explanation of a glossary change, intended for commit messages.

#+findex: tlon-glossary-commit
+ ~tlon-glossary-commit~ :: (TODO) Intended to handle the Git workflow for glossary changes: pulling, staging the glossary file, committing with a formatted message (including action, term, and optional explanation), and pushing. Requires =magit= functions. Currently marked as unused and needing fixes.

* Dictionary Functionality (=tlon-dict.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict
:END:

This module integrates with the external =reverso.el= package to provide dictionary-related features, specifically fetching synonyms, while ensuring that the language context aligns with the Tlön workflow.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict-dependencies
:END:

This module requires the =reverso= package to be installed and available.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict-commands
:END:

*** Get Synonyms via Reverso
:PROPERTIES:
:CUSTOM_ID: h:tlon-reverso-get-synonyms
:END:
#+findex: tlon-reverso-get-synonyms
The command ~tlon-reverso-get-synonyms~ fetches synonyms for the word currently at point using the =reverso.el= package.

Crucially, it overrides the default language selection mechanism of =reverso.el=. Instead, it determines the language of the current file using ~tlon-get-language-in-file~, looks up the corresponding language code recognized by =reverso.el= using Tlön's configuration (~tlon-lookup~), and passes this language code to the underlying =reverso--get-synonyms= function.

It prompts the user for the word, defaulting to the word at point (~thing-at-point 'word~). The results are displayed in a dedicated Reverso buffer, similar to how =reverso.el= typically operates.

** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict-menu
:END:
#+findex: tlon-dict-menu
The command ~tlon-dict-menu~ activates a =transient= menu interface for dictionary-related commands.

Currently, it offers one option:
+ =s= :: Calls ~tlon-reverso-get-synonyms~ to fetch synonyms for the word at point.

* Indices
:PROPERTIES:
:CUSTOM_ID: h:indices
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:fn-index
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:vr-index
:END:

** Concept index
:PROPERTIES:
:INDEX: cp
:CUSTOM_ID: h:cp-index
:END:

* local variables                                                  :noexport:
(Note that the local variables below will still be exported to the ~info~ file, unfortunately. It looks like they are not considered part of this heading.)

# Local Variables:
# eval: (add-hook 'before-save-hook 'org-texinfo-export-to-info nil t)
# End:
