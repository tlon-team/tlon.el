#+title: tlon
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+export_file_name: tlon.texi
#+texinfo_filename: tlon.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Tlon: (tlon)
#+texinfo_dir_desc: Companion Emacs package for Tlön
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

~tlon~ provides all the Emacs functionality used by the Tlön team.

* AI Functionality (=tlon-ai.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai
:END:

This module provides integration with AI models for various tasks such as summarization, translation, image description, and code manipulation within the Tlön ecosystem. It leverages the =gptel= package and its extensions.

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-options
:END:

This section describes the user-configurable options available in =tlon-ai.el=.

*** Batch Processing Function
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-batch-fun
:END:
#+vindex: tlon-ai-batch-fun
The user option ~tlon-ai-batch-fun~ specifies a function to be run when ~tlon~ operates in batch mode. This allows for automated processing of multiple items using AI functions. Set this to the symbol of the desired function.

#+begin_src emacs-lisp
(setq tlon-ai-batch-fun 'my-batch-processing-function)
#+end_src

*** Overwrite Image Alt Text
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-overwrite-alt-text
:END:
#+vindex: tlon-ai-overwrite-alt-text
The user option ~tlon-ai-overwrite-alt-text~ controls whether existing alt text in image tags should be overwritten when generating new descriptions.

- If non-nil, existing alt text will be replaced by the newly generated text when using ~tlon-ai-set-image-alt-text-in-buffer~.
- If nil (the default), existing alt text will be preserved.

Note: The command ~tlon-ai-set-image-alt-text~ (operating on a single image tag at point) *always* overwrites existing alt text, regardless of this option's setting.

*** Edit Prompt Before Sending
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-edit-prompt
:END:
#+vindex: tlon-ai-edit-prompt
When the user option ~tlon-ai-edit-prompt~ is non-nil, ~tlon~ will prompt the user to edit the generated prompt string before sending it to the AI model. This allows for on-the-fly customization of AI requests.

#+begin_src emacs-lisp
(setq tlon-ai-edit-prompt t)
#+end_src

*** Auto Proofread Reference Articles
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-auto-proofread
:END:
#+vindex: tlon-ai-auto-proofread
If the user option ~tlon-ai-auto-proofread~ is set to a non-nil value, ~tlon~ will automatically initiate the proofreading process using the configured AI model after a reference article has been generated via ~tlon-ai-create-reference-article~.

*** Custom Models
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-custom-models
:END:

~tlon~ allows specifying different AI models for specific tasks, overriding the default =gptel= model configuration. This enables using models optimized for particular capabilities (e.g., large context window for summarization, advanced reasoning for proofreading).

Each option takes a cons cell =(BACKEND . MODEL)=, where =BACKEND= is a string (e.g., ="ChatGPT"=, ="Gemini"=) and =MODEL= is a symbol representing the specific model (e.g., =gpt-4.5-preview=, =gemini-2.0-flash-thinking-exp-01-21=). Refer to ~gptel-extras-ai-models~ for available options. If an option is nil, the default =gptel= model is used for that task.

#+vindex: tlon-ai-summarization-model
+ ~tlon-ai-summarization-model~ :: Model for summarizing text (e.g., generating abstracts, synopses). It's recommended to use a model with a large context window.
  #+begin_src emacs-lisp
  (setq tlon-ai-summarization-model '("Gemini" . gemini-2.0-flash-thinking-exp-01-21))
  #+end_src

#+vindex: tlon-ai-markdown-fix-model
+ ~tlon-ai-markdown-fix-model~ :: Model for fixing Markdown formatting issues, especially when comparing original and translated documents.
  #+begin_src emacs-lisp
  (setq tlon-ai-markdown-fix-model '("Gemini" . gemini-2.0-flash-thinking-exp-01-21))
  #+end_src

#+vindex: tlon-ai-create-reference-article-model
+ ~tlon-ai-create-reference-article-model~ :: Model used by ~tlon-ai-create-reference-article~ to draft encyclopedia-style articles based on provided source materials.
  #+begin_src emacs-lisp
  (setq tlon-ai-create-reference-article-model nil) ; Use default gptel model
  #+end_src

#+vindex: tlon-ai-proofread-reference-article-model
+ ~tlon-ai-proofread-reference-article-model~ :: Model used by ~tlon-ai-proofread-reference-article~ for correcting factual errors, calculation mistakes, etc., in generated reference articles. Often benefits from a more powerful model.
  #+begin_src emacs-lisp
  (setq tlon-ai-proofread-reference-article-model '("ChatGPT" . gpt-4.5-preview))
  #+end_src

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-commands
:END:

This section details the interactive commands provided by =tlon-ai.el=.

*** Translation Variants
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-translate
:END:
#+findex: tlon-ai-translate
The command ~tlon-ai-translate~ prompts for text and returns ten alternative Spanish translations using the configured AI model. The user can then select the preferred translation from the minibuffer, which is copied to the kill ring.

*** Writing Reference Articles
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-create-reference-article
:END:
#+findex: tlon-ai-create-reference-article
The command ~tlon-ai-create-reference-article~ generates a new encyclopedia-style article based on the current buffer's content and linked sources.

It extracts the title from the buffer's front matter (=title= key). It determines the language of the article from the current file. It constructs a prompt using ~tlon-ai-write-reference-article-prompt~, instructing the AI to synthesize information primarily from attached source files (added to the =gptel= context via ~tlon-add-add-sources-to-context~) and an optional glossary (added via ~tlon-add-glossary-to-context~).

The AI response (the generated article) is placed in a new buffer. If the user confirms, it can then be proofread using ~tlon-ai-proofread-reference-article~. The model used can be customized via ~tlon-ai-create-reference-article-model~.

*** Proofreading Reference Articles
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-proofread-reference-article
:END:
#+findex: tlon-ai-proofread-reference-article
The command ~tlon-ai-proofread-reference-article~ sends the content of the current buffer (assumed to be a reference article) to the AI for proofreading.

It uses the prompt defined in ~tlon-ai-proofread-reference-article-prompt~, instructing the AI to act as an expert proofreader, focusing on factual errors, calculation mistakes, and other important issues within the context of an encyclopedia of effective altruism. The language is determined from the current file.

The AI's response, containing the proofread version or comments, is displayed in a new buffer named "*Comments on [Article Title]*". The model used can be customized via ~tlon-ai-proofread-reference-article-model~.

*** Rewriting Text
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-rewrite
:END:
#+findex: tlon-ai-rewrite
The command ~tlon-ai-rewrite~ prompts for text (defaulting to the active region) and requests ten alternative Spanish rewrites from the AI using the prompt ~tlon-ai-rewrite-prompt~.

The user selects one of the suggested variants from the minibuffer. If a region was active, it is deleted and replaced with the selected variant. The selected variant is also copied to the kill ring.

*** Image Description
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-describe-image
:END:
#+findex: tlon-ai-describe-image
The command ~tlon-ai-describe-image~ generates a concise description (alt text) for an image file.

It prompts the user to select an image file if one isn't automatically detected (e.g., from a =Figure= tag at point or the file at point in Dired). It determines the desired language for the description based on the context (e.g., the language of the current buffer).

It uses the prompt from ~tlon-ai-describe-image-prompt~ for the determined language, instructing the AI to provide a one- or two-sentence description under 50 words. The image file is added to the =gptel= context for the request.

By default, the resulting description is displayed as a message. An optional CALLBACK argument can be provided programmatically to handle the response differently.

*** Setting Image Alt Text
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-set-image-alt-text
:END:
#+findex: tlon-ai-set-image-alt-text
The command ~tlon-ai-set-image-alt-text~ automatically generates and inserts an alt text description for an image tag (=Figure= or =OurWorldInData=) at point.

It extracts the image source (=src=) attribute from the tag, locates the corresponding image file (handling local paths and Our World In Data URLs), and then calls ~tlon-ai-describe-image~ to get the description. The generated alt text is then inserted into the =alt= attribute of the image tag at point. This command *always* overwrites any existing alt text.

#+findex: tlon-ai-set-image-alt-text-in-buffer
The command ~tlon-ai-set-image-alt-text-in-buffer~ iterates through all =Figure= and =OurWorldInData= tags in the current buffer and calls ~tlon-ai-set-image-alt-text~ for each one.

Whether it overwrites existing alt text depends on the value of the user option ~tlon-ai-overwrite-alt-text~.

*** Fixing Markdown Formatting
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-fix-markdown-format
:END:
#+findex: tlon-ai-fix-markdown-format
The command ~tlon-ai-fix-markdown-format~ attempts to restore lost or altered formatting in a translated Markdown file by comparing it paragraph by paragraph with its original counterpart.

It identifies the original file using ~tlon-get-counterpart~. It retrieves corresponding paragraphs from both files using ~tlon-get-corresponding-paragraphs~. For each pair of paragraphs, it sends a request to the AI using the prompt ~tlon-ai-fix-markdown-format-prompt~, asking it to apply the formatting from the original paragraph to the translated text.

The command processes paragraphs concurrently (up to a limit defined internally) and includes a retry mechanism with exponential backoff for failed requests. If a paragraph fails permanently after 3 retries, the process aborts.

Upon successful completion of all paragraphs, the reconstructed content is saved to a new file named =[original-filename]--fixed.md=. The user is then prompted to optionally start an =ediff= session between the original translation and the newly fixed file. The model used can be customized via ~tlon-ai-markdown-fix-model~.

*** Generating Abstracts and Synopses
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-get-abstracts
:END:

These commands generate summaries of documents using AI.

#+findex: tlon-get-abstract-with-or-without-ai
+ ~tlon-get-abstract-with-or-without-ai~ :: This command first attempts to extract an abstract using non-AI methods via ~tlon-fetch-and-set-abstract~. If that fails (e.g., no abstract found in metadata or the file), it falls back to generating one using AI via ~tlon-get-abstract-with-ai~.

#+findex: tlon-get-abstract-with-ai
+ ~tlon-get-abstract-with-ai~ :: Generates a standard abstract (typically 100-250 words) for the specified content (file, region, PDF/HTML associated with BibTeX entry, etc.). It first asks the AI to check if an abstract already exists in the text using the prompt ~tlon-ai-get-abstract-prompts~. If found, the AI returns it; otherwise, the AI generates a new abstract following the guidelines in ~tlon-ai-how-to-write-abstract-prompt~. The language is either detected automatically or selected by the user. The result is typically inserted into the =abstract= field of the corresponding BibTeX entry or copied to the kill ring. The model used can be customized via ~tlon-ai-summarization-model~.

#+findex: tlon-shorten-abstract-with-ai
+ ~tlon-shorten-abstract-with-ai~ :: Takes an existing abstract (typically from the =abstract= field of the BibTeX entry at point) and asks the AI to shorten it to meet the length requirements specified in ~tlon-tex-max-abstract-length~, using the prompt ~tlon-ai-shorten-abstract-prompts~. The shortened abstract replaces the original one in the BibTeX entry.

#+findex: tlon-get-synopsis-with-ai
+ ~tlon-get-synopsis-with-ai~ :: Generates a more detailed summary (synopsis, typically 1000-2000 words) of the specified content. It uses the prompt ~tlon-ai-get-synopsis-prompts~. The resulting synopsis is copied to the kill ring. The model used can be customized via ~tlon-ai-summarization-model~.

#+findex: tlon-get-abstract-with-ai-from-pdf
+ ~tlon-get-abstract-with-ai-from-pdf~ :: A convenience command that specifically targets the PDF file associated with the BibTeX entry at point and calls ~tlon-get-abstract-with-ai~ on it.

#+findex: tlon-get-abstract-with-ai-from-html
+ ~tlon-get-abstract-with-ai-from-html~ :: A convenience command that specifically targets the HTML file associated with the BibTeX entry at point and calls ~tlon-get-abstract-with-ai~ on it.

*** Setting Language in BibTeX Entries
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-set-language-bibtex
:END:
#+findex: tlon-ai-set-language-bibtex
The command ~tlon-ai-set-language-bibtex~ automatically detects and sets the =langid= field for the BibTeX entry at point.

It sends the BibTeX entry text to the AI using the prompt ~tlon-ai-detect-language-bibtex-prompt~.

- If the entry already has a =langid= field:
  - If the detected language matches the existing =langid=, no change is made (unless the existing =langid= needs validation/standardization).
  - If they conflict, the user is prompted to choose which language to use.
- If the entry has no =langid= field, the detected language is added.

The language code is validated and standardized using ~tlon~'s language functions before being set.

*** Phonetic Transcription
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-phonetically-transcribe
:END:
#+findex: tlon-ai-phonetically-transcribe
The command ~tlon-ai-phonetically-transcribe~ generates the International Phonetic Alphabet (IPA) transcription for a given text string.

It prompts for the text to transcribe (defaulting to the active region or word at point) and determines the language (from the file or user selection). It uses the prompt ~tlon-ai-transcribe-phonetically-prompt~ for the specified language. The resulting IPA transcription is copied to the kill ring.

#+findex: tlon-phonetically-transcribe-in-buffer
The command ~tlon-phonetically-transcribe-in-buffer~ iterates through each line in the current buffer, calls ~tlon-ai-phonetically-transcribe~ on the line's content, and inserts the resulting IPA transcription after the original line, separated by a comma.

*** Audio Transcription
:PROPERTIES:
:CUSTOM_ID: h:tlon-transcribe-audio
:END:
#+findex: tlon-transcribe-audio
The command ~tlon-transcribe-audio~ transcribes an audio file using OpenAI's Whisper API.

It prompts the user to select an audio file. It retrieves the OpenAI API key (prompting to set it if necessary via ~tlon-tts-openai-get-or-set-key~). It then makes an asynchronous request to the OpenAI API endpoint using =curl=, uploading the audio file.

A CALLBACK function must be provided programmatically to handle the result. The callback receives the transcript text on success, or nil on failure.

*** Mathematical Expression Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-math
:END:

#+findex: tlon-ai-convert-math
+ ~tlon-ai-convert-math~ :: Converts a natural language mathematical expression into LaTeX format. It prompts for the expression (defaulting to the region or =Math= tag content) and language. It uses the prompt ~tlon-ai-convert-math-prompt~. If point is on a =Math= tag, the LaTeX result is inserted as the second value in the =alt= attribute (preserving the original expression as the first value). Otherwise, the result is copied to the kill ring and messaged.

#+findex: tlon-ai-translate-math
+ ~tlon-ai-translate-math~ :: Converts a LaTeX mathematical expression into a natural language description (alt text). It prompts for the expression (defaulting to the region or =Math= tag content) and language. It uses the prompt ~tlon-ai-translate-math-prompt~. If point is on a =Math= tag, the natural language result is inserted as the first value in the =alt= attribute (preserving the LaTeX expression as the second value). Otherwise, the result is copied to the kill ring and messaged.

*** Fixing Encoding Errors
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-fix-encoding
:END:
#+findex: tlon-ai-fix-encoding-in-string
The command ~tlon-ai-fix-encoding-in-string~ attempts to correct encoding errors within a given string.

It typically operates on a JSON value identified at point using helper functions. It determines the language associated with the JSON key. It sends the string to the AI using the prompt ~tlon-ai-fix-encoding-prompt~, asking it to correct encoding issues like =cuýn= or =pronosticaci¾3\263n=. The corrected string is then copied to the kill ring.

#+findex: tlon-ai-fix-encoding-in-buffer
The command ~tlon-ai-fix-encoding-in-buffer~ is a specialized command designed to process a large JSON buffer containing potentially many encoding errors, chunk by chunk. It saves the corrected chunks to separate files. (This seems highly specific to a particular data processing task).

#+findex: tlon-ai-join-files
The command ~tlon-ai-join-files~ concatenates the content of chunk files (e.g., =chunk0.json=, =chunk1.json=, ...) generated by ~tlon-ai-fix-encoding-in-buffer~ back into a single output file (e.g., =fixed.json=).

*** Propagating Changes Across Repositories
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-propagate-changes
:END:
#+findex: tlon-ai-propagate-changes
The command ~tlon-ai-propagate-changes~ attempts to automatically apply changes made in the latest commit of the current file to its corresponding files in other ~tlon~ content repositories (originals and translations).

1. It identifies the current file, its repository, language, and the latest commit affecting it using ~tlon~ and Git functions.
2. It retrieves the diff for the file from that commit using =git show=.
3. It identifies all other ~tlon~ content repositories (excluding the source repo).
4. For each target repository:
   - It determines the corresponding target file using metadata lookups (~tlon-ai--find-target-file~), handling different scenarios (original to translation, translation to original, translation to translation).
   - If a target file is found and exists, it constructs a prompt asking the AI to apply the *semantic equivalent* of the source diff to the target file's content (provided in the prompt).
   - It sends the request to the AI.
   - The callback function (~tlon-ai--propagate-changes-callback~) receives the AI's response (the modified target content).
   - If the AI response is valid, the callback overwrites the target file with the new content.
   - It then stages and commits the changes in the target repository using Git, with a commit message indicating the source commit and repository.

This command relies heavily on accurate metadata (=original_path=) and consistent file structures across repositories.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-menu
:END:
#+findex: tlon-ai-menu
The command ~tlon-ai-menu~ displays a =transient= menu interface, providing quick access to most of the AI-related commands and options described above. It allows toggling options like =tlon-ai-overwrite-alt-text= and =tlon-ai-edit-prompt=, selecting models for specific tasks, setting batch functions, and invoking the various AI operations (summarization, image description, translation, etc.).

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-internals
:END:

This section lists some non-interactive functions and variables used internally by =tlon-ai.el=. While not intended for direct user interaction, understanding them can be helpful for customization or debugging.

+ ~tlon-make-gptel-request~: Core function for sending requests to the AI model via =gptel=. Handles prompt formatting, model selection, context checks, and callbacks.
+ ~tlon-ai-maybe-edit-prompt~: Conditionally allows editing the prompt based on ~tlon-ai-edit-prompt~.
+ ~tlon-warn-if-gptel-context~: Checks if the =gptel= context is empty and warns the user if not.
+ Callback functions (e.g., ~tlon-ai-callback-return~, ~tlon-ai-callback-copy~, ~tlon-ai-callback-save~, ~tlon-ai-callback-insert~, ~tlon-ai-callback-fail~): Handle responses from AI requests in various ways (returning value, copying, saving, inserting, error handling).
+ ~tlon-ai-batch-continue~: Helper for batch processing, moves to the next item and calls the batch function.
+ ~tlon-get-string-dwim~: Retrieves text content from various sources (file, region, buffer, PDF/HTML associated with BibTeX entry) for AI processing.
+ ~tlon-get-file-as-string~: Reads the content of a file (handling PDF conversion) into a string.
+ Prompt constants (e.g., ~tlon-ai-detect-language-prompt~, ~tlon-ai-translate-prompt~, ~tlon-ai-write-reference-article-prompt~, etc.): Store the various prompt templates used for different AI tasks, often including language-specific versions.
+ Change propagation helpers (~tlon-ai--get-commit-diff~, ~tlon-ai--find-target-file~, ~tlon-ai--commit-in-repo~, ~tlon-ai--propagate-changes-callback~): Internal functions used by ~tlon-ai-propagate-changes~.
+ Transient infix definitions (e.g., ~tlon-ai-infix-toggle-overwrite-alt-text~, ~tlon-ai-batch-fun-infix~, model selection infixes): Define the interactive elements within the ~tlon-ai-menu~.

* API Interaction (=tlon-api.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-api
:END:

This module facilitates interaction with the Tlön Babel APIs, specifically the =uqbar= API. It handles authentication (token retrieval), making requests to various API endpoints, processing responses (especially logs), retrieving citations, and uploading files.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-dependencies
:END:

+ =request= (for making HTTP requests)
+ =tlon-core=
+ =transient= (for the menu)
+ =json= (for parsing responses)
+ =auth-source= (for credentials)
+ =url= (for URL encoding)

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-config
:END:

*** API Routes
:PROPERTIES:
:CUSTOM_ID: h:tlon-uqbar-api-routes
:END:
#+vindex: tlon-uqbar-api-routes
The constant ~tlon-uqbar-api-routes~ defines the available endpoints for the =uqbar= API. Each entry is a plist specifying the =:route= (URL path, potentially with =%s= for language), =:type= (HTTP method, e.g., "GET", "POST"), and a =:docstring= explaining the endpoint's purpose. The =%s= in routes is dynamically replaced with the current ~tlon-translation-language~ by ~tlon-api-get-routes~.

*** Local API URL
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-local-url
:END:
#+vindex: tlon-api-local-url
The constant ~tlon-api-local-url~ defines the base URL for the local development instance of the =uqbar= API.

*** Log Buffer Variable
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-most-recent-log-buffer
:END:
#+vindex: tlon-api-most-recent-log-buffer
The variable ~tlon-api-most-recent-log-buffer~ stores the name (typically the route) of the buffer containing the most recently received API log response. Used by ~tlon-api-open-most-recent-log~.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-commands
:END:

This section details the interactive commands provided by =tlon-api.el=.

*** Make API Request
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-request
:END:
#+findex: tlon-api-request
The command ~tlon-api-request~ makes a request to a specified =ROUTE= on the =uqbar= API.
1. Prompts the user to select the =ROUTE= using ~tlon-select-api-route~.
2. Optionally takes =FORCE-UPDATE= (non-nil or prefix argument) to append =?force=true= to the URL.
3. Optionally takes =POP-TO-BUFFER= (non-nil) to display the log response buffer immediately.
4. Retrieves an authentication token using ~tlon-api-get-token~.
5. Makes the HTTP request using the =request= library, specifying the method (=:type=) and headers (including the bearer token).
6. Parses the JSON response.
7. On success, calls ~tlon-api-print-response~ to process and display the log data, and messages the user about completion.

#+findex: tlon-api-request-force
+ ~tlon-api-request-force~ :: A convenience command that calls ~tlon-api-request~ with the =FORCE-UPDATE= argument set to =t=.

*** Authentication Token
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-copy-token
:END:
#+findex: tlon-api-copy-token
The command ~tlon-api-copy-token~ retrieves an authentication token for the local API using ~tlon-api-get-token~ and copies it to the kill ring.

*** Log Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-log-commands
:END:

#+findex: tlon-api-open-most-recent-log
+ ~tlon-api-open-most-recent-log~ :: Opens the buffer associated with the most recent API log response (whose name is stored in ~tlon-api-most-recent-log-buffer~). If the buffer doesn't exist, it re-requests the log from the API using ~tlon-api-request~ with =POP-TO-BUFFER= set.

#+findex: tlon-api-open-local-log
+ ~tlon-api-open-local-log~ :: Opens the local log file maintained by the =uqbar-api= backend itself (typically =logs/uqbar-api.log= within the =uqbar-api= repository).

*** File Upload
:PROPERTIES:
:CUSTOM_ID: h:tlon-upload-file-to-server
:END:
#+findex: tlon-upload-file-to-server
The command ~tlon-upload-file-to-server~ uploads a local =FILE= to a remote =DESTINATION= using the =scp= command asynchronously.
1. Prompts for the =FILE= to upload (using =files-extras-read-file=).
2. Prompts for the remote =DESTINATION= directory.
3. Optionally takes =DELETE-AFTER-UPLOAD= (non-nil) to delete the local file upon successful upload.
4. Starts the =scp= process in the background.
5. Sets a process sentinel to monitor the upload status, displaying messages for success or failure. If successful and requested, deletes the local file. If failed, displays the error and the =*scp-upload*= buffer.
6. If called from Dired, reverts the buffer after initiating the upload.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-menu-cmd
:END:
#+findex: tlon-api-menu
The command ~tlon-api-menu~ activates a =transient= menu interface for API operations.

It provides the following groups and commands:
+ *Requests*:
  + =q= :: Make request (~tlon-api-request~)
  + =Q= :: Make force request (~tlon-api-request-force~)
+ *Logs*:
  + =l= :: Open most recent log (~tlon-api-open-most-recent-log~)
  + =L= :: Open local log (~tlon-api-open-local-log~)
+ *Misc*:
  + =t= :: Copy access token (~tlon-api-copy-token~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-internals
:END:

This section lists non-interactive functions used internally or potentially useful for advanced customization.

*** Authentication
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-auth-internals
:END:

#+findex: tlon-api-get-token
+ ~tlon-api-get-token~ :: Retrieves an authentication token for a given =SITE= (URL). It gets credentials using ~tlon-api-get-credentials~, makes a POST request to the =/api/auth/login= endpoint, parses the JSON response, and calls the provided =CALLBACK= function with the extracted =access_token=.

#+findex: tlon-api-get-credentials
+ ~tlon-api-get-credentials~ :: Constructs the data string for the authentication request. It retrieves the username (based on =user-full-name= via ~tlon-user-lookup~) and the password (from =auth-source= using a specific key format) and URL-encodes them into the required =application/x-www-form-urlencoded= format.

*** Route Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-route-internals
:END:

#+findex: tlon-api-get-routes
+ ~tlon-api-get-routes~ :: Returns a processed version of ~tlon-uqbar-api-routes~ where any =%s= placeholder in the =:route= property is replaced with the current value of ~tlon-translation-language~.

#+findex: tlon-select-api-route
+ ~tlon-select-api-route~ :: Prompts the user to select an API route using completion. It formats the choices from ~tlon-api-get-routes~ to include the route path and its docstring. Returns the selected route path string.

*** Response and Log Processing
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-response-internals
:END:

#+findex: tlon-api-print-response
+ ~tlon-api-print-response~ :: Processes the =DATA= (parsed JSON) received from an API request for a given =ROUTE=.
  1. Sets ~tlon-api-most-recent-log-buffer~ to the =ROUTE=.
  2. Creates or clears the buffer named after the =ROUTE=.
  3. Inserts the JSON =DATA= into the buffer.
  4. Pretty-prints the JSON using =json-pretty-print-buffer=.
  5. Fixes any relative =:source_filename= paths within the JSON to be absolute paths based on ~paths-dir-tlon-repos~ using ~tlon-fix-source-filename-paths~.
  6. Makes file paths within the buffer clickable using ~tlon-make-paths-clickable~.
  7. If =POP-TO-BUFFER= is non-nil, displays the buffer.

#+findex: tlon-fix-source-filename-paths
+ ~tlon-fix-source-filename-paths~ :: Parses the JSON content of the current (or specified) =BUFFER=, finds all =source_filename= keys, prepends the Tlön repository base path (~paths-dir-tlon-repos~) to their values, re-encodes the modified JSON, inserts it back, and re-formats/modes the buffer.

#+findex: tlon-make-paths-clickable
+ ~tlon-make-paths-clickable~ :: Searches the current (or specified) =BUFFER= for quoted strings that represent existing file paths. For each valid path found, it creates an Emacs button overlay that allows opening the file with mouse clicks or RET. It also enables =goto-address-mode= and binds RET locally to =ffap= (find file at point).

*** Citation Retrieval
:PROPERTIES:
:CUSTOM_ID: h:tlon-api-citation-internals
:END:

#+findex: tlon-api-get-citation
+ ~tlon-api-get-citation~ :: Retrieves a formatted citation for a BibTeX =KEY= from the Babel API. Takes an optional =CSL= style argument ('long, 'short, 'audio-long, 'audio-short). Constructs the URL using ~tlon-api-get-citation-url~, fetches the JSON using ~tlon-api-get-citation-json~, and extracts the relevant citation string based on the =CSL= style. Returns nil if not found.

#+findex: tlon-api-get-citation-url
+ ~tlon-api-get-citation-url~ :: Constructs the specific API URL for retrieving a citation based on the =KEY= and =CSL= style (determining text/audio endpoint).

#+findex: tlon-api-get-citation-json
+ ~tlon-api-get-citation-json~ :: Fetches the JSON response from a given citation =URL= using an external =curl= command. Includes basic error handling for host resolution issues. Parses the JSON response using =json-read=.

* BibTeX Functionality (=tlon-tex.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex
:END:

This module provides a wide range of functions for interacting with BibTeX files and related data sources. It covers fetching and managing abstracts, moving entries between different BibTeX files (e.g., fluid vs. stable), adding and updating fields, cleaning entries, generating citation keys (autokey), finding and adding missing URLs, handling translations of abstracts, converting Markdown links to citations, replacing citation keys with formatted citations, and generating reports on BibTeX entries.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-dependencies
:END:

+ =bibtex-extras=
+ =paths=
+ =shut-up=
+ =tlon-core=
+ =transient=
+ =doi-utils= (for ~tlon-fetch-url-from-doi~)
+ =url= (for fetching data)
+ =json= (for parsing API responses and translations)
+ =citar-cache= (for bibliography lookups)
+ =zotra-extras= (for fetching abstracts/fields)
+ =simple-extras= (for URL simplification)
+ =tlon-ai= (for AI-assisted abstract fetching)
+ =tlon-api= (for fetching formatted citations)
+ =tlon-deepl= (for abstract translation)
+ =tlon-md= (for Markdown link/tag handling)
+ =citar-extras= (for opening entries in Ebib)
+ =files-extras= (for writing lists to files)

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-options
:END:

#+vindex: tlon-abstract-overwrite
+ ~tlon-abstract-overwrite~ :: Controls behavior when fetching an abstract for an entry that already has one.
  + =always=: Always overwrite the existing abstract.
  + =never=: Never overwrite the existing abstract.
  + =ask= (default): Prompt the user whether to overwrite.

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-config
:END:

*** Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-constants
:END:

#+vindex: tlon-file-abstract-translations
+ ~tlon-file-abstract-translations~ :: Path to the JSON file storing abstract translations.
#+vindex: tlon-tex-excluded-keys-file
+ ~tlon-tex-excluded-keys-file~ :: Path to the Elisp file where excluded BibTeX keys (for abstract reporting) are persisted.
#+vindex: tlon-locators
+ ~tlon-locators~ :: Alist mapping citation locators (e.g., "page", "chapter") to their abbreviations (e.g., "p.", "chap."). Used for regex generation.
#+vindex: tlon-tex-pandoc-cite-pattern-long
+ ~tlon-tex-pandoc-cite-pattern-long~ :: Regex for matching "long" Pandoc citation keys (e.g., `[@key]`, `[@key, p. 5]`). Captures key and locator(s).
#+vindex: tlon-tex-pandoc-cite-pattern-short
+ ~tlon-tex-pandoc-cite-pattern-short~ :: Regex for matching "short" Pandoc citation keys (e.g., `<cite>[@key]</cite>`). Captures key and locator(s).
#+vindex: tlon-tex-pandoc-cite-pattern
+ ~tlon-tex-pandoc-cite-pattern~ :: Combined regex for matching both long and short Pandoc citation keys.
#+vindex: tlon-regexp-locator-in-citation
+ ~tlon-regexp-locator-in-citation~ :: Regex fragment specifically matching one or more locators within a citation, based on ~tlon-locators~.
#+vindex: tlon-regexp-expanded-citation-formatter-with-locators
+ ~tlon-regexp-expanded-citation-formatter-with-locators~ :: (Note: Marked as not working correctly) Formatter string for a regex to match expanded citations, attempting to handle locators.
#+vindex: tlon-regexp-expanded-citation-formatter
+ ~tlon-regexp-expanded-citation-formatter~ :: Formatter string for a regex to match expanded citations (e.g., "Author, Title (Year) ...").
#+vindex: tlon-regexp-expanded-citation-with-link
+ ~tlon-regexp-expanded-citation-with-link~ :: Regex derived from ~tlon-regexp-expanded-citation-formatter~ to match an expanded citation where the title is a Tlön-style Markdown link. Captures the title.
#+vindex: tlon-regexp-expanded-citation-with-no-link
+ ~tlon-regexp-expanded-citation-with-no-link~ :: Regex derived from ~tlon-regexp-expanded-citation-formatter~ to match an expanded citation where the title is enclosed in quotes or asterisks but is not a link. Captures the title.
#+vindex: tlon-tex-max-abstract-length
+ ~tlon-tex-max-abstract-length~ :: Maximum recommended word count for an abstract. Used in reports.
#+vindex: tlon-tex-min-abstract-length
+ ~tlon-tex-min-abstract-length~ :: Minimum recommended word count for an abstract. Used in reports.
#+vindex: tlon-tex-synopsis-length
+ ~tlon-tex-synopsis-length~ :: Maximum recommended word count for a synopsis (generated via AI).

*** Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-variables
:END:

#+vindex: tlon-tex-excluded-keys
+ ~tlon-tex-excluded-keys~ :: List of BibTeX keys for entries that do not require an abstract. Loaded from ~tlon-tex-excluded-keys-file~ and used by ~tlon-tex-entries-report~.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-commands
:END:

This section details the interactive commands provided by =tlon-tex.el=.

*** Abstract Management
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-abstract-commands
:END:

#+findex: tlon-fetch-and-set-abstract
+ ~tlon-fetch-and-set-abstract~ :: (Autoloaded) Attempts to fetch an abstract for the BibTeX entry at point and set its =abstract= field.
  1. Checks if proceeding is allowed based on ~tlon-abstract-overwrite~ and existing abstract.
  2. Retrieves DOI, ISBN, and URL from the entry.
  3. Tries fetching from CrossRef (using DOI), Google Books (using ISBN), and Zotero/Zotra (using URL/DOI) in that order.
  4. If an abstract is found, cleans it using ~tlon-abstract-cleanup~ and sets the field using the appropriate mode-specific function (Ebib or BibTeX).
  5. If no abstract is found via these methods, messages the user.
  6. Calls ~tlon-ai-batch-continue~ for potential batch processing integration.

#+findex: tlon-translate-abstract
+ ~tlon-translate-abstract~ :: Translates the abstract of the BibTeX entry at point (or specified =KEY=) from its =langid= to a selected =TARGET-LANG= using DeepL.
  1. Determines the BibTeX key, abstract text, and source language.
  2. Prompts for the =TARGET-LANG= using ~tlon-select-language~.
  3. Calls ~tlon-deepl-translate~ with the abstract text and languages.
  4. Uses the callback ~tlon-translate-abstract-callback~ to save the translation to the JSON file (~tlon-file-abstract-translations~) or a specified variable =VAR=.

#+findex: tlon-translate-abstracts
+ ~tlon-translate-abstracts~ :: Translates abstracts for multiple entries in the current BibTeX buffer. Iterates through entries (up to 2000 times per call), calling ~tlon-translate-abstract~ for each entry that doesn't already have a translation (unless =OVERWRITE= is non-nil). Useful for batch translation, especially when saving to a variable =VAR= to avoid file I/O contention.

*** Entry Management
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-entry-commands
:END:

#+findex: tlon-move-entry-to-fluid
+ ~tlon-move-entry-to-fluid~ :: (Autoloaded) Moves the BibTeX entry at point (or specified =KEY=) from its current file to the fluid BibTeX file (~tlon-file-fluid~).
  1. Determines the key.
  2. Uses =bibtex-extras-move-entry= to move the entry.
  3. Adds or updates the =database= field to "Tlön" in the fluid file using ~tlon-add-or-update-tlon-field-in-file~.
  4. Copies the key to the kill ring.

#+findex: tlon-move-all-fluid-entries-to-stable
+ ~tlon-move-all-fluid-entries-to-stable~ :: (Autoloaded) Moves all entries from the fluid BibTeX file (~tlon-file-fluid~) to the stable BibTeX file (~tlon-file-stable~). Checks for unsaved buffers first.

#+findex: tlon-add-database-field
+ ~tlon-add-database-field~ :: Iterates through all entries in a specified BibTeX =FILE= and adds or updates the =database= field to "Tlön" using ~tlon-add-or-update-tlon-field~. Saves the buffer.

#+findex: tlon-auto-add-database-field
+ ~tlon-auto-add-database-field~ :: Hook function intended for =after-save-hook= in BibTeX mode. Automatically calls ~tlon-add-database-field~ on the fluid BibTeX file (~tlon-file-fluid~) whenever it's saved.

#+findex: tlon-auto-clean-entry
+ ~tlon-auto-clean-entry~ :: Hook function intended for =after-save-hook= in BibTeX mode. Performs cleanup actions on save: removes trailing spaces in fields (~tlon-remove-empty-spaces~), escapes special characters (~bibtex-extras-escape-special-characters~), and runs =bibtex-clean-entry= if point is at the start of an entry.

#+findex: tlon-add-lang-id-to-entries
+ ~tlon-add-lang-id-to-entries~ :: Iterates through entries in the current BibTeX buffer. If an entry lacks a =langid= field, prompts the user to select a language using ~tlon-select-language~ and sets the field.

#+findex: bibtex-extras-escape-special-characters
+ ~bibtex-extras-escape-special-characters~ :: Escapes special characters ($, %, #, &) with a backslash within the current BibTeX buffer, excluding =url= and =file= fields.

*** URL Management
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-url-commands
:END:

#+findex: tlon-prompt-to-add-missing-urls
+ ~tlon-prompt-to-add-missing-urls~ :: (Autoloaded) Finds URLs present in the current Markdown buffer but missing from the Tlön bibliography.
  1. Gets missing URLs using ~tlon-get-missing-urls~.
  2. Iterates through missing URLs, highlighting each one.
  3. Prompts the user ("Add? y/n") for each URL.
  4. Saves the URLs the user wants to add to the file specified by =zotra-extras-add-multiple-urls-filename= using =files-extras-list-to-lines=.
  5. Messages the user about the saved file and the next step (using =zotra-extras-add-multiple-urls=).

*** Translation Entry Creation
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-translation-entry-commands
:END:

#+findex: tlon-tex-create-translation-entry
+ ~tlon-tex-create-translation-entry~ :: (Autoloaded) Creates a new BibTeX entry representing a translation of the entry currently open in =ebib-entry-mode=.
  1. Prompts for the target language using ~tlon-select-language~.
  2. Gathers fields from the original entry (=translation= (original key), =type=, =author=, =database=).
  3. Prompts for the new =title= and =translator=.
  4. Sets the =langid= based on the selected language and =date= to the current year.
  5. Switches to the translations BibTeX database (database 3).
  6. Creates a new entry (=ebib-add-entry=).
  7. Sets the gathered/prompted fields in the new entry.
  8. Generates a citation key for the new entry (=ebib-generate-autokey=).

*** Citation Conversion and Replacement
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-citation-commands
:END:

#+findex: tlon-convert-links-to-cite
+ ~tlon-convert-links-to-cite~ :: (Autoloaded) Iterates through standard Markdown links in the current buffer. If a link's URL matches a =url= field in the Tlön bibliography (found via ~tlon-bibliography-lookup~), prompts the user to convert the link to a =<Cite>= tag using the corresponding BibTeX key.

#+findex: tlon-convert-bibliography-to-cite
+ ~tlon-convert-bibliography-to-cite~ :: (Autoloaded) Converts plain text bibliography entries (matching ~tlon-regexp-expanded-citation-with-link~ or ~tlon-regexp-expanded-citation-with-no-link~) within the current region/buffer into =<Cite>= tags. Looks up the BibTeX key based on the =title= using ~tlon-bibliography-lookup~. Assumes one work per line and no locators.

#+findex: tlon-tex-replace-keys-with-citations
+ ~tlon-tex-replace-keys-with-citations~ :: Replaces all =<Cite key="..." ...>= tags in a =FILE= (or current buffer) with formatted citations retrieved from the Tlön API.
  1. Calls ~tlon-tex-do-replace-keys-with-citations~.
  2. Optionally takes an =AUDIO= flag. If non-nil, requests audio-specific citation styles ('short-audio', 'long-audio') from the API. Otherwise, requests 'short' or 'long' based on the =length= attribute in the =<Cite>= tag.

#+findex: tlon-tex-replace-keys-with-citations-in-dir
+ ~tlon-tex-replace-keys-with-citations-in-dir~ :: Recursively applies ~tlon-tex-replace-keys-with-citations~ to all Markdown files in the current directory. Takes optional =AUDIO= flag.

*** Reporting and Field Finding
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-report-commands
:END:

#+findex: tlon-tex-entries-report
+ ~tlon-tex-entries-report~ :: (Autoloaded) Generates a report buffer listing BibTeX entries in the current buffer that:
  - Have no abstract (excluding those in ~tlon-tex-excluded-keys~ or with a =crossref= field).
  - Have abstracts longer than ~tlon-tex-max-abstract-length~ words.
  - Have abstracts shorter than ~tlon-tex-min-abstract-length~ words.
  - Have abstracts with fewer than 10 words.
  Filters out entries that are translations (have a =translation= field) using ~tlon-text-remove-translated-entries~.

#+findex: tlon-tex-add-to-excluded-keys
+ ~tlon-tex-add-to-excluded-keys~ :: Adds one or more BibTeX keys (provided as a space-separated string) to the ~tlon-tex-excluded-keys~ list and saves the list to ~tlon-tex-excluded-keys-file~.

#+findex: tlon-tex-find-next-entry-with-missing-field
+ ~tlon-tex-find-next-entry-with-missing-field~ :: Moves point to the next BibTeX entry in the buffer that is missing a specified =FIELD= (prompting for the field name with completion). Skips entries that have a =crossref= field.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-menu-cmd
:END:
#+findex: tlon-tex-menu
The command ~tlon-tex-menu~ (Autoloaded) activates a =transient= menu interface for BibTeX-related operations.

It provides the following groups and commands:
+ *Markdown*:
  + *URLs missing from database*:
    + =f= :: Find in file (~tlon-prompt-to-add-missing-urls~)
    + =z= :: Add with Zotra (=zotra-extras-add-multiple-urls=)
  + *Convert to `Cite`*:
    + =b= :: Convert bibliography (~tlon-convert-bibliography-to-cite~)
    + =l= :: Convert links (~tlon-convert-links-to-cite~)
+ *Ebib*:
  + =a= :: Fetch abstract (~tlon-fetch-and-set-abstract~)
  + =c= :: Create translation entry (~tlon-tex-create-translation-entry~)
+ *BibTeX*:
  + *Report*:
    + =r r= :: Generate report (~tlon-tex-entries-report~)
    + =r x= :: Add key to exclude from report (~tlon-tex-add-to-excluded-keys~)
  + *Move*:
    + =t= :: Move this entry to Tlön database (~tlon-move-entry-to-fluid~)
    + =s= :: Move all entries to stable (~tlon-move-all-fluid-entries-to-stable~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** Abstract Fetching Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-abstract-internals
:END:

#+findex: tlon-fetch-abstract-with-zotra
+ ~tlon-fetch-abstract-with-zotra~ :: Attempts to fetch the abstract using =zotra-extras-fetch-field= for a given =URL= or =DOI=. Tries both the original URL and the resolved URL from the DOI (via ~tlon-fetch-url-from-doi~). Handles PDF URLs and timeouts.
#+findex: tlon-fetch-url-from-doi
+ ~tlon-fetch-url-from-doi~ :: Fetches the final redirected URL for a given =DOI= using =curl -ILs=.
#+findex: tlon-fetch-abstract-from-crossref
+ ~tlon-fetch-abstract-from-crossref~ :: Fetches abstract data from the CrossRef API using a =DOI=. Parses the JSON response.
#+findex: tlon-fetch-abstract-from-google-books
+ ~tlon-fetch-abstract-from-google-books~ :: Fetches abstract (description) data from the Google Books API using an =ISBN=. Parses the JSON response. Includes a 5-second timeout.
#+findex: tlon-abstract-may-proceed-p
+ ~tlon-abstract-may-proceed-p~ :: Checks if the abstract fetching/setting process should proceed based on the current mode, the value of ~tlon-abstract-overwrite~, and whether an abstract already exists. Prompts the user if =tlon-abstract-overwrite= is 'ask.
#+findex: tlon-fetch-field-with-zotra
+ ~tlon-fetch-field-with-zotra~ :: Wrapper around =zotra-extras-fetch-field=, potentially fetching the ID/URL first using =ebib-extras-get-or-fetch-id-or-url=.
#+findex: tlon-abstract-cleanup
+ ~tlon-abstract-cleanup~ :: Cleans up a raw abstract string by removing XML/HTML tags, specific LaTeX tags, leading "summary" or "abstract" words, and ensuring it ends with a period.

*** Entry Management Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-entry-internals
:END:

#+findex: tlon-add-or-update-tlon-field
+ ~tlon-add-or-update-tlon-field~ :: Uses =bibtex-extras-add-or-update-field= to set the =database= field to "Tlön" in the current entry.
#+findex: tlon-add-or-update-tlon-field-in-file
+ ~tlon-add-or-update-tlon-field-in-file~ :: Finds the entry with =KEY= in =FILE= and calls ~tlon-add-or-update-tlon-field~ on it. Saves the buffer.
#+findex: tlon-remove-empty-spaces
+ ~tlon-remove-empty-spaces~ :: Removes spaces immediately preceding a closing brace =}= within BibTeX fields in the current buffer.

*** Autokey Generation
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-autokey-internals
:END:
These functions customize the BibTeX autokey generation process, likely used as replacements or advice for standard =bibtex-generate-autokey= behavior.

#+findex: tlon-generate-autokey
+ ~tlon-generate-autokey~ :: Generates a BibTeX key based on =AUTHOR=, =YEAR=, and =TITLE= strings, following customizable BibTeX autokey settings (separators, lengths, etc.). Calls helper functions ~tlon-autokey-get-names~, ~tlon-autokey-get-year~, ~tlon-autokey-get-title~.
#+findex: tlon-autokey-get-names
+ ~tlon-autokey-get-names~ :: Formats the author =NAME= string according to BibTeX autokey settings (number of names, separator, handling "and").
#+findex: tlon-autokey-get-year
+ ~tlon-autokey-get-year~ :: Extracts the relevant part of the =YEAR= string based on =bibtex-autokey-year-length=.
#+findex: tlon-autokey-get-title
+ ~tlon-autokey-get-title~ :: Formats the =TITLE= string according to BibTeX autokey settings (number of words, ignored words, separator, handling terminators).

*** URL and Bibliography Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-url-bib-internals
:END:

#+findex: tlon-get-missing-urls
+ ~tlon-get-missing-urls~ :: Finds URLs present in a =FILE= (using ~tlon-get-urls-in-file~) but not found in the =url= field of any entry in the Tlön bibliography (using ~tlon-get-field-in-bibliography~). Uses simplified URLs for comparison.
#+findex: tlon-get-urls-in-file
+ ~tlon-get-urls-in-file~ :: Extracts all unique URLs found within Markdown links (=markdown-regex-link-inline=) in a =FILE= (or current buffer). Uses =ffap-url-p= for validation.
#+findex: tlon-bibliography-lookup
+ ~tlon-bibliography-lookup~ :: Searches the cached Tlön bibliography (=citar-cache--bibliographies=) for an entry where =FIELD= matches =VALUE= (optionally as a substring). Returns the value of =ASSOC-FIELD= for the matching entry.
#+findex: tlon-get-field-in-bibliography
+ ~tlon-get-field-in-bibliography~ :: Returns a list of all values for a specific =FIELD= found across all entries in the cached Tlön bibliography.

*** Citation Replacement Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-citation-internals
:END:

#+findex: tlon-tex-do-replace-keys-with-citations
+ ~tlon-tex-do-replace-keys-with-citations~ :: The core logic for replacing =<Cite>= tags. Iterates through tags, extracts the key and length attribute, determines the required CSL style (based on length and optional =AUDIO= flag), fetches the formatted citation from the API using ~tlon-api-get-citation~, and replaces the tag with the result.

*** Abstract Translation Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-translation-internals
:END:

#+findex: tlon-read-abstract-translations
+ ~tlon-read-abstract-translations~ :: Reads and parses the JSON data from ~tlon-file-abstract-translations~ using ~tlon-read-json~.
#+findex: tlon-write-abstract-translations
+ ~tlon-write-abstract-translations~ :: Writes the provided =DATA= (alist) to ~tlon-file-abstract-translations~ using ~tlon-write-data~.
#+findex: tlon-add-abstract-translation
+ ~tlon-add-abstract-translation~ :: Adds or updates a =TRANSLATION= for a given =KEY= and =TARGET-LANG= in the abstract translations =DATA= (read from file or passed as =VAR=). Handles existing entries and overwriting based on the =OVERWRITE= flag. Writes back to file or updates the variable.
#+findex: tlon-translate-abstract-callback
+ ~tlon-translate-abstract-callback~ :: Callback function used by ~tlon-translate-abstract~. Takes the DeepL translation result, the =KEY=, =TARGET-LANG=, and optional =OVERWRITE= and =VAR= flags, and calls ~tlon-add-abstract-translation~ to save the result.

*** Reporting Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-report-internals
:END:

#+findex: tlon-tex-load-excluded-keys
+ ~tlon-tex-load-excluded-keys~ :: Loads the list of excluded keys from ~tlon-tex-excluded-keys-file~ into the ~tlon-tex-excluded-keys~ variable.
#+findex: tlon-tex-save-excluded-keys
+ ~tlon-tex-save-excluded-keys~ :: Saves the current value of ~tlon-tex-excluded-keys~ back to ~tlon-tex-excluded-keys-file~.
#+findex: tlon-text-remove-translated-entries
+ ~tlon-text-remove-translated-entries~ :: Filters a =LIST= of BibTeX keys, removing any key that corresponds to an entry having a =translation= field (checked by temporarily opening the entry in Ebib).

*** Field Modification Advice
:PROPERTIES:
:CUSTOM_ID: h:tlon-tex-advice-internals
:END:

#+findex: tlon-tex-field-modified
+ ~tlon-tex-field-modified~ :: Central function called when a BibTeX field is modified. Currently, if the modified =FIELD= is "abstract", it triggers DeepL translation via ~tlon-deepl-translate-abstract~.
#+findex: tlon-tex-remove-braces
+ ~tlon-tex-remove-braces~ :: Removes curly braces ={} = from a =STRING=. Used before sending abstract text to DeepL.
#+findex: tlon-tex-bibtex-set-field-advice
+ ~tlon-tex-bibtex-set-field-advice~ :: :around advice for =bibtex-set-field=. Calls the original function and then calls ~tlon-tex-field-modified~ with the field name, value, and entry key.
#+findex: tlon-tex-ebib-set-field-advice
+ ~tlon-tex-ebib-set-field-advice~ :: :around advice for =ebib-set-field-value=. Calls the original function and then calls ~tlon-tex-field-modified~ with the field name, value, and entry key.

* Clock Functionality (=tlon-clock.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock
:END:

This module provides functions for interacting with Org mode's clocking mechanism (=org-clock=), specifically tailored for the Tlön workflow. It allows retrieving information about the currently clocked task, such as associated files or issues, and performing actions based on that information.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-commands
:END:

This section details the interactive commands provided by =tlon-clock.el=.

*** Open Clocked Task's File
:PROPERTIES:
:CUSTOM_ID: h:tlon-open-clock-file
:END:
#+findex: tlon-open-clock-file
The command ~tlon-open-clock-file~ identifies the BibTeX key associated with the currently running Org clock task (using ~tlon-get-clock-key~) and opens the corresponding file (located via ~tlon-get-file-from-key~). This provides quick access to the primary document related to the clocked task.

*** Open Clocked Task's Issue
:PROPERTIES:
:CUSTOM_ID: h:tlon-open-clock-issue
:END:
#+findex: tlon-open-clock-issue
The command ~tlon-open-clock-issue~ finds an =orgit-forge= link within the currently clocked heading, extracts the issue identifier (GID), and opens the corresponding issue using =forge-visit-issue=. This requires the clocked heading to contain a link like =[[orgit-topic:ISSUE_GID][...]]= and for the =forge= package to be configured.

*** Copy Region or Buffer
:PROPERTIES:
:CUSTOM_ID: h:tlon-copy-dwim
:END:
#+findex: tlon-copy-dwim
The command ~tlon-copy-dwim~ ("Do What I Mean") copies text to the kill ring. If a region is active, it copies the region's content. If no region is active, it copies the entire content of the current buffer. This is a general utility command included in this module.

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** Getting Clock Information
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-getters
:END:

#+findex: tlon-get-clock
+ ~tlon-get-clock~ :: Returns the raw string of the currently clocked heading (=org-clock-current-task=). Errors if no clock is running.

#+findex: tlon-get-clock-key
+ ~tlon-get-clock-key~ :: Extracts the BibTeX key from the clocked heading string. It assumes the key is enclosed in backticks (e.g., ``key``) and uses the regular expression ~tlon-key-regexp~ to find it.

#+findex: tlon-get-clock-file
+ ~tlon-get-clock-file~ :: Retrieves the full file path associated with the BibTeX key found in the clocked heading. Uses ~tlon-get-clock-key~ and ~tlon-get-file-from-key~.

#+findex: tlon-get-clock-issue
+ ~tlon-get-clock-issue~ :: Finds the first =orgit-forge= link in the clocked heading (=org-clock-heading=) and returns the issue identifier (GID) part of the link (e.g., the part after =orgit-topic:=).

#+findex: tlon-get-clock-action
+ ~tlon-get-clock-action~ :: Extracts the assumed "action" from the clocked heading. It expects the action to be the second word in the heading string (after the first word, often a verb like "Translate"). It validates this word against the list of known actions defined in the Tlön labels configuration (~tlon-label-lookup-all :action~).

#+findex: tlon-get-clock-label
+ ~tlon-get-clock-label~ :: Retrieves the label associated with the action identified by ~tlon-get-clock-action~, using the Tlön labels configuration (~tlon-label-lookup~).

#+findex: tlon-get-clock-next-label
+ ~tlon-get-clock-next-label~ :: Determines the "next" label in the sequence defined by ~tlon-job-labels~, based on the label of the currently clocked action (~tlon-get-clock-label~). This relies on the order within the ~tlon-job-labels~ alist.

*** Utility Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-utils
:END:

#+findex: tlon-next-value
+ ~tlon-next-value~ :: A generic helper function to find the value associated with a =PROPERTY= that comes *after* the item with the specified =VALUE= in an =ALIST=. Used by ~tlon-get-clock-next-label~.

#+findex: tlon-copy-buffer
+ ~tlon-copy-buffer~ :: Copies the entire content of a specified =FILE= (or the current buffer) to the kill ring.

#+findex: tlon-copy-region
+ ~tlon-copy-region~ :: Copies the text between positions =BEG= and =END= to the kill ring.

#+findex: tlon-set-paths-from-clock
+ ~tlon-set-paths-from-clock~ :: Retrieves the BibTeX key from the clocked task and uses Tlön metadata to find the file paths for both the original document and its corresponding translation. Returns these paths and the key as multiple values.

#+findex: tlon-set-windows
+ ~tlon-set-windows~ :: A utility function (likely requiring =window-extras= and =winum= packages) to open two specified files (=ORIGINAL-PATH= and =TRANSLATION-PATH=) in specific windows (window 1 and window 2, respectively), splitting the frame if necessary.

*** Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-variables
:END:

#+vindex: tlon-key-regexp
+ ~tlon-key-regexp~ :: The constant regular expression used by ~tlon-get-clock-key~ to identify BibTeX keys within clocked task headings. It specifically looks for text enclosed in backticks, optionally followed by =.md=.

* Color Palette Management (=tlon-color.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-color
:END:

This module provides functions to manage color palettes for the Tlön frontend projects (specifically =uqbar-front=). It allows loading predefined palettes into CSS and JavaScript files, storing palettes derived from CSS, deleting palettes, and interactively manipulating color values (hue, saturation, lightness) within the CSS file.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-dependencies
:END:

+ =tlon-core=
+ =transient=
+ =color-extras= (external package, likely required for color manipulation and conversion)

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-options
:END:

#+vindex: tlon-color-format-in-frontend-files
+ ~tlon-color-format-in-frontend-files~ :: Specifies the preferred color format ("hex" or "hsl") to use when writing color values to the frontend CSS file (~globals.css~). Defaults to "hex". Note: The JavaScript file (~theme-colors.js~) currently always uses "hsl".

#+vindex: tlon-colors-change-step
+ ~tlon-colors-change-step~ :: The default step value (integer) used when increasing or decreasing hue, saturation, or lightness using the interactive commands. Defaults to 1.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-commands
:END:

This section details the interactive commands provided by =tlon-color.el=.

*** Open Global CSS File
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-open-globals-file
:END:
#+findex: tlon-color-open-globals-file
The command ~tlon-color-open-globals-file~ simply opens the main CSS file (~globals.css~) where color palettes are defined for the frontend.

*** Load Color Palette
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-load-palette
:END:
#+findex: tlon-color-load-palette
The command ~tlon-color-load-palette~ loads a specified, previously stored color =PALETTE= into the frontend files.

1. Prompts the user to select a =PALETTE= name from the list stored in ~tlon-color-palettes~.
2. Optionally takes a =LANGUAGE= argument (`css` or `js`). If nil, it loads the palette into both the CSS and JS files.
3. For each specified language:
   - Removes the existing color sections using ~tlon-color-remove-colors-section~.
   - Inserts the new color sections for the selected =PALETTE= using ~tlon-color-insert-colors-section~.

*** Save Frontend Files
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-save-frontend-files
:END:
#+findex: tlon-color-save-frontend-files
The command ~tlon-color-save-frontend-files~ is a convenience command designed to synchronize color changes made in the CSS file with the JavaScript file.

1. Saves the current state of the ~globals.css~ buffer.
2. Parses the current colors in ~globals.css~ and temporarily stores them under the name "temp-palette" using ~tlon-color-store-palette~ (overwriting if it exists).
3. Loads this "temp-palette" into the ~theme-colors.js~ file using ~tlon-color-load-palette~ with the `js` language argument.

*** Store Color Palette
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-store-palette
:END:
#+findex: tlon-color-store-palette
The command ~tlon-color-store-palette~ parses the current color definitions in ~globals.css~ and saves them as a named palette in the ~tlon-color-palettes~ variable and persists them to ~tlon-color-palette-file~.

1. Prompts the user for a =PALETTE-NAME=.
2. Parses the CSS file using ~tlon-color-parse-css~ to extract light and dark theme colors.
3. Checks if a palette with the given name already exists.
4. If it exists, asks for confirmation to overwrite (unless the optional =OVERWRITE= argument is non-nil). Updates the existing entry.
5. If it doesn't exist, adds the new palette to ~tlon-color-palettes~.
6. Saves the updated ~tlon-color-palettes~ list to ~tlon-color-palette-file~ using ~tlon-color-save-palettes-to-file~.
7. Messages the user about the success (added or updated).

*** Delete Color Palette
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-delete-palette
:END:
#+findex: tlon-color-delete-palette
The command ~tlon-color-delete-palette~ removes a stored color palette.

1. Prompts the user to select a =PALETTE= name from the existing palettes in ~tlon-color-palettes~.
2. Removes all entries matching the selected name from the ~tlon-color-palettes~ list.
3. Saves the updated list back to ~tlon-color-palette-file~ using ~tlon-color-save-palettes-to-file~.
4. Messages the user about the successful removal.

*** Color Manipulation Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-manipulation-commands
:END:
These commands allow interactive modification of color values (HSL) directly within the ~globals.css~ file. They operate on the color string at point, replace it with the modified value, and then call ~tlon-color-save-frontend-files~ to synchronize the change with the JS file. They rely on functions from the =color-extras= package.

+ *Hue*:
  #+findex: tlon-color-increase-hue-at-point
  + ~tlon-color-increase-hue-at-point~ :: Increases hue by ~tlon-colors-change-step~.
  #+findex: tlon-color-decrease-hue-at-point
  + ~tlon-color-decrease-hue-at-point~ :: Decreases hue by ~tlon-colors-change-step~.
  #+findex: tlon-color-change-hue-at-point
  + ~tlon-color-change-hue-at-point~ :: Prompts for a change amount (e.g., "+5", "-10") and applies it to the hue.
+ *Saturation*:
  #+findex: tlon-color-increase-saturation-at-point
  + ~tlon-color-increase-saturation-at-point~ :: Increases saturation by ~tlon-colors-change-step~.
  #+findex: tlon-color-decrease-saturation-at-point
  + ~tlon-color-decrease-saturation-at-point~ :: Decreases saturation by ~tlon-colors-change-step~.
  #+findex: tlon-color-change-saturation-at-point
  + ~tlon-color-change-saturation-at-point~ :: Prompts for a change amount and applies it to the saturation.
+ *Lightness*:
  #+findex: tlon-color-increase-lightness-at-point
  + ~tlon-color-increase-lightness-at-point~ :: Increases lightness by ~tlon-colors-change-step~.
  #+findex: tlon-color-decrease-lightness-at-point
  + ~tlon-color-decrease-lightness-at-point~ :: Decreases lightness by ~tlon-colors-change-step~.
  #+findex: tlon-color-change-lightness-at-point
  + ~tlon-color-change-lightness-at-point~ :: Prompts for a change amount and applies it to the lightness.

*** Color Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-menu
:END:
#+findex: tlon-color-menu
The command ~tlon-color-menu~ activates a =transient= menu interface providing access to most of the color management and manipulation commands.

It includes sections for:
+ *Change colors*: Access to the hue, saturation, and lightness increase/decrease/change commands. Includes an option to set the change step.
+ *Palette*: Access to load, store, and delete palettes. Includes commands to open the CSS file, save frontend files, and invoke color conversion/contrast functions from =color-extras=. Includes an option to set the frontend format preference.

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-internals
:END:

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization.

*** Constants and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-constants-vars
:END:

#+vindex: tlon-color-palettes
+ ~tlon-color-palettes~ :: The central variable holding the list of defined color palettes. It's an alist where the key is the palette name (string) and the value is another alist representing the colors. Each color entry is =(CSS-VARIABLE . (LIGHT-VALUE . DARK-VALUE))=. Loaded from and saved to ~tlon-color-palette-file~.
#+vindex: tlon-color-palette-file
+ ~tlon-color-palette-file~ :: Path to the Elisp file where ~tlon-color-palettes~ is persisted.
#+vindex: tlon-color-globals-css-file
+ ~tlon-color-globals-css-file~ :: Path to the main CSS file in the =uqbar-front= repository.
#+vindex: tlon-color-theme-colors-js-file
+ ~tlon-color-theme-colors-js-file~ :: Path to the JavaScript theme colors file in the =uqbar-front= repository.
#+vindex: tlon-color-globals-css-header
+ ~tlon-color-globals-css-header~ :: Format string for the start of a theme section in CSS.
#+vindex: tlon-color-globals-css-footer
+ ~tlon-color-globals-css-footer~ :: String marking the end of a theme section in CSS.
#+vindex: tlon-color-globals-css-remove-pattern
+ ~tlon-color-globals-css-remove-pattern~ :: Regex pattern used to remove entire theme sections from the CSS file.
#+vindex: tlon-color-theme-colors-js-header
+ ~tlon-color-theme-colors-js-header~ :: Format string for the start of a theme section in JS.
#+vindex: tlon-color-theme-colors-js-footer
+ ~tlon-color-theme-colors-js-footer~ :: String marking the end of a theme section in JS.

*** Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-helpers
:END:

#+findex: tlon-color-read-palette
+ ~tlon-color-read-palette~ :: Prompts the user to select an existing palette name using completion based on ~tlon-color-palettes~. Returns the selected name as a list (for interactive use).
#+findex: tlon-color-load-palettes
+ ~tlon-color-load-palettes~ :: Loads the palettes from ~tlon-color-palette-file~ into the ~tlon-color-palettes~ variable if the file exists. Called automatically when =tlon-color.el= is loaded.
#+findex: tlon-color-save-palettes-to-file
+ ~tlon-color-save-palettes-to-file~ :: Saves the current value of ~tlon-color-palettes~ to ~tlon-color-palette-file~ in Elisp format.
#+findex: tlon-color-remove-colors-section
+ ~tlon-color-remove-colors-section~ :: Removes the color definition sections from the specified =LANGUAGE= file (CSS or JS) using the appropriate patterns.
#+findex: tlon-color-insert-colors-section
+ ~tlon-color-insert-colors-section~ :: Inserts the color definitions for a given =PALETTE= into the specified =LANGUAGE= file. It encodes the palette using ~tlon-color-encode~, inserts the result, converts colors to the desired format using =color-extras-convert-all= (respecting ~tlon-color-format-in-frontend-files~ for CSS, forcing HSL for JS), and saves the buffer.
#+findex: tlon-color-encode
+ ~tlon-color-encode~ :: Top-level function to encode a =PALETTE= for a specific =LANGUAGE=. Calls the appropriate CSS or JS encoding function for both light and dark themes and concatenates the results.
#+findex: tlon-color-encode-globals-css
+ ~tlon-color-encode-globals-css~ :: Generates the CSS string for a specific =THEME= (light/dark) of a =PALETTE=. Uses ~tlon-color-encode-frontend-variables~.
#+findex: tlon-color-encode-theme-colors-js
+ ~tlon-color-encode-theme-colors-js~ :: Generates the JS string for a specific =THEME= (light/dark) of a =PALETTE=. Uses ~tlon-color-encode-frontend-variables~.
#+findex: tlon-color-encode-frontend-variables
+ ~tlon-color-encode-frontend-variables~ :: Iterates through the color definitions in a =PALETTE=, extracts the correct value for the given =THEME=, and formats it as a CSS variable declaration or a JS key-value pair based on the =LANGUAGE=.
#+findex: tlon-color-parse-css
+ ~tlon-color-parse-css~ :: Parses the ~globals.css~ file to extract the current color definitions for both light and dark themes. Calls ~tlon-color-parse-css-theme~ for each theme and combines the results into the standard palette alist format.
#+findex: tlon-color-parse-css-theme
+ ~tlon-color-parse-css-theme~ :: Parses a specific =THEME= section within the =CSS-BUFFER=. It temporarily converts all colors in the buffer to hex format using =color-extras-convert-all=, finds the theme section, extracts all CSS variable definitions (=--variable: #value;=), and returns them as an alist.
#+findex: tlon-color-change-value-at-point
+ ~tlon-color-change-value-at-point~ :: Core function for interactive color manipulation. Takes the =COMPONENT= ("h", "s", or "l"), =DIRECTION= ("+" or "-"), and optional =STEP=. Finds the color at point, calls the appropriate =ct-edit-hsluv-*= function from =color-extras=, inserts the result, and calls ~tlon-color-save-frontend-files~.

*** Transient Infix Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-transient-infixes
:END:
These functions define the behavior of the options within the ~tlon-color-menu~.

#+findex: tlon-color-format-in-frontend-files-infix
+ ~tlon-color-format-in-frontend-files-infix~ :: Reads the desired format ("hex" or "hsl") from the user to set the local value of ~tlon-color-format-in-frontend-files~ for the current menu invocation.
#+findex: tlon-color-change-step-infix
+ ~tlon-color-change-step-infix~ :: Reads a number from the user to set the local value of ~tlon-colors-change-step~ for the current menu invocation.

* Contact Management (=tlon-contacts.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts
:END:

This module provides functionality for managing contacts stored within an Org mode file. It allows creating new contact entries, editing their properties based on predefined roles, and retrieving contact information.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-dependencies
:END:

+ =tlon-core=
+ =transient=
+ =org=
+ =org-id=
+ =org-contacts=

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-config
:END:

*** Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-constants
:END:

#+vindex: tlon-contacts-id
+ ~tlon-contacts-id~ :: The Org mode ID ("F874E332-47AF-436F-997E-1A6791DEE0BE") used to identify the main heading under which contacts are stored. This ID is crucial for locating the contacts section within the Org file.

#+vindex: tlon-contacts-properties
+ ~tlon-contacts-properties~ :: An alist defining the expected Org mode properties associated with different contact roles. The key is the role name (string, e.g., "creator", "translator"), and the value is a list of property names (strings, e.g., "EMAIL", "URL", "GENDER"). This structure dictates which properties are prompted for when editing a contact of a specific role.

#+vindex: tlon-contacts-property-values
+ ~tlon-contacts-property-values~ :: A list defining the properties that can be edited, along with their transient menu shortcuts and potential completion candidates. Each element is a list =(PROPERTY :shortcut SHORTCUT :candidates COMPLETION-LIST)=.
  + =PROPERTY= (string): The name of the Org property (e.g., "EMAIL", "GENDER").
  + =SHORTCUT= (string): The single-character key used in the transient menu (~tlon-contacts-menu~) to edit this property.
  + =COMPLETION-LIST= (list of strings or nil): If a list is provided, ~completing-read~ will be used when editing this property, offering these values as candidates. If nil, ~read-string~ is used. Language candidates are dynamically fetched using ~tlon-get-language-candidates~.

*** Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-variables
:END:

#+vindex: tlon-contacts-file
+ ~tlon-contacts-file~ :: Holds the path to the Org file containing the contacts. This variable is set dynamically by ~tlon-contacts-get-file~ using the ~tlon-contacts-id~ and should not be set manually by the user.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-commands
:END:

*** Create Contact
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-create-cmd
:END:
#+findex: tlon-contacts-create
The command ~tlon-contacts-create~ creates a new contact entry in the designated contacts Org file.
1. Finds or opens the contacts file (~tlon-contacts-get-file~).
2. Navigates to the main contacts heading using ~tlon-contacts-id~.
3. Inserts a new level 2 heading at the end of the subtree.
4. Prompts for the first and last name using ~tlon-contacts-insert-name~ and inserts them.
5. Calls ~tlon-contacts-edit-properties~ to prompt for the role and set initial properties.
6. Sorts the contact headings alphabetically within the file using ~tlon-sort-headings~.

*** Edit Contact Properties
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-edit-properties-cmd
:END:
#+findex: tlon-contacts-edit-properties
The command ~tlon-contacts-edit-properties~ allows editing the Org properties of the contact entry at point.
1. Ensures the buffer is in Org mode.
2. Retrieves the contact's current "ROLE" property using ~tlon-contacts-get-role~.
3. If an optional =ROLE= argument is provided, checks if it matches the current role.
4. If no role exists or no =ROLE= argument is given, prompts the user to select a role using ~tlon-contacts-select-role~. If a role is newly selected, sets the "ROLE" property.
5. Iterates through the properties defined for the selected role in ~tlon-contacts-properties~.
6. For each property:
   - Looks up its definition in ~tlon-contacts-property-values~ to find completion candidates.
   - Gets the current value using =org-entry-get=.
   - Prompts the user for the new value using ~completing-read~ (if candidates exist) or ~read-string~.
   - Sets the property using =org-set-property=.
7. Saves the buffer.

*** Copy Property Value
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-copy-property-value-cmd
:END:
#+findex: tlon-contacts-copy-property-value
The command ~tlon-contacts-copy-property-value~ copies the value of a specified property for the contact at point to the kill ring.
1. Calls ~tlon-contacts-get-property-value~, which prompts the user to select a property from the non-empty properties of the current contact.
2. Copies the retrieved value (or an empty string if nil) to the kill ring using =kill-new=.
3. Displays a confirmation message.

*** Edit Single Property
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-edit-one-property-cmd
:END:
#+findex: tlon-contacts-edit-one-property
The command ~tlon-contacts-edit-one-property~ provides a way to edit a single, specific property of the contact at point, using completion if available.
1. Prompts the user to select the =PROPERTY= to edit, offering completion based on the properties defined in ~tlon-contacts-property-values~.
2. Ensures the buffer is in Org mode.
3. Looks up the property's definition in ~tlon-contacts-property-values~ to find completion candidates.
4. Gets the current value using =org-entry-get=.
5. Prompts the user for the new value using ~completing-read~ (if candidates exist) or ~read-string~.
6. Sets the property using =org-set-property=.
7. Saves the buffer and displays a confirmation message.

*** Dynamically Defined Edit Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-dynamic-edit-cmds
:END:
#+findex: tlon-contacts-define-property-edit-commands
The macro ~tlon-contacts-define-property-edit-commands~ automatically generates individual interactive commands for editing each property listed in ~tlon-contacts-property-values~.
- For each property (e.g., "EMAIL"), it defines a command named ~tlon-contacts-edit-email~ (lowercase).
- Each generated command simply calls ~tlon-contacts-edit-one-property~ with the corresponding property name.
- This macro also defines (or redefines) the ~tlon-contacts-menu~ transient prefix.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-menu-cmd
:END:
#+findex: tlon-contacts-menu
The command ~tlon-contacts-menu~ activates a =transient= menu interface for contact management. This menu is defined by the ~tlon-contacts-define-property-edit-commands~ macro.

It typically includes:
+ General commands:
  + =S= :: Search contacts (=org-contacts=)
  + =c= :: Create contact (~tlon-contacts-create~)
  + =e= :: Edit all properties (~tlon-contacts-edit-properties~)
  + =y= :: Copy property value (~tlon-contacts-copy-property-value~)
+ Edit specific properties:
  + One entry for each property defined in ~tlon-contacts-property-values~, using the specified =:shortcut= key (e.g., =m= for "email", =g= for "gender"). Each shortcut calls the corresponding dynamically generated edit command (e.g., ~tlon-contacts-edit-email~).

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-contacts-internals
:END:

This section lists non-interactive functions used internally or potentially useful for advanced customization.

#+findex: tlon-contacts-get-file
+ ~tlon-contacts-get-file~ :: Retrieves the path to the contacts Org file. It uses ~tlon-get-or-set-org-var~ to find the file containing the Org ID ~tlon-contacts-id~ and caches the result in the ~tlon-contacts-file~ variable.

#+findex: tlon-contacts-insert-name
+ ~tlon-contacts-insert-name~ :: Prompts the user for "First name: " and "Last name: ", then inserts the name formatted as "Last name, First name" at point. Saves the buffer afterwards.

#+findex: tlon-contacts-get-property-value
+ ~tlon-contacts-get-property-value~ :: Retrieves the value of a specific =PROP= for the contact entry at point. If =PROP= is nil, it prompts the user to select a property from the list of non-empty properties (obtained via ~tlon-contacts-get-nonempty-properties~). Returns the property value string.

#+findex: tlon-contacts-get-property-value-of-contact
+ ~tlon-contacts-get-property-value-of-contact~ :: Prompts the user to select a contact using =org-contacts=, then calls ~tlon-contacts-get-property-value~ in the context of the selected contact's buffer to retrieve the value of =PROP= (prompting for =PROP= if nil).

#+findex: tlon-contacts-get-nonempty-properties
+ ~tlon-contacts-get-nonempty-properties~ :: Returns an alist of non-empty properties for the contact entry at point. It gets the contact's role, finds the associated properties from ~tlon-contacts-properties~, and retrieves the value for each using =org-entry-get=.

#+findex: tlon-contacts-get-contact-name
+ ~tlon-contacts-get-contact-name~ :: Retrieves the first and last name from the heading of the contact entry at point. Assumes the format "Last, First". Returns a cons cell =(FIRST . LAST)=.

#+findex: tlon-contacts-get-role
+ ~tlon-contacts-get-role~ :: Returns the value of the "ROLE" property for the contact entry at point using =org-entry-get=.

#+findex: tlon-contacts-select-role
+ ~tlon-contacts-select-role~ :: Prompts the user to select a role using completion. The candidates are the keys (roles) from the ~tlon-contacts-properties~ alist. Returns the selected role string.

* Counterpart Navigation and Comparison (=tlon-counterpart.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart
:END:

This module provides functionality for finding, opening, and comparing "counterpart" files. In the Tlön context, a counterpart is typically the original version of a translated document, or a translation in a specific language if the current file is the original. It also includes tools for working with paragraphs within these files.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-dependencies
:END:

+ =tlon-core=
+ =tlon-md=
+ =tlon-yaml=
+ =files-extras=
+ =transient=
+ =dired= (optional, for Dired integration)

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-commands
:END:

*** Finding Counterparts
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-finding-cmds
:END:

#+findex: tlon-get-counterpart
+ ~tlon-get-counterpart~ :: (Autoloaded) Calculates and returns the full path to the counterpart file of =FILE= (or the current buffer's file).
  - If the file is in a repository marked as =translations= (based on its =:subtype= property), it looks for the =original_path= key in the file's YAML front matter and combines it with the counterpart directory (~tlon-get-counterpart-dir~).
  - If the file is in a repository marked as =originals=, it prompts the user to select a target language, finds the corresponding translations repository, and looks up the file's entry in the target repository's metadata to find the translated filename.
  - Signals an error if the repository subtype is neither =originals= nor =translations=, or if necessary metadata is missing.

#+findex: tlon-get-counterpart-dir
+ ~tlon-get-counterpart-dir~ :: Calculates and returns the directory path where the counterpart of =FILE= (or the current buffer's file) should reside. It determines the counterpart repository (~tlon-get-counterpart-repo~) and translates the relative directory structure within the source repository to the equivalent structure in the target repository using ~tlon-get-bare-dir-translation~.

#+findex: tlon-get-counterpart-repo
+ ~tlon-get-counterpart-repo~ :: Returns the full path to the repository directory containing the counterpart of =FILE= (or the current buffer's file). It identifies the source repository, its subproject, determines the counterpart language (~tlon-get-counterpart-language~), and looks up the repository matching the subproject and counterpart language using ~tlon-repo-lookup~.

#+findex: tlon-get-counterpart-language
+ ~tlon-get-counterpart-language~ :: Determines the language code of the counterpart for a given =REPO= (or the current repository).
  - If the repository language is "en" (English), it prompts the user to select a target language from ~tlon-project-target-languages~ using completion.
  - If the repository language is one of the target languages, it returns "en".
  - Signals an error if the repository language is not recognized.

#+findex: tlon-get-content-subtype
+ ~tlon-get-content-subtype~ :: Returns the =:subtype= property ('originals or 'translations) of the repository containing =FILE= (or the current buffer's file). Ensures the repository's =:type= is 'content.

*** Opening Counterparts
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-opening-cmds
:END:

#+findex: tlon-open-counterpart
+ ~tlon-open-counterpart~ :: (Autoloaded) Opens the counterpart of =FILE= (or the current buffer's file) and attempts to position the cursor at the corresponding paragraph.
  1. Saves the current buffer if no =FILE= argument is given.
  2. Finds the counterpart file using ~tlon-get-counterpart~.
  3. Calculates the number of paragraphs before the current point using ~tlon-get-number-of-paragraphs~.
  4. Determines if point is exactly between paragraphs using ~tlon-is-between-paragraphs-p~ to apply an offset.
  5. Opens the counterpart file using =find-file= (or =find-file-other-window= if =OTHER-WIN= or prefix argument is non-nil).
  6. In the counterpart buffer, moves past the YAML front matter.
  7. Moves forward the calculated number of paragraphs (minus the offset).
  8. Moves point one character forward (typically to the start of the paragraph content).

#+findex: tlon-open-counterpart-in-dired
+ ~tlon-open-counterpart-in-dired~ :: Opens Dired to the directory containing the counterpart of =FILE= (or the file at point in Dired). Uses ~tlon-get-counterpart~ to find the file and =dired-jump= to open Dired. Supports opening in another window with a prefix argument.

#+findex: tlon-open-counterpart-dwim
+ ~tlon-open-counterpart-dwim~ :: (Autoloaded) "Do What I Mean" command for opening counterparts.
  - If called in =markdown-mode=, behaves like ~tlon-open-counterpart~.
  - If called in =dired-mode=, behaves like ~tlon-open-counterpart-in-dired~.
  - Supports opening in another window with a prefix argument.

#+findex: tlon-open-counterpart-in-other-window-dwim
+ ~tlon-open-counterpart-in-other-window-dwim~ :: (Autoloaded) Convenience command that calls ~tlon-open-counterpart-dwim~ with the =OTHER-WIN= argument set to =t=, forcing the counterpart to open in another window.

*** Paragraph Operations
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-paragraph-cmds
:END:

#+findex: tlon-count-paragraphs
+ ~tlon-count-paragraphs~ :: Interactively counts and displays the number of paragraphs in the active region, or between specified =START= and =END= positions. Uses ~tlon-get-number-of-paragraphs~.

#+findex: tlon-display-corresponding-paragraphs
+ ~tlon-display-corresponding-paragraphs~ :: Displays pairs of corresponding paragraphs from a file and its counterpart in a dedicated buffer ("/Paragraph Pairs/").
  1. Takes =PAIRS-OR-FN= as input. If it's a function (interactively defaults to ~tlon-get-corresponding-paragraphs~), calls it to get the pairs. Otherwise, assumes it's already a list of pairs.
  2. Creates or clears the "/Paragraph Pairs/" buffer.
  3. Iterates through the pairs, inserting "Original:\n[paragraph]\n\nTranslation:\n[paragraph]\n\n----\n\n". Handles missing paragraphs gracefully.
  4. Displays the buffer. Catches =user-error= (like paragraph mismatch from ~tlon-get-corresponding-paragraphs~) and still displays the buffer containing the comparison up to the point of error.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-menu-cmd
:END:
#+findex: tlon-counterpart-menu
The command ~tlon-counterpart-menu~ activates a =transient= menu interface for counterpart operations.

It provides the following groups and commands:
+ *Navigation*:
  + =u= :: Visit counterpart (~tlon-open-counterpart-dwim~)
  + =H-u= :: Visit counterpart other window (~tlon-open-counterpart-in-other-window-dwim~)
  + =U= :: Open counterpart in Dired (~tlon-open-counterpart-in-dired~)
+ *Matching*:
  + =d= :: Display corresponding paragraphs (~tlon-display-corresponding-paragraphs~)
+ *Metadata*:
  + =o= :: Set ‘original_path’ (~tlon-yaml-insert-original-path~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-internals
:END:

This section lists non-interactive functions used internally or potentially useful for advanced customization.

*** Counterpart Finding Logic
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-finding-internals
:END:

#+findex: tlon-get-counterpart-in-translations
+ ~tlon-get-counterpart-in-translations~ :: Specific logic for finding the counterpart when =FILE= is in a =translations= repository. Gets the counterpart directory (~tlon-get-counterpart-dir~) and looks up the =original_path= in the file's YAML metadata.

#+findex: tlon-get-counterpart-in-originals
+ ~tlon-get-counterpart-in-originals~ :: Specific logic for finding the counterpart when =FILE= is in an =originals= repository. Gets the counterpart repository (~tlon-get-counterpart-repo~), reads its metadata (~tlon-metadata-in-repo~), and searches for an entry where the =original_path= matches the filename of =FILE=. Returns the =file= property of the matching entry.

*** Paragraph Handling Logic
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-paragraph-internals
:END:

#+findex: tlon-is-between-paragraphs-p
+ ~tlon-is-between-paragraphs-p~ :: Returns non-nil if point is exactly between two paragraphs (i.e., moving one character forward changes the paragraph count). Uses ~tlon-get-number-of-paragraphs~.

#+findex: tlon-with-paragraphs
+ ~tlon-with-paragraphs~ :: Iterates through each paragraph in =FILE= (or current buffer) and executes =FN= for each.
  1. Finds the file and switches to its buffer.
  2. Moves past the YAML front matter.
  3. Determines the end of the content (before local variables).
  4. Loops while point is before the content end:
     - Records the start position.
     - Moves forward one paragraph using =markdown-forward-paragraph=.
     - Records the end position (capped at content end).
     - If the region between start and end is non-empty and contains non-whitespace characters:
       - If =RETURN-POSITIONS= is non-nil, pushes =(start . end)= to the result list.
       - Otherwise, calls =FN= with start and end positions and pushes its result to the list.
  5. Returns the reversed list of results or positions.

#+findex: tlon-get-number-of-paragraphs
+ ~tlon-get-number-of-paragraphs~ :: Calculates the number of paragraphs between optional =START= and =END= positions. Calls ~tlon-with-paragraphs~ with =RETURN-POSITIONS= set to =t= and counts the resulting position pairs that fall within the specified range.

#+findex: tlon-get-corresponding-paragraphs
+ ~tlon-get-corresponding-paragraphs~ :: Returns a list of corresponding paragraph pairs =((orig-para-1 . trans-para-1) (orig-para-2 . trans-para-2) ...)= between =FILE= (or current buffer) and its =COUNTERPART= (inferred if nil).
  1. Finds the counterpart file.
  2. Uses ~tlon-with-paragraphs~ to get lists of paragraph text for both the original and translation files.
  3. Checks if the number of paragraphs is different. If so:
     - Creates the "/Paragraph Pairs/" buffer.
     - Inserts an error message detailing the mismatch.
     - Inserts all paragraph pairs found so far (padding with "[Missing paragraph]" if one list is shorter).
     - Displays the buffer.
     - Signals a =user-error= "Paragraph number mismatch".
  4. If paragraph counts match, pairs up the paragraphs and returns the list.

*** Temporary Utility Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-temp-utils
:END:
These functions appear to be specific utilities for bulk metadata updates, likely used during initial setup or migration. They are not part of the core counterpart functionality.

#+findex: tlon-add-counterpart-metadata
+ ~tlon-add-counterpart-metadata~ :: Reads a CSV file mapping original filenames to translation filenames, finds the corresponding translation files in a specified =LANGUAGE= repository and =BARE-DIR=, and inserts the =original_path= metadata into their YAML front matter. Requires =simple-extras-asciify-string=.

#+findex: tlon-add-author-metadata
+ ~tlon-add-author-metadata~ :: Processes author files in a specific =LANGUAGE= repository. For each file, it extracts the =title= from YAML, generates a slug, constructs the expected =original_path=, deletes existing metadata, and inserts a standard set of author metadata fields (=type=, =title=, =role=, =original_path=, =publication_status=). Requires =simple-extras-slugify=.

* DeepL Integration (=tlon-deepl.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl
:END:

This module provides functions for interacting with the DeepL API, enabling text translation and management of DeepL glossaries. It relies on an API key stored securely via =auth-source=.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-dependencies
:END:

+ =tlon-glossary=
+ =tlon-core=
+ =url=
+ =auth-source= (for API key retrieval)
+ =transient= (for the menu)
+ =ediff= (for ~tlon-deepl-diff~)

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-config
:END:

*** API Key and URL
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-api-config
:END:
#+vindex: tlon-deepl-key
+ ~tlon-deepl-key~ :: The DeepL API key, retrieved from =auth-source= using the entry =tlon/babel/deepl.com/[WORK_EMAIL]=.
#+vindex: tlon-deepl-url-prefix
+ ~tlon-deepl-url-prefix~ :: The base URL for all DeepL API v2 calls (=https://api.deepl.com/v2/=).

*** API Call Parameters
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-parameters
:END:
#+vindex: tlon-deepl-parameters
+ ~tlon-deepl-parameters~ :: An alist defining the specifics for each supported DeepL API call (translate, glossary creation, retrieval, deletion). Each entry maps an API call symbol (e.g., =translate=) to a list containing:
  1. HTTP Method ("GET", "POST", "DELETE")
  2. URL Suffix (string or function to generate the specific endpoint)
  3. Default Callback Function (symbol)
  4. Optional Encoding Function (symbol, for POST requests)

*** Supported Glossary Languages
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-supported-glossary-languages
:END:
#+vindex: tlon-deepl-supported-glossary-languages
+ ~tlon-deepl-supported-glossary-languages~ :: A list of language codes for which DeepL currently supports glossaries.

*** Internal State Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-state-vars
:END:
These variables store temporary state during API requests.
#+vindex: tlon-deepl-glossaries
+ ~tlon-deepl-glossaries~ :: A list holding the glossary data retrieved from the DeepL API via ~tlon-deepl-get-glossaries~. Initialized to nil and populated by the callback.
#+vindex: tlon-deepl-source-language
+ ~tlon-deepl-source-language~ :: Stores the source language code for the current translation request.
#+vindex: tlon-deepl-target-language
+ ~tlon-deepl-target-language~ :: Stores the target language code for the current translation or glossary creation request.
#+vindex: tlon-deepl-text
+ ~tlon-deepl-text~ :: Stores the text to be translated in the current request.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-commands
:END:

This section details the interactive commands provided by =tlon-deepl.el=.

*** Translation
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-translation-commands
:END:

#+findex: tlon-deepl-translate
+ ~tlon-deepl-translate~ :: Translates text using the DeepL API.
  1. Prompts for source language (defaulting to "en") using ~tlon-select-language~.
  2. Prompts for target language using ~tlon-select-language~ (excluding the source language).
  3. Prompts for the text to translate, defaulting to the active region or the word at point.
  4. Sets the internal state variables (~tlon-deepl-text~, ~tlon-deepl-source-language~, ~tlon-deepl-target-language~).
  5. Calls ~tlon-deepl-request-wrapper~ with the =translate= type.
  6. Uses a default callback that prints the translation and copies it to the kill ring (~tlon-deepl-print-translation 'copy~). Allows specifying a custom =CALLBACK=.
  7. Handles glossary lookup (~tlon-deepl-get-language-glossary~) and prompts for confirmation if no suitable glossary is found (unless =NO-GLOSSARY-OK= is non-nil).

#+findex: tlon-deepl-translate-abstract
+ ~tlon-deepl-translate-abstract~ :: Translates the =abstract= field of a BibTeX entry into all ~tlon-project-target-languages~.
  1. Determines the BibTeX =KEY= (from Ebib or BibTeX mode, or argument).
  2. Extracts the =abstract= text from the current buffer or BibTeX entry.
  3. Determines the =SOURCE-LANG= from the entry's =langid= field.
  4. If interactive or confirmed by the user, iterates through ~tlon-project-target-languages~:
     - Skips translation if target language is the same as source.
     - Calls ~tlon-deepl-translate~ with the abstract text, target language, source language, and a specific callback (~tlon-translate-abstract-callback~) to update the BibTeX entry directly. Passes =no-glossary-ok= to avoid prompts.

*** Glossaries
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-glossary-commands
:END:

#+findex: tlon-deepl-select-glossary
+ ~tlon-deepl-select-glossary~ :: Interactively selects a DeepL glossary from the locally cached list (~tlon-deepl-glossaries~). Uses ~completing-read~ with formatted glossary names (generated by ~tlon-deepl-get-list-of-glossaries~). Returns the selected glossary ID.

#+findex: tlon-deepl-get-glossaries
+ ~tlon-deepl-get-glossaries~ :: Retrieves the list of available glossaries from the DeepL API. Calls ~tlon-deepl-request-wrapper~ with the =glossary-get= type. The callback (~tlon-deepl-glossary-get-callback~) updates the ~tlon-deepl-glossaries~ variable. This command is also called automatically after glossary creation or deletion, and on module load.

#+findex: tlon-deepl-glossary-create
+ ~tlon-deepl-glossary-create~ :: Creates a new DeepL glossary for a specified language.
  1. Prompts for the target =LANGUAGE= using ~tlon-select-language~.
  2. Extracts the glossary data for that language into the appropriate format (TSV for DeepL API) using ~tlon-extract-glossary~.
  3. Sets the internal ~tlon-deepl-target-language~ variable.
  4. Calls ~tlon-deepl-request-wrapper~ with the =glossary-create= type. The callback (~tlon-deepl-glossary-create-callback~) refreshes the local glossary list and messages the API response.

#+findex: tlon-deepl-glossary-delete
+ ~tlon-deepl-glossary-delete~ :: Deletes a DeepL glossary.
  1. Calls ~tlon-deepl-request-wrapper~ with the =glossary-delete= type.
  2. The URL formatter (~tlon-deepl-glossary-delete-formatter~) prompts the user to select the glossary to delete using ~tlon-deepl-select-glossary~ and constructs the specific API endpoint URL.
  3. The callback (~tlon-deepl-glossary-delete-callback~) refreshes the local glossary list and messages confirmation.

*** Utility Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-utility-commands
:END:

#+findex: tlon-deepl-diff
+ ~tlon-deepl-diff~ :: Runs an =ediff= session to compare a local translation file with its corresponding DeepL-generated translation file. Prompts for the DeepL file path if not provided. Defaults to the current buffer's file for the local translation.

#+findex: tlon-deepl-fix-encoding-persistent
+ ~tlon-deepl-fix-encoding-persistent~ :: Attempts to fix common UTF-8 misinterpretation issues (where UTF-8 bytes are treated as ISO-8859-1) within the current buffer (must be BibTeX or JSON mode). Performs a series of search-and-replace operations based on a predefined list of common misinterpretations.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-menu
:END:
#+findex: tlon-deepl-menu
The command ~tlon-deepl-menu~ activates a =transient= menu interface for DeepL operations.

It provides the following groups and commands:
+ *Translate*:
  + =t= :: Translate text (~tlon-deepl-translate~)
  + =a= :: Translate abstract (~tlon-deepl-translate-abstract~)
+ *Glossaries*:
  + =l= :: List/Select glossary (~tlon-deepl-select-glossary~)
  + =g= :: Retrieve glossaries from API (~tlon-deepl-get-glossaries~)
  + =c= :: Create glossary (~tlon-deepl-glossary-create~)
  + =d= :: Delete glossary (~tlon-deepl-glossary-delete~)
+ *Other*:
  + =e= :: Ediff translations (~tlon-deepl-diff~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** API Request Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-api-internals
:END:

#+findex: tlon-deepl-request-wrapper
+ ~tlon-deepl-request-wrapper~ :: The core function for making DeepL API calls. Takes the API call =TYPE=, an optional =CALLBACK= function, and an optional =NO-GLOSSARY-OK= flag.
  1. Retrieves parameters (method, URL suffix/function, default callback, encoding function) from ~tlon-deepl-parameters~ based on =TYPE=.
  2. Constructs the full API =URL=.
  3. If an encoding function exists, calls it to generate the JSON =PAYLOAD= (passing =NO-GLOSSARY-OK=). Writes the payload to a temporary file.
  4. Builds the =curl= command string including method, URL, headers (Content-Type, Authorization with ~tlon-deepl-key~), and payload data if applicable.
  5. Executes the =curl= command using =shell-command-to-string= to get the =RESPONSE=.
  6. Deletes the temporary payload file if created.
  7. Inserts the response into a temporary buffer, positions point at the start of the JSON/list, and calls the specified =CALLBACK= function.

*** Callbacks
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-callbacks
:END:

#+findex: tlon-deepl-print-translation
+ ~tlon-deepl-print-translation~ :: Default callback for translation requests. Parses the JSON response, extracts the translated text, decodes it as UTF-8, and either messages it or copies it to the kill ring if =COPY= is non-nil.

#+findex: tlon-deepl-glossary-create-callback
+ ~tlon-deepl-glossary-create-callback~ :: Callback for glossary creation. Resets ~tlon-deepl-target-language~, refreshes the local glossary list using ~tlon-deepl-get-glossaries~, and messages the API response.

#+findex: tlon-deepl-glossary-get-callback
+ ~tlon-deepl-glossary-get-callback~ :: Callback for glossary retrieval. Parses the JSON response and updates the ~tlon-deepl-glossaries~ variable. Messages confirmation.

#+findex: tlon-deepl-glossary-delete-callback
+ ~tlon-deepl-glossary-delete-callback~ :: Callback for glossary deletion. Refreshes the local glossary list using ~tlon-deepl-get-glossaries~ and messages confirmation.

*** Payload Encoders & Formatters
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-encoders
:END:

#+findex: tlon-deepl-translate-encode
+ ~tlon-deepl-translate-encode~ :: Generates the JSON payload for a translation request. Includes the text (as a vector), source language, target language, and the relevant glossary ID (retrieved via ~tlon-deepl-get-language-glossary~). Handles the =NO-GLOSSARY-OK= logic and potential user abortion if no glossary is found and confirmation is denied.

#+findex: tlon-deepl-glossary-create-encode
+ ~tlon-deepl-glossary-create-encode~ :: Generates the JSON payload for creating a glossary. Determines the glossary file path (~tlon-glossary-make-file~), reads its content (UTF-8 encoded TSV), and includes the glossary name, source language ("en"), target language, entries, and format ("tsv") in the JSON object.

#+findex: tlon-deepl-glossary-delete-formatter
+ ~tlon-deepl-glossary-delete-formatter~ :: Function used by ~tlon-deepl-request-wrapper~ to generate the specific URL for deleting a glossary. It calls ~tlon-deepl-select-glossary~ to get the ID and appends it to the base glossaries endpoint.

*** Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-helpers
:END:

#+findex: tlon-deepl-get-list-of-glossaries
+ ~tlon-deepl-get-list-of-glossaries~ :: Formats the data in ~tlon-deepl-glossaries~ into a list of strings suitable for display in ~completing-read~ (used by ~tlon-deepl-select-glossary~). Each string includes name, languages, entry count, and ID. Returns a cons cell =(DISPLAY-STRING . ID)=.

#+findex: tlon-deepl-get-language-glossary
+ ~tlon-deepl-get-language-glossary~ :: Finds the glossary ID for a specific target =LANGUAGE= from the cached ~tlon-deepl-glossaries~ list. Returns nil if the source language is not "en" (as current glossaries are EN -> X). Uses ~tlon-lookup~.

#+findex: tlon-deepl-fix-encoding
+ ~tlon-deepl-fix-encoding~ :: Corrects a specific encoding misinterpretation where a UTF-8 string is read as ISO-8859-1. Takes the misencoded =STRING=, re-encodes it as ISO-8859-1, and then decodes it correctly as UTF-8.

* Dictionary Functionality (=tlon-dict.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict
:END:

This module integrates with the external =reverso.el= package to provide dictionary-related features, specifically fetching synonyms, while ensuring that the language context aligns with the Tlön workflow.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict-dependencies
:END:

This module requires the =reverso= package to be installed and available.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict-commands
:END:

*** Get Synonyms via Reverso
:PROPERTIES:
:CUSTOM_ID: h:tlon-reverso-get-synonyms
:END:
#+findex: tlon-reverso-get-synonyms
The command ~tlon-reverso-get-synonyms~ fetches synonyms for the word currently at point using the =reverso.el= package.

Crucially, it overrides the default language selection mechanism of =reverso.el=. Instead, it determines the language of the current file using ~tlon-get-language-in-file~, looks up the corresponding language code recognized by =reverso.el= using Tlön's configuration (~tlon-lookup~), and passes this language code to the underlying =reverso--get-synonyms= function.

It prompts the user for the word, defaulting to the word at point (~thing-at-point 'word~). The results are displayed in a dedicated Reverso buffer, similar to how =reverso.el= typically operates.

** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict-menu
:END:
#+findex: tlon-dict-menu
The command ~tlon-dict-menu~ activates a =transient= menu interface for dictionary-related commands.

Currently, it offers one option:
+ =s= :: Calls ~tlon-reverso-get-synonyms~ to fetch synonyms for the word at point.

* Forge Integration (=tlon-forg.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg
:END:

This module provides integration between =forge= (Emacs interface for Git forges like GitHub) and Org mode. It allows capturing GitHub issues as Org TODO items, keeping their state synchronized, navigating between the issue and its corresponding TODO, and managing related metadata like assignees and labels (which map to Org status and tags).

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-dependencies
:END:

+ =forge=
+ =org=
+ =shut-up=
+ =tlon-core=
+ =tlon-dispatch=
+ =org-extras= (optional, for some job-related refiling)
+ =ghub= (for creating issues)
+ =magit= (for creating issues)
+ =closql= (underlying =forge= dependency)
+ =transient= (for the menu)

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-options
:END:

#+vindex: tlon-when-assignee-is-nil
+ ~tlon-when-assignee-is-nil~ :: Controls behavior when capturing an issue with no assignee. Options:
  + =prompt= (default): Ask user if they want to be assigned.
  + =change=: Assign to the current user automatically.
  + =warn=: Capture as-is, but log a warning.
  + =capture=: Capture as-is, no warning.
  + =no-capture= (or any other value): Do not capture the issue.
  Can be set temporarily via ~tlon-forg-menu~.

#+vindex: tlon-when-assignee-is-someone-else
+ ~tlon-when-assignee-is-someone-else~ :: Controls behavior when capturing an issue assigned to someone else. Options are the same as ~tlon-when-assignee-is-nil~. Note: This option is ignored (treated as =no-capture=) when using ~tlon-capture-all-issues~. Can be set temporarily via ~tlon-forg-menu~.

#+vindex: tlon-forg-when-reconciling
+ ~tlon-forg-when-reconciling~ :: Controls behavior when ~tlon-reconcile-issue-and-todo~ finds discrepancies between the issue and its TODO. Options:
  + =prompt= (default): Ask user whether to keep the issue's state or the TODO's state.
  + =issue=: Automatically update the TODO to match the issue.
  + =todo=: Automatically update the issue to match the TODO (Note: Currently not fully implemented).
  Can be set temporarily via ~tlon-forg-menu~.

#+vindex: tlon-forg-include-archived
+ ~tlon-forg-include-archived~ :: Boolean flag. If non-nil, archived issues/TODOs are included in capture and reconcile operations. Defaults to nil. Can be toggled temporarily via ~tlon-forg-menu~.

#+vindex: tlon-forg-enforce-user
+ ~tlon-forg-enforce-user~ :: String or nil. If non-nil, forces Tlön to consider this string as the current user's GitHub login, primarily for testing purposes. Defaults to nil.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-commands
:END:

This section details the interactive commands provided by =tlon-forg.el=.

*** Visiting Issues and TODOs
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-visit-cmds
:END:

#+findex: tlon-visit-issue
+ ~tlon-visit-issue~ :: Visits the GitHub issue associated with the current context. If point is on an =orgit-topic:= link, follows it. Otherwise, tries to extract the issue number and repository from the current Org heading.

#+findex: tlon-visit-todo
+ ~tlon-visit-todo~ :: Visits the Org TODO item associated with the current context (GitHub issue or Org heading). Finds the correct Org file (generic or jobs) and position based on the issue's ID or job title.

#+findex: tlon-visit-todo-or-capture
+ ~tlon-visit-todo-or-capture~ :: Visits the Org TODO associated with the current issue. If no TODO exists yet, it calls ~tlon-capture-issue~ first.

*** Capturing Issues as TODOs
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-capture-cmds
:END:

#+findex: tlon-capture-issue
+ ~tlon-capture-issue~ :: (Autoloaded) Creates a new Org TODO item based on the current Forge issue (or the one specified).
  1. Checks if the issue is open.
  2. Handles the assignee based on ~tlon-when-assignee-is-nil~ and ~tlon-when-assignee-is-someone-else~, potentially changing the assignee or skipping capture.
  3. If the issue is a "Job" (title starts with "Job: "):
     - Ensures it has a valid phase label (prompting if necessary via ~tlon-capture-handle-phase~).
     - Stores or refiles the job TODO under its master job heading using ~tlon-store-or-refile-job-todo~.
  4. If it's a generic issue:
     - Stores the TODO in the generic file using ~tlon-store-todo~ with the "tbG" template.
  Only captures if a TODO doesn't already exist for the issue.

#+findex: tlon-capture-all-issues
+ ~tlon-capture-all-issues~ :: (Autoloaded) Captures all open issues in the current repository that are either unassigned or assigned to the current user.
  1. Performs a silent =forge-pull= first (unless called with a prefix argument) to ensure local data is up-to-date.
  2. Iterates through all open issues in the repository (~tlon-get-issues~).
  3. For each issue, checks if a TODO already exists (~tlon-get-todo-position-from-issue~).
  4. If no TODO exists and the issue is assigned to the current user or unassigned, calls ~tlon-capture-issue~. (Note: It implicitly uses =no-capture= for ~tlon-when-assignee-is-someone-else~ in this bulk mode).

*** Reconciling Issues and TODOs
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-reconcile-cmds
:END:

#+findex: tlon-reconcile-issue-and-todo
+ ~tlon-reconcile-issue-and-todo~ :: (Autoloaded) Synchronizes the state (title, status, tags) between the current issue and its associated Org TODO, or vice versa. Works whether point is in the issue buffer or on the TODO heading.
  1. Determines the issue and TODO based on the current context.
  2. Generates the expected TODO heading string based on the current issue state (~tlon-make-todo-name-from-issue~).
  3. Compares this with the actual TODO heading string.
  4. If they differ, it applies the behavior defined by ~tlon-forg-when-reconciling~:
     - =prompt=: Asks the user whether to update the TODO or the issue.
     - =issue=: Updates the TODO heading to match the issue state (~tlon-update-todo-from-issue~).
     - =todo=: Updates the issue state to match the TODO (currently not implemented, signals error).

#+findex: tlon-reconcile-all-issues-and-todos
+ ~tlon-reconcile-all-issues-and-todos~ :: (Autoloaded) Reconciles all Org TODOs in the generic file (~tlon-get-todos-generic-file~) with their corresponding GitHub issues.
  1. Performs a silent =forge-pull= first (unless called with a prefix argument).
  2. Iterates through all headings in the generic TODO file.
  3. For each heading, finds the associated issue (~tlon-get-issue~).
  4. If an issue is found and the TODO is not archived (or ~tlon-forg-include-archived~ is non-nil), calls ~tlon-reconcile-issue-and-todo-from-issue~.

*** Counterpart Navigation
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-counterpart-cmds
:END:

#+findex: tlon-visit-counterpart
+ ~tlon-visit-counterpart~ :: (Autoloaded) Navigates between an issue and its corresponding TODO. If in an issue buffer, visits the TODO (~tlon-visit-todo~). If on a TODO heading, visits the issue (~tlon-visit-issue~).

#+findex: tlon-visit-counterpart-or-capture
+ ~tlon-visit-counterpart-or-capture~ :: (Autoloaded) Similar to ~tlon-visit-counterpart~, but if navigating from an issue to a non-existent TODO, it captures the issue first (~tlon-visit-todo-or-capture~).

*** Creating Issues and TODOs
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-create-cmds
:END:

#+findex: tlon-create-issue-from-todo
+ ~tlon-create-issue-from-todo~ :: (Autoloaded) Creates a new GitHub issue based on the Org heading at point.
  1. Ensures the heading doesn't already have an issue number.
  2. Ensures the heading has a repository tag (prompts to add one via ~tlon-set-repo-in-heading~ if missing).
  3. Extracts the title, status, and tags from the heading.
  4. Creates the issue on GitHub using ~tlon-create-issue~.
  5. Pulls changes until the new issue appears locally.
  6. Sets the issue number in the Org heading (~tlon-set-issue-number-in-heading~).
  7. Visits the new issue.
  8. Sets the assignee to the current user and applies the status and tags from the Org heading as labels (~tlon-set-assignee~, ~tlon-set-labels~).
  9. Updates the Org heading to include the =orgit-topic:= link using ~tlon-make-todo-name-from-issue~.

#+findex: tlon-create-issue-or-todo
+ ~tlon-create-issue-or-todo~ :: Creates the counterpart if it doesn't exist. If on an Org heading without an issue, calls ~tlon-create-issue-from-todo~. If in an issue buffer without a corresponding TODO, calls ~tlon-capture-issue~.

*** Closing Issues and TODOs
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-close-cmds
:END:

#+findex: tlon-close-issue-and-todo
+ ~tlon-close-issue-and-todo~ :: (Autoloaded) Closes both the GitHub issue and its associated Org TODO. Works from either context.
  1. Finds the issue number and repository.
  2. Closes the GitHub issue using ~tlon-close-issue-number~ (which visits the issue and calls ~tlon-close-issue~).
  3. Visits the corresponding Org TODO (~tlon-visit-todo~).
  4. Sets the TODO state to "DONE" using =org-todo=.

*** Sorting Org Entries
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-sort-cmds
:END:

#+findex: tlon-forg-sort-by-tag
+ ~tlon-forg-sort-by-tag~ :: (Autoloaded) Sorts Org entries in the current buffer based on the first tag that matches the pattern defined in ~tlon-forg-sort-by-tags-regexp~. Uses =org-sort-entries= with a custom sorter function (~tlon-forg-tag-sorter~). Entries without a matching tag are sorted to the end.

*** File Handling (Associated with Issues)
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-file-cmds
:END:

#+findex: tlon-open-forge-file
+ ~tlon-open-forge-file~ :: (Autoloaded) Opens the file associated with the current issue. Assumes the issue title contains a BibTeX-like key (e.g., "Job: `key`") and uses ~tlon-get-file-from-issue~ (which calls ~tlon-get-file-from-key~) to find the corresponding file path.

#+findex: tlon-open-forge-counterpart
+ ~tlon-open-forge-counterpart~ :: (Autoloaded) Opens the *counterpart* file associated with the current issue. Finds the issue's file path using ~tlon-get-file-from-issue~ and then calls ~tlon-open-counterpart~ on that path.

*** Miscellaneous
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-misc-cmds
:END:

#+findex: tlon-report-bug
+ ~tlon-report-bug~ :: (Autoloaded) Creates a new bug report issue specifically in the =tlon.el= repository. Uses ~tlon-create-issue-in-dir~ and prepopulates the buffer with a template using ~tlon-prepopulate-bug-report-buffer~.

#+findex: tlon-list-all-todos
+ ~tlon-list-all-todos~ :: (Autoloaded) Uses =org-roam-extras= to list all Org files within the directory specified by =paths-dir-tlon-todos=.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-menu-cmd
:END:
#+findex: tlon-forg-menu
The command ~tlon-forg-menu~ (Autoloaded) activates a =transient= menu interface for =tlon-forg= operations.

It provides the following groups and commands:
+ *Actions*:
  + =y= :: dwim (visit counterpart or capture) (~tlon-visit-counterpart-or-capture~)
  + =v= :: visit counterpart (~tlon-visit-counterpart~)
  + =p= :: post (create issue from todo) (~tlon-create-issue-from-todo~)
  + =x= :: close issue and todo (~tlon-close-issue-and-todo~)
  + =s= :: sort by tag (~tlon-forg-sort-by-tag~)
+ *Capture*:
  + =c= :: capture issue (~tlon-capture-issue~)
  + =C= :: capture all issues (~tlon-capture-all-issues~)
+ *Reconcile*:
  + =r= :: reconcile issue and todo (~tlon-reconcile-issue-and-todo~)
  + =R= :: reconcile all issues and todos (~tlon-reconcile-all-issues-and-todos~)
+ *Options*: (These set the corresponding user options temporarily for the session)
  + =-a= :: Include archived (~tlon-infix-toggle-include-archived~)
  + =-r= :: When reconciling (~tlon-forg-when-reconciling-infix~)
  + =-n= :: When assignee is nil (~tlon-when-assignee-is-nil-infix~)
  + =-e= :: When assignee is someone else (~tlon-when-assignee-is-someone-else-infix~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-internals
:END:

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization.

*** Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-constants
:END:
#+vindex: tlon-todo-statuses
+ ~tlon-todo-statuses~ :: List of valid Org TODO keywords used by Tlön (e.g., "TODO", "IMPORTANT", "WAITING").
#+vindex: tlon-todo-tags
+ ~tlon-todo-tags~ :: List of valid Org tags used by Tlön (e.g., "PendingReview", "Later").
#+vindex: tlon-forg-sort-by-tags-regexp
+ ~tlon-forg-sort-by-tags-regexp~ :: Regexp used by ~tlon-forg-sort-by-tag~ to identify sortable tags.
#+vindex: tlon-forg-gh-project-query
+ ~tlon-forg-gh-project-query~ :: GraphQL query string for fetching issue details including project fields via the `gh` CLI (experimental).
#+vindex: tlon-gh-field-ids
+ ~tlon-gh-field-ids~ :: Alist mapping field names (e.g., =:effortid=) to their GitHub ProjectV2 field IDs (experimental).

*** File Path Management
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-file-paths
:END:
#+vindex: tlon-todos-jobs-file
+ ~tlon-todos-jobs-file~ :: Variable holding the path to the Org file containing job-related TODOs. Set dynamically via ~tlon-get-todos-jobs-file~.
#+vindex: tlon-todos-generic-file
+ ~tlon-todos-generic-file~ :: Variable holding the path to the Org file containing generic TODOs. Set dynamically via ~tlon-get-todos-generic-file~.
#+findex: tlon-get-todos-jobs-file
+ ~tlon-get-todos-jobs-file~ :: Retrieves the path to the jobs TODO file using its Org ID (=paths-tlon-todos-jobs-id=) and caches it.
#+findex: tlon-get-todos-generic-file
+ ~tlon-get-todos-generic-file~ :: Retrieves the path to the generic TODO file using its Org ID (=paths-tlon-todos-generic-id=) and caches it.
#+findex: tlon-get-todos-file-from-issue
+ ~tlon-get-todos-file-from-issue~ :: Returns the appropriate TODO file path (jobs or generic) based on whether the =ISSUE= is a job (~tlon-issue-is-job-p~).
#+findex: tlon-get-todo-position
+ ~tlon-get-todo-position~ :: Finds the starting position of a heading matching =STRING= in =FILE=. If =SUBSTRING= is non-nil, matches anywhere in the heading; otherwise, requires an exact match. Uses ~org-find-exact-headline-in-buffer~ or ~tlon-find-headline-substring-in-file~.
#+findex: tlon-find-headline-substring-in-file
+ ~tlon-find-headline-substring-in-file~ :: Helper to find the position of a heading containing =TODO= as a substring within =FILE=.
#+findex: tlon-get-todo-position-from-issue
+ ~tlon-get-todo-position-from-issue~ :: Finds the position of the TODO associated with =ISSUE=. For jobs, searches for the heading name; for generic issues, searches for the =orgit-topic:= link substring.

*** Issue and TODO Data Retrieval
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-data-retrieval
:END:
#+findex: tlon-get-issue
+ ~tlon-get-issue~ :: Retrieves the =forge-topic= object for an issue specified by =NUMBER= and =REPO=, or by extracting these from the current Org heading.
#+findex: tlon-get-issue-buffer
+ ~tlon-get-issue-buffer~ :: Returns the buffer visiting the specified issue (or the one at point/heading). Uses ~tlon-visit-issue~ internally.
#+findex: tlon-get-element-from-heading
+ ~tlon-get-element-from-heading~ :: Extracts text matching =REGEXP= from the Org heading at point.
#+findex: tlon-get-issue-number-from-heading
+ ~tlon-get-issue-number-from-heading~ :: Extracts the issue number (e.g., #123) from the heading.
#+findex: tlon-get-repo-from-heading
+ ~tlon-get-repo-from-heading~ :: Extracts the repository abbreviation (e.g., [repo-abbrev]) from the heading and looks up the full directory path.
#+findex: tlon-get-issue-number-from-open-issues
+ ~tlon-get-issue-number-from-open-issues~ :: Prompts the user to select an open issue from the current repository using completion and returns its number.
#+findex: tlon-get-issues
+ ~tlon-get-issues~ :: Returns a list of all open =forge-issue= objects for the specified =REPO= (or current repo).
#+findex: tlon-get-latest-issue
+ ~tlon-get-latest-issue~ :: Returns the number and title of the most recently created open issue in the =REPO=.
#+findex: tlon-count-issues
+ ~tlon-count-issues~ :: Returns the count of open issues in the =REPO=.
#+findex: tlon-get-labels-of-type
+ ~tlon-get-labels-of-type~ :: Returns labels of a specific =TYPE= ('tag or 'phase) from an =ISSUE=.
#+findex: tlon-get-status-in-issue
+ ~tlon-get-status-in-issue~ :: Returns the status ("open" or "completed") of an =ISSUE=, optionally =UPCASED=.
#+findex: tlon-get-status-in-todo
+ ~tlon-get-status-in-todo~ :: Returns the Org TODO state if it's one of ~tlon-todo-statuses~.
#+findex: tlon-get-phase-in-labels
+ ~tlon-get-phase-in-labels~ :: Finds the unique valid phase label within a list of =LABELS=.
#+findex: tlon-get-phase-in-issue
+ ~tlon-get-phase-in-issue~ :: Returns the unique valid job phase label for an =ISSUE=.
#+findex: tlon-get-assignee
+ ~tlon-get-assignee~ :: Returns the login name of the first assignee of an =ISSUE=.
#+findex: tlon-forg-get-labels
+ ~tlon-forg-get-labels~ :: Returns a list of all label names for an =ISSUE=.
#+findex: tlon-get-tags-in-todo
+ ~tlon-get-tags-in-todo~ :: Returns the valid Org tags (from ~tlon-todo-tags~) on the heading at point.
#+findex: tlon-get-element
+ ~tlon-get-element~ :: Generic function to get an =ELEMENT= (slot) from an =ISSUE= object.
#+findex: tlon-get-first-element
+ ~tlon-get-first-element~ :: Gets the first item from an =ELEMENT= (slot) that holds a list (like assignees, labels).
#+findex: tlon-get-first-label
+ ~tlon-get-first-label~ :: Returns the name of the first label of an =ISSUE=.
#+findex: tlon-get-state
+ ~tlon-get-state~ :: Returns the state symbol ('open or 'completed) of an =ISSUE=.
#+findex: tlon-get-issue-name
+ ~tlon-get-issue-name~ :: Formats the issue name as "#NUMBER TITLE".
#+findex: tlon-get-issue-link
+ ~tlon-get-issue-link~ :: Creates an Org link string (=orgit-topic:ID=) for an =ISSUE=.
#+findex: tlon-make-todo-name-from-issue
+ ~tlon-make-todo-name-from-issue~ :: Constructs the full Org heading string for an =ISSUE=, including status, repo abbreviation, optional job action, the issue link, and tags. Handles =NO-ACTION= and =NO-STATUS= flags.
#+findex: tlon-get-file-from-issue
+ ~tlon-get-file-from-issue~ :: Extracts a key from the issue name and finds the corresponding file path using ~tlon-get-file-from-key~.
#+findex: tlon-get-parent-todo
+ ~tlon-get-parent-todo~ :: Finds the parent heading of a given =TODO= name within the jobs file.

*** Issue and TODO Modification
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-modification
:END:
#+findex: tlon-set-repo-in-heading
+ ~tlon-set-repo-in-heading~ :: Prompts the user to select a repository and inserts its abbreviation tag (e.g., [repo-abbrev]) into the Org heading if not already present.
#+findex: tlon-set-issue-number-in-heading
+ ~tlon-set-issue-number-in-heading~ :: Inserts the =ISSUE-NUMBER= (e.g., #123) into the Org heading if not already present.
#+findex: tlon-close-issue
+ ~tlon-close-issue~ :: Sets the state of an =ISSUE= to 'completed using =forge--set-topic-state=.
#+findex: tlon-close-issue-number
+ ~tlon-close-issue-number~ :: Visits the issue specified by =ISSUE-NUMBER= and =REPO= and then closes it using ~tlon-close-issue~.
#+findex: tlon-set-labels
+ ~tlon-set-labels~ :: Sets the labels for an =ISSUE=. Can optionally replace existing labels of a specific =TYPE= (status or phase) or simply append new labels. Uses =forge--set-topic-labels=.
#+findex: tlon-set-job-label
+ ~tlon-set-job-label~ :: Prompts the user to select a valid job label from ~tlon-job-labels~.
#+findex: tlon-set-status
+ ~tlon-set-status~ :: Prompts the user to select a valid TODO status from ~tlon-todo-statuses~.
#+findex: tlon-set-assignee
+ ~tlon-set-assignee~ :: Sets the assignee for an =ISSUE= using =forge--set-topic-assignees=. Takes the =ASSIGNEE= login string.
#+findex: tlon-select-assignee
+ ~tlon-select-assignee~ :: Prompts the user to select a GitHub user (from ~tlon-user-lookup-all~) to be the assignee.
#+findex: tlon-set-initial-label-and-assignee
+ ~tlon-set-initial-label-and-assignee~ :: Sets the issue label to "Awaiting processing" and assigns it to the current user. Used when creating master job TODOs.
#+findex: tlon-update-todo-from-issue
+ ~tlon-update-todo-from-issue~ :: Replaces the current Org heading line with the provided =ISSUE-NAME= string during reconciliation.
#+findex: tlon-update-issue-from-todo
+ ~tlon-update-issue-from-todo~ :: Placeholder function for updating an issue based on a TODO heading during reconciliation (currently signals an error).
#+findex: tlon-mark-todo-done
+ ~tlon-mark-todo-done~ :: Finds the =TODO= heading in =FILE= and sets its state to "DONE".

*** Capture and Reconciliation Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-capture-helpers
:END:
#+findex: tlon-pull-silently
+ ~tlon-pull-silently~ :: Performs a =forge--pull= operation, suppressing output messages, optionally displaying a custom =MESSAGE= and running a =CALLBACK= function upon completion.
#+findex: tlon-capture-all-issues-after-pull
+ ~tlon-capture-all-issues-after-pull~ :: Callback function for ~tlon-capture-all-issues~ that initiates the capture process after the initial pull completes.
#+findex: tlon-store-todo
+ ~tlon-store-todo~ :: Uses =org-capture= with a specific =TEMPLATE= ("tbG" or "tbJ") to store a new TODO for the =ISSUE=, unless one already exists. Handles master job TODO creation.
#+findex: tlon-capture-handle-assignee
+ ~tlon-capture-handle-assignee~ :: Implements the logic defined by ~tlon-when-assignee-is-nil~ and ~tlon-when-assignee-is-someone-else~ during issue capture. Returns =t= if capture should proceed, =nil= otherwise. May call ~tlon-forg-change-assignee~.
#+findex: tlon-forg-change-assignee
+ ~tlon-forg-change-assignee~ :: Changes the assignee of the =ISSUE= to the current user and waits (pulling silently) until the change is reflected locally.
#+findex: tlon-capture-handle-phase
+ ~tlon-capture-handle-phase~ :: Ensures an =ISSUE= being captured as a job has a valid phase label, prompting the user to select one if missing.
#+findex: tlon-issue-is-job-p
+ ~tlon-issue-is-job-p~ :: Returns =t= if the =ISSUE= title starts with "Job: ".
#+findex: tlon-create-job-todo-from-issue
+ ~tlon-create-job-todo-from-issue~ :: Handles phase checking and calls ~tlon-store-or-refile-job-todo~ for job issues.
#+findex: tlon-store-master-job-todo
+ ~tlon-store-master-job-todo~ :: Creates the main parent heading for a job if it doesn't exist. Optionally sets the initial issue label and assignee.
#+findex: tlon-store-or-refile-job-todo
+ ~tlon-store-or-refile-job-todo~ :: Creates a new job TODO using ~tlon-store-todo~ and then refiles it under its corresponding master job heading (found using ~tlon-get-todo-position~). If the master heading doesn't exist, prompts to create it via ~tlon-store-master-job-todo~. Uses =org-extras= functions for refiling.
#+findex: tlon-reconcile-all-issues-and-todos-after-pull
+ ~tlon-reconcile-all-issues-and-todos-after-pull~ :: Callback function for ~tlon-reconcile-all-issues-and-todos~ that initiates the reconciliation process after the initial pull completes.
#+findex: tlon-reconcile-issue-and-todo-from-issue
+ ~tlon-reconcile-issue-and-todo-from-issue~ :: Core reconciliation logic called by ~tlon-reconcile-issue-and-todo~. Compares expected and actual TODO names and calls ~tlon-reconcile-issue-and-todo-prompt~ if they differ.
#+findex: tlon-reconcile-issue-and-todo-prompt
+ ~tlon-reconcile-issue-and-todo-prompt~ :: Handles the user interaction or automatic action based on ~tlon-forg-when-reconciling~ when a discrepancy is found. Calls either ~tlon-update-todo-from-issue~ or ~tlon-update-issue-from-todo~.

*** Validation and Checks
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-validation
:END:
#+findex: tlon-assignee-is-current-user-p
+ ~tlon-assignee-is-current-user-p~ :: Returns =t= if the =ISSUE='s assignee matches the current user (or ~tlon-forg-enforce-user~).
#+findex: tlon-todo-has-valid-status-p
+ ~tlon-todo-has-valid-status-p~ :: Returns =t= if the Org heading at point has a TODO state listed in ~tlon-todo-statuses~.
#+findex: tlon-check-label-and-assignee
+ ~tlon-check-label-and-assignee~ :: Checks if the label and assignee of the issue associated with the currently clocked task match the clocked action and the current user. Used before starting a job phase.

*** GitHub Project Integration (Experimental)
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-gh-project
:END:
These functions use the `gh` command-line tool and GraphQL to interact with GitHub Projects (V2). This functionality appears experimental or incomplete.

#+findex: tlon-gh-get-issue-fields
+ ~tlon-gh-get-issue-fields~ :: Executes the GraphQL query defined in ~tlon-forg-gh-project-query~ using `gh api graphql` to fetch project-related fields for a specific issue. Returns the raw JSON response.
#+findex: tlon-gh-parse-issue-fields
+ ~tlon-gh-parse-issue-fields~ :: Parses the raw JSON list returned by ~tlon-gh-get-issue-fields~ into a structured property list containing title, assignees, labels, effort, and status.

*** Miscellaneous Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-misc-helpers
:END:
#+findex: tlon-open-todo
+ ~tlon-open-todo~ :: Helper function to open =FILE= and go to =POSITION=.
#+findex: tlon-todo-issue-funcall
+ ~tlon-todo-issue-funcall~ :: Calls =TODO-FUN= if in Org mode at a heading, or =ISSUE-FUN= if in a Forge buffer with an issue context. Used by counterpart and reconcile commands.
#+findex: tlon-forg-tag-sorter
+ ~tlon-forg-tag-sorter~ :: The custom comparison function used by ~tlon-forg-sort-by-tag~. Extracts the first tag matching ~tlon-forg-sort-by-tags-regexp~ or returns "~" for sorting unmatched entries last.
#+findex: tlon-create-issue
+ ~tlon-create-issue~ :: Creates a GitHub issue using =ghub-post=.
#+findex: tlon-create-issue-in-dir
+ ~tlon-create-issue-in-dir~ :: Helper for ~tlon-report-bug~, sets up Magit and calls =forge-create-issue=.
#+findex: tlon-prepopulate-bug-report-buffer
+ ~tlon-prepopulate-bug-report-buffer~ :: Inserts a template into the buffer created by ~tlon-report-bug~.
#+findex: tlon-symbol-reader
+ ~tlon-symbol-reader~ :: Helper for transient menus to read a symbol choice using completion.
#+findex: tlon-when-assignee-is-nil-infix
+ ~tlon-when-assignee-is-nil-infix~ :: Transient infix command to set ~tlon-when-assignee-is-nil~.
#+findex: tlon-when-assignee-is-someone-else-infix
+ ~tlon-when-assignee-is-someone-else-infix~ :: Transient infix command to set ~tlon-when-assignee-is-someone-else~.
#+findex: tlon-forg-when-reconciling-infix
+ ~tlon-forg-when-reconciling-infix~ :: Transient infix command to set ~tlon-forg-when-reconciling~.
#+findex: tlon-infix-toggle-include-archived
+ ~tlon-infix-toggle-include-archived~ :: Transient infix command to toggle ~tlon-forg-include-archived~.

* Glossary Management (=tlon-glossary.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary
:END:

This module provides functions for managing a multilingual glossary stored in a JSON file. It allows users to edit entries, add translations, and extract the glossary in different formats for various recipients (humans, DeepL editor, DeepL API).

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-config
:END:

*** Glossary Source File
:PROPERTIES:
:CUSTOM_ID: h:tlon-file-glossary-source
:END:
#+vindex: tlon-file-glossary-source
The constant ~tlon-file-glossary-source~ defines the path to the JSON file containing the master glossary data. By default, it points to =glossary.json= within the =babel-core= repository.

*** Glossary Recipients
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-recipients
:END:
#+vindex: tlon-glossary-recipients
The constant ~tlon-glossary-recipients~ is an alist defining the email addresses associated with specific target languages for sharing human-readable glossaries. Each entry is a plist with =:language= (language code string) and =:email= (email address string).

#+begin_src emacs-lisp
(defconst tlon-glossary-recipients
  '((:language "fr" :email "tlon-french@googlegroups.com")
    (:language "it" :email "tlon-italian@googlegroups.com")))
#+end_src

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-commands
:END:

This section details the interactive commands provided by =tlon-glossary.el=.

*** Edit Glossary Entry
:PROPERTIES:
:CUSTOM_ID: h:tlon-edit-glossary
:END:
#+findex: tlon-edit-glossary
The command ~tlon-edit-glossary~ provides an interactive way to create or update entries in the glossary file (~tlon-file-glossary-source~).

1. It parses the existing glossary using ~tlon-parse-glossary~.
2. It prompts the user to choose an existing English term (using completion) or add a new one.
3. If the term is new:
   - It prompts the user to select the term type (=variable= or =invariant=) using ~tlon-select-term-type~.
   - It creates a new entry structure using ~tlon-create-entry~. For invariant terms, it automatically adds entries for all target languages, using the English term as the initial translation.
4. If the term exists or is newly created and is not of type =invariant=:
   - It calls ~tlon-edit-translation-in-entry~ to prompt the user for a target language and the corresponding translation for the selected English term. It updates the entry with the new or modified translation.
5. It updates the main glossary data structure with the modified or new entry using ~tlon-update-glossary~.
6. It writes the updated glossary back to the JSON file using ~tlon-write-data~.

*** Extract Glossary
:PROPERTIES:
:CUSTOM_ID: h:tlon-extract-glossary
:END:
#+findex: tlon-extract-glossary
The command ~tlon-extract-glossary~ extracts a language-specific glossary from the main JSON file and saves it in a format suitable for a specified recipient.

1. It prompts the user to select the target =LANGUAGE= using ~tlon-select-language~.
2. It prompts the user to select the =RECIPIENT= type (=human=, =deepl-editor=, or =deepl-api=) using completion.
3. It determines the target file path and extension based on the language and recipient using ~tlon-glossary-target-path~.
4. It reads the source glossary JSON file.
5. It creates or opens the target file and inserts the formatted glossary content using ~tlon-insert-formatted-glossary~, filtering and formatting entries based on the recipient:
   - =human=: Includes only "variable" type entries, formatted as CSV (="Source","Target"=).
   - =deepl-editor=: Includes all entries, formatted as CSV (="Source","Target","EN","LANG"=).
   - =deepl-api=: Includes all entries, formatted as TSV (=Source\tTarget=).
6. It saves the target file.
7. If the recipient is =human=, it asks the user if they want to share the extracted glossary via email using ~tlon-share-glossary~.
8. For other recipients, it messages the path to the extracted file.

*** Share Glossary
:PROPERTIES:
:CUSTOM_ID: h:tlon-share-glossary
:END:
#+findex: tlon-share-glossary
The command ~tlon-share-glossary~ sends an extracted glossary file as an email attachment to the designated translators for a specific language.

1. It prompts the user to select the glossary =ATTACHMENT= file (defaulting to the downloads directory).
2. It prompts the user to select the =LANGUAGE= of the glossary (unless provided as an argument).
3. It looks up the recipient email address for the language in ~tlon-glossary-recipients~ using ~tlon-lookup~.
4. It looks up the full language name (e.g., "French") using ~tlon-lookup~ on ~tlon-languages-properties~ and sets the ~tlon-email-language~ variable.
5. It calls ~tlon-email-send~ with the ="share-glossary.org"= template, the recipient email, and the attachment path.

*** Glossary Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-menu
:END:
#+findex: tlon-glossary-menu
The command ~tlon-glossary-menu~ activates a =transient= menu interface providing quick access to the main glossary functions:
+ =e= :: Edit glossary entry (~tlon-edit-glossary~)
+ =x= :: Extract glossary (~tlon-extract-glossary~)
+ =s= :: Share glossary (~tlon-share-glossary~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** Glossary Data Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-data
:END:

#+findex: tlon-parse-glossary
+ ~tlon-parse-glossary~ :: Reads and parses the JSON glossary file specified by ~tlon-file-glossary-source~ into an Emacs Lisp alist using ~tlon-read-json~.

#+findex: tlon-get-english-terms
+ ~tlon-get-english-terms~ :: Extracts a list of all English terms (the =en= value) from the parsed glossary alist. Used for completion in ~tlon-edit-glossary~.

#+findex: tlon-find-entry-by-term
+ ~tlon-find-entry-by-term~ :: Searches the parsed glossary alist for an entry whose English term (=en= value) matches the given =TERM=. Returns the matching entry alist or nil.

#+findex: tlon-select-term-type
+ ~tlon-select-term-type~ :: Prompts the user with completion to select a term type (=variable= or =invariant=) and returns the selected string.

#+findex: tlon-create-entry
+ ~tlon-create-entry~ :: Creates a new glossary entry alist for a given English =TERM= and =TYPE=. If the type is =invariant=, it pre-populates translations for all ~tlon-project-target-languages~ with the English term itself.

#+findex: tlon-edit-translation-in-entry
+ ~tlon-edit-translation-in-entry~ :: Interactively prompts the user to select a target language and provide or update the translation for the given English =TERM= within the provided =ENTRY= alist. Returns the modified entry.

#+findex: tlon-update-glossary
+ ~tlon-update-glossary~ :: Takes the main glossary alist, a potentially modified =ENTRY=, and the corresponding English =TERM=. If an entry for =TERM= already exists in the glossary, it replaces it with =ENTRY=. If not, it appends =ENTRY= to the glossary. Returns the updated glossary alist.

*** Glossary Extraction Formatting
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-extraction
:END:

#+findex: tlon-glossary-target-path
+ ~tlon-glossary-target-path~ :: Determines the full output file path for an extracted glossary based on the target =LANGUAGE= and =RECIPIENT=. It sets the file extension to =.csv= for =human= and =deepl-editor=, and =.tsv= for =deepl-api=. Uses ~tlon-glossary-make-file~ internally.

#+findex: tlon-glossary-make-file
+ ~tlon-glossary-make-file~ :: Constructs the filename (e.g., =EN-FR.csv=) and combines it with the user's download directory path (~paths-dir-downloads~).

#+findex: tlon-insert-formatted-glossary
+ ~tlon-insert-formatted-glossary~ :: Iterates through the parsed =JSON= glossary data. For each entry, it extracts the source (=en=) and target (=language=) terms. Based on the =RECIPIENT=, it formats the entry as CSV or TSV and inserts it into the current buffer. For =human= recipients, it only includes entries of type =variable=.

*** Git Integration (Currently Unused/TODO)
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-git
:END:

#+findex: tlon-glossary-prompt-for-explanation
+ ~tlon-glossary-prompt-for-explanation~ :: (TODO) Prompts the user for an optional explanation of a glossary change, intended for commit messages.

#+findex: tlon-glossary-commit
+ ~tlon-glossary-commit~ :: (TODO) Intended to handle the Git workflow for glossary changes: pulling, staging the glossary file, committing with a formatted message (including action, term, and optional explanation), and pushing. Requires =magit= functions. Currently marked as unused and needing fixes.

* Image Processing (=tlon-images.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-images
:END:

This module provides functionality for processing images, primarily using the external =ImageMagick= command-line tool. It allows for operations like reducing brightness, inverting colors, and making images non-transparent. It also integrates with the =invertornot.com= API to determine if an image's colors can be safely inverted.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-dependencies
:END:

+ =ImageMagick= :: Must be installed and accessible in the system's PATH for image processing commands to work.
+ =transient= :: Required for the menu interface.
+ =window-extras= :: Used by ~tlon-images-maybe-open-after-processing~ for window management.

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-options
:END:

#+vindex: tlon-images-default-brightness-reduction
+ ~tlon-images-default-brightness-reduction~ :: Default percentage (integer) by which to reduce image brightness when using ~tlon-images-reduce-brightnesss~ without specifying a percentage. Defaults to 20.

#+vindex: tlon-images-open-after-processing
+ ~tlon-images-open-after-processing~ :: Boolean flag. If non-nil (the default), the original (copied as light theme) and processed (dark theme) images will be opened in separate windows after processing via ~tlon-images-reduce-brightnesss~ or ~tlon-images-invert-colors~. Uses ~tlon-images-maybe-open-after-processing~.

#+vindex: tlon-images-process-without-asking
+ ~tlon-images-process-without-asking~ :: Boolean flag. If non-nil, commands like ~tlon-images-reduce-brightnesss~ will process the image at point (in Dired) or the current buffer's file without prompting for confirmation via ~tlon-images-read-image~. Defaults to nil.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-commands
:END:

*** Auto Process Image
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-auto-process
:END:
#+findex: tlon-images-auto-process
The command ~tlon-images-auto-process~ attempts to intelligently process an image for a dark theme.

1. It prompts for the =IMAGE= file using ~tlon-images-read-image~.
2. It determines the output filename using ~tlon-images-get-themed-file-name~ with the =dark= theme.
3. It checks if the image can be safely inverted using ~tlon-images-can-invert-p~ (which calls the =invertornot.com= API).
4. If inversion is safe, it calls ~tlon-images-invert-colors~.
5. Otherwise, it calls ~tlon-images-reduce-brightnesss~ using the default reduction percentage.

*** Reduce Image Brightness
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-reduce-brightnesss
:END:
#+findex: tlon-images-reduce-brightnesss
The command ~tlon-images-reduce-brightnesss~ reduces the brightness of an image using ImageMagick.

1. It prompts for the =SOURCE= image using ~tlon-images-read-image~ (unless provided).
2. It determines the =TARGET= filename (defaulting to a dark-themed version via ~tlon-images-get-themed-file-name~) unless provided.
3. It prompts for the reduction =PERCENT= (defaulting to ~tlon-images-default-brightness-reduction~) unless provided. Note: The percentage passed to ImageMagick's =-modulate= is calculated as =100 - PERCENT=.
4. It constructs the ImageMagick command using ~tlon-imagemagick-reduce-brightness~.
5. It calls ~tlon-images-process-image~ to execute the command, copy the original to a light-themed file, handle output, and potentially open the images.

*** Invert Image Colors
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-invert-colors
:END:
#+findex: tlon-images-invert-colors
The command ~tlon-images-invert-colors~ inverts the colors of an image using ImageMagick.

1. It prompts for the =SOURCE= image using ~tlon-images-read-image~ (unless provided).
2. It determines the =TARGET= filename (defaulting to a dark-themed version via ~tlon-images-get-themed-file-name~) unless provided.
3. It constructs the ImageMagick command using ~tlon-imagemagick-invert-colors~.
4. It calls ~tlon-images-process-image~ to execute the command, copy the original to a light-themed file, handle output, and potentially open the images.

*** Make Image Non-Transparent
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-make-nontransparent
:END:
#+findex: tlon-images-make-nontransparent
The command ~tlon-images-make-nontransparent~ removes transparency from an image, replacing it with a solid background color using ImageMagick.

1. It prompts for the =SOURCE= image using ~tlon-images-read-image~ (unless provided).
2. It determines the =TARGET= filename (defaulting to the source file itself, thus overwriting it) unless provided.
3. It prompts for the =BACKGROUND= color (defaulting to "white") unless provided.
4. It constructs the ImageMagick command using ~tlon-imagemagick-make-nontransparent~.
5. It executes the command using =shell-command-to-string=.
6. It calls ~tlon-images-handle-output~ to display success or error messages.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-menu
:END:
#+findex: tlon-images-menu
The command ~tlon-images-menu~ activates a =transient= menu interface for image processing.

It provides the following groups and commands:
+ *Commands*:
  + =a= :: Auto process (~tlon-images-auto-process~)
  + =r= :: Reduce brightness (~tlon-images-reduce-brightnesss~)
  + =i= :: Invert colors (~tlon-images-invert-colors~)
  + =n= :: Make non-transparent (~tlon-images-make-nontransparent~)
+ *Options*:
  + =-o= :: Toggle opening images after processing (~tlon-images-toggle-open-after-processing~ infix, modifies ~tlon-images-open-after-processing~)
  + =-p= :: Toggle processing without asking (~tlon-images-toggle-process-without-asking~ infix, modifies ~tlon-images-process-without-asking~)
  + =-r= :: Set brightness reduction percentage (~tlon-images-brightness-reduction-infix~, modifies ~tlon-images-default-brightness-reduction~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-internals
:END:

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization.

*** ImageMagick Command Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-imagemagick-consts
:END:

#+vindex: tlon-imagemagick-reduce-brightness
+ ~tlon-imagemagick-reduce-brightness~ :: Format string for the =magick= command to reduce brightness using =-modulate=. Placeholders: %1$s (input), %2$s (output), %3$s (brightness percentage for modulate).

#+vindex: tlon-imagemagick-invert-colors
+ ~tlon-imagemagick-invert-colors~ :: Format string for the =magick= command to invert colors using =-channel RGB -negate=. Placeholders: %s (input), %s (output).

#+vindex: tlon-imagemagick-make-nontransparent
+ ~tlon-imagemagick-make-nontransparent~ :: Format string for the =magick= command to remove transparency using =-background= and =-flatten=. Placeholders: %1$s (input), %2$s (output), %3$s (background color).

*** InvertOrNot API Integration
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-invertornot
:END:

#+vindex: tlon-invertornot-generic-endpoint
+ ~tlon-invertornot-generic-endpoint~ :: Base URL for the =invertornot.com= API.

#+findex: tlon-images-post-file-to-invertornot
+ ~tlon-images-post-file-to-invertornot~ :: Sends an image =FILE= to the =invertornot.com/api/file= endpoint using a multipart/form-data POST request. Returns the parsed JSON response via ~tlon-images-handle-synchronous-response~.

#+findex: tlon-images-post-url-to-invertornot
+ ~tlon-images-post-url-to-invertornot~ :: Sends an =IMAGE-URL= to the =invertornot.com/api/url= endpoint using a JSON POST request. Returns the parsed JSON response via ~tlon-images-handle-synchronous-response~.

#+findex: tlon-images-handle-synchronous-response
+ ~tlon-images-handle-synchronous-response~ :: Helper function to process the buffer returned by =url-retrieve-synchronously=, extract the JSON payload, and parse it into an alist.

#+findex: tlon-images-can-invert-p
+ ~tlon-images-can-invert-p~ :: Takes an =IMAGE= file path, sends it to the =invertornot.com= API using ~tlon-images-post-file-to-invertornot~, and checks the =invert= field in the response. Returns =t= if the value is 1, =nil= if 0, and signals an error otherwise.

*** Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-helpers
:END:

#+findex: tlon-images-read-image
+ ~tlon-images-read-image~ :: Prompts the user for an image file path. If called within Dired, defaults to the file at point. If the current buffer has a file, defaults to that. If ~tlon-images-process-without-asking~ is non-nil, it skips the prompt and uses the default directly.

#+findex: tlon-images-process-image
+ ~tlon-images-process-image~ :: Core utility for processing images. Takes =SOURCE=, =TARGET=, the ImageMagick =COMMAND= string, and a =MESSAGE-FMT= string.
  1. Executes the =COMMAND= using =shell-command-to-string=.
  2. Copies the =SOURCE= file to a light-themed filename (using ~tlon-images-get-themed-file-name~).
  3. Calls ~tlon-images-maybe-open-after-processing~ with the light and dark themed files.
  4. Calls ~tlon-images-handle-output~ with the command output and the formatted message.

#+findex: tlon-images-handle-output
+ ~tlon-images-handle-output~ :: Checks the =OUTPUT= string from a shell command. If empty, displays the success =MESSAGE=. If non-empty, signals a user error with the output content.

#+findex: tlon-images-get-themed-file-name
+ ~tlon-images-get-themed-file-name~ :: Takes a =FILE= path and a =THEME= symbol (=light= or =dark=). Returns a new filename with =-[theme].ext= appended before the extension (e.g., =image.png= becomes =image-dark.png=).

#+findex: tlon-images-maybe-open-after-processing
+ ~tlon-images-maybe-open-after-processing~ :: If ~tlon-images-open-after-processing~ is non-nil, it opens the =ORIGINAL= (light theme) and =PROCESSED= (dark theme) files in separate windows, splitting the frame if necessary using =window-extras= functions.

*** Transient Infix Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-transient-infixes
:END:

These functions define the behavior of the options within the ~tlon-images-menu~.

#+findex: tlon-images-brightness-reduction-infix
+ ~tlon-images-brightness-reduction-infix~ :: Reads a number from the user to set the local value of ~tlon-images-default-brightness-reduction~ for the current menu invocation.

#+findex: tlon-images-toggle-open-after-processing
+ ~tlon-images-toggle-open-after-processing~ :: Toggles the boolean value of ~tlon-images-open-after-processing~ for the current menu invocation using ~tlon-transient-toggle-variable-value~.

#+findex: tlon-images-toggle-process-without-asking
+ ~tlon-images-toggle-process-without-asking~ :: Toggles the boolean value of ~tlon-images-process-without-asking~ for the current menu invocation using ~tlon-transient-toggle-variable-value~.

* Job Management (=tlon-jobs.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs
:END:

This module manages the workflow for processing "Babel jobs," which typically involve translating documents. It integrates Org mode's clocking mechanism, GitHub issues (via =orgit-forge=), and Git version control (via =magit=) to track the progress of jobs through various phases like processing, translation, revision, checking, and review.

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-config
:END:

*** Job Labels and Phases
:PROPERTIES:
:CUSTOM_ID: h:tlon-job-labels
:END:
#+vindex: tlon-job-labels
The constant ~tlon-job-labels~ defines the different stages or phases a job goes through. It's an alist where each element represents a phase and contains properties like the display label, the action verb associated with the phase, and the default assignee for that phase.

#+begin_src emacs-lisp
(defconst tlon-job-labels
  '((:label "Awaiting processing" :action "Process" :assignee "worldsaround")
    (:label "Awaiting translation" :action "Translate" :assignee "")
    ;; ... other phases ...
    (:label "Published" :action "Publish" :assignee "")))
#+end_src

This structure drives the workflow logic, determining the next step and assignee after a phase is completed.

*** Org ID Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-org-ids
:END:

#+vindex: tlon-jobs-manual-processing-id
+ ~tlon-jobs-manual-processing-id~ :: The Org ID of the specific heading within =manual.org= that contains instructions relevant to the "processing" phase. Used by ~tlon-jobs-initialize-processing~.

#+vindex: tlon-jobs-id
+ ~tlon-jobs-id~ :: The Org ID of the main "jobs" heading in the central =jobs.org= file. This file serves as the primary tracker for all jobs.

*** Jobs File Variable
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-file-var
:END:
#+vindex: tlon-jobs-file
The variable ~tlon-jobs-file~ holds the path to the =jobs.org= file. It is set dynamically by ~tlon-jobs-get-file~ and should not be configured manually.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-commands
:END:

This section details the interactive commands provided by =tlon-jobs.el=.

*** Start or Finish Job Phase
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-start-or-finish-phase
:END:
#+findex: tlon-jobs-start-or-finish-phase
The command ~tlon-jobs-start-or-finish-phase~ is the central command for advancing the job workflow. It determines the current context (Org mode for starting, Markdown mode for finishing) and the action associated with the currently clocked task (~tlon-get-clock-action~).

- *Initialization (in Org mode):*
  1. Clocks into the task.
  2. Saves the buffer.
  3. Determines the initialization function based on the action (e.g., ~tlon-jobs-initialize-processing~).
  4. Calls the general ~tlon-jobs-initialize~ function, which performs common setup tasks:
     - Checks the associated repository's label and assignee (~tlon-check-label-and-assignee~).
     - Ensures the repository is on the "main" branch (~tlon-check-branch~).
     - Pulls the latest changes from upstream (~magit-pull-from-upstream~).
     - Sets up the window configuration with original and translation files (~tlon-set-windows~).
     - Opens the associated GitHub issue (~orgit-topic-open~).
     - Copies the original buffer content.
  5. Calls the specific initialization function for the current phase (e.g., opening the manual for processing, opening DeepL for translation, setting up diffs for review).

- *Finalization (in Markdown mode):*
  1. Closes split mode if active (~tlon-split-mode -1~).
  2. Saves the buffer.
  3. Calls ~tlon-jobs-finalize~, which performs common finalization tasks:
     - Checks the repository branch and label/assignee.
     - Performs phase-specific checks (e.g., prompts for Jinx/Flycheck confirmation after translation).
     - Saves the modified original (if processing) or translation file.
     - Commits and pushes the changes for the translation file (and original if processing) using ~tlon-commit-and-push~.
     - Updates the associated GitHub issue: sets the next label (~tlon-get-clock-next-label~) and assignee (~tlon-jobs-get-next-assignee~), potentially closing the issue after the "Review" phase using ~tlon-jobs-act-on-issue~.
     - Updates the corresponding TODO items in =jobs.org= and the main TODO file using ~tlon-jobs-finalize-set-todos~.

*** Create Job
:PROPERTIES:
:CUSTOM_ID: h:tlon-create-job
:END:
#+findex: tlon-create-job
The command ~tlon-create-job~ orchestrates the entire process of creating a new job based on a BibTeX entry at point in an Ebib buffer.

1. Imports the document associated with the BibTeX entry using ~tlon-import-document~, which returns the BibTeX key.
2. Creates the initial translation file structure using ~tlon-create-translation-file~.
3. Creates the necessary records for the job (GitHub issue and =jobs.org= heading) using ~tlon-create-record-for-job~.

*** Create Job Record
:PROPERTIES:
:CUSTOM_ID: h:tlon-create-record-for-job
:END:
#+findex: tlon-create-record-for-job
The command ~tlon-create-record-for-job~ creates the tracking records for a job based on a BibTeX =KEY=. If =KEY= is not provided, it attempts to find it in the current buffer (Markdown or Ebib).

1. Creates a GitHub issue titled "Job: `KEY`" using ~tlon-create-issue-from-key~.
2. Creates a corresponding heading in =jobs.org= using ~tlon-create-heading-for-job~, optionally committing the change.

*** Create Heading in jobs.org
:PROPERTIES:
:CUSTOM_ID: h:tlon-create-heading-for-job
:END:
#+findex: tlon-create-heading-for-job
The command ~tlon-create-heading-for-job~ adds a new heading to the =jobs.org= file for tracking a specific job based on its BibTeX =KEY=.

1. Determines the =KEY= (from argument or current buffer).
2. Formats the heading as =[cite:@KEY]=.
3. Finds the associated repository and its abbreviation (~tlon-repo-lookup~).
4. Opens =jobs.org= (finding the buffer or file).
5. If the heading doesn't exist:
   - Navigates to the main jobs section (using ~tlon-jobs-id~).
   - Inserts the new heading.
   - Sets the TODO state to "TODO".
   - Adds the repository abbreviation as a tag.
   - Sorts the headings in the file (~tlon-sort-headings~).
   - Saves the buffer.
6. Optionally commits the change to =jobs.org= using ~tlon-commit-and-push~ if =COMMIT= is non-nil.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-menu
:END:
#+findex: tlon-jobs-menu
The command ~tlon-jobs-menu~ activates a =transient= menu interface for job-related operations.

It provides the following groups and commands:
+ *Job phases*:
  + =j= :: Start or finish phase (~tlon-jobs-start-or-finish-phase~)
+ *Job creation*:
  + =c c= :: Create job (~tlon-create-job~)
  + =c d= :: 1 Import document (~tlon-import-document~)
  + =c f= :: 2 Create translation file (~tlon-create-translation-file~)
  + =c r= :: 3 Create record for job (~tlon-create-record-for-job~)
+ *Add or modify*:
  + =a s= :: Section correspondence (~tlon-section-correspondence-dwim~)
  + =a u= :: URL correspondence (~tlon-edit-url-correspondences~)
+ *jobs.org*:
  + =r= :: Create record (~tlon-create-record-for-job~)
  + =h= :: Create heading (~tlon-create-heading-for-job~)
  + =t= :: Sort headings (~tlon-sort-headings~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** File and Path Management
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-files
:END:

#+findex: tlon-jobs-get-file
+ ~tlon-jobs-get-file~ :: Retrieves the path to the =jobs.org= file, using the Org ID ~tlon-jobs-id~ and caching the result in ~tlon-jobs-file~ via ~tlon-get-or-set-org-var~.

*** Job Phase Logic
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-phase-logic
:END:

#+findex: tlon-jobs-get-action-in-label
+ ~tlon-jobs-get-action-in-label~ :: Extracts the action verb (e.g., "Process", "Translate") from a job phase =LABEL= string (e.g., "Awaiting processing").

#+findex: tlon-jobs-initialize
+ ~tlon-jobs-initialize~ :: Performs common setup tasks when starting any job phase (checking repo, pulling, setting up windows, opening issue, copying buffer). Takes the specific phase initialization function (=FUN=) as an argument and calls it after the common setup.

#+findex: tlon-jobs-finalize
+ ~tlon-jobs-finalize~ :: Performs common cleanup and update tasks when finishing any job phase (checking repo, committing files, updating GitHub issue label/assignee, updating TODOs).

#+findex: tlon-jobs-get-next-assignee
+ ~tlon-jobs-get-next-assignee~ :: Determines the assignee for the *next* phase. It considers the current user and the designated assignee for the current phase versus the next phase, potentially assigning a substitute if the current user isn't the designated one for the current phase.

#+findex: tlon-jobs-initialize-processing
+ ~tlon-jobs-initialize-processing~ :: Specific setup for the "Process" phase: opens the original file and the relevant section in =manual.org= (using ~tlon-jobs-manual-processing-id~), narrows the view, and opens the issue.

#+findex: tlon-jobs-initialize-translation
+ ~tlon-jobs-initialize-translation~ :: Specific setup for the "Translate" phase: opens the DeepL application using ~macos-open-app~.

#+findex: tlon-jobs-initialize-revision
+ ~tlon-jobs-initialize-revision~ :: Specific setup for the "Revise" phase: activates split mode (~tlon-split-mode~).

#+findex: tlon-jobs-initialize-check
+ ~tlon-jobs-initialize-check~ :: Specific setup for the "Check" phase: rearranges windows, starts Markdown preview, and initiates text-to-speech using ~read-aloud-buf~.

#+findex: tlon-jobs-initialize-review
+ ~tlon-jobs-initialize-review~ :: Specific setup for the "Review" phase: opens an =ediff= session showing changes since the last user commit (~tlon-log-buffer-latest-user-commit-ediff~), sets up =jinx= for spell/grammar checking in the target language, and moves to the beginning of the buffer.

*** Issue and TODO Interaction
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-issue-todo
:END:

#+findex: tlon-jobs-act-on-issue
+ ~tlon-jobs-act-on-issue~ :: Updates a GitHub issue associated with an =ORIGINAL-KEY=. It finds the issue (using ~tlon-issue-lookup~), sets the specified =LABEL= and =ASSIGNEE= using ~tlon-set-labels~ and ~tlon-set-assignee~, and optionally closes the issue if =CLOSE= is non-nil.

#+findex: tlon-jobs-finalize-set-todos
+ ~tlon-jobs-finalize-set-todos~ :: Marks the relevant TODO items as DONE during the finalization process. It marks the clocked task itself as DONE in the main TODO file (~tlon-get-todos-jobs-file~). For "Review" and "Check" phases, it also marks the parent TODO as DONE. For the "Review" phase, it additionally marks the corresponding job heading in =jobs.org= as DONE, sorts the headings, and commits the change.

*** jobs.org Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-org-helpers
:END:

#+findex: tlon-jobs-get-key-in-heading
+ ~tlon-jobs-get-key-in-heading~ :: Extracts the BibTeX key from the Org heading at point, assuming the format =[cite:@KEY]= or ``Job: `KEY`.md``.

#+findex: tlon-jobs-goto-heading
+ ~tlon-jobs-goto-heading~ :: Moves the point to the heading corresponding to the given BibTeX =KEY= within the =jobs.org= file.

* Markdown Functionality (=tlon-md.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-md
:END:

This module provides specialized functionality for working with Markdown files within the Tlön workflow. It includes commands for inserting and managing various Markdown, HTML, MDX, and SSML elements, handling footnotes, sorting content, and interacting with YAML front matter. It also defines numerous constants (mostly regular expressions) for identifying these elements.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-dependencies
:END:

+ =markdown-mode-extras=
+ =tlon-core=
+ =tlon-yaml=

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-options
:END:

#+vindex: tlon-md-special-characters
+ ~tlon-md-special-characters~ :: An alist defining special characters that can be inserted using the ~tlon-insert-special-character~ command. The key is the descriptive name (e.g., "en dash") and the value is the character itself (e.g., "–").

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-commands
:END:

This section details the interactive commands provided by =tlon-md.el=.

*** YAML Front Matter
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-yaml-commands
:END:
#+findex: tlon-edit-yaml-field
+ ~tlon-edit-yaml-field~ :: Edits the YAML field at point. It retrieves the key and value using ~tlon-yaml-get-field-at-point~ and then prompts the user to re-insert/modify them using ~tlon-yaml-insert-field~.

*** Links and Sorting
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-link-sort-commands
:END:
#+findex: tlon-insert-internal-link
+ ~tlon-insert-internal-link~ :: Inserts a Markdown link to another Tlön entity (article, author, tag). It uses completion based on titles found in the repository's metadata (~tlon-metadata-in-repo~). It handles existing links at point and uses the active region as default link text.

#+findex: tlon-md-sort-related-entries
+ ~tlon-md-sort-related-entries~ :: Sorts the list items (assumed to be links separated by " • ") alphabetically within the "Entradas relacionadas" section of the current buffer. Uses ~tlon-md-sort-elements-in-paragraph~ internally.

*** Tag Insertion/Editing (HTML, MDX, SSML)
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-tag-commands
:END:
These commands insert or edit specific tags at point or around the selected region. They generally use ~tlon-md-insert-or-edit-tag~ internally, which checks if the tag already exists at point and either edits it or inserts a new one. Many prompt for necessary attributes.

+ *HTML Tags*:
  #+findex: tlon-html-insert-subscript
  + ~tlon-html-insert-subscript~ :: Inserts/edits =<sub>= tags.
  #+findex: tlon-html-insert-superscript
  + ~tlon-html-insert-superscript~ :: Inserts/edits =<sup>= tags.
  #+findex: tlon-html-insert-quote
  + ~tlon-html-insert-quote~ :: Inserts/edits =<q>= tags (inline quote).

+ *MDX Tags*:
  #+findex: tlon-mdx-insert-aside
  + ~tlon-mdx-insert-aside~ :: Inserts/edits =<Aside>= tags.
  #+findex: tlon-mdx-insert-cite
  + ~tlon-mdx-insert-cite~ :: Inserts/edits =<Cite>= tags. Prompts for BibTeX key (=bibKey=), locator, and length (short/long) using custom readers (~tlon-md-cite-bibkey-reader~, ~tlon-md-cite-locator-reader~, ~tlon-md-cite-length-reader~).
  #+findex: tlon-mdx-insert-figure
  + ~tlon-mdx-insert-figure~ :: Inserts/edits =<Figure>= tags. Prompts for image URL (=src=) and alt text (=alt=).
  #+findex: tlon-mdx-insert-language
  + ~tlon-mdx-insert-language~ :: Inserts/edits =<Language>= tags. Prompts for language ID (=id=).
  #+findex: tlon-mdx-insert-literal-link
  + ~tlon-mdx-insert-literal-link~ :: Inserts/edits =<LiteralLink>= tags. Prompts for the link URL (=src=).
  #+findex: tlon-mdx-insert-math
  + ~tlon-mdx-insert-math~ :: Inserts/edits =<Math>= tags. Prompts for alt text (=alt=) and display type (inline/display) using ~tlon-md-math-display-reader~. Suggests using ~tlon-ai-translate-math~ for AI-generated alt text.
  #+findex: tlon-mdx-insert-embedded
  + ~tlon-mdx-insert-embedded~ :: Inserts/edits =<Embedded>= tags (self-closing). Prompts for chart URL (=src=), alt text (=alt=), and height (=height=).
  #+findex: tlon-mdx-insert-replace-audio
  + ~tlon-mdx-insert-replace-audio~ :: Inserts/edits =<ReplaceAudio>= tags. Prompts for the audio text (=text=) and optional voice role (=role=) using ~tlon-md-replace-audio-voice-reader~.
  #+findex: tlon-mdx-insert-romantlon-insert-mdx-roman
  + ~tlon-mdx-insert-romantlon-insert-mdx-roman~ :: Inserts/edits =<Roman>= tags (for Roman numerals in small caps with correct TTS).
  #+findex: tlon-mdx-insert-small-caps
  + ~tlon-mdx-insert-small-caps~ :: Inserts/edits =<SmallCaps>= tags (for general small caps text).
  #+findex: tlon-mdx-insert-table
  + ~tlon-mdx-insert-table~ :: (Not yet developed) Intended for inserting complex =<Table>= tags.
  #+findex: tlon-mdx-insert-simple-table
  + ~tlon-mdx-insert-simple-table~ :: Inserts/edits =<SimpleTable>= tags. Prompts for alt text (=alt=) and inclusion scope (=include=) using ~tlon-md-simple-table-include-reader~.
  #+findex: tlon-mdx-insert-visually-hidden
  + ~tlon-mdx-insert-visually-hidden~ :: Inserts/edits =<VisuallyHidden>= tags.
  #+findex: tlon-mdx-insert-voice-role
  + ~tlon-mdx-insert-voice-role~ :: Inserts/edits =<VoiceRole>= tags. Prompts for the voice role (=role=) using ~tlon-md-replace-audio-voice-reader~.

+ *SSML Tags*:
  #+findex: tlon-tts-insert-ssml-break
  + ~tlon-tts-insert-ssml-break~ :: Inserts/edits =<break>= tags (self-closing). Prompts for time duration (=time=).
  #+findex: tlon-tts-insert-ssml-emphasis
  + ~tlon-tts-insert-ssml-emphasis~ :: Inserts/edits =<emphasis>= tags. Prompts for emphasis level (=level=) using ~tlon-md-emphasis-level-reader~.
  #+findex: tlon-tts-insert-ssml-lang
  + ~tlon-tts-insert-ssml-lang~ :: Inserts/edits =<lang>= tags. Prompts for language code (=xml:lang=) using ~tlon-md-lang-reader~.
  #+findex: tlon-tts-insert-ssml-phoneme
  + ~tlon-tts-insert-ssml-phoneme~ :: Inserts/edits =<phoneme>= tags. Prompts for alphabet type (=alphabet=) using ~tlon-md-phoneme-alphabet-reader~ and phonetic symbols (=ph=).
  #+findex: tlon-tts-insert-ssml-say-as
  + ~tlon-tts-insert-ssml-say-as~ :: Inserts/edits =<say-as>= tags. Prompts for interpretation type (=interpret-as=) using ~tlon-md-say-as-interpret-as-reader~.

*** Note Classification
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-note-commands
:END:
These commands manage the classification of footnotes as either standard footnotes or sidenotes using =<Footnote>= and =<Sidenote>= MDX tags.

#+findex: tlon-insert-footnote-marker
+ ~tlon-insert-footnote-marker~ :: Inserts a =<Footnote />= marker at the beginning of the footnote content at point. If =OVERWRITE= is non-nil (or called interactively), it replaces an existing =<Sidenote />= marker.
#+findex: tlon-insert-sidenote-marker
+ ~tlon-insert-sidenote-marker~ :: Inserts a =<Sidenote />= marker at the beginning of the footnote content at point. If =OVERWRITE= is non-nil (or called interactively), it replaces an existing =<Footnote />= marker.
#+findex: tlon-auto-classify-note-at-point
+ ~tlon-auto-classify-note-at-point~ :: Automatically classifies the footnote at point based on its content (using ~tlon-note-automatic-type~) and inserts the corresponding marker (=<Footnote />= or =<Sidenote />=), overwriting any existing marker.
#+findex: tlon-auto-classify-notes-in-file
+ ~tlon-auto-classify-notes-in-file~ :: Applies ~tlon-auto-classify-note-at-point~ to all footnotes in the current buffer (or specified =FILE=).
#+findex: tlon-auto-classify-notes-in-directory
+ ~tlon-auto-classify-notes-in-directory~ :: Applies ~tlon-auto-classify-notes-in-file~ to all Markdown files in the specified =DIR= (or current directory).
#+findex: tlon-classify-note-at-point
+ ~tlon-classify-note-at-point~ :: Manually classify the note at point. Prompts the user to choose between "footnote" and "sidenote" and inserts the corresponding marker, optionally overwriting an existing one.

*** Miscellaneous Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-misc-commands
:END:
#+findex: tlon-offset-timestamps
+ ~tlon-offset-timestamps~ :: Increases all MM:SS timestamps (in the format =[MM:SS]=) within the current buffer by a specified =OFFSET= (also in MM:SS format).
#+findex: tlon-insert-special-character
+ ~tlon-insert-special-character~ :: Prompts the user (with completion based on ~tlon-md-special-characters~) to select a special character and inserts it at point.
#+findex: tlon-md-beginning-of-buffer-dwim
+ ~tlon-md-beginning-of-buffer-dwim~ :: Moves point to the beginning of the main content area, skipping the YAML front matter. Called twice, moves to the beginning of the buffer.
#+findex: tlon-md-end-of-buffer-dwim
+ ~tlon-md-end-of-buffer-dwim~ :: Moves point to the end of the main content area, stopping before the "Local Variables" block. Called twice, moves to the end of the buffer.
#+findex: tlon-md-menu
+ ~tlon-md-menu~ :: Activates a =transient= menu interface providing quick access to many of the commands in this module, grouped by category (YAML, TTS, Note markers, Citations, Quotes, Images, Link, Sub/Superscripts, Misc, Caps, Table).

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-internals
:END:

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization.

*** Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-constants
:END:
+ *Local Variables Delimiters*: ~tlon-md-local-variables-line-start~, ~tlon-md-local-variables-line-end~.
+ *Tag Sections*: ~tlon-md-canonical-tag-sections~ (defines standard section names like "Further reading" in different languages).
+ *Markdown Regexps*:
  + ~markdown-regex-italic~ (modified default), ~tlon-md-regexp-link-formatter~, ~tlon-md-image~, ~tlon-md-image-sans-alt~, ~tlon-md-blockquote~, ~tlon-md-math-power~, ~tlon-md-math-big-number~, ~tlon-md-footnote-start~, ~tlon-md-heading-template~, ~tlon-md-heading~, ~tlon-md-subheading~.
+ *SSML Constants*: ~tlon-md-ssml-emphasis-levels~, ~tlon-tts-ssml-default-emphasis-level~, ~tlon-md-ssml-phoneme-alphabets~, ~tlon-tts-ssml-phoneme-default-alphabet~, ~tlon-md-ssml-interpret-as-values~.
+ *Tag Specifications*: ~tlon-tag-specs~ (central alist defining properties for all supported HTML, MDX, and SSML tags: type, attributes, self-closing status, documentation, attribute readers/prompts, capture groups).

*** Tag Section Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-tag-section-internals
:END:
#+findex: tlon-md-get-tag-section
+ ~tlon-md-get-tag-section~ :: Translates a canonical section name (e.g., "Further reading") to its equivalent in a =TARGET-LANGUAGE= based on ~tlon-md-canonical-tag-sections~.

*** Link and Sorting Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-link-sort-internals
:END:
#+findex: tlon-md-get-title-in-link-target
+ ~tlon-md-get-title-in-link-target~ :: Retrieves the =title= metadata for the file specified in a Markdown link's =TARGET=.
#+findex: tlon-md-sort-elements-in-paragraph
+ ~tlon-md-sort-elements-in-paragraph~ :: Helper function to sort elements within the current paragraph separated by a given =SEPARATOR=. Used by ~tlon-md-sort-related-entries~.

*** Tag Handling Logic
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-tag-internals
:END:
This group contains the core logic for inserting, editing, formatting, and parsing the various tags (HTML, MDX, SSML).

#+findex: tlon-md-insert-or-edit-tag
+ ~tlon-md-insert-or-edit-tag~ :: Decides whether to insert a new tag or edit an existing one at point based on ~tlon-looking-at-tag-p~.
#+findex: tlon-looking-at-tag-p
+ ~tlon-looking-at-tag-p~ :: Checks if point is currently looking at a specific =TAG= using its regex pattern.
#+findex: tlon-md-edit-tag
+ ~tlon-md-edit-tag~ :: Edits the tag at point. Can optionally take pre-defined attribute =VALUES= and =CONTENT=. Uses ~tlon-get-tag-at-point~, ~tlon-md-get-tag-pattern~, ~tlon-get-tag-attribute-values~, and ~tlon-md-return-tag~.
#+findex: tlon-md-set-tag-attribute-value
+ ~tlon-md-set-tag-attribute-value~ :: Creates a new list of attribute values with the specified =ATTRIBUTE= set to =VALUE= for a given =TAG=.
#+findex: tlon-md-insert-attribute-value
+ ~tlon-md-insert-attribute-value~ :: Inserts or replaces a specific =ATTRIBUTE= =VALUE= in the tag at point by calling ~tlon-md-edit-tag~.
#+findex: tlon-md-return-tag
+ ~tlon-md-return-tag~ :: Core function to generate or insert a tag string. Takes the =TAG= name, optional attribute =VALUES=, optional =CONTENT=, and a =FORMAT= specifier (`get-match-string`, `get-placeholders`, `get-values`, `insert-values`, `insert-prompt`). Calls ~tlon-md-format-tag~ and ~tlon-md-act-on-returned-tag~.
#+findex: tlon-md-act-on-returned-tag
+ ~tlon-md-act-on-returned-tag~ :: Performs the final action based on the =FORMAT= specifier (insert string or return it).
#+findex: tlon-md-format-tag
+ ~tlon-md-format-tag~ :: Formats the opening and closing tags (or just the opening tag for self-closing ones) based on the =TAG= name, =VALUES=, and =FORMAT=. Calls ~tlon-md-format-tag-with-attributes~. Returns a cons cell =(OPEN . CLOSE)= or a list =(OPEN)=.
#+findex: tlon-md-get-tag-filled
+ ~tlon-md-get-tag-filled~ :: Returns a complete tag string with specified =VALUES= and =CONTENT=. Uses ~tlon-md-format-tag~ with `get-values` format.
#+findex: tlon-md-get-tag-to-fill
+ ~tlon-md-get-tag-to-fill~ :: Returns a tag string template with placeholders for content and attributes. Uses ~tlon-md-format-tag~ with `get-placeholders` format.
#+findex: tlon-get-tag-at-point
+ ~tlon-get-tag-at-point~ :: Identifies the name of the tag at point by checking against all tags defined in ~tlon-tag-specs~.
#+findex: tlon-get-tag-groups
+ ~tlon-get-tag-groups~ :: Returns a list of the regex capture group numbers for a =TAG='s attributes (or attribute values if =VALUES= is non-nil), based on ~tlon-tag-specs~.
#+findex: tlon-get-tag-attribute-names
+ ~tlon-get-tag-attribute-names~ :: Returns a list of attribute names for a =TAG= from ~tlon-tag-specs~.
#+findex: tlon-get-tag-attribute-values
+ ~tlon-get-tag-attribute-values~ :: Extracts the current values of all attributes for the =TAG= at point using regex match data and group numbers from ~tlon-tag-specs~.
#+findex: tlon-md-lookup-tag-attribute-property
+ ~tlon-md-lookup-tag-attribute-property~ :: Retrieves a specific =PROPERTY= (e.g., =:group=, =:required=) for a named =ATTRIBUTE= of a =TAG= from ~tlon-tag-specs~.
#+findex: tlon-md-format-tag-with-attributes
+ ~tlon-md-format-tag-with-attributes~ :: Formats the attribute part of a tag string based on the =TAG=, optional =VALUES=, and =FORMAT=. Iterates through attributes, calls ~tlon-md-format-attribute-with-placeholder~, and handles user input via attribute readers or prompts if =FORMAT= is `insert-prompt`.
#+findex: tlon-md-format-attribute-with-placeholder
+ ~tlon-md-format-attribute-with-placeholder~ :: Creates a format string for a single attribute (e.g., = name="%s"= or = name="\(?:%s\)"= if =CAPTURE= is t).
#+findex: tlon-make-attribute-pattern-searchable
+ ~tlon-make-attribute-pattern-searchable~ :: Converts an attribute format string into a searchable regex pattern, adding capture groups and making it optional if =REQUIRED= is nil.
#+findex: tlon-md-format-tag-with-attributes-from-user
+ ~tlon-md-format-tag-with-attributes-from-user~ :: Helper to call the attribute reader function (=FUN=) and ensure a value is provided if =REQUIRED-P= is non-nil.
#+findex: tlon-md-get-tag-pattern
+ ~tlon-md-get-tag-pattern~ :: Generates the complete regex pattern for matching a given =TAG=, including its attributes. Uses ~tlon-md-format-tag~ with `get-match-string` format.

*** Attribute Readers
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-attribute-readers
:END:
These functions are used by ~tlon-md-format-tag-with-attributes~ when prompting the user for specific attribute values.

#+findex: tlon-md-cite-bibkey-reader
+ ~tlon-md-cite-bibkey-reader~ :: Reads =bibKey= using =citar-select-refs=.
#+findex: tlon-md-cite-locator-reader
+ ~tlon-md-cite-locator-reader~ :: Reads =locator= using completion against ~tlon-locators~.
#+findex: tlon-md-cite-length-reader
+ ~tlon-md-cite-length-reader~ :: Reads citation length ("short" or "long") and returns the appropriate attribute string (" short" or "").
#+findex: tlon-md-emphasis-level-reader
+ ~tlon-md-emphasis-level-reader~ :: Reads =level= for =<emphasis>= using completion against ~tlon-md-ssml-emphasis-levels~.
#+findex: tlon-md-lang-reader
+ ~tlon-md-lang-reader~ :: Reads =xml:lang= using ~tlon-select-language~.
#+findex: tlon-md-math-display-reader
+ ~tlon-md-math-display-reader~ :: Reads display type ("inline" or "display") for =<Math>= and returns the attribute string (" inline" or " display").
#+findex: tlon-md-phoneme-alphabet-reader
+ ~tlon-md-phoneme-alphabet-reader~ :: Reads =alphabet= for =<phoneme>= using completion against ~tlon-md-ssml-phoneme-alphabets~.
#+findex: tlon-md-replace-audio-voice-reader
+ ~tlon-md-replace-audio-voice-reader~ :: Reads =role= for =<ReplaceAudio>= or =<VoiceRole>= using completion against a predefined list of roles.
#+findex: tlon-md-say-as-interpret-as-reader
+ ~tlon-md-say-as-interpret-as-reader~ :: Reads =interpret-as= for =<say-as>= using completion against ~tlon-md-ssml-interpret-as-values~.
#+findex: tlon-md-simple-table-include-reader
+ ~tlon-md-simple-table-include-reader~ :: Reads =include= scope for =<SimpleTable>= ("nothing", "everything", "body") and returns the formatted attribute string.

*** Note Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-note-internals
:END:
#+findex: tlon-insert-note-marker
+ ~tlon-insert-note-marker~ :: Helper function to insert a =MARKER= (=<Footnote />= or =<Sidenote />=) at the beginning of the footnote content at point, optionally overwriting the other marker type.
#+findex: tlon-md-get-note
+ ~tlon-md-get-note~ :: Returns the text content of footnote =N= (or the one at point). Optionally returns only the content after the marker if =CONTENT-ONLY= is non-nil. Uses ~tlon-md-get-note-bounds~.
#+findex: tlon-md-get-note-bounds
+ ~tlon-md-get-note-bounds~ :: Returns a cons cell =(START . END)= representing the boundaries of footnote =N= (or the one at point). Uses ~markdown-footnote-find-text~, ~tlon-md-get-note-beginning~, and ~tlon-md-get-note-end~.
#+findex: tlon-md-get-note-beginning
+ ~tlon-md-get-note-beginning~ :: Finds the starting position of the footnote definition (e.g., =[^N]:=) or the start of the content after the marker if =CONTENT-ONLY= is non-nil. Uses =markdown-footnote-text-positions= or regex search.
#+findex: tlon-md-get-note-end
+ ~tlon-md-get-note-end~ :: Finds the end position of the footnote at point by searching for the start of the next footnote definition.
#+findex: tlon-get-note-type
+ ~tlon-get-note-type~ :: Determines if a =NOTE= string (or the note at point) contains a =<Footnote>= or =<Sidenote>= tag and returns the corresponding symbol (`footnote` or `sidenote`).
#+findex: tlon-note-automatic-type
+ ~tlon-note-automatic-type~ :: Implements the automatic classification logic: returns `footnote` if the =NOTE= contains a =<Cite>= tag and has 4 or fewer words (excluding citations), otherwise returns `sidenote`.

*** Miscellaneous Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-misc-internals
:END:
#+findex: tlon-ensure-markdown-mode
+ ~tlon-ensure-markdown-mode~ :: Checks if the current buffer is in a mode derived from =markdown-mode= and signals an error if not.
#+findex: tlon-md-beginning-of-content
+ ~tlon-md-beginning-of-content~ :: Returns the position after the YAML front matter (using ~tlon-md-end-of-metadata~) or the beginning of the buffer.
#+findex: tlon-md-end-of-content
+ ~tlon-md-end-of-content~ :: Returns the position before the "Local Variables" block (using ~tlon-md-beginning-of-local-variables~) or the end of the buffer.
#+findex: tlon-md-beginning-of-local-variables
+ ~tlon-md-beginning-of-local-variables~ :: Finds the start position of the "Local Variables" block using ~tlon-get-delimited-region-pos~.
#+findex: tlon-md-end-of-metadata
+ ~tlon-md-end-of-metadata~ :: Finds the end position of the YAML front matter using ~tlon-get-delimited-region-pos~.
#+findex: tlon-md-get-local-variables
+ ~tlon-md-get-local-variables~ :: Returns the text content of the "Local Variables" block.
#+findex: tlon-md-get-metadata
+ ~tlon-md-get-metadata~ :: Returns the text content of the YAML front matter.
#+findex: tlon-md-read-content
+ ~tlon-md-read-content~ :: Reads the content of a =FILE= (or current buffer) excluding the front matter and local variables sections.

* Meeting Management (=tlon-meet.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet
:END:

This module provides tools for managing meetings within the Tlön workflow. It focuses on creating and accessing dedicated Forge issues for meetings (both individual and group), linking discussions to these issues, and processing meeting recordings (diarization and AI summarization).

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-dependencies
:END:

+ =org=
+ =tlon-forg=
+ =tlon-ai=
+ =transient=
+ An external diarization script (configurable via ~tlon-meet-diarize-script~).

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-options
:END:

#+vindex: tlon-meet-diarize-script
+ ~tlon-meet-diarize-script~ :: Path to the Python script used for audio diarization (default: ="diarize.py"=).

#+vindex: tlon-meet-summary-prompt
+ ~tlon-meet-summary-prompt~ :: The prompt template used for generating AI summaries of meeting transcripts. It should contain =%s= which will be replaced by the transcript text.

#+vindex: tlon-meet-recordings-directory
+ ~tlon-meet-recordings-directory~ :: The directory where Google Meet recordings are typically stored (default: =~/My Drive/Meet Recordings/=).

#+vindex: tlon-zoom-recordings-directory
+ ~tlon-zoom-recordings-directory~ :: The directory where Zoom recordings are typically stored (default: =~/Documents/Zoom/=).

#+vindex: tlon-default-conference-app
+ ~tlon-default-conference-app~ :: The default conferencing application, used to determine the default directory when searching for recordings (choice between =meet= or =zoom=, default: =meet=).

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-commands
:END:

This section details the interactive commands provided by =tlon-meet.el=.

*** Create or Visit Meeting Issues
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-issue-commands
:END:

#+findex: tlon-create-or-visit-meeting-issue
+ ~tlon-create-or-visit-meeting-issue~ :: The main entry point for accessing meeting issues. Prompts the user to select another participant (using completion from ~tlon-user-lookup-all~) or "group". If a person is selected, it calls ~tlon-create-or-visit-individual-meeting-issue~. If "group" is selected, it calls ~tlon-create-or-visit-group-meeting-issue~.

#+findex: tlon-create-or-visit-individual-meeting-issue
+ ~tlon-create-or-visit-individual-meeting-issue~ :: Creates or visits the Forge issue for a 1-on-1 meeting with a specific =PERSON=. Prompts for the =PERSON= if not provided. Prompts for the =DATE= using =org-read-date=. Determines the correct meeting repository using ~tlon-get-meeting-repo~ and then calls ~tlon-create-or-visit-meeting-issue-date~.

#+findex: tlon-create-or-visit-group-meeting-issue
+ ~tlon-create-or-visit-group-meeting-issue~ :: Creates or visits the Forge issue for a group meeting. Prompts for the =DATE= using =org-read-date=. Uses the repository designated as =meetings-group= (via ~tlon-repo-lookup~) and calls ~tlon-create-or-visit-meeting-issue-date~.

#+findex: tlon-create-or-visit-meeting-issue-leo-pablo
+ ~tlon-create-or-visit-meeting-issue-leo-pablo~ :: Convenience command specifically for Leo-Pablo meetings. Determines the other participant based on =user-full-name= and calls ~tlon-create-or-visit-individual-meeting-issue~ with the appropriate person and date (prompting if not provided).

#+findex: tlon-create-or-visit-meeting-issue-fede-pablo
+ ~tlon-create-or-visit-meeting-issue-fede-pablo~ :: Convenience command specifically for Fede-Pablo meetings. Similar logic to the Leo-Pablo version.

#+findex: tlon-create-or-visit-meeting-issue-fede-leo
+ ~tlon-create-or-visit-meeting-issue-fede-leo~ :: Convenience command specifically for Fede-Leo meetings. Similar logic to the Leo-Pablo version.

*** Linking Issues for Discussion
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-discuss-commands
:END:

#+findex: tlon-discuss-issue-in-meeting
+ ~tlon-discuss-issue-in-meeting~ :: Creates cross-references between the current Forge issue buffer and the relevant meeting issue buffer.
  1. Ensures the command is run from a =forge-issue-mode= buffer.
  2. Gets the link to the current issue.
  3. Switches to the appropriate meeting issue buffer (determined by participants, prompting if necessary via ~tlon-create-or-visit-meeting-issue~).
  4. Gets the link to the meeting issue.
  5. Enters edit mode for the last post in the meeting issue and inserts a line like "- Discutir [link-to-original-issue]."
  6. Submits the post.
  7. Switches back to the original issue buffer.
  8. Creates a new post and inserts "A discutir en [link-to-meeting-issue]."
  9. Submits the post.

*** Recording Processing
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-recording-commands
:END:

#+findex: tlon-meet-diarize-and-summarize
+ ~tlon-meet-diarize-and-summarize~ :: Processes an audio recording file to generate a transcript and an AI summary.
  1. Prompts the user to select an =AUDIO-FILE=, defaulting to the directory specified by ~tlon-default-conference-app~ (~tlon-meet-recordings-directory~ or ~tlon-zoom-recordings-directory~).
  2. Extracts the date from the filename (if possible, using regex) or defaults to the current date.
  3. Creates and displays a "*Diarization Output*" buffer.
  4. Runs the diarization script specified by ~tlon-meet-diarize-script~ asynchronously on the =AUDIO-FILE=.
  5. When the script finishes, it checks for the existence of the transcript file (expected name: =[audio-filename-sans-extension]-transcript.txt=).
  6. If the transcript exists, it calls ~tlon-meet--generate-summary~.
  7. If the transcript doesn't exist, it reports an error in the output buffer.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-menu-cmd
:END:
#+findex: tlon-meet-menu
The command ~tlon-meet-menu~ activates a =transient= menu interface for meeting-related operations.

It provides the following groups and commands:
+ *Meetings*:
  + =l p= :: Leo-Pablo meeting (~tlon-create-or-visit-meeting-issue-leo-pablo~)
  + =f p= :: Fede-Pablo meeting (~tlon-create-or-visit-meeting-issue-fede-pablo~)
  + =f l= :: Fede-Leo meeting (~tlon-create-or-visit-meeting-issue-fede-leo~)
  + =g= :: Group meeting (~tlon-create-or-visit-group-meeting-issue~)
  + =i= :: Discuss issue in meeting (~tlon-discuss-issue-in-meeting~)
  + =d= :: Diarize and summarize (~tlon-meet-diarize-and-summarize~)

** Org Mode Integration
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-org-integration
:END:

#+findex: tlon-set-meeting-buffers
+ ~tlon-set-meeting-buffers~ :: This function is designed to be used as advice or a hook, typically triggered when opening a link from an Org agenda heading. It parses the heading text to identify the meeting type (e.g., "Leo<>Pablo", "Group meeting") and calls the corresponding ~tlon-create-or-visit-...~ command for the current date. It also calls =org-open-at-point= to follow the original link (e.g., Zoom/Meet URL).

#+findex: tlon-goto-meeting-when-clocking-in
+ ~tlon-goto-meeting-when-clocking-in~ :: A hook function intended for =org-clock-in-hook=. When clocking into a task in Org mode, it calls ~tlon-set-meeting-buffers~ to automatically open the relevant meeting issue alongside any meeting link.

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-internals
:END:

This section lists non-interactive functions used internally or potentially useful for advanced customization.

*** Issue Handling Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-issue-helpers
:END:

#+findex: tlon-create-or-visit-meeting-issue-date
+ ~tlon-create-or-visit-meeting-issue-date~ :: The core logic for finding or creating a meeting issue. Takes a =DATE= string and the target repository =DIR=. It waits for Forge updates (~tlon-wait-until-forge-updates~), looks up an existing issue matching the date (~tlon-issue-lookup~), and either visits it (~forge-visit-issue~) or creates a new one (~tlon-create-and-visit-issue~).

#+findex: tlon-wait-until-forge-updates
+ ~tlon-wait-until-forge-updates~ :: Pulls changes using =forge-pull= and waits (with a timeout) until the repository's =updated= timestamp changes, ensuring local data is synchronized before proceeding.

#+findex: tlon-create-and-visit-issue
+ ~tlon-create-and-visit-issue~ :: Creates a new Forge issue with the given =TITLE= in the specified =DIR= using ~tlon-create-issue~, pulls changes, waits for the issue to appear locally, and then visits it.

*** Diarize and Summarize Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-diarize-helpers
:END:

#+findex: tlon-meet--generate-summary
+ ~tlon-meet--generate-summary~ :: Reads the content of the =TRANSCRIPT-FILE=, formats the AI prompt using ~tlon-meet-summary-prompt~, and sends the request to the AI model via ~tlon-make-gptel-request~. The callback function is ~tlon-meet--save-summary~.

#+findex: tlon-meet--save-summary
+ ~tlon-meet--save-summary~ :: Saves the generated =SUMMARY= and the original =TRANSCRIPT= to the appropriate meeting repository for the given =DATE=.
  1. Determines the target repository by prompting the user via ~tlon-meet--determine-repo~.
  2. Defines the output filenames: =meeting-summaries.org= and =[date]-transcript.txt=.
  3. Appends the summary to =meeting-summaries.org= under a new heading for the date, creating the file and adding a title/options header if it doesn't exist.
  4. Saves the transcript to =[date]-transcript.txt=.
  5. Stages both files using =git add=.
  6. Commits the changes using =git commit= with a message indicating the meeting date.
  7. Updates the "*Diarization Output*" buffer with progress and final file paths.

#+findex: tlon-meet--determine-repo
+ ~tlon-meet--determine-repo~ :: Prompts the user to select the correct meeting repository directory from a list of all repositories with =subtype= 'meetings. Takes the =DATE= for context in the prompt. Returns the selected directory path.

*** Repository and User Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-meet-repo-user-helpers
:END:

#+findex: tlon-prompt-for-all-other-users
+ ~tlon-prompt-for-all-other-users~ :: Prompts the user to select a person using completion. The candidates are all users defined in ~tlon-users~ except for the current user (=user-full-name=). If the optional =GROUP= argument is non-nil, "group" is added as a candidate.

#+findex: tlon-get-meeting-repo
+ ~tlon-get-meeting-repo~ :: Finds the directory (:dir) of the meeting repository shared by =PARTICIPANT1= and =PARTICIPANT2=. It iterates through ~tlon-repos~, looking for a repo with =subtype= 'meetings that includes both participants in its =:participants= list.

* Repository Management (=tlon-repos.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-repos
:END:

This module provides functions for managing Tlön's Git repositories. It integrates with =vc=, =vc-extras=, =forge=, =forge-extras=, and =pass-extras= to offer commands for creating, cloning, deleting, tracking, searching, and interacting with repositories, both locally and remotely (primarily on GitHub under the =tlon-team= organization).

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-repos-dependencies
:END:

+ =forge-core=, =forge-search=, =forge-extras=
+ =shut-up=
+ =tlon-core=
+ =vc=, =vc-extras=
+ =pass-extras=
+ =transient=

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-repos-commands
:END:

This section details the interactive commands provided by =tlon-repos.el=.

*** Version Control (VC) Operations
:PROPERTIES:
:CUSTOM_ID: h:tlon-repos-vc-commands
:END:

#+findex: tlon-create-repo
+ ~tlon-create-repo~ :: Creates a new repository on GitHub under the =tlon-team= organization. Prompts for the repository =NAME=. Delegates to =vc-extras-create-repo=.

#+findex: tlon-clone-repo
+ ~tlon-clone-repo~ :: Clones an existing Tlön repository from the =tlon-team= organization into the directory specified by =paths-dir-tlon-repos=. Prompts for the repository =NAME= if not provided. Optionally skips adding the repo to the Forge database if =NO-FORGE= is non-nil. Delegates to =vc-extras-clone-repo=.

#+findex: tlon-clone-missing-repos
+ ~tlon-clone-missing-repos~ :: Clones all Tlön repositories defined in the configuration (=tlon-repo-lookup-all :dir=) that do not exist locally. Clones are performed asynchronously and do *not* automatically add the repos to the Forge database (use ~tlon-forge-track-missing-repos~ for that).

#+findex: tlon-delete-local-repo
+ ~tlon-delete-local-repo~ :: Deletes a local copy of a Tlön repository. Prompts the user to select a repository from the intersection of configured Tlön repos and locally existing ones (using ~tlon-get-local-repos~) if =NAME= is not provided. Delegates deletion to =vc-extras-delete-local-repo=.

*** Forge Integration
:PROPERTIES:
:CUSTOM_ID: h:tlon-repos-forge-commands
:END:

#+findex: tlon-forge-track-repo
+ ~tlon-forge-track-repo~ :: Adds a local Tlön repository to the Forge database, enabling Forge features like issue tracking and pull request management. Prompts for the repository =NAME= using ~tlon-get-local-repos~ if not provided. Uses =forge-extras-track-repository=.

#+findex: tlon-forge-track-missing-repos
+ ~tlon-forge-track-missing-repos~ :: Iterates through all configured Tlön repositories that exist locally and adds any untracked ones to the Forge database using =forge-extras-track-repo-all-topics=. Waits until each repo is successfully tracked before proceeding.

#+findex: tlon-pull-issues-in-all-repos
+ ~tlon-pull-issues-in-all-repos~ :: Pulls the latest issues and pull requests from the remote for *all* tracked Tlön repositories. Iterates through configured repos and calls ~tlon-pull-issues-in-repo~ for each.

#+findex: tlon-forge-search
+ ~tlon-forge-search~ :: Searches for a given =STRING= across all tracked Tlön repositories (or a specified subset =REPOS=) using Forge's search functionality. It temporarily opens Magit buffers, performs the search via =forge-search=, and then closes the Magit buffers if they weren't already open. Reports the number of repositories with matches and the time taken. Kills previous search result buffers before starting.

*** Git Crypt
:PROPERTIES:
:CUSTOM_ID: h:tlon-repos-git-crypt-commands
:END:

#+findex: tlon-git-crypt-unlock
+ ~tlon-git-crypt-unlock~ :: Unlocks specific Tlön repositories that use =git-crypt= (currently =uqbar/uqbar-api=, =uqbar/uqbar-front=, =uqbar=). Prompts the user to select the repository and uses =pass-extras-git-crypt-unlock~ with the corresponding password store entry (e.g., =tlon/core/git-crypt/uqbar/uqbar-api=).

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-repos-menu-cmd
:END:
#+findex: tlon-repos-menu
The command ~tlon-repos-menu~ activates a =transient= menu interface for repository management.

It provides the following groups and commands:
+ *Git*:
  + =l= :: Clone repo (~tlon-clone-repo~)
  + =L= :: Clone all missing repos (~tlon-clone-missing-repos~)
  + =s= :: Split local repo (~vc-extras-split-local-repo~)
  + =d= :: Delete local repo (~tlon-delete-local-repo~)
  + =c= :: Create remote repo (~tlon-create-repo~)
  + =u= :: Unlock uqbar git-crypt (~tlon-git-crypt-unlock~)
  + =?= :: Check authentication (~vc-extras-check-gh-authenticated~)
+ *Forge*:
  + =a= :: Track repo (~tlon-forge-track-repo~)
  + =A= :: Track all missing repos (~tlon-forge-track-missing-repos~)
  + =r= :: Untrack repo (~forge-remove-repository~)
  + =R= :: Untrack all repos (db reset) (~forge-reset-database~)
  + =t= :: List tracked repos (~forge-list-repositories~)
  + =p= :: Pull issues in repo (~tlon-pull-issues-in-repo~)
  + =P= :: Pull issues in all repos (~tlon-pull-issues-in-all-repos~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-repos-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

#+findex: tlon-get-local-repos
+ ~tlon-get-local-repos~ :: Prompts the user to select a Tlön repository name using completion. The candidates are the intersection of all configured Tlön repositories (~tlon-repo-lookup-all :name=) and the repositories found locally within the Tlön repos directory (~vc-extras-list-local-candidates "tlon-team"=). Signals an error if no local Tlön repos are found.

#+findex: tlon-pull-issues-in-repo
+ ~tlon-pull-issues-in-repo~ :: Pulls issues and pull requests for a single repository specified by =DIR= (or the current directory). Uses =forge-get-repository= to check if the repo is tracked and then calls =forge--pull= (suppressing its messages with =shut-up=).

#+findex: tlon-forge-menu
+ ~tlon-forge-menu~ :: A =transient= menu definition that *overrides* the default =forge-dispatch= command. It provides a customized menu structure for Forge commands within the Tlön context, including options to search across all Tlön repos (~tlon-forge-search~).

* Search Functionality (=tlon-search.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-search
:END:

This module provides miscellaneous search commands, integrating with =magit=, =consult=, =forge=, and external web services for various search needs within the Tlön workflow.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-search-dependencies
:END:

+ =tlon= (specifically =tlon-core=)
+ =transient=
+ =magit-log=
+ =consult=
+ =forge=
+ =goldendict-ng= (optional, for translation)

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-search-commands
:END:

This section details the interactive commands provided by =tlon-search.el=.

*** Search Commits
:PROPERTIES:
:CUSTOM_ID: h:tlon-search-commits
:END:
#+findex: tlon-search-commits
The command ~tlon-search-commits~ searches for a =SEARCH-STRING= within the commit messages of a Git repository.
1. Prompts the user for the =SEARCH-STRING=.
2. Optionally takes a =REPO= directory path. If nil, uses the current repository (=default-directory=).
3. Calls =magit-log-all= with the =--grep= argument and the =SEARCH-STRING= to display the matching commits in a Magit log buffer.

*** Search Commit Diffs
:PROPERTIES:
:CUSTOM_ID: h:tlon-search-commit-diffs
:END:
#+findex: tlon-search-commit-diffs
The command ~tlon-search-commit-diffs~ searches for a =SEARCH-STRING= within the content (diffs) of commits in a Git repository.
1. Prompts the user for the =SEARCH-STRING=.
2. Optionally takes a =REPO= directory path. If nil, uses the current repository (=default-directory=).
3. Calls =magit-log-all= with the =-S= argument (pickaxe search) and the =SEARCH-STRING= to display commits where the string was added or removed.

*** Search Files (Ripgrep)
:PROPERTIES:
:CUSTOM_ID: h:tlon-search-files
:END:
#+findex: tlon-search-files
The command ~tlon-search-files~ searches for a =SEARCH-STRING= within the files of a Tlön repository using =consult-ripgrep=.
1. Prompts the user for the =SEARCH-STRING=.
2. Optionally takes a =REPO= directory path. If nil, it determines the current repository using ~tlon-get-repo~ (including all sub-repositories).
3. Calls =consult-ripgrep= with the determined repository path and the search string, presenting results in the minibuffer with live preview.

*** Search for Translation
:PROPERTIES:
:CUSTOM_ID: h:tlon-search-for-translation
:END:
#+findex: tlon-search-for-translation
The command ~tlon-search-for-translation~ searches for a Spanish translation of an English =STRING= using various online resources and the local =goldendict-ng= application.
1. Prompts the user for the English =STRING= to translate.
2. Defines a list of URL templates for different translation websites (Spanish Stack Exchange, Bab.la, Wikipedia, Reverso Context, Linguee).
3. Iterates through the URLs, formats them with the URL-encoded =STRING=, and opens each in a new browser buffer using =browse-url=.
4. Calls =goldendict-ng-search-string= to search for the =STRING= in the locally installed GoldenDict-NG application (if configured).

*** Search Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-search-menu-cmd
:END:
#+findex: tlon-search-menu
The command ~tlon-search-menu~ activates a =transient= menu interface for accessing the various search commands.

It provides the following options under the "Search" group:
+ =c= :: Commits (~tlon-search-commits~)
+ =d= :: Commit diffs (~tlon-search-commit-diffs~)
+ =f= :: Files (~tlon-search-files~)
+ =i= :: Issues (current repo) (~forge-search~)
+ =I= :: Issues (all repos) (~tlon-forge-search~)
+ =t= :: Translation (~tlon-search-for-translation~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-search-internals
:END:

This module primarily consists of interactive commands and the transient menu definition. There are no significant internal-only functions or variables exposed for general customization beyond the declared dependencies.

* Split Window Alignment (=tlon-split.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-split
:END:

This module provides a minor mode, ~tlon-split-mode~, designed to facilitate working with two vertically split windows, typically containing an original document and its translation. Its primary function is to automatically align the content (specifically paragraphs) between the two windows as the user navigates the source window.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-dependencies
:END:

+ =tlon-counterpart=
+ =tlon-md=
+ =transient=

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-options
:END:

#+vindex: tlon-split-screen-line-threshold
+ ~tlon-split-screen-line-threshold~ :: An integer specifying the minimum number of screen lines the cursor must be below the start of the buffer content for automatic paragraph alignment (~tlon-split-autoalign-paragraphs~) to activate. This prevents alignment attempts when near the top of the buffer where paragraph counting might be less reliable or meaningful. Defaults to 60.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-commands
:END:

*** Toggle Split Mode
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-mode-cmd
:END:
#+findex: tlon-split-mode
The command ~tlon-split-mode~ toggles the minor mode on or off in the current buffer. When enabled, it activates the automatic paragraph alignment behavior via the `post-command-hook`.

*** Manual Alignment
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-manual-align-cmds
:END:

#+findex: tlon-split-align-screen-lines
+ ~tlon-split-align-screen-lines~ :: Manually aligns the other window so that its cursor is on the same screen line number as the cursor in the current window. Scrolls the other window up or down as needed.

#+findex: tlon-split-align-paragraphs
+ ~tlon-split-align-paragraphs~ :: Manually aligns the other window based on paragraph count. It calculates the paragraph number the cursor is currently in within the source window (using ~tlon-get-number-of-paragraphs~) and scrolls the other window so that the corresponding paragraph is visible and roughly aligned (using ~recenter~ and ~scroll-down~).

#+findex: tlon-split-align-sentences
+ ~tlon-split-align-sentences~ :: (TODO) Intended to align windows based on sentence count, assuming paragraphs are already aligned. Currently not implemented.

*** Reset Split Mode Hook
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-mode-reset-cmd
:END:
#+findex: tlon-split-mode-reset
The command ~tlon-split-mode-reset~ removes and re-adds the ~tlon-split-autoalign-paragraphs~ function to the `post-command-hook`. This can be useful if the hook's behavior seems incorrect or needs refreshing.

*** Sentence Highlighting (Experimental/Unused)
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-highlight-cmds
:END:
These commands relate to an experimental feature for highlighting corresponding sentences between windows, which is currently not actively used or fully developed.

#+findex: tlon-highlight-corresponding-sentence
+ ~tlon-highlight-corresponding-sentence~ :: Highlights the sentence in the source window that corresponds (based on sentence count and offset) to the sentence at point in the target window.
#+findex: tlon-sentence-highlight-offset-set
+ ~tlon-sentence-highlight-offset-set~ :: Calculates and sets the sentence offset (~tlon-sentence-highlight-offset~) between the source and target windows based on the current cursor positions.
#+findex: tlon-toggle-automatic-highlighting
+ ~tlon-toggle-automatic-highlighting~ :: Toggles the automatic highlighting behavior by adding/removing ~tlon-highlight-corresponding-sentence~ from the `post-command-hook`.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-menu-cmd
:END:
#+findex: tlon-split-menu
The command ~tlon-split-menu~ activates a =transient= menu interface for split mode operations.

It provides the following options under the "Split mode" group:
+ =s= :: Toggle split mode (~tlon-split-mode~)
+ =h= :: Highlight corresponding sentence (~tlon-highlight-corresponding-sentence~)
+ =o= :: Set sentence offset (~tlon-sentence-highlight-offset-set~)
+ =r= :: Reset split mode hook (~tlon-split-mode-reset~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-internals
:END:

This section lists non-interactive functions and variables used internally.

*** State Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-state-vars
:END:
#+vindex: tlon-split-last-screen-line-pos
+ ~tlon-split-last-screen-line-pos~ :: Stores the screen line number of the cursor's last known position. Used by ~tlon-split-screen-line-changed-p~ to detect movement.
#+vindex: tlon-sentence-highlight-offset
+ ~tlon-sentence-highlight-offset~ :: Stores the calculated sentence offset for the experimental highlighting feature.
#+vindex: tlon-enable-automatic-highlighting
+ ~tlon-enable-automatic-highlighting~ :: Boolean flag controlling the experimental automatic sentence highlighting.

*** Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-split-helpers
:END:
#+findex: tlon-split-screen-line-changed-p
+ ~tlon-split-screen-line-changed-p~ :: Returns non-nil if the cursor has moved to a different screen line since the last check. Updates ~tlon-split-last-screen-line-pos~.
#+findex: tlon-split-top-of-buffer-visible-p
+ ~tlon-split-top-of-buffer-visible-p~ :: (Unused) Checks if the beginning of the buffer content (after metadata) is visible in the current window.
#+findex: tlon-split-screen-line-offset
+ ~tlon-split-screen-line-offset~ :: Calculates the difference in screen line numbers between the cursor positions in the current and other windows.
#+findex: tlon-split-autoalign-paragraphs
+ ~tlon-split-autoalign-paragraphs~ :: The function added to `post-command-hook` when ~tlon-split-mode~ is active. It checks if the mode is enabled, if the screen line has changed, and if the cursor is below the ~tlon-split-screen-line-threshold~. If all conditions are met, it calls ~tlon-split-align-paragraphs~.
#+findex: tlon-remove-source-overlays
+ ~tlon-remove-source-overlays~ :: Removes sentence highlighting overlays (used by the experimental highlighting feature).
#+findex: tlon-current-window-line
+ ~tlon-current-window-line~ :: Calculates the current screen line number relative to the top of the window (used by the experimental highlighting feature).

* Text-to-Speech (=tlon-tts.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts
:END:

This module provides comprehensive text-to-speech (TTS) functionality, integrating with multiple cloud-based TTS engines (Microsoft Azure, Google Cloud, Amazon Polly, OpenAI, ElevenLabs). It handles text preparation (including SSML generation and listener cues), API requests, audio chunking and merging, and file management.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-dependencies
:END:

+ =tlon-core=
+ =tlon-md=
+ =eieio=
+ =transient=
+ =flycheck= (optional, for staging buffer)
+ =markdown-mode= (optional, for staging buffer)
+ =json-mode= (optional, for ElevenLabs voice listing)
+ External tools: =ffmpeg= (for audio conversion/joining), =curl= (for API requests), =aws= CLI (for Polly), =gcloud= CLI (for Google Cloud token), =jq= (for Google Cloud response parsing).

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-options
:END:

*** General TTS Settings
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-general-options
:END:

#+vindex: tlon-tts-global-engine
+ ~tlon-tts-global-engine~ :: Specifies the default TTS engine to use (e.g., "Microsoft Azure", "Google Cloud", "Amazon Polly", "OpenAI", "ElevenLabs").

#+vindex: tlon-tts-use-alternate-voice
+ ~tlon-tts-use-alternate-voice~ :: Boolean. If non-nil, uses a designated alternate voice (per engine configuration) for reading elements like notes, asides, blockquotes, etc., marked with listener cues.

#+vindex: tlon-tts-delete-file-chunks
+ ~tlon-tts-delete-file-chunks~ :: Boolean. If non-nil, automatically deletes the individual audio chunk files after they have been successfully merged into the final output file.

#+vindex: tlon-tts-paragraph-break-duration
+ ~tlon-tts-paragraph-break-duration~ :: String specifying the duration of the pause (SSML =<break time="...">=) inserted after each paragraph (e.g., "0.8s").

#+vindex: tlon-tts-listener-cue-break-duration
+ ~tlon-tts-listener-cue-break-duration~ :: String specifying the duration of the pause inserted before and after listener cues (e.g., "0.5s").

*** Engine-Specific Settings
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-engine-options
:END:
Each supported TTS engine has specific configuration options:

+ *Audio Settings*: Variables like ~tlon-microsoft-azure-audio-settings~, ~tlon-google-cloud-audio-settings~, ~tlon-amazon-polly-audio-settings~, ~tlon-openai-audio-settings~, ~tlon-elevenlabs-audio-settings~ define the default audio output format (e.g., MP3 bitrate, PCM sample rate) and the corresponding file extension for each engine. These are cons cells =("FORMAT_NAME" . "extension")=.
+ *Model Selection* (where applicable):
  #+vindex: tlon-openai-model
  + ~tlon-openai-model~ :: Specifies the OpenAI TTS model to use (e.g., "gpt-4o-mini-tts", "tts-1", "tts-1-hd").
  #+vindex: tlon-elevenlabs-model
  + ~tlon-elevenlabs-model~ :: Specifies the ElevenLabs model (e.g., "eleven_multilingual_v2", "eleven_turbo_v2_5"). Voice-specific parameters like =stability=, =similarity_boost=, =style=, =use_speaker_boost=, and =speed= defined in ~tlon-elevenlabs-voices~ are automatically included in the API request.
+ *Region* (Amazon Polly):
  #+vindex: tlon-amazon-polly-region
  + ~tlon-amazon-polly-region~ :: Specifies the AWS region for Amazon Polly requests (e.g., "us-east-1").

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-commands
:END:

This section details the interactive commands provided by =tlon-tts.el=.

*** Core Workflow
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-core-workflow-cmds
:END:

#+findex: tlon-tts-stage-content
+ ~tlon-tts-stage-content~ :: (Autoloaded) Prepares content for narration. Reads the content (from region, specified file, or current buffer), creates a dedicated staging buffer (e.g., =*TTS: filename*=), copies the content, sets up necessary file-local variables (source, language, engine, voice, etc.), and runs the preparation pipeline (~tlon-tts-prepare-staging-buffer~).

#+findex: tlon-tts-narrate-staged-content
+ ~tlon-tts-narrate-staged-content~ :: (Autoloaded) Narrates the content currently prepared in the staging buffer.
  1. Ensures the current buffer is a staging buffer.
  2. Breaks the prepared text into chunks based on engine character limits and voice changes (~tlon-tts-prepare-chunks~).
  3. Iterates through the chunks, calling the appropriate engine's request function (~tlon-tts-generate-audio~) for each chunk, saving the audio to sequentially numbered files (e.g., =filename-001.mp3=).
  4. Monitors the asynchronous audio generation processes.
  5. Once all chunks are generated:
     - Appends silence to chunks if needed (e.g., for ElevenLabs).
     - Joins the audio chunks into a single output file (~tlon-tts-join-chunks~).
     - Optionally deletes the chunk files (~tlon-tts-delete-chunks-of-file~).
     - Opens the directory containing the final audio file in Dired.
     - Opens the final audio file using the system's default player.

*** Audio File Management
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-audio-mgmt-cmds
:END:

#+findex: tlon-tts-join-chunks
+ ~tlon-tts-join-chunks~ :: Joins sequentially numbered audio chunk files (e.g., =file-001.mp3=, =file-002.mp3=) into a single output file (e.g., =file.mp3=) using =ffmpeg=. Operates on the file at point in Dired or prompts for a file.

#+findex: tlon-tts-delete-chunks-of-file
+ ~tlon-tts-delete-chunks-of-file~ :: Deletes all audio chunk files associated with a base filename. Also kills the corresponding staging buffer if it exists. Operates on the file at point in Dired or prompts for a file.

#+findex: tlon-tts-truncate-audio-file
+ ~tlon-tts-truncate-audio-file~ :: Removes a specified number of milliseconds from the *end* of an audio file using =mp3splt=. Prompts for the file and the duration to remove.

#+findex: tlon-tts-move-file-to-audio-server
+ ~tlon-tts-move-file-to-audio-server~ :: (Autoloaded) Moves a generated audio file to the designated audio repository directory (=uqbar-audio=) based on the file's language. Prompts for the file to move.

#+findex: tlon-tts-open-audio-directory
+ ~tlon-tts-open-audio-directory~ :: (Autoloaded) Opens the audio repository directory for the current language (or prompts for one) in Dired.

*** Reporting and Data Editing
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-report-edit-cmds
:END:

#+findex: tlon-tts-generate-report
+ ~tlon-tts-generate-report~ :: Generates a report buffer ("*TTS Report*") highlighting potential issues in the current staging buffer that might affect TTS quality, such as missing acronym definitions, potential chemical symbols, emphasis markers, en dashes, and numbers lacking separators.

#+findex: tlon-tts-edit-global-abbreviations
+ ~tlon-tts-edit-global-abbreviations~ :: (Autoloaded) Interactively edits the global abbreviations list stored in =tlon-file-global-abbreviations=.

#+findex: tlon-tts-edit-global-phonetic-replacements
+ ~tlon-tts-edit-global-phonetic-replacements~ :: (Autoloaded) Interactively edits the global phonetic replacements list stored in =tlon-file-global-phonetic-replacements=.

#+findex: tlon-tts-edit-global-phonetic-transcriptions
+ ~tlon-tts-edit-global-phonetic-transcriptions~ :: (Autoloaded) Interactively edits the global phonetic transcriptions list stored in =tlon-file-global-phonetic-transcriptions=.

#+findex: tlon-add-local-abbreviation
+ ~tlon-add-local-abbreviation~ :: (Autoloaded) Adds a file-local abbreviation to the =tlon-local-abbreviations= variable in the current buffer's local variables section.

#+findex: tlon-add-local-replacement
+ ~tlon-add-local-replacement~ :: (Autoloaded) Adds a file-local phonetic replacement to the =tlon-local-replacements= variable in the current buffer's local variables section.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-menu-cmd
:END:
#+findex: tlon-tts-menu
The command ~tlon-tts-menu~ (Autoloaded) activates a =transient= menu interface for TTS operations.

It provides the following groups and commands:
+ *Narration*:
  + =s= :: Stage content (~tlon-tts-stage-content~)
  + =n= :: Narrate staged content (~tlon-tts-narrate-staged-content~)
  + =e= :: Generate report (~tlon-tts-generate-report~)
  + *Narration options*: (These set the corresponding user options temporarily for the menu session)
    + =-a= :: Paragraph break duration (~tlon-tts-paragraph-break-duration-infix~)
    + =-d= :: Delete file chunks (~tlon-tts-menu-infix-toggle-delete-file-chunks~)
    + =-e= :: Engine (~tlon-tts-menu-infix-set-engine~)
    + =-s= :: Engine Settings (~tlon-tts-menu-infix-set-engine-settings~)
    + =-p= :: Prompt (Currently unused) (~tlon-tts-menu-infix-set-prompt~)
    + =-v= :: Use alternate voice (~tlon-tts-menu-infix-toggle-alternate-voice~)
    + =-D= :: Debug mode (~tlon-menu-infix-toggle-debug~)
+ *File processing*:
  + =j= :: Join file chunks (~tlon-tts-join-chunks~)
  + =d= :: Delete file chunks (~tlon-tts-delete-chunks-of-file~)
  + =x= :: Truncate audio file (~tlon-tts-truncate-audio-file~)
  + *Audio repo*:
    + =o= :: Open audio directory (~tlon-tts-open-audio-directory~)
    + =m= :: Move file to audio server (~tlon-tts-move-file-to-audio-server~)
+ *Edit*:
  + *global*:
    + =a= :: Abbreviation (~tlon-tts-edit-global-abbreviations~)
    + =r= :: Replacement (~tlon-tts-edit-global-phonetic-replacements~)
    + =t= :: Transcription (~tlon-tts-edit-global-phonetic-transcriptions~)
  + *local*:
    + =A= :: Abbreviation (~tlon-add-local-abbreviation~)
    + =R= :: Replacement (~tlon-add-local-replacement~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-internals
:END:

This section lists key non-interactive functions, variables, and constants used internally.

*** Configuration and Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-config-internals
:END:
#+vindex: tlon-tts-engines
+ ~tlon-tts-engines~ :: Central alist defining properties for each supported TTS engine (name, voice variable, audio settings variable, request function, character limit, internal property key).
#+vindex: tlon-microsoft-azure-voices
#+vindex: tlon-google-cloud-voices
#+vindex: tlon-amazon-polly-voices
#+vindex: tlon-openai-voices
#+vindex: tlon-elevenlabs-voices
+ Voice Lists (e.g., ~tlon-microsoft-azure-voices~) :: Alists defining preferred voices for each engine, including ID, language, gender, and optional role (main/alternate).
#+vindex: tlon-microsoft-azure-audio-choices
#+vindex: tlon-google-cloud-audio-choices
#+vindex: tlon-amazon-polly-audio-choices
#+vindex: tlon-openai-audio-choices
#+vindex: tlon-elevenlabs-audio-choices
+ Audio Choices (e.g., ~tlon-microsoft-azure-audio-choices~) :: Alists defining available audio formats and extensions for each engine, used for completion in the transient menu.
#+vindex: tlon-microsoft-azure-request
#+vindex: tlon-google-cloud-request
#+vindex: tlon-amazon-polly-request
#+vindex: tlon-openai-tts-request
#+vindex: tlon-elevenlabs-tts-url
+ Request Formats (e.g., ~tlon-microsoft-azure-request~) :: Format strings for the =curl= or =aws= commands used to make API requests for each engine.
#+vindex: tlon-microsoft-azure-char-limit
#+vindex: tlon-google-cloud-char-limit
#+vindex: tlon-amazon-polly-char-limit
#+vindex: tlon-openai-char-limit
#+vindex: tlon-elevenlabs-char-limit
+ Character Limits (e.g., ~tlon-microsoft-azure-char-limit~) :: Maximum number of characters allowed per request for each engine. Used for chunking.
#+vindex: tlon-microsoft-azure-key
#+vindex: tlon-google-cloud-key
#+vindex: tlon-openai-key
#+vindex: tlon-elevenlabs-key
+ API Keys (e.g., ~tlon-microsoft-azure-key~) :: Variables holding the API keys for each service, typically retrieved from =auth-source=.
#+vindex: tlon-tts-supported-tags
+ ~tlon-tts-supported-tags~ :: Alist defining SSML tags, their support status across engines, and how to handle them if unsupported (remove, chunkify).
#+vindex: tlon-tts-listener-cues
+ ~tlon-tts-listener-cues~ :: Alist defining the start and end cue text for different content types (aside, blockquote, etc.) in various languages.
#+vindex: tlon-tts-listener-cue-patterns
+ ~tlon-tts-listener-cue-patterns~ :: Alist mapping content types to the regex patterns used to identify them in the text.

*** Staging Buffer and Preparation
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-staging-internals
:END:
#+findex: tlon-tts-get-staging-buffer-name
+ ~tlon-tts-get-staging-buffer-name~ :: Generates the name for the staging buffer based on the source filename.
#+findex: tlon-tts-set-file-local-vars
+ ~tlon-tts-set-file-local-vars~ :: Sets file-local variables in the staging buffer (source, language, engine, audio format, voice, locale).
#+findex: tlon-tts-prepare-staging-buffer
+ ~tlon-tts-prepare-staging-buffer~ :: The main function that orchestrates the text preparation pipeline within the staging buffer. It calls numerous helper functions to:
  - Generate the initial report.
  - Ensure images/tables have alt text.
  - Process notes (footnotes/sidenotes).
  - Remove unwanted sections (e.g., "Further reading").
  - Remove horizontal lines.
  - Replace BibTeX keys with citations.
  - Add listener cues.
  - Process links.
  - Remove formatting (bold, italics, etc.).
  - Add paragraph breaks.
  - Process currencies and numerals.
  - Process abbreviations (local and global).
  - Process phonetic replacements and transcriptions.
  - Handle unsupported SSML tags.
  - Clean up extra newlines.
  - (Potentially) Escape XML special characters.

*** Chunking and Processing
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-chunking-internals
:END:
#+findex: tlon-tts-prepare-chunks
+ ~tlon-tts-prepare-chunks~ :: Calculates the engine's character limit and calls ~tlon-tts-read-into-chunks~.
#+findex: tlon-tts-read-into-chunks
+ ~tlon-tts-read-into-chunks~ :: Reads the staging buffer content (excluding local variables section) and splits it into chunks using ~tlon-tts-break-into-chunks~.
#+findex: tlon-tts-break-into-chunks
+ ~tlon-tts-break-into-chunks~ :: Core logic for splitting text into chunks based on paragraph boundaries, engine character limits, and voice changes specified by =tlon-tts-voice-chunks=.
#+findex: tlon-tts-process-chunks
+ ~tlon-tts-process-chunks~ :: Iterates through the generated ~tlon-tts-chunks~, calling ~tlon-tts-generate-audio~ for each.
#+findex: tlon-tts-generate-audio
+ ~tlon-tts-generate-audio~ :: Constructs the API request command using the appropriate engine-specific function (e.g., ~tlon-tts-microsoft-azure-make-request~) and starts the asynchronous process. Sets up the process sentinel to handle completion (~tlon-tts-process-chunk~).

*** Engine Request Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-engine-request-internals
:END:
#+findex: tlon-tts-microsoft-azure-make-request
#+findex: tlon-tts-google-cloud-make-request
#+findex: tlon-tts-amazon-polly-make-request
#+findex: tlon-tts-openai-make-request
#+findex: tlon-tts-elevenlabs-make-request
+ Engine Request Functions (e.g., ~tlon-tts-microsoft-azure-make-request~) :: Functions responsible for constructing the specific =curl=, =aws=, or other command-line request for each TTS engine, incorporating the text (wrapped in SSML), API key, selected voice, locale, audio format, and output destination.

*** SSML and Text Processing Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-ssml-text-internals
:END:
#+findex: tlon-tts-process-unsupported-ssml-tags
+ ~tlon-tts-process-unsupported-ssml-tags~ :: Determines which SSML tags are unsupported by the current engine and either removes them (~tlon-tts-remove-unsupported-ssml-tags~) or prepares for chunking based on them (~tlon-tts-chunkify-unsupported-ssml-tags~).
#+findex: tlon-tts-process-listener-cues
+ ~tlon-tts-process-listener-cues~ :: Iterates through defined content types (tables, quotes, asides, etc.) and calls ~tlon-tts-add-listener-cues~ for each.
#+findex: tlon-tts-add-listener-cues
+ ~tlon-tts-add-listener-cues~ :: Finds occurrences of a specific content type using regex patterns and replaces the matched text with the content wrapped in appropriate listener cues and potentially alternate voice tags (~tlon-tts-listener-cue-full-enclose~).
#+findex: tlon-tts-process-notes
+ ~tlon-tts-process-notes~ :: Handles footnotes, replacing references with content (for sidenotes) or removing them, adding listener cues.
#+findex: tlon-tts-process-formatting
+ ~tlon-tts-process-formatting~ :: Calls individual functions to remove various formatting tags (bold, italics, sup, sub, etc.).
#+findex: tlon-tts-process-numerals
+ ~tlon-tts-process-numerals~ :: Calls functions to handle number formatting (powers, Roman numerals, thousands separators).
#+findex: tlon-tts-process-abbreviations
+ ~tlon-tts-process-abbreviations~ :: Core logic for replacing abbreviations (local or global) with their expansions.
#+findex: tlon-tts-process-terms
+ ~tlon-tts-process-terms~ :: Generic function for replacing terms based on a list (used for phonetic replacements and transcriptions).

*** Audio File Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-audio-internals
:END:
#+findex: tlon-tts-get-chunk-name
+ ~tlon-tts-get-chunk-name~ :: Generates the numbered filename for an audio chunk.
#+findex: tlon-tts-get-list-of-chunks
+ ~tlon-tts-get-list-of-chunks~ :: Finds all chunk files matching a base filename pattern.
#+findex: tlon-tts-create-list-of-chunks
+ ~tlon-tts-create-list-of-chunks~ :: Creates a temporary text file listing chunk filenames, required by =ffmpeg= for concatenation.
#+findex: tlon-tts-append-silence-to-chunks
+ ~tlon-tts-append-silence-to-chunks~ :: Appends silence to each chunk file using =ffmpeg=, necessary for some engines like ElevenLabs.
#+findex: tlon-tts-append-silence-to-chunks-p
+ ~tlon-tts-append-silence-to-chunks-p~ :: Determines if silence should be appended based on the TTS engine used for the file.

** Testing
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-testing
:INDEX: test @tlon-tts-break-into-chunks-paragraph-mode @tlon-tts-break-into-chunks-char-limit @tlon-tts-break-into-chunks-with-voice-change @tlon-tts-break-into-chunks-voice-change-at-start @tlon-tts-break-into-chunks-ssml-break-boundary @tlon-tts-break-into-chunks-empty-input @tlon-tts-break-into-chunks-single-large-paragraph
:END:

The file =tlon-tts-tests.el= contains unit tests for the TTS functionality, particularly focusing on the text chunking logic in ~tlon-tts-break-into-chunks~. These tests use the Emacs Lisp Regression Testing framework (=ert=).

To run the tests:

+ *Interactively*:
  1. Ensure =tlon-tts-tests.el= is loaded (e.g., =M-x load-file RET tlon-tts-tests.el RET=). *Make sure all dependencies of =tlon.el= and =tlon-tts.el= are also loaded or available in the `load-path`.*
  2. Run the command =M-x ert-run-tests-interactively RET=.
  3. At the "Run tests matching selector:" prompt, type =t= and press =RET= to run all loaded tests. Alternatively, type =tlon-tts= and =RET= to run only the tests defined in this specific suite.

+ *From the Command Line (Batch Mode)*: This is suitable for automated checks (e.g., in scripts or CI pipelines). Use a single =--eval= argument containing a =progn= block to set up the `load-path`, load the necessary files (`tlon.el` first, then the test file), and finally run the tests. Use full paths for loaded files. Run the command as a single line to avoid shell interpretation issues. *Ensure all dependencies are correctly specified in the `load-path`.*
  #+begin_src shell
  emacs --batch --eval '(progn (add-to-list (quote load-path) "/path/to/tlon/directory/") (add-to-list (quote load-path) "/path/to/parent/repos/directory/") (load-file "/path/to/tlon/directory/tlon.el") (load-file "/path/to/tlon/directory/tlon-tts-tests.el") (ert-run-tests-batch-and-exit))'
  #+end_src
  Replace =/path/to/tlon/directory/= with the full path to the specific `tlon` package checkout (e.g., =/Users/user/.emacs.d/elpaca/repos/tlon/=). Replace =/path/to/parent/repos/directory/= with the full path to the directory containing *all* package checkouts (e.g., =/Users/user/.emacs.d/elpaca/repos/=). Emacs will exit with status 0 if all tests pass, and non-zero otherwise.

These tests help verify that chunking behaves correctly under various conditions, including different engine character limits, paragraph-based chunking (for ElevenLabs), the presence of voice change markers, and handling of SSML break tags. Adding more tests, especially for edge cases encountered during development, is encouraged to improve robustness.

* URL Handling (=tlon-url.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-url
:END:

This module provides tools for checking dead URLs within files and replacing URLs across multiple Tlön content repositories. It integrates with the external =linkchecker= command-line tool and the Wayback Machine (web.archive.org).

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-url-dependencies
:END:

+ =tlon-core=
+ =transient=
+ =ffap= (Find File At Point, built-in)
+ =linkchecker= (External command-line tool)

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-url-commands
:END:

*** Check URLs in File
:PROPERTIES:
:CUSTOM_ID: h:tlon-check-urls-in-file-cmd
:END:
#+findex: tlon-check-urls-in-file
The command ~tlon-check-urls-in-file~ (Autoloaded) checks all URLs found in a specified =FILE= (or the current buffer's file) for dead links using the external =linkchecker= tool asynchronously.
1. Identifies the input file.
2. Extracts all URLs from the file using ~tlon-get-urls-in-file~.
3. Creates a temporary output file for the =linkchecker= results.
4. Constructs the =linkchecker= command, specifying the output file and the list of URLs to check (with =--recursion-level=0= to prevent checking linked pages).
5. Starts the =linkchecker= process asynchronously using =start-process-shell-command=.
6. Sets a process sentinel:
   - When the process finishes (indicated by an event string starting with "finished"), it displays a completion message.
   - It then opens the temporary output file containing the =linkchecker= results.
   - It enables =goto-address-mode= in the results buffer, making URLs clickable.

*** Get Archived URL
:PROPERTIES:
:CUSTOM_ID: h:tlon-get-archived-cmd
:END:
#+findex: tlon-get-archived
The command ~tlon-get-archived~ (Autoloaded) constructs the Wayback Machine URL for the latest archived version of a given =URL= and copies it to the kill ring.
1. Prompts for the =URL=, defaulting to the URL at point (~thing-at-point 'url t~).
2. Formats the Wayback Machine URL as =https://web.archive.org/web/2/URL=.
3. Copies the formatted URL to the kill ring using =kill-new=.
4. Returns the archived URL string.

*** Replace URL Across Projects
:PROPERTIES:
:CUSTOM_ID: h:tlon-replace-url-across-projects-cmd
:END:
#+findex: tlon-replace-url-across-projects
The command ~tlon-replace-url-across-projects~ performs a search-and-replace operation for URLs across all files within Tlön content repositories (both originals and translations).
1. Prompts for the =URL-DEAD= (the URL to replace), defaulting to the URL at point.
2. Prompts for the =URL-LIVE= (the replacement URL).
3. Gathers a list of all repository directories marked as =type= 'content using ~tlon-repo-lookup-all~.
4. Recursively finds all files within these directories using =directory-files-recursively=.
5. Iterates through each regular file:
   - Reads the file content into a temporary buffer.
   - Checks if =URL-DEAD= exists in the buffer.
   - If found:
     - Increments a replacement counter.
     - Records the directory of the affected file.
     - Performs a global search-and-replace within the temporary buffer, replacing all occurrences of =URL-DEAD= with =URL-LIVE=.
     - Writes the modified content back to the original file.
6. After processing all files, displays a message indicating the total number of replacements made and the unique directories affected.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-url-menu-cmd
:END:
#+findex: tlon-url-menu
The command ~tlon-url-menu~ (Autoloaded) activates a =transient= menu interface for URL-related operations.

It provides the following options under the "" (main) group:
+ =a= :: Get archived URL (~tlon-get-archived~)
+ =c= :: Check URLs in file (~tlon-check-urls-in-file~)
+ =v= :: Replace URL across projects (~tlon-replace-url-across-projects~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-url-internals
:END:

This section lists non-interactive functions used internally or potentially useful for advanced customization.

#+findex: tlon-get-urls-in-file
+ ~tlon-get-urls-in-file~ :: Extracts a list of unique URLs from a given =FILE= (or the current buffer's file). It inserts the file content into a temporary buffer, searches for potential URLs using =browse-url-button-regexp=, validates them using =ffap-url-p=, and returns a list of unique URLs found.

#+findex: tlon-get-urls-in-dir
+ ~tlon-get-urls-in-dir~ :: Recursively finds all files with a specific =EXTENSION= (defaulting to "md") within a given =DIR= (defaulting to the current repository) and returns a combined list of all unique URLs found within those files by calling ~tlon-get-urls-in-file~ on each.

#+findex: tlon-save-list-of-urls
+ ~tlon-save-list-of-urls~ :: Takes a list of =URLS=, creates a temporary file, writes the URLs (one per line) prefixed with a =# LinkChecker URL list= header, and returns the path to the temporary file. (Note: This function seems unused within the current module).

* Word Counting and Statistics (=tlon-count.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-count
:END:

This module provides functionality for counting words in files, directories, and repositories, as well as counting occurrences of BibTeX keys. It includes features for generating reports, exporting data to Google Drive, and calculating historical word counts (requires external tools).

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-dependencies
:END:

+ =tlon-md=
+ =tlon-yaml=
+ =dired=, =dired-x= (for file selection and interaction)
+ =transient= (for the menu)
+ =gdrive= (external CLI tool, for Google Drive export)
+ =gdu= (external CLI tool, for historic word count)
+ =gnuplot= (external CLI tool, for historic word count)

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-config
:END:

#+vindex: tlon-count-gdrive-directory-ids
+ ~tlon-count-gdrive-directory-ids~ :: An alist mapping language codes (e.g., "en", "es") to their corresponding Google Drive folder IDs. Used by ~tlon-count-export-to-google-drive~ to determine the upload destination.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-commands
:END:

This section details the interactive commands provided by =tlon-count.el=.

*** Word Counting
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-word-counting-cmds
:END:

These commands calculate the number of "substantive" words (total words minus words in YAML front matter and local variables sections) in specified locations. They share common optional arguments:

+ =FORMAT= :: Determines the output format:
  + =list= :: Returns a list of cons cells =((COUNT . FILENAME) ...)=.
  + =count= :: Returns the total word count as a number.
  + =summary= (or any other value/nil) :: Displays a message like "%s words in %s files." and copies the total count to the kill ring.
+ =REGEXP= :: A regular expression (string) to filter filenames. If nil, defaults to matching Markdown files (=\\.md$=).

#+findex: tlon-count-words-in-repo
+ ~tlon-count-words-in-repo~ :: Counts words in files matching =REGEXP= within a specified Tlön repository. Prompts for the =REPO-NAME= (completing from translation repositories) if not provided. Uses ~tlon-repo-lookup~ to find the directory and then calls ~tlon-count-words-in-dir~ recursively.

#+findex: tlon-count-words-in-dir
+ ~tlon-count-words-in-dir~ :: Counts words in files matching =REGEXP= within a specified directory =DIR=. If =DIR= is nil, tries to use the directory at point; otherwise, prompts for one. If the optional =RECURSIVELY= argument is non-nil, it searches subdirectories as well. Calls ~tlon-count-words-in-files~ with the collected file list.

#+findex: tlon-count-words-in-files
+ ~tlon-count-words-in-files~ :: Counts words in a list of =FILES=. If =FILES= is nil, it attempts to use the files marked in the current Dired buffer (~dired-get-marked-files~). It iterates through each file, calculates the substantive word count using ~tlon-count-substantive-words~, and returns the result based on the =FORMAT= argument.

*** Org Table Generation and Export
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-table-export-cmds
:END:

#+findex: tlon-count-create-table-for-dir
+ ~tlon-count-create-table-for-dir~ :: Creates an Org mode table summarizing word counts for Markdown files in a directory =DIR=.
  1. Prompts for =DIR= (defaulting to the directory at point in Dired).
  2. Calls ~tlon-count-words-in-dir~ with =FORMAT= 'list to get the data.
  3. Determines the output Org file path using ~tlon-count-get-table-output-path~ (typically in the =stats/= subdirectory of the =babel= repo).
  4. Inserts the data into a new buffer as an Org table using ~tlon-count-insert-table-from-list~ and saves it to the destination file.
  5. Exports the Org table to a TSV file using ~tlon-count-export-org-table~.
  6. Exports the generated TSV file to the appropriate Google Drive folder using ~tlon-count-export-to-google-drive~.

#+findex: tlon-count-export-org-table
+ ~tlon-count-export-org-table~ :: Exports the first Org table found in =FILE= (or the current buffer's file) to a TSV file. The destination TSV file path is derived from the source Org file path using ~tlon-count-get-tsv-file~. Uses =org-table-export= with the "orgtbl-to-tsv" format.

#+findex: tlon-count-export-to-google-drive
+ ~tlon-count-export-to-google-drive~ :: Exports a local =FILE= (typically a TSV generated by ~tlon-count-export-org-table~) to Google Drive.
  1. Determines the target language from the filename using ~tlon-get-language-in-file~.
  2. Looks up the corresponding Google Drive folder ID in ~tlon-count-gdrive-directory-ids~.
  3. Uses the external =gdrive= command-line tool to upload the file to the specified parent folder ID.
  4. Opens the target Google Drive folder in the browser using =browse-url=.

*** BibTeX Key Counting
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-bibtex-cmds
:END:

#+findex: tlon-count-bibtex-keys-in-dir
+ ~tlon-count-bibtex-keys-in-dir~ :: Counts the occurrences of each BibTeX key (within =<Cite ...>= tags) across all non-hidden files in a directory =DIR=.
  1. Prompts for =DIR= if not provided.
  2. If the optional prefix argument =RECURSIVE= is non-nil, includes files in subdirectories.
  3. Gets the list of files using ~tlon-get-files-in-dir~.
  4. Defines the pattern for BibTeX keys using ~tlon-md-get-tag-pattern "Cite"~.
  5. Iterates through each file, extracting key counts into a hash table using ~tlon-extract-bibkeys-from-file~.
  6. Merges the counts from each file into a total count hash table using ~tlon-merge-key-counts~.
  7. Sorts the keys by count (descending) using ~tlon-sort-key-counts~.
  8. Displays the sorted counts in a dedicated buffer ("/BibTeX Key Counts/") using ~tlon-display-key-counts~.

*** Historic Word Count
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-historic-cmds
:END:

#+findex: tlon-historic-word-count
+ ~tlon-historic-word-count~ :: Computes and potentially visualizes the historic word count for a repository over a specified number of past days. *Requires the external tools =gdu= and =gnuplot= to be installed.*
  1. Prompts for =REPO-NAME= (completing from translation repositories).
  2. Prompts for the number of =DAYS= into the past.
  3. Prompts for the average characters per word (=CHARS-PER-WORD=, default 5.5).
  4. Executes an external shell script (=count/historic-word-count= located in the =babel= repo) which uses =gdu= to get directory sizes over time and potentially =gnuplot= to visualize the estimated word count (size / chars-per-word).
  5. Displays the script's output in the "*Directory Size*" buffer.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-menu-cmd
:END:
#+findex: tlon-count-menu
The command ~tlon-count-menu~ activates a =transient= menu interface for counting operations.

It provides the following groups and commands:
+ *Count words*:
  + =w f= :: in file(s) (~tlon-count-words-in-files~)
  + =w d= :: in dir (~tlon-count-words-in-dir~)
  + =w r= :: in repo (~tlon-count-words-in-repo~)
  + =w t= :: Create table for dir (~tlon-count-create-table-for-dir~)
+ *Count BibTeX keys*:
  + =k d= :: in dir (~tlon-count-bibtex-keys-in-dir~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-internals
:END:

This section lists non-interactive functions used internally or potentially useful for advanced customization.

*** Word Count Filtering
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-filtering-internals
:END:

#+findex: tlon-count-substantive-words
+ ~tlon-count-substantive-words~ :: Calculates the number of "substantive" words in the current buffer. It does this by taking the total word count (=count-words=) and subtracting the count of "extraneous" words calculated by ~tlon-count-extraneous-words~.

#+findex: tlon-count-extraneous-words
+ ~tlon-count-extraneous-words~ :: Calculates the number of "extraneous" words in the current buffer. These are defined as words within the YAML front matter section (retrieved via ~tlon-yaml-get-metadata~) and the local variables section (retrieved via ~tlon-md-get-local-variables~).

*** Org Table and Export Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-table-export-internals
:END:

#+findex: tlon-count-insert-table-from-list
+ ~tlon-count-insert-table-from-list~ :: Takes a =LIST= of cons cells =((COUNT . FILENAME) ...)= and inserts it as an Org mode table into a new buffer ("*Tlön stats*"). If =DESTINATION= file path is provided, saves the buffer to that file.

#+findex: tlon-count-get-table-output-path
+ ~tlon-count-get-table-output-path~ :: Constructs the full path for the output Org table file based on the input directory =DIR=. The target directory is =stats/= within the =babel= repository, and the filename is derived from the base name of =DIR= with an =.org= extension.

#+findex: tlon-count-get-tsv-file
+ ~tlon-count-get-tsv-file~ :: Constructs the full path for the output TSV file based on the input Org =FILE= path. The TSV file is placed in the same directory as the Org file, with the same base name but a =.tsv= extension.

*** BibTeX Key Counting Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-count-bibtex-internals
:END:

#+findex: tlon-get-files-in-dir
+ ~tlon-get-files-in-dir~ :: Returns a list of all non-hidden files in =DIR=. If =RECURSIVE= is non-nil, includes files in subdirectories. Excludes directories themselves from the list.

#+findex: tlon-extract-bibkeys-from-file
+ ~tlon-extract-bibkeys-from-file~ :: Reads a =FILE=, searches for occurrences matching the =BIBKEY-PATTERN= (regex for =<Cite ...>=), extracts the BibTeX key (match group 3), and returns a hash table mapping keys to their counts within that file.

#+findex: tlon-merge-key-counts
+ ~tlon-merge-key-counts~ :: Merges the key counts from =HASH-TABLE2= into =HASH-TABLE1=. If a key exists in both, their counts are added. Modifies and returns =HASH-TABLE1=.

#+findex: tlon-sort-key-counts
+ ~tlon-sort-key-counts~ :: Converts a =KEY-COUNTS= hash table into a list of cons cells =((KEY . COUNT) ...)= and sorts it in descending order based on the count (CDR).

#+findex: tlon-display-key-counts
+ ~tlon-display-key-counts~ :: Takes a =SORTED-KEYS= list (as returned by ~tlon-sort-key-counts~) and displays it in a formatted way (count followed by key) in the dedicated "/BibTeX Key Counts/" buffer.

* Indices
:PROPERTIES:
:CUSTOM_ID: h:indices
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:fn-index
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:vr-index
:END:

** Concept index
:PROPERTIES:
:INDEX: cp
:CUSTOM_ID: h:cp-index
:END:

** Test index
:PROPERTIES:
:INDEX: test
:CUSTOM_ID: h:test-index
:END:

* local variables                                                  :noexport:
(Note that the local variables below will still be exported to the ~info~ file, unfortunately. It looks like they are not considered part of this heading.)

# Local Variables:
# eval: (add-hook 'before-save-hook 'org-texinfo-export-to-info nil t)
# End:
