#+title: tlon
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+export_file_name: tlon.texi
#+texinfo_filename: tlon.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Tlon: (tlon)
#+texinfo_dir_desc: Companion Emacs package for Tlön
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

~tlon~ provides all the Emacs functionality used by the Tlön team.

* AI Functionality (=tlon-ai.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai
:END:

This module provides integration with AI models for various tasks such as summarization, translation, image description, and code manipulation within the Tlön ecosystem. It leverages the =gptel= package and its extensions.

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-options
:END:

This section describes the user-configurable options available in =tlon-ai.el=.

*** Batch Processing Function
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-batch-fun
:END:
#+vindex: tlon-ai-batch-fun
The user option ~tlon-ai-batch-fun~ specifies a function to be run when ~tlon~ operates in batch mode. This allows for automated processing of multiple items using AI functions. Set this to the symbol of the desired function.

#+begin_src emacs-lisp
(setq tlon-ai-batch-fun 'my-batch-processing-function)
#+end_src

*** Overwrite Image Alt Text
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-overwrite-alt-text
:END:
#+vindex: tlon-ai-overwrite-alt-text
The user option ~tlon-ai-overwrite-alt-text~ controls whether existing alt text in image tags should be overwritten when generating new descriptions.

- If non-nil, existing alt text will be replaced by the newly generated text when using ~tlon-ai-set-image-alt-text-in-buffer~.
- If nil (the default), existing alt text will be preserved.

Note: The command ~tlon-ai-set-image-alt-text~ (operating on a single image tag at point) *always* overwrites existing alt text, regardless of this option's setting.

*** Edit Prompt Before Sending
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-edit-prompt
:END:
#+vindex: tlon-ai-edit-prompt
When the user option ~tlon-ai-edit-prompt~ is non-nil, ~tlon~ will prompt the user to edit the generated prompt string before sending it to the AI model. This allows for on-the-fly customization of AI requests.

#+begin_src emacs-lisp
(setq tlon-ai-edit-prompt t)
#+end_src

*** Auto Proofread Reference Articles
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-auto-proofread
:END:
#+vindex: tlon-ai-auto-proofread
If the user option ~tlon-ai-auto-proofread~ is set to a non-nil value, ~tlon~ will automatically initiate the proofreading process using the configured AI model after a reference article has been generated via ~tlon-ai-create-reference-article~.

*** Custom Models
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-custom-models
:END:

~tlon~ allows specifying different AI models for specific tasks, overriding the default =gptel= model configuration. This enables using models optimized for particular capabilities (e.g., large context window for summarization, advanced reasoning for proofreading).

Each option takes a cons cell =(BACKEND . MODEL)=, where =BACKEND= is a string (e.g., ="ChatGPT"=, ="Gemini"=) and =MODEL= is a symbol representing the specific model (e.g., =gpt-4.5-preview=, =gemini-2.0-flash-thinking-exp-01-21=). Refer to ~gptel-extras-ai-models~ for available options. If an option is nil, the default =gptel= model is used for that task.

#+vindex: tlon-ai-summarization-model
+ ~tlon-ai-summarization-model~ :: Model for summarizing text (e.g., generating abstracts, synopses). It's recommended to use a model with a large context window.
  #+begin_src emacs-lisp
  (setq tlon-ai-summarization-model '("Gemini" . gemini-2.0-flash-thinking-exp-01-21))
  #+end_src

#+vindex: tlon-ai-markdown-fix-model
+ ~tlon-ai-markdown-fix-model~ :: Model for fixing Markdown formatting issues, especially when comparing original and translated documents.
  #+begin_src emacs-lisp
  (setq tlon-ai-markdown-fix-model '("Gemini" . gemini-2.0-flash-thinking-exp-01-21))
  #+end_src

#+vindex: tlon-ai-create-reference-article-model
+ ~tlon-ai-create-reference-article-model~ :: Model used by ~tlon-ai-create-reference-article~ to draft encyclopedia-style articles based on provided source materials.
  #+begin_src emacs-lisp
  (setq tlon-ai-create-reference-article-model nil) ; Use default gptel model
  #+end_src

#+vindex: tlon-ai-proofread-reference-article-model
+ ~tlon-ai-proofread-reference-article-model~ :: Model used by ~tlon-ai-proofread-reference-article~ for correcting factual errors, calculation mistakes, etc., in generated reference articles. Often benefits from a more powerful model.
  #+begin_src emacs-lisp
  (setq tlon-ai-proofread-reference-article-model '("ChatGPT" . gpt-4.5-preview))
  #+end_src

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-commands
:END:

This section details the interactive commands provided by =tlon-ai.el=.

*** Translation Variants
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-translate
:END:
#+findex: tlon-ai-translate
The command ~tlon-ai-translate~ prompts for text and returns ten alternative Spanish translations using the configured AI model. The user can then select the preferred translation from the minibuffer, which is copied to the kill ring.

*** Writing Reference Articles
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-create-reference-article
:END:
#+findex: tlon-ai-create-reference-article
The command ~tlon-ai-create-reference-article~ generates a new encyclopedia-style article based on the current buffer's content and linked sources.

It extracts the title from the buffer's front matter (=title= key). It determines the language of the article from the current file. It constructs a prompt using ~tlon-ai-write-reference-article-prompt~, instructing the AI to synthesize information primarily from attached source files (added to the =gptel= context via ~tlon-add-add-sources-to-context~) and an optional glossary (added via ~tlon-add-glossary-to-context~).

The AI response (the generated article) is placed in a new buffer. If the user confirms, it can then be proofread using ~tlon-ai-proofread-reference-article~. The model used can be customized via ~tlon-ai-create-reference-article-model~.

*** Proofreading Reference Articles
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-proofread-reference-article
:END:
#+findex: tlon-ai-proofread-reference-article
The command ~tlon-ai-proofread-reference-article~ sends the content of the current buffer (assumed to be a reference article) to the AI for proofreading.

It uses the prompt defined in ~tlon-ai-proofread-reference-article-prompt~, instructing the AI to act as an expert proofreader, focusing on factual errors, calculation mistakes, and other important issues within the context of an encyclopedia of effective altruism. The language is determined from the current file.

The AI's response, containing the proofread version or comments, is displayed in a new buffer named "*Comments on [Article Title]*". The model used can be customized via ~tlon-ai-proofread-reference-article-model~.

*** Rewriting Text
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-rewrite
:END:
#+findex: tlon-ai-rewrite
The command ~tlon-ai-rewrite~ prompts for text (defaulting to the active region) and requests ten alternative Spanish rewrites from the AI using the prompt ~tlon-ai-rewrite-prompt~.

The user selects one of the suggested variants from the minibuffer. If a region was active, it is deleted and replaced with the selected variant. The selected variant is also copied to the kill ring.

*** Image Description
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-describe-image
:END:
#+findex: tlon-ai-describe-image
The command ~tlon-ai-describe-image~ generates a concise description (alt text) for an image file.

It prompts the user to select an image file if one isn't automatically detected (e.g., from a =Figure= tag at point or the file at point in Dired). It determines the desired language for the description based on the context (e.g., the language of the current buffer).

It uses the prompt from ~tlon-ai-describe-image-prompt~ for the determined language, instructing the AI to provide a one- or two-sentence description under 50 words. The image file is added to the =gptel= context for the request.

By default, the resulting description is displayed as a message. An optional CALLBACK argument can be provided programmatically to handle the response differently.

*** Setting Image Alt Text
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-set-image-alt-text
:END:
#+findex: tlon-ai-set-image-alt-text
The command ~tlon-ai-set-image-alt-text~ automatically generates and inserts an alt text description for an image tag (=Figure= or =OurWorldInData=) at point.

It extracts the image source (=src=) attribute from the tag, locates the corresponding image file (handling local paths and Our World In Data URLs), and then calls ~tlon-ai-describe-image~ to get the description. The generated alt text is then inserted into the =alt= attribute of the image tag at point. This command *always* overwrites any existing alt text.

#+findex: tlon-ai-set-image-alt-text-in-buffer
The command ~tlon-ai-set-image-alt-text-in-buffer~ iterates through all =Figure= and =OurWorldInData= tags in the current buffer and calls ~tlon-ai-set-image-alt-text~ for each one.

Whether it overwrites existing alt text depends on the value of the user option ~tlon-ai-overwrite-alt-text~.

*** Fixing Markdown Formatting
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-fix-markdown-format
:END:
#+findex: tlon-ai-fix-markdown-format
The command ~tlon-ai-fix-markdown-format~ attempts to restore lost or altered formatting in a translated Markdown file by comparing it paragraph by paragraph with its original counterpart.

It identifies the original file using ~tlon-get-counterpart~. It retrieves corresponding paragraphs from both files using ~tlon-get-corresponding-paragraphs~. For each pair of paragraphs, it sends a request to the AI using the prompt ~tlon-ai-fix-markdown-format-prompt~, asking it to apply the formatting from the original paragraph to the translated text.

The command processes paragraphs concurrently (up to a limit defined internally) and includes a retry mechanism with exponential backoff for failed requests. If a paragraph fails permanently after 3 retries, the process aborts.

Upon successful completion of all paragraphs, the reconstructed content is saved to a new file named =[original-filename]--fixed.md=. The user is then prompted to optionally start an =ediff= session between the original translation and the newly fixed file. The model used can be customized via ~tlon-ai-markdown-fix-model~.

*** Generating Abstracts and Synopses
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-get-abstracts
:END:

These commands generate summaries of documents using AI.

#+findex: tlon-get-abstract-with-or-without-ai
+ ~tlon-get-abstract-with-or-without-ai~ :: This command first attempts to extract an abstract using non-AI methods via ~tlon-fetch-and-set-abstract~. If that fails (e.g., no abstract found in metadata or the file), it falls back to generating one using AI via ~tlon-get-abstract-with-ai~.

#+findex: tlon-get-abstract-with-ai
+ ~tlon-get-abstract-with-ai~ :: Generates a standard abstract (typically 100-250 words) for the specified content (file, region, PDF/HTML associated with BibTeX entry, etc.). It first asks the AI to check if an abstract already exists in the text using the prompt ~tlon-ai-get-abstract-prompts~. If found, the AI returns it; otherwise, the AI generates a new abstract following the guidelines in ~tlon-ai-how-to-write-abstract-prompt~. The language is either detected automatically or selected by the user. The result is typically inserted into the =abstract= field of the corresponding BibTeX entry or copied to the kill ring. The model used can be customized via ~tlon-ai-summarization-model~.

#+findex: tlon-shorten-abstract-with-ai
+ ~tlon-shorten-abstract-with-ai~ :: Takes an existing abstract (typically from the =abstract= field of the BibTeX entry at point) and asks the AI to shorten it to meet the length requirements specified in ~tlon-tex-max-abstract-length~, using the prompt ~tlon-ai-shorten-abstract-prompts~. The shortened abstract replaces the original one in the BibTeX entry.

#+findex: tlon-get-synopsis-with-ai
+ ~tlon-get-synopsis-with-ai~ :: Generates a more detailed summary (synopsis, typically 1000-2000 words) of the specified content. It uses the prompt ~tlon-ai-get-synopsis-prompts~. The resulting synopsis is copied to the kill ring. The model used can be customized via ~tlon-ai-summarization-model~.

#+findex: tlon-get-abstract-with-ai-from-pdf
+ ~tlon-get-abstract-with-ai-from-pdf~ :: A convenience command that specifically targets the PDF file associated with the BibTeX entry at point and calls ~tlon-get-abstract-with-ai~ on it.

#+findex: tlon-get-abstract-with-ai-from-html
+ ~tlon-get-abstract-with-ai-from-html~ :: A convenience command that specifically targets the HTML file associated with the BibTeX entry at point and calls ~tlon-get-abstract-with-ai~ on it.

*** Setting Language in BibTeX Entries
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-set-language-bibtex
:END:
#+findex: tlon-ai-set-language-bibtex
The command ~tlon-ai-set-language-bibtex~ automatically detects and sets the =langid= field for the BibTeX entry at point.

It sends the BibTeX entry text to the AI using the prompt ~tlon-ai-detect-language-bibtex-prompt~.

- If the entry already has a =langid= field:
  - If the detected language matches the existing =langid=, no change is made (unless the existing =langid= needs validation/standardization).
  - If they conflict, the user is prompted to choose which language to use.
- If the entry has no =langid= field, the detected language is added.

The language code is validated and standardized using ~tlon~'s language functions before being set.

*** Phonetic Transcription
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-phonetically-transcribe
:END:
#+findex: tlon-ai-phonetically-transcribe
The command ~tlon-ai-phonetically-transcribe~ generates the International Phonetic Alphabet (IPA) transcription for a given text string.

It prompts for the text to transcribe (defaulting to the active region or word at point) and determines the language (from the file or user selection). It uses the prompt ~tlon-ai-transcribe-phonetically-prompt~ for the specified language. The resulting IPA transcription is copied to the kill ring.

#+findex: tlon-phonetically-transcribe-in-buffer
The command ~tlon-phonetically-transcribe-in-buffer~ iterates through each line in the current buffer, calls ~tlon-ai-phonetically-transcribe~ on the line's content, and inserts the resulting IPA transcription after the original line, separated by a comma.

*** Audio Transcription
:PROPERTIES:
:CUSTOM_ID: h:tlon-transcribe-audio
:END:
#+findex: tlon-transcribe-audio
The command ~tlon-transcribe-audio~ transcribes an audio file using OpenAI's Whisper API.

It prompts the user to select an audio file. It retrieves the OpenAI API key (prompting to set it if necessary via ~tlon-tts-openai-get-or-set-key~). It then makes an asynchronous request to the OpenAI API endpoint using =curl=, uploading the audio file.

A CALLBACK function must be provided programmatically to handle the result. The callback receives the transcript text on success, or nil on failure.

*** Mathematical Expression Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-math
:END:

#+findex: tlon-ai-convert-math
+ ~tlon-ai-convert-math~ :: Converts a natural language mathematical expression into LaTeX format. It prompts for the expression (defaulting to the region or =Math= tag content) and language. It uses the prompt ~tlon-ai-convert-math-prompt~. If point is on a =Math= tag, the LaTeX result is inserted as the second value in the =alt= attribute (preserving the original expression as the first value). Otherwise, the result is copied to the kill ring and messaged.

#+findex: tlon-ai-translate-math
+ ~tlon-ai-translate-math~ :: Converts a LaTeX mathematical expression into a natural language description (alt text). It prompts for the expression (defaulting to the region or =Math= tag content) and language. It uses the prompt ~tlon-ai-translate-math-prompt~. If point is on a =Math= tag, the natural language result is inserted as the first value in the =alt= attribute (preserving the LaTeX expression as the second value). Otherwise, the result is copied to the kill ring and messaged.

*** Fixing Encoding Errors
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-fix-encoding
:END:
#+findex: tlon-ai-fix-encoding-in-string
The command ~tlon-ai-fix-encoding-in-string~ attempts to correct encoding errors within a given string.

It typically operates on a JSON value identified at point using helper functions. It determines the language associated with the JSON key. It sends the string to the AI using the prompt ~tlon-ai-fix-encoding-prompt~, asking it to correct encoding issues like =cuýn= or =pronosticaci¾3\263n=. The corrected string is then copied to the kill ring.

#+findex: tlon-ai-fix-encoding-in-buffer
The command ~tlon-ai-fix-encoding-in-buffer~ is a specialized command designed to process a large JSON buffer containing potentially many encoding errors, chunk by chunk. It saves the corrected chunks to separate files. (This seems highly specific to a particular data processing task).

#+findex: tlon-ai-join-files
The command ~tlon-ai-join-files~ concatenates the content of chunk files (e.g., =chunk0.json=, =chunk1.json=, ...) generated by ~tlon-ai-fix-encoding-in-buffer~ back into a single output file (e.g., =fixed.json=).

*** Propagating Changes Across Repositories
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-propagate-changes
:END:
#+findex: tlon-ai-propagate-changes
The command ~tlon-ai-propagate-changes~ attempts to automatically apply changes made in the latest commit of the current file to its corresponding files in other ~tlon~ content repositories (originals and translations).

1. It identifies the current file, its repository, language, and the latest commit affecting it using ~tlon~ and Git functions.
2. It retrieves the diff for the file from that commit using =git show=.
3. It identifies all other ~tlon~ content repositories (excluding the source repo).
4. For each target repository:
   - It determines the corresponding target file using metadata lookups (~tlon-ai--find-target-file~), handling different scenarios (original to translation, translation to original, translation to translation).
   - If a target file is found and exists, it constructs a prompt asking the AI to apply the *semantic equivalent* of the source diff to the target file's content (provided in the prompt).
   - It sends the request to the AI.
   - The callback function (~tlon-ai--propagate-changes-callback~) receives the AI's response (the modified target content).
   - If the AI response is valid, the callback overwrites the target file with the new content.
   - It then stages and commits the changes in the target repository using Git, with a commit message indicating the source commit and repository.

This command relies heavily on accurate metadata (=original_path=) and consistent file structures across repositories.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-menu
:END:
#+findex: tlon-ai-menu
The command ~tlon-ai-menu~ displays a =transient= menu interface, providing quick access to most of the AI-related commands and options described above. It allows toggling options like =tlon-ai-overwrite-alt-text= and =tlon-ai-edit-prompt=, selecting models for specific tasks, setting batch functions, and invoking the various AI operations (summarization, image description, translation, etc.).

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-ai-internals
:END:

This section lists some non-interactive functions and variables used internally by =tlon-ai.el=. While not intended for direct user interaction, understanding them can be helpful for customization or debugging.

+ ~tlon-make-gptel-request~: Core function for sending requests to the AI model via =gptel=. Handles prompt formatting, model selection, context checks, and callbacks.
+ ~tlon-ai-maybe-edit-prompt~: Conditionally allows editing the prompt based on ~tlon-ai-edit-prompt~.
+ ~tlon-warn-if-gptel-context~: Checks if the =gptel= context is empty and warns the user if not.
+ Callback functions (e.g., ~tlon-ai-callback-return~, ~tlon-ai-callback-copy~, ~tlon-ai-callback-save~, ~tlon-ai-callback-insert~, ~tlon-ai-callback-fail~): Handle responses from AI requests in various ways (returning value, copying, saving, inserting, error handling).
+ ~tlon-ai-batch-continue~: Helper for batch processing, moves to the next item and calls the batch function.
+ ~tlon-get-string-dwim~: Retrieves text content from various sources (file, region, buffer, PDF/HTML associated with BibTeX entry) for AI processing.
+ ~tlon-get-file-as-string~: Reads the content of a file (handling PDF conversion) into a string.
+ Prompt constants (e.g., ~tlon-ai-detect-language-prompt~, ~tlon-ai-translate-prompt~, ~tlon-ai-write-reference-article-prompt~, etc.): Store the various prompt templates used for different AI tasks, often including language-specific versions.
+ Change propagation helpers (~tlon-ai--get-commit-diff~, ~tlon-ai--find-target-file~, ~tlon-ai--commit-in-repo~, ~tlon-ai--propagate-changes-callback~): Internal functions used by ~tlon-ai-propagate-changes~.
+ Transient infix definitions (e.g., ~tlon-ai-infix-toggle-overwrite-alt-text~, ~tlon-ai-batch-fun-infix~, model selection infixes): Define the interactive elements within the ~tlon-ai-menu~.

* Clock Functionality (=tlon-clock.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock
:END:

This module provides functions for interacting with Org mode's clocking mechanism (=org-clock=), specifically tailored for the Tlön workflow. It allows retrieving information about the currently clocked task, such as associated files or issues, and performing actions based on that information.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-commands
:END:

This section details the interactive commands provided by =tlon-clock.el=.

*** Open Clocked Task's File
:PROPERTIES:
:CUSTOM_ID: h:tlon-open-clock-file
:END:
#+findex: tlon-open-clock-file
The command ~tlon-open-clock-file~ identifies the BibTeX key associated with the currently running Org clock task (using ~tlon-get-clock-key~) and opens the corresponding file (located via ~tlon-get-file-from-key~). This provides quick access to the primary document related to the clocked task.

*** Open Clocked Task's Issue
:PROPERTIES:
:CUSTOM_ID: h:tlon-open-clock-issue
:END:
#+findex: tlon-open-clock-issue
The command ~tlon-open-clock-issue~ finds an =orgit-forge= link within the currently clocked heading, extracts the issue identifier (GID), and opens the corresponding issue using =forge-visit-issue=. This requires the clocked heading to contain a link like =[[orgit-topic:ISSUE_GID][...]]= and for the =forge= package to be configured.

*** Copy Region or Buffer
:PROPERTIES:
:CUSTOM_ID: h:tlon-copy-dwim
:END:
#+findex: tlon-copy-dwim
The command ~tlon-copy-dwim~ ("Do What I Mean") copies text to the kill ring. If a region is active, it copies the region's content. If no region is active, it copies the entire content of the current buffer. This is a general utility command included in this module.

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** Getting Clock Information
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-getters
:END:

#+findex: tlon-get-clock
+ ~tlon-get-clock~ :: Returns the raw string of the currently clocked heading (=org-clock-current-task=). Errors if no clock is running.

#+findex: tlon-get-clock-key
+ ~tlon-get-clock-key~ :: Extracts the BibTeX key from the clocked heading string. It assumes the key is enclosed in backticks (e.g., ``key``) and uses the regular expression ~tlon-key-regexp~ to find it.

#+findex: tlon-get-clock-file
+ ~tlon-get-clock-file~ :: Retrieves the full file path associated with the BibTeX key found in the clocked heading. Uses ~tlon-get-clock-key~ and ~tlon-get-file-from-key~.

#+findex: tlon-get-clock-issue
+ ~tlon-get-clock-issue~ :: Finds the first =orgit-forge= link in the clocked heading (=org-clock-heading=) and returns the issue identifier (GID) part of the link (e.g., the part after =orgit-topic:=).

#+findex: tlon-get-clock-action
+ ~tlon-get-clock-action~ :: Extracts the assumed "action" from the clocked heading. It expects the action to be the second word in the heading string (after the first word, often a verb like "Translate"). It validates this word against the list of known actions defined in the Tlön labels configuration (~tlon-label-lookup-all :action~).

#+findex: tlon-get-clock-label
+ ~tlon-get-clock-label~ :: Retrieves the label associated with the action identified by ~tlon-get-clock-action~, using the Tlön labels configuration (~tlon-label-lookup~).

#+findex: tlon-get-clock-next-label
+ ~tlon-get-clock-next-label~ :: Determines the "next" label in the sequence defined by ~tlon-job-labels~, based on the label of the currently clocked action (~tlon-get-clock-label~). This relies on the order within the ~tlon-job-labels~ alist.

*** Utility Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-utils
:END:

#+findex: tlon-next-value
+ ~tlon-next-value~ :: A generic helper function to find the value associated with a =PROPERTY= that comes *after* the item with the specified =VALUE= in an =ALIST=. Used by ~tlon-get-clock-next-label~.

#+findex: tlon-copy-buffer
+ ~tlon-copy-buffer~ :: Copies the entire content of a specified =FILE= (or the current buffer) to the kill ring.

#+findex: tlon-copy-region
+ ~tlon-copy-region~ :: Copies the text between positions =BEG= and =END= to the kill ring.

#+findex: tlon-set-paths-from-clock
+ ~tlon-set-paths-from-clock~ :: Retrieves the BibTeX key from the clocked task and uses Tlön metadata to find the file paths for both the original document and its corresponding translation. Returns these paths and the key as multiple values.

#+findex: tlon-set-windows
+ ~tlon-set-windows~ :: A utility function (likely requiring =window-extras= and =winum= packages) to open two specified files (=ORIGINAL-PATH= and =TRANSLATION-PATH=) in specific windows (window 1 and window 2, respectively), splitting the frame if necessary.

*** Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-clock-variables
:END:

#+vindex: tlon-key-regexp
+ ~tlon-key-regexp~ :: The constant regular expression used by ~tlon-get-clock-key~ to identify BibTeX keys within clocked task headings. It specifically looks for text enclosed in backticks, optionally followed by =.md=.

* Glossary Management (=tlon-glossary.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary
:END:

This module provides functions for managing a multilingual glossary stored in a JSON file. It allows users to edit entries, add translations, and extract the glossary in different formats for various recipients (humans, DeepL editor, DeepL API).

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-config
:END:

*** Glossary Source File
:PROPERTIES:
:CUSTOM_ID: h:tlon-file-glossary-source
:END:
#+vindex: tlon-file-glossary-source
The constant ~tlon-file-glossary-source~ defines the path to the JSON file containing the master glossary data. By default, it points to =glossary.json= within the =babel-core= repository.

*** Glossary Recipients
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-recipients
:END:
#+vindex: tlon-glossary-recipients
The constant ~tlon-glossary-recipients~ is an alist defining the email addresses associated with specific target languages for sharing human-readable glossaries. Each entry is a plist with =:language= (language code string) and =:email= (email address string).

#+begin_src emacs-lisp
(defconst tlon-glossary-recipients
  '((:language "fr" :email "tlon-french@googlegroups.com")
    (:language "it" :email "tlon-italian@googlegroups.com")))
#+end_src

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-commands
:END:

This section details the interactive commands provided by =tlon-glossary.el=.

*** Edit Glossary Entry
:PROPERTIES:
:CUSTOM_ID: h:tlon-edit-glossary
:END:
#+findex: tlon-edit-glossary
The command ~tlon-edit-glossary~ provides an interactive way to create or update entries in the glossary file (~tlon-file-glossary-source~).

1. It parses the existing glossary using ~tlon-parse-glossary~.
2. It prompts the user to choose an existing English term (using completion) or add a new one.
3. If the term is new:
   - It prompts the user to select the term type (=variable= or =invariant=) using ~tlon-select-term-type~.
   - It creates a new entry structure using ~tlon-create-entry~. For invariant terms, it automatically adds entries for all target languages, using the English term as the initial translation.
4. If the term exists or is newly created and is not of type =invariant=:
   - It calls ~tlon-edit-translation-in-entry~ to prompt the user for a target language and the corresponding translation for the selected English term. It updates the entry with the new or modified translation.
5. It updates the main glossary data structure with the modified or new entry using ~tlon-update-glossary~.
6. It writes the updated glossary back to the JSON file using ~tlon-write-data~.

*** Extract Glossary
:PROPERTIES:
:CUSTOM_ID: h:tlon-extract-glossary
:END:
#+findex: tlon-extract-glossary
The command ~tlon-extract-glossary~ extracts a language-specific glossary from the main JSON file and saves it in a format suitable for a specified recipient.

1. It prompts the user to select the target =LANGUAGE= using ~tlon-select-language~.
2. It prompts the user to select the =RECIPIENT= type (=human=, =deepl-editor=, or =deepl-api=) using completion.
3. It determines the target file path and extension based on the language and recipient using ~tlon-glossary-target-path~.
4. It reads the source glossary JSON file.
5. It creates or opens the target file and inserts the formatted glossary content using ~tlon-insert-formatted-glossary~, filtering and formatting entries based on the recipient:
   - =human=: Includes only "variable" type entries, formatted as CSV (="Source","Target"=).
   - =deepl-editor=: Includes all entries, formatted as CSV (="Source","Target","EN","LANG"=).
   - =deepl-api=: Includes all entries, formatted as TSV (=Source\tTarget=).
6. It saves the target file.
7. If the recipient is =human=, it asks the user if they want to share the extracted glossary via email using ~tlon-share-glossary~.
8. For other recipients, it messages the path to the extracted file.

*** Share Glossary
:PROPERTIES:
:CUSTOM_ID: h:tlon-share-glossary
:END:
#+findex: tlon-share-glossary
The command ~tlon-share-glossary~ sends an extracted glossary file as an email attachment to the designated translators for a specific language.

1. It prompts the user to select the glossary =ATTACHMENT= file (defaulting to the downloads directory).
2. It prompts the user to select the =LANGUAGE= of the glossary (unless provided as an argument).
3. It looks up the recipient email address for the language in ~tlon-glossary-recipients~ using ~tlon-lookup~.
4. It looks up the full language name (e.g., "French") using ~tlon-lookup~ on ~tlon-languages-properties~ and sets the ~tlon-email-language~ variable.
5. It calls ~tlon-email-send~ with the ="share-glossary.org"= template, the recipient email, and the attachment path.

*** Glossary Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-menu
:END:
#+findex: tlon-glossary-menu
The command ~tlon-glossary-menu~ activates a =transient= menu interface providing quick access to the main glossary functions:
+ =e= :: Edit glossary entry (~tlon-edit-glossary~)
+ =x= :: Extract glossary (~tlon-extract-glossary~)
+ =s= :: Share glossary (~tlon-share-glossary~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** Glossary Data Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-data
:END:

#+findex: tlon-parse-glossary
+ ~tlon-parse-glossary~ :: Reads and parses the JSON glossary file specified by ~tlon-file-glossary-source~ into an Emacs Lisp alist using ~tlon-read-json~.

#+findex: tlon-get-english-terms
+ ~tlon-get-english-terms~ :: Extracts a list of all English terms (the =en= value) from the parsed glossary alist. Used for completion in ~tlon-edit-glossary~.

#+findex: tlon-find-entry-by-term
+ ~tlon-find-entry-by-term~ :: Searches the parsed glossary alist for an entry whose English term (=en= value) matches the given =TERM=. Returns the matching entry alist or nil.

#+findex: tlon-select-term-type
+ ~tlon-select-term-type~ :: Prompts the user with completion to select a term type (=variable= or =invariant=) and returns the selected string.

#+findex: tlon-create-entry
+ ~tlon-create-entry~ :: Creates a new glossary entry alist for a given English =TERM= and =TYPE=. If the type is =invariant=, it pre-populates translations for all ~tlon-project-target-languages~ with the English term itself.

#+findex: tlon-edit-translation-in-entry
+ ~tlon-edit-translation-in-entry~ :: Interactively prompts the user to select a target language and provide or update the translation for the given English =TERM= within the provided =ENTRY= alist. Returns the modified entry.

#+findex: tlon-update-glossary
+ ~tlon-update-glossary~ :: Takes the main glossary alist, a potentially modified =ENTRY=, and the corresponding English =TERM=. If an entry for =TERM= already exists in the glossary, it replaces it with =ENTRY=. If not, it appends =ENTRY= to the glossary. Returns the updated glossary alist.

*** Glossary Extraction Formatting
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-extraction
:END:

#+findex: tlon-glossary-target-path
+ ~tlon-glossary-target-path~ :: Determines the full output file path for an extracted glossary based on the target =LANGUAGE= and =RECIPIENT=. It sets the file extension to =.csv= for =human= and =deepl-editor=, and =.tsv= for =deepl-api=. Uses ~tlon-glossary-make-file~ internally.

#+findex: tlon-glossary-make-file
+ ~tlon-glossary-make-file~ :: Constructs the filename (e.g., =EN-FR.csv=) and combines it with the user's download directory path (~paths-dir-downloads~).

#+findex: tlon-insert-formatted-glossary
+ ~tlon-insert-formatted-glossary~ :: Iterates through the parsed =JSON= glossary data. For each entry, it extracts the source (=en=) and target (=language=) terms. Based on the =RECIPIENT=, it formats the entry as CSV or TSV and inserts it into the current buffer. For =human= recipients, it only includes entries of type =variable=.

*** Git Integration (Currently Unused/TODO)
:PROPERTIES:
:CUSTOM_ID: h:tlon-glossary-git
:END:

#+findex: tlon-glossary-prompt-for-explanation
+ ~tlon-glossary-prompt-for-explanation~ :: (TODO) Prompts the user for an optional explanation of a glossary change, intended for commit messages.

#+findex: tlon-glossary-commit
+ ~tlon-glossary-commit~ :: (TODO) Intended to handle the Git workflow for glossary changes: pulling, staging the glossary file, committing with a formatted message (including action, term, and optional explanation), and pushing. Requires =magit= functions. Currently marked as unused and needing fixes.

* Dictionary Functionality (=tlon-dict.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict
:END:

This module integrates with the external =reverso.el= package to provide dictionary-related features, specifically fetching synonyms, while ensuring that the language context aligns with the Tlön workflow.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict-dependencies
:END:

This module requires the =reverso= package to be installed and available.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict-commands
:END:

*** Get Synonyms via Reverso
:PROPERTIES:
:CUSTOM_ID: h:tlon-reverso-get-synonyms
:END:
#+findex: tlon-reverso-get-synonyms
The command ~tlon-reverso-get-synonyms~ fetches synonyms for the word currently at point using the =reverso.el= package.

Crucially, it overrides the default language selection mechanism of =reverso.el=. Instead, it determines the language of the current file using ~tlon-get-language-in-file~, looks up the corresponding language code recognized by =reverso.el= using Tlön's configuration (~tlon-lookup~), and passes this language code to the underlying =reverso--get-synonyms= function.

It prompts the user for the word, defaulting to the word at point (~thing-at-point 'word~). The results are displayed in a dedicated Reverso buffer, similar to how =reverso.el= typically operates.

** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-dict-menu
:END:
#+findex: tlon-dict-menu
The command ~tlon-dict-menu~ activates a =transient= menu interface for dictionary-related commands.

Currently, it offers one option:
+ =s= :: Calls ~tlon-reverso-get-synonyms~ to fetch synonyms for the word at point.

* Image Processing (=tlon-images.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-images
:END:

This module provides functionality for processing images, primarily using the external =ImageMagick= command-line tool. It allows for operations like reducing brightness, inverting colors, and making images non-transparent. It also integrates with the =invertornot.com= API to determine if an image's colors can be safely inverted.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-dependencies
:END:

+ =ImageMagick= :: Must be installed and accessible in the system's PATH for image processing commands to work.
+ =transient= :: Required for the menu interface.
+ =window-extras= :: Used by ~tlon-images-maybe-open-after-processing~ for window management.

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-options
:END:

#+vindex: tlon-images-default-brightness-reduction
+ ~tlon-images-default-brightness-reduction~ :: Default percentage (integer) by which to reduce image brightness when using ~tlon-images-reduce-brightnesss~ without specifying a percentage. Defaults to 20.

#+vindex: tlon-images-open-after-processing
+ ~tlon-images-open-after-processing~ :: Boolean flag. If non-nil (the default), the original (copied as light theme) and processed (dark theme) images will be opened in separate windows after processing via ~tlon-images-reduce-brightnesss~ or ~tlon-images-invert-colors~. Uses ~tlon-images-maybe-open-after-processing~.

#+vindex: tlon-images-process-without-asking
+ ~tlon-images-process-without-asking~ :: Boolean flag. If non-nil, commands like ~tlon-images-reduce-brightnesss~ will process the image at point (in Dired) or the current buffer's file without prompting for confirmation via ~tlon-images-read-image~. Defaults to nil.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-commands
:END:

*** Auto Process Image
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-auto-process
:END:
#+findex: tlon-images-auto-process
The command ~tlon-images-auto-process~ attempts to intelligently process an image for a dark theme.

1. It prompts for the =IMAGE= file using ~tlon-images-read-image~.
2. It determines the output filename using ~tlon-images-get-themed-file-name~ with the =dark= theme.
3. It checks if the image can be safely inverted using ~tlon-images-can-invert-p~ (which calls the =invertornot.com= API).
4. If inversion is safe, it calls ~tlon-images-invert-colors~.
5. Otherwise, it calls ~tlon-images-reduce-brightnesss~ using the default reduction percentage.

*** Reduce Image Brightness
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-reduce-brightnesss
:END:
#+findex: tlon-images-reduce-brightnesss
The command ~tlon-images-reduce-brightnesss~ reduces the brightness of an image using ImageMagick.

1. It prompts for the =SOURCE= image using ~tlon-images-read-image~ (unless provided).
2. It determines the =TARGET= filename (defaulting to a dark-themed version via ~tlon-images-get-themed-file-name~) unless provided.
3. It prompts for the reduction =PERCENT= (defaulting to ~tlon-images-default-brightness-reduction~) unless provided. Note: The percentage passed to ImageMagick's =-modulate= is calculated as =100 - PERCENT=.
4. It constructs the ImageMagick command using ~tlon-imagemagick-reduce-brightness~.
5. It calls ~tlon-images-process-image~ to execute the command, copy the original to a light-themed file, handle output, and potentially open the images.

*** Invert Image Colors
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-invert-colors
:END:
#+findex: tlon-images-invert-colors
The command ~tlon-images-invert-colors~ inverts the colors of an image using ImageMagick.

1. It prompts for the =SOURCE= image using ~tlon-images-read-image~ (unless provided).
2. It determines the =TARGET= filename (defaulting to a dark-themed version via ~tlon-images-get-themed-file-name~) unless provided.
3. It constructs the ImageMagick command using ~tlon-imagemagick-invert-colors~.
4. It calls ~tlon-images-process-image~ to execute the command, copy the original to a light-themed file, handle output, and potentially open the images.

*** Make Image Non-Transparent
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-make-nontransparent
:END:
#+findex: tlon-images-make-nontransparent
The command ~tlon-images-make-nontransparent~ removes transparency from an image, replacing it with a solid background color using ImageMagick.

1. It prompts for the =SOURCE= image using ~tlon-images-read-image~ (unless provided).
2. It determines the =TARGET= filename (defaulting to the source file itself, thus overwriting it) unless provided.
3. It prompts for the =BACKGROUND= color (defaulting to "white") unless provided.
4. It constructs the ImageMagick command using ~tlon-imagemagick-make-nontransparent~.
5. It executes the command using =shell-command-to-string=.
6. It calls ~tlon-images-handle-output~ to display success or error messages.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-menu
:END:
#+findex: tlon-images-menu
The command ~tlon-images-menu~ activates a =transient= menu interface for image processing.

It provides the following groups and commands:
+ *Commands*:
  + =a= :: Auto process (~tlon-images-auto-process~)
  + =r= :: Reduce brightness (~tlon-images-reduce-brightnesss~)
  + =i= :: Invert colors (~tlon-images-invert-colors~)
  + =n= :: Make non-transparent (~tlon-images-make-nontransparent~)
+ *Options*:
  + =-o= :: Toggle opening images after processing (~tlon-images-toggle-open-after-processing~ infix, modifies ~tlon-images-open-after-processing~)
  + =-p= :: Toggle processing without asking (~tlon-images-toggle-process-without-asking~ infix, modifies ~tlon-images-process-without-asking~)
  + =-r= :: Set brightness reduction percentage (~tlon-images-brightness-reduction-infix~, modifies ~tlon-images-default-brightness-reduction~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-internals
:END:

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization.

*** ImageMagick Command Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-imagemagick-consts
:END:

#+vindex: tlon-imagemagick-reduce-brightness
+ ~tlon-imagemagick-reduce-brightness~ :: Format string for the =magick= command to reduce brightness using =-modulate=. Placeholders: %1$s (input), %2$s (output), %3$s (brightness percentage for modulate).

#+vindex: tlon-imagemagick-invert-colors
+ ~tlon-imagemagick-invert-colors~ :: Format string for the =magick= command to invert colors using =-channel RGB -negate=. Placeholders: %s (input), %s (output).

#+vindex: tlon-imagemagick-make-nontransparent
+ ~tlon-imagemagick-make-nontransparent~ :: Format string for the =magick= command to remove transparency using =-background= and =-flatten=. Placeholders: %1$s (input), %2$s (output), %3$s (background color).

*** InvertOrNot API Integration
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-invertornot
:END:

#+vindex: tlon-invertornot-generic-endpoint
+ ~tlon-invertornot-generic-endpoint~ :: Base URL for the =invertornot.com= API.

#+findex: tlon-images-post-file-to-invertornot
+ ~tlon-images-post-file-to-invertornot~ :: Sends an image =FILE= to the =invertornot.com/api/file= endpoint using a multipart/form-data POST request. Returns the parsed JSON response via ~tlon-images-handle-synchronous-response~.

#+findex: tlon-images-post-url-to-invertornot
+ ~tlon-images-post-url-to-invertornot~ :: Sends an =IMAGE-URL= to the =invertornot.com/api/url= endpoint using a JSON POST request. Returns the parsed JSON response via ~tlon-images-handle-synchronous-response~.

#+findex: tlon-images-handle-synchronous-response
+ ~tlon-images-handle-synchronous-response~ :: Helper function to process the buffer returned by =url-retrieve-synchronously=, extract the JSON payload, and parse it into an alist.

#+findex: tlon-images-can-invert-p
+ ~tlon-images-can-invert-p~ :: Takes an =IMAGE= file path, sends it to the =invertornot.com= API using ~tlon-images-post-file-to-invertornot~, and checks the =invert= field in the response. Returns =t= if the value is 1, =nil= if 0, and signals an error otherwise.

*** Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-helpers
:END:

#+findex: tlon-images-read-image
+ ~tlon-images-read-image~ :: Prompts the user for an image file path. If called within Dired, defaults to the file at point. If the current buffer has a file, defaults to that. If ~tlon-images-process-without-asking~ is non-nil, it skips the prompt and uses the default directly.

#+findex: tlon-images-process-image
+ ~tlon-images-process-image~ :: Core utility for processing images. Takes =SOURCE=, =TARGET=, the ImageMagick =COMMAND= string, and a =MESSAGE-FMT= string.
  1. Executes the =COMMAND= using =shell-command-to-string=.
  2. Copies the =SOURCE= file to a light-themed filename (using ~tlon-images-get-themed-file-name~).
  3. Calls ~tlon-images-maybe-open-after-processing~ with the light and dark themed files.
  4. Calls ~tlon-images-handle-output~ with the command output and the formatted message.

#+findex: tlon-images-handle-output
+ ~tlon-images-handle-output~ :: Checks the =OUTPUT= string from a shell command. If empty, displays the success =MESSAGE=. If non-empty, signals a user error with the output content.

#+findex: tlon-images-get-themed-file-name
+ ~tlon-images-get-themed-file-name~ :: Takes a =FILE= path and a =THEME= symbol (=light= or =dark=). Returns a new filename with =-[theme].ext= appended before the extension (e.g., =image.png= becomes =image-dark.png=).

#+findex: tlon-images-maybe-open-after-processing
+ ~tlon-images-maybe-open-after-processing~ :: If ~tlon-images-open-after-processing~ is non-nil, it opens the =ORIGINAL= (light theme) and =PROCESSED= (dark theme) files in separate windows, splitting the frame if necessary using =window-extras= functions.

*** Transient Infix Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-images-transient-infixes
:END:

These functions define the behavior of the options within the ~tlon-images-menu~.

#+findex: tlon-images-brightness-reduction-infix
+ ~tlon-images-brightness-reduction-infix~ :: Reads a number from the user to set the local value of ~tlon-images-default-brightness-reduction~ for the current menu invocation.

#+findex: tlon-images-toggle-open-after-processing
+ ~tlon-images-toggle-open-after-processing~ :: Toggles the boolean value of ~tlon-images-open-after-processing~ for the current menu invocation using ~tlon-transient-toggle-variable-value~.

#+findex: tlon-images-toggle-process-without-asking
+ ~tlon-images-toggle-process-without-asking~ :: Toggles the boolean value of ~tlon-images-process-without-asking~ for the current menu invocation using ~tlon-transient-toggle-variable-value~.

* Job Management (=tlon-jobs.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs
:END:

This module manages the workflow for processing "Babel jobs," which typically involve translating documents. It integrates Org mode's clocking mechanism, GitHub issues (via =orgit-forge=), and Git version control (via =magit=) to track the progress of jobs through various phases like processing, translation, revision, checking, and review.

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-config
:END:

*** Job Labels and Phases
:PROPERTIES:
:CUSTOM_ID: h:tlon-job-labels
:END:
#+vindex: tlon-job-labels
The constant ~tlon-job-labels~ defines the different stages or phases a job goes through. It's an alist where each element represents a phase and contains properties like the display label, the action verb associated with the phase, and the default assignee for that phase.

#+begin_src emacs-lisp
(defconst tlon-job-labels
  '((:label "Awaiting processing" :action "Process" :assignee "worldsaround")
    (:label "Awaiting translation" :action "Translate" :assignee "")
    ;; ... other phases ...
    (:label "Published" :action "Publish" :assignee "")))
#+end_src

This structure drives the workflow logic, determining the next step and assignee after a phase is completed.

*** Org ID Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-org-ids
:END:

#+vindex: tlon-jobs-manual-processing-id
+ ~tlon-jobs-manual-processing-id~ :: The Org ID of the specific heading within =manual.org= that contains instructions relevant to the "processing" phase. Used by ~tlon-jobs-initialize-processing~.

#+vindex: tlon-jobs-id
+ ~tlon-jobs-id~ :: The Org ID of the main "jobs" heading in the central =jobs.org= file. This file serves as the primary tracker for all jobs.

*** Jobs File Variable
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-file-var
:END:
#+vindex: tlon-jobs-file
The variable ~tlon-jobs-file~ holds the path to the =jobs.org= file. It is set dynamically by ~tlon-jobs-get-file~ and should not be configured manually.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-commands
:END:

This section details the interactive commands provided by =tlon-jobs.el=.

*** Start or Finish Job Phase
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-start-or-finish-phase
:END:
#+findex: tlon-jobs-start-or-finish-phase
The command ~tlon-jobs-start-or-finish-phase~ is the central command for advancing the job workflow. It determines the current context (Org mode for starting, Markdown mode for finishing) and the action associated with the currently clocked task (~tlon-get-clock-action~).

- *Initialization (in Org mode):*
  1. Clocks into the task.
  2. Saves the buffer.
  3. Determines the initialization function based on the action (e.g., ~tlon-jobs-initialize-processing~).
  4. Calls the general ~tlon-jobs-initialize~ function, which performs common setup tasks:
     - Checks the associated repository's label and assignee (~tlon-check-label-and-assignee~).
     - Ensures the repository is on the "main" branch (~tlon-check-branch~).
     - Pulls the latest changes from upstream (~magit-pull-from-upstream~).
     - Sets up the window configuration with original and translation files (~tlon-set-windows~).
     - Opens the associated GitHub issue (~orgit-topic-open~).
     - Copies the original buffer content.
  5. Calls the specific initialization function for the current phase (e.g., opening the manual for processing, opening DeepL for translation, setting up diffs for review).

- *Finalization (in Markdown mode):*
  1. Closes split mode if active (~tlon-split-mode -1~).
  2. Saves the buffer.
  3. Calls ~tlon-jobs-finalize~, which performs common finalization tasks:
     - Checks the repository branch and label/assignee.
     - Performs phase-specific checks (e.g., prompts for Jinx/Flycheck confirmation after translation).
     - Saves the modified original (if processing) or translation file.
     - Commits and pushes the changes for the translation file (and original if processing) using ~tlon-commit-and-push~.
     - Updates the associated GitHub issue: sets the next label (~tlon-get-clock-next-label~) and assignee (~tlon-jobs-get-next-assignee~), potentially closing the issue after the "Review" phase using ~tlon-jobs-act-on-issue~.
     - Updates the corresponding TODO items in =jobs.org= and the main TODO file using ~tlon-jobs-finalize-set-todos~.

*** Create Job
:PROPERTIES:
:CUSTOM_ID: h:tlon-create-job
:END:
#+findex: tlon-create-job
The command ~tlon-create-job~ orchestrates the entire process of creating a new job based on a BibTeX entry at point in an Ebib buffer.

1. Imports the document associated with the BibTeX entry using ~tlon-import-document~, which returns the BibTeX key.
2. Creates the initial translation file structure using ~tlon-create-translation-file~.
3. Creates the necessary records for the job (GitHub issue and =jobs.org= heading) using ~tlon-create-record-for-job~.

*** Create Job Record
:PROPERTIES:
:CUSTOM_ID: h:tlon-create-record-for-job
:END:
#+findex: tlon-create-record-for-job
The command ~tlon-create-record-for-job~ creates the tracking records for a job based on a BibTeX =KEY=. If =KEY= is not provided, it attempts to find it in the current buffer (Markdown or Ebib).

1. Creates a GitHub issue titled "Job: `KEY`" using ~tlon-create-issue-from-key~.
2. Creates a corresponding heading in =jobs.org= using ~tlon-create-heading-for-job~, optionally committing the change.

*** Create Heading in jobs.org
:PROPERTIES:
:CUSTOM_ID: h:tlon-create-heading-for-job
:END:
#+findex: tlon-create-heading-for-job
The command ~tlon-create-heading-for-job~ adds a new heading to the =jobs.org= file for tracking a specific job based on its BibTeX =KEY=.

1. Determines the =KEY= (from argument or current buffer).
2. Formats the heading as =[cite:@KEY]=.
3. Finds the associated repository and its abbreviation (~tlon-repo-lookup~).
4. Opens =jobs.org= (finding the buffer or file).
5. If the heading doesn't exist:
   - Navigates to the main jobs section (using ~tlon-jobs-id~).
   - Inserts the new heading.
   - Sets the TODO state to "TODO".
   - Adds the repository abbreviation as a tag.
   - Sorts the headings in the file (~tlon-sort-headings~).
   - Saves the buffer.
6. Optionally commits the change to =jobs.org= using ~tlon-commit-and-push~ if =COMMIT= is non-nil.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-menu
:END:
#+findex: tlon-jobs-menu
The command ~tlon-jobs-menu~ activates a =transient= menu interface for job-related operations.

It provides the following groups and commands:
+ *Job phases*:
  + =j= :: Start or finish phase (~tlon-jobs-start-or-finish-phase~)
+ *Job creation*:
  + =c c= :: Create job (~tlon-create-job~)
  + =c d= :: 1 Import document (~tlon-import-document~)
  + =c f= :: 2 Create translation file (~tlon-create-translation-file~)
  + =c r= :: 3 Create record for job (~tlon-create-record-for-job~)
+ *Add or modify*:
  + =a s= :: Section correspondence (~tlon-section-correspondence-dwim~)
  + =a u= :: URL correspondence (~tlon-edit-url-correspondences~)
+ *jobs.org*:
  + =r= :: Create record (~tlon-create-record-for-job~)
  + =h= :: Create heading (~tlon-create-heading-for-job~)
  + =t= :: Sort headings (~tlon-sort-headings~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** File and Path Management
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-files
:END:

#+findex: tlon-jobs-get-file
+ ~tlon-jobs-get-file~ :: Retrieves the path to the =jobs.org= file, using the Org ID ~tlon-jobs-id~ and caching the result in ~tlon-jobs-file~ via ~tlon-get-or-set-org-var~.

*** Job Phase Logic
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-phase-logic
:END:

#+findex: tlon-jobs-get-action-in-label
+ ~tlon-jobs-get-action-in-label~ :: Extracts the action verb (e.g., "Process", "Translate") from a job phase =LABEL= string (e.g., "Awaiting processing").

#+findex: tlon-jobs-initialize
+ ~tlon-jobs-initialize~ :: Performs common setup tasks when starting any job phase (checking repo, pulling, setting up windows, opening issue, copying buffer). Takes the specific phase initialization function (=FUN=) as an argument and calls it after the common setup.

#+findex: tlon-jobs-finalize
+ ~tlon-jobs-finalize~ :: Performs common cleanup and update tasks when finishing any job phase (checking repo, committing files, updating GitHub issue label/assignee, updating TODOs).

#+findex: tlon-jobs-get-next-assignee
+ ~tlon-jobs-get-next-assignee~ :: Determines the assignee for the *next* phase. It considers the current user and the designated assignee for the current phase versus the next phase, potentially assigning a substitute if the current user isn't the designated one for the current phase.

#+findex: tlon-jobs-initialize-processing
+ ~tlon-jobs-initialize-processing~ :: Specific setup for the "Process" phase: opens the original file and the relevant section in =manual.org= (using ~tlon-jobs-manual-processing-id~), narrows the view, and opens the issue.

#+findex: tlon-jobs-initialize-translation
+ ~tlon-jobs-initialize-translation~ :: Specific setup for the "Translate" phase: opens the DeepL application using ~macos-open-app~.

#+findex: tlon-jobs-initialize-revision
+ ~tlon-jobs-initialize-revision~ :: Specific setup for the "Revise" phase: activates split mode (~tlon-split-mode~).

#+findex: tlon-jobs-initialize-check
+ ~tlon-jobs-initialize-check~ :: Specific setup for the "Check" phase: rearranges windows, starts Markdown preview, and initiates text-to-speech using ~read-aloud-buf~.

#+findex: tlon-jobs-initialize-review
+ ~tlon-jobs-initialize-review~ :: Specific setup for the "Review" phase: opens an =ediff= session showing changes since the last user commit (~tlon-log-buffer-latest-user-commit-ediff~), sets up =jinx= for spell/grammar checking in the target language, and moves to the beginning of the buffer.

*** Issue and TODO Interaction
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-issue-todo
:END:

#+findex: tlon-jobs-act-on-issue
+ ~tlon-jobs-act-on-issue~ :: Updates a GitHub issue associated with an =ORIGINAL-KEY=. It finds the issue (using ~tlon-issue-lookup~), sets the specified =LABEL= and =ASSIGNEE= using ~tlon-set-labels~ and ~tlon-set-assignee~, and optionally closes the issue if =CLOSE= is non-nil.

#+findex: tlon-jobs-finalize-set-todos
+ ~tlon-jobs-finalize-set-todos~ :: Marks the relevant TODO items as DONE during the finalization process. It marks the clocked task itself as DONE in the main TODO file (~tlon-get-todos-jobs-file~). For "Review" and "Check" phases, it also marks the parent TODO as DONE. For the "Review" phase, it additionally marks the corresponding job heading in =jobs.org= as DONE, sorts the headings, and commits the change.

*** jobs.org Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-jobs-org-helpers
:END:

#+findex: tlon-jobs-get-key-in-heading
+ ~tlon-jobs-get-key-in-heading~ :: Extracts the BibTeX key from the Org heading at point, assuming the format =[cite:@KEY]= or ``Job: `KEY`.md``.

#+findex: tlon-jobs-goto-heading
+ ~tlon-jobs-goto-heading~ :: Moves the point to the heading corresponding to the given BibTeX =KEY= within the =jobs.org= file.

* Markdown Functionality (=tlon-md.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-md
:END:

This module provides specialized functionality for working with Markdown files within the Tlön workflow. It includes commands for inserting and managing various Markdown, HTML, MDX, and SSML elements, handling footnotes, sorting content, and interacting with YAML front matter. It also defines numerous constants (mostly regular expressions) for identifying these elements.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-dependencies
:END:

+ =markdown-mode-extras=
+ =tlon-core=
+ =tlon-yaml=

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-options
:END:

#+vindex: tlon-md-special-characters
+ ~tlon-md-special-characters~ :: An alist defining special characters that can be inserted using the ~tlon-insert-special-character~ command. The key is the descriptive name (e.g., "en dash") and the value is the character itself (e.g., "–").

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-commands
:END:

This section details the interactive commands provided by =tlon-md.el=.

*** YAML Front Matter
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-yaml-commands
:END:
#+findex: tlon-edit-yaml-field
+ ~tlon-edit-yaml-field~ :: Edits the YAML field at point. It retrieves the key and value using ~tlon-yaml-get-field-at-point~ and then prompts the user to re-insert/modify them using ~tlon-yaml-insert-field~.

*** Links and Sorting
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-link-sort-commands
:END:
#+findex: tlon-insert-internal-link
+ ~tlon-insert-internal-link~ :: Inserts a Markdown link to another Tlön entity (article, author, tag). It uses completion based on titles found in the repository's metadata (~tlon-metadata-in-repo~). It handles existing links at point and uses the active region as default link text.

#+findex: tlon-md-sort-related-entries
+ ~tlon-md-sort-related-entries~ :: Sorts the list items (assumed to be links separated by " • ") alphabetically within the "Entradas relacionadas" section of the current buffer. Uses ~tlon-md-sort-elements-in-paragraph~ internally.

*** Tag Insertion/Editing (HTML, MDX, SSML)
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-tag-commands
:END:
These commands insert or edit specific tags at point or around the selected region. They generally use ~tlon-md-insert-or-edit-tag~ internally, which checks if the tag already exists at point and either edits it or inserts a new one. Many prompt for necessary attributes.

+ *HTML Tags*:
  #+findex: tlon-html-insert-subscript
  + ~tlon-html-insert-subscript~ :: Inserts/edits =<sub>= tags.
  #+findex: tlon-html-insert-superscript
  + ~tlon-html-insert-superscript~ :: Inserts/edits =<sup>= tags.
  #+findex: tlon-html-insert-quote
  + ~tlon-html-insert-quote~ :: Inserts/edits =<q>= tags (inline quote).

+ *MDX Tags*:
  #+findex: tlon-mdx-insert-aside
  + ~tlon-mdx-insert-aside~ :: Inserts/edits =<Aside>= tags.
  #+findex: tlon-mdx-insert-cite
  + ~tlon-mdx-insert-cite~ :: Inserts/edits =<Cite>= tags. Prompts for BibTeX key (=bibKey=), locator, and length (short/long) using custom readers (~tlon-md-cite-bibkey-reader~, ~tlon-md-cite-locator-reader~, ~tlon-md-cite-length-reader~).
  #+findex: tlon-mdx-insert-figure
  + ~tlon-mdx-insert-figure~ :: Inserts/edits =<Figure>= tags. Prompts for image URL (=src=) and alt text (=alt=).
  #+findex: tlon-mdx-insert-language
  + ~tlon-mdx-insert-language~ :: Inserts/edits =<Language>= tags. Prompts for language ID (=id=).
  #+findex: tlon-mdx-insert-literal-link
  + ~tlon-mdx-insert-literal-link~ :: Inserts/edits =<LiteralLink>= tags. Prompts for the link URL (=src=).
  #+findex: tlon-mdx-insert-math
  + ~tlon-mdx-insert-math~ :: Inserts/edits =<Math>= tags. Prompts for alt text (=alt=) and display type (inline/display) using ~tlon-md-math-display-reader~. Suggests using ~tlon-ai-translate-math~ for AI-generated alt text.
  #+findex: tlon-mdx-insert-embedded
  + ~tlon-mdx-insert-embedded~ :: Inserts/edits =<Embedded>= tags (self-closing). Prompts for chart URL (=src=), alt text (=alt=), and height (=height=).
  #+findex: tlon-mdx-insert-replace-audio
  + ~tlon-mdx-insert-replace-audio~ :: Inserts/edits =<ReplaceAudio>= tags. Prompts for the audio text (=text=) and optional voice role (=role=) using ~tlon-md-replace-audio-voice-reader~.
  #+findex: tlon-mdx-insert-romantlon-insert-mdx-roman
  + ~tlon-mdx-insert-romantlon-insert-mdx-roman~ :: Inserts/edits =<Roman>= tags (for Roman numerals in small caps with correct TTS).
  #+findex: tlon-mdx-insert-small-caps
  + ~tlon-mdx-insert-small-caps~ :: Inserts/edits =<SmallCaps>= tags (for general small caps text).
  #+findex: tlon-mdx-insert-table
  + ~tlon-mdx-insert-table~ :: (Not yet developed) Intended for inserting complex =<Table>= tags.
  #+findex: tlon-mdx-insert-simple-table
  + ~tlon-mdx-insert-simple-table~ :: Inserts/edits =<SimpleTable>= tags. Prompts for alt text (=alt=) and inclusion scope (=include=) using ~tlon-md-simple-table-include-reader~.
  #+findex: tlon-mdx-insert-visually-hidden
  + ~tlon-mdx-insert-visually-hidden~ :: Inserts/edits =<VisuallyHidden>= tags.
  #+findex: tlon-mdx-insert-voice-role
  + ~tlon-mdx-insert-voice-role~ :: Inserts/edits =<VoiceRole>= tags. Prompts for the voice role (=role=) using ~tlon-md-replace-audio-voice-reader~.

+ *SSML Tags*:
  #+findex: tlon-tts-insert-ssml-break
  + ~tlon-tts-insert-ssml-break~ :: Inserts/edits =<break>= tags (self-closing). Prompts for time duration (=time=).
  #+findex: tlon-tts-insert-ssml-emphasis
  + ~tlon-tts-insert-ssml-emphasis~ :: Inserts/edits =<emphasis>= tags. Prompts for emphasis level (=level=) using ~tlon-md-emphasis-level-reader~.
  #+findex: tlon-tts-insert-ssml-lang
  + ~tlon-tts-insert-ssml-lang~ :: Inserts/edits =<lang>= tags. Prompts for language code (=xml:lang=) using ~tlon-md-lang-reader~.
  #+findex: tlon-tts-insert-ssml-phoneme
  + ~tlon-tts-insert-ssml-phoneme~ :: Inserts/edits =<phoneme>= tags. Prompts for alphabet type (=alphabet=) using ~tlon-md-phoneme-alphabet-reader~ and phonetic symbols (=ph=).
  #+findex: tlon-tts-insert-ssml-say-as
  + ~tlon-tts-insert-ssml-say-as~ :: Inserts/edits =<say-as>= tags. Prompts for interpretation type (=interpret-as=) using ~tlon-md-say-as-interpret-as-reader~.

*** Note Classification
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-note-commands
:END:
These commands manage the classification of footnotes as either standard footnotes or sidenotes using =<Footnote>= and =<Sidenote>= MDX tags.

#+findex: tlon-insert-footnote-marker
+ ~tlon-insert-footnote-marker~ :: Inserts a =<Footnote />= marker at the beginning of the footnote content at point. If =OVERWRITE= is non-nil (or called interactively), it replaces an existing =<Sidenote />= marker.
#+findex: tlon-insert-sidenote-marker
+ ~tlon-insert-sidenote-marker~ :: Inserts a =<Sidenote />= marker at the beginning of the footnote content at point. If =OVERWRITE= is non-nil (or called interactively), it replaces an existing =<Footnote />= marker.
#+findex: tlon-auto-classify-note-at-point
+ ~tlon-auto-classify-note-at-point~ :: Automatically classifies the footnote at point based on its content (using ~tlon-note-automatic-type~) and inserts the corresponding marker (=<Footnote />= or =<Sidenote />=), overwriting any existing marker.
#+findex: tlon-auto-classify-notes-in-file
+ ~tlon-auto-classify-notes-in-file~ :: Applies ~tlon-auto-classify-note-at-point~ to all footnotes in the current buffer (or specified =FILE=).
#+findex: tlon-auto-classify-notes-in-directory
+ ~tlon-auto-classify-notes-in-directory~ :: Applies ~tlon-auto-classify-notes-in-file~ to all Markdown files in the specified =DIR= (or current directory).
#+findex: tlon-classify-note-at-point
+ ~tlon-classify-note-at-point~ :: Manually classify the note at point. Prompts the user to choose between "footnote" and "sidenote" and inserts the corresponding marker, optionally overwriting an existing one.

*** Miscellaneous Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-misc-commands
:END:
#+findex: tlon-offset-timestamps
+ ~tlon-offset-timestamps~ :: Increases all MM:SS timestamps (in the format =[MM:SS]=) within the current buffer by a specified =OFFSET= (also in MM:SS format).
#+findex: tlon-insert-special-character
+ ~tlon-insert-special-character~ :: Prompts the user (with completion based on ~tlon-md-special-characters~) to select a special character and inserts it at point.
#+findex: tlon-md-beginning-of-buffer-dwim
+ ~tlon-md-beginning-of-buffer-dwim~ :: Moves point to the beginning of the main content area, skipping the YAML front matter. Called twice, moves to the beginning of the buffer.
#+findex: tlon-md-end-of-buffer-dwim
+ ~tlon-md-end-of-buffer-dwim~ :: Moves point to the end of the main content area, stopping before the "Local Variables" block. Called twice, moves to the end of the buffer.
#+findex: tlon-md-menu
+ ~tlon-md-menu~ :: Activates a =transient= menu interface providing quick access to many of the commands in this module, grouped by category (YAML, TTS, Note markers, Citations, Quotes, Images, Link, Sub/Superscripts, Misc, Caps, Table).

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-internals
:END:

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization.

*** Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-constants
:END:
+ *Local Variables Delimiters*: ~tlon-md-local-variables-line-start~, ~tlon-md-local-variables-line-end~.
+ *Tag Sections*: ~tlon-md-canonical-tag-sections~ (defines standard section names like "Further reading" in different languages).
+ *Markdown Regexps*:
  + ~markdown-regex-italic~ (modified default), ~tlon-md-regexp-link-formatter~, ~tlon-md-image~, ~tlon-md-image-sans-alt~, ~tlon-md-blockquote~, ~tlon-md-math-power~, ~tlon-md-math-big-number~, ~tlon-md-footnote-start~, ~tlon-md-heading-template~, ~tlon-md-heading~, ~tlon-md-subheading~.
+ *SSML Constants*: ~tlon-md-ssml-emphasis-levels~, ~tlon-tts-ssml-default-emphasis-level~, ~tlon-md-ssml-phoneme-alphabets~, ~tlon-tts-ssml-phoneme-default-alphabet~, ~tlon-md-ssml-interpret-as-values~.
+ *Tag Specifications*: ~tlon-tag-specs~ (central alist defining properties for all supported HTML, MDX, and SSML tags: type, attributes, self-closing status, documentation, attribute readers/prompts, capture groups).

*** Tag Section Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-tag-section-internals
:END:
#+findex: tlon-md-get-tag-section
+ ~tlon-md-get-tag-section~ :: Translates a canonical section name (e.g., "Further reading") to its equivalent in a =TARGET-LANGUAGE= based on ~tlon-md-canonical-tag-sections~.

*** Link and Sorting Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-link-sort-internals
:END:
#+findex: tlon-md-get-title-in-link-target
+ ~tlon-md-get-title-in-link-target~ :: Retrieves the =title= metadata for the file specified in a Markdown link's =TARGET=.
#+findex: tlon-md-sort-elements-in-paragraph
+ ~tlon-md-sort-elements-in-paragraph~ :: Helper function to sort elements within the current paragraph separated by a given =SEPARATOR=. Used by ~tlon-md-sort-related-entries~.

*** Tag Handling Logic
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-tag-internals
:END:
This group contains the core logic for inserting, editing, formatting, and parsing the various tags (HTML, MDX, SSML).

#+findex: tlon-md-insert-or-edit-tag
+ ~tlon-md-insert-or-edit-tag~ :: Decides whether to insert a new tag or edit an existing one at point based on ~tlon-looking-at-tag-p~.
#+findex: tlon-looking-at-tag-p
+ ~tlon-looking-at-tag-p~ :: Checks if point is currently looking at a specific =TAG= using its regex pattern.
#+findex: tlon-md-edit-tag
+ ~tlon-md-edit-tag~ :: Edits the tag at point. Can optionally take pre-defined attribute =VALUES= and =CONTENT=. Uses ~tlon-get-tag-at-point~, ~tlon-md-get-tag-pattern~, ~tlon-get-tag-attribute-values~, and ~tlon-md-return-tag~.
#+findex: tlon-md-set-tag-attribute-value
+ ~tlon-md-set-tag-attribute-value~ :: Creates a new list of attribute values with the specified =ATTRIBUTE= set to =VALUE= for a given =TAG=.
#+findex: tlon-md-insert-attribute-value
+ ~tlon-md-insert-attribute-value~ :: Inserts or replaces a specific =ATTRIBUTE= =VALUE= in the tag at point by calling ~tlon-md-edit-tag~.
#+findex: tlon-md-return-tag
+ ~tlon-md-return-tag~ :: Core function to generate or insert a tag string. Takes the =TAG= name, optional attribute =VALUES=, optional =CONTENT=, and a =FORMAT= specifier (`get-match-string`, `get-placeholders`, `get-values`, `insert-values`, `insert-prompt`). Calls ~tlon-md-format-tag~ and ~tlon-md-act-on-returned-tag~.
#+findex: tlon-md-act-on-returned-tag
+ ~tlon-md-act-on-returned-tag~ :: Performs the final action based on the =FORMAT= specifier (insert string or return it).
#+findex: tlon-md-format-tag
+ ~tlon-md-format-tag~ :: Formats the opening and closing tags (or just the opening tag for self-closing ones) based on the =TAG= name, =VALUES=, and =FORMAT=. Calls ~tlon-md-format-tag-with-attributes~. Returns a cons cell =(OPEN . CLOSE)= or a list =(OPEN)=.
#+findex: tlon-md-get-tag-filled
+ ~tlon-md-get-tag-filled~ :: Returns a complete tag string with specified =VALUES= and =CONTENT=. Uses ~tlon-md-format-tag~ with `get-values` format.
#+findex: tlon-md-get-tag-to-fill
+ ~tlon-md-get-tag-to-fill~ :: Returns a tag string template with placeholders for content and attributes. Uses ~tlon-md-format-tag~ with `get-placeholders` format.
#+findex: tlon-get-tag-at-point
+ ~tlon-get-tag-at-point~ :: Identifies the name of the tag at point by checking against all tags defined in ~tlon-tag-specs~.
#+findex: tlon-get-tag-groups
+ ~tlon-get-tag-groups~ :: Returns a list of the regex capture group numbers for a =TAG='s attributes (or attribute values if =VALUES= is non-nil), based on ~tlon-tag-specs~.
#+findex: tlon-get-tag-attribute-names
+ ~tlon-get-tag-attribute-names~ :: Returns a list of attribute names for a =TAG= from ~tlon-tag-specs~.
#+findex: tlon-get-tag-attribute-values
+ ~tlon-get-tag-attribute-values~ :: Extracts the current values of all attributes for the =TAG= at point using regex match data and group numbers from ~tlon-tag-specs~.
#+findex: tlon-md-lookup-tag-attribute-property
+ ~tlon-md-lookup-tag-attribute-property~ :: Retrieves a specific =PROPERTY= (e.g., =:group=, =:required=) for a named =ATTRIBUTE= of a =TAG= from ~tlon-tag-specs~.
#+findex: tlon-md-format-tag-with-attributes
+ ~tlon-md-format-tag-with-attributes~ :: Formats the attribute part of a tag string based on the =TAG=, optional =VALUES=, and =FORMAT=. Iterates through attributes, calls ~tlon-md-format-attribute-with-placeholder~, and handles user input via attribute readers or prompts if =FORMAT= is `insert-prompt`.
#+findex: tlon-md-format-attribute-with-placeholder
+ ~tlon-md-format-attribute-with-placeholder~ :: Creates a format string for a single attribute (e.g., = name="%s"= or = name="\(?:%s\)"= if =CAPTURE= is t).
#+findex: tlon-make-attribute-pattern-searchable
+ ~tlon-make-attribute-pattern-searchable~ :: Converts an attribute format string into a searchable regex pattern, adding capture groups and making it optional if =REQUIRED= is nil.
#+findex: tlon-md-format-tag-with-attributes-from-user
+ ~tlon-md-format-tag-with-attributes-from-user~ :: Helper to call the attribute reader function (=FUN=) and ensure a value is provided if =REQUIRED-P= is non-nil.
#+findex: tlon-md-get-tag-pattern
+ ~tlon-md-get-tag-pattern~ :: Generates the complete regex pattern for matching a given =TAG=, including its attributes. Uses ~tlon-md-format-tag~ with `get-match-string` format.

*** Attribute Readers
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-attribute-readers
:END:
These functions are used by ~tlon-md-format-tag-with-attributes~ when prompting the user for specific attribute values.

#+findex: tlon-md-cite-bibkey-reader
+ ~tlon-md-cite-bibkey-reader~ :: Reads =bibKey= using =citar-select-refs=.
#+findex: tlon-md-cite-locator-reader
+ ~tlon-md-cite-locator-reader~ :: Reads =locator= using completion against ~tlon-locators~.
#+findex: tlon-md-cite-length-reader
+ ~tlon-md-cite-length-reader~ :: Reads citation length ("short" or "long") and returns the appropriate attribute string (" short" or "").
#+findex: tlon-md-emphasis-level-reader
+ ~tlon-md-emphasis-level-reader~ :: Reads =level= for =<emphasis>= using completion against ~tlon-md-ssml-emphasis-levels~.
#+findex: tlon-md-lang-reader
+ ~tlon-md-lang-reader~ :: Reads =xml:lang= using ~tlon-select-language~.
#+findex: tlon-md-math-display-reader
+ ~tlon-md-math-display-reader~ :: Reads display type ("inline" or "display") for =<Math>= and returns the attribute string (" inline" or " display").
#+findex: tlon-md-phoneme-alphabet-reader
+ ~tlon-md-phoneme-alphabet-reader~ :: Reads =alphabet= for =<phoneme>= using completion against ~tlon-md-ssml-phoneme-alphabets~.
#+findex: tlon-md-replace-audio-voice-reader
+ ~tlon-md-replace-audio-voice-reader~ :: Reads =role= for =<ReplaceAudio>= or =<VoiceRole>= using completion against a predefined list of roles.
#+findex: tlon-md-say-as-interpret-as-reader
+ ~tlon-md-say-as-interpret-as-reader~ :: Reads =interpret-as= for =<say-as>= using completion against ~tlon-md-ssml-interpret-as-values~.
#+findex: tlon-md-simple-table-include-reader
+ ~tlon-md-simple-table-include-reader~ :: Reads =include= scope for =<SimpleTable>= ("nothing", "everything", "body") and returns the formatted attribute string.

*** Note Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-note-internals
:END:
#+findex: tlon-insert-note-marker
+ ~tlon-insert-note-marker~ :: Helper function to insert a =MARKER= (=<Footnote />= or =<Sidenote />=) at the beginning of the footnote content at point, optionally overwriting the other marker type.
#+findex: tlon-md-get-note
+ ~tlon-md-get-note~ :: Returns the text content of footnote =N= (or the one at point). Optionally returns only the content after the marker if =CONTENT-ONLY= is non-nil. Uses ~tlon-md-get-note-bounds~.
#+findex: tlon-md-get-note-bounds
+ ~tlon-md-get-note-bounds~ :: Returns a cons cell =(START . END)= representing the boundaries of footnote =N= (or the one at point). Uses ~markdown-footnote-find-text~, ~tlon-md-get-note-beginning~, and ~tlon-md-get-note-end~.
#+findex: tlon-md-get-note-beginning
+ ~tlon-md-get-note-beginning~ :: Finds the starting position of the footnote definition (e.g., =[^N]:=) or the start of the content after the marker if =CONTENT-ONLY= is non-nil. Uses =markdown-footnote-text-positions= or regex search.
#+findex: tlon-md-get-note-end
+ ~tlon-md-get-note-end~ :: Finds the end position of the footnote at point by searching for the start of the next footnote definition.
#+findex: tlon-get-note-type
+ ~tlon-get-note-type~ :: Determines if a =NOTE= string (or the note at point) contains a =<Footnote>= or =<Sidenote>= tag and returns the corresponding symbol (`footnote` or `sidenote`).
#+findex: tlon-note-automatic-type
+ ~tlon-note-automatic-type~ :: Implements the automatic classification logic: returns `footnote` if the =NOTE= contains a =<Cite>= tag and has 4 or fewer words (excluding citations), otherwise returns `sidenote`.

*** Miscellaneous Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-md-misc-internals
:END:
#+findex: tlon-ensure-markdown-mode
+ ~tlon-ensure-markdown-mode~ :: Checks if the current buffer is in a mode derived from =markdown-mode= and signals an error if not.
#+findex: tlon-md-beginning-of-content
+ ~tlon-md-beginning-of-content~ :: Returns the position after the YAML front matter (using ~tlon-md-end-of-metadata~) or the beginning of the buffer.
#+findex: tlon-md-end-of-content
+ ~tlon-md-end-of-content~ :: Returns the position before the "Local Variables" block (using ~tlon-md-beginning-of-local-variables~) or the end of the buffer.
#+findex: tlon-md-beginning-of-local-variables
+ ~tlon-md-beginning-of-local-variables~ :: Finds the start position of the "Local Variables" block using ~tlon-get-delimited-region-pos~.
#+findex: tlon-md-end-of-metadata
+ ~tlon-md-end-of-metadata~ :: Finds the end position of the YAML front matter using ~tlon-get-delimited-region-pos~.
#+findex: tlon-md-get-local-variables
+ ~tlon-md-get-local-variables~ :: Returns the text content of the "Local Variables" block.
#+findex: tlon-md-get-metadata
+ ~tlon-md-get-metadata~ :: Returns the text content of the YAML front matter.
#+findex: tlon-md-read-content
+ ~tlon-md-read-content~ :: Reads the content of a =FILE= (or current buffer) excluding the front matter and local variables sections.

* DeepL Integration (=tlon-deepl.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl
:END:

This module provides functions for interacting with the DeepL API, enabling text translation and management of DeepL glossaries. It relies on an API key stored securely via =auth-source=.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-dependencies
:END:

+ =tlon-glossary=
+ =tlon-core=
+ =url=
+ =auth-source= (for API key retrieval)
+ =transient= (for the menu)
+ =ediff= (for ~tlon-deepl-diff~)

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-config
:END:

*** API Key and URL
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-api-config
:END:
#+vindex: tlon-deepl-key
+ ~tlon-deepl-key~ :: The DeepL API key, retrieved from =auth-source= using the entry =tlon/babel/deepl.com/[WORK_EMAIL]=.
#+vindex: tlon-deepl-url-prefix
+ ~tlon-deepl-url-prefix~ :: The base URL for all DeepL API v2 calls (=https://api.deepl.com/v2/=).

*** API Call Parameters
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-parameters
:END:
#+vindex: tlon-deepl-parameters
+ ~tlon-deepl-parameters~ :: An alist defining the specifics for each supported DeepL API call (translate, glossary creation, retrieval, deletion). Each entry maps an API call symbol (e.g., =translate=) to a list containing:
  1. HTTP Method ("GET", "POST", "DELETE")
  2. URL Suffix (string or function to generate the specific endpoint)
  3. Default Callback Function (symbol)
  4. Optional Encoding Function (symbol, for POST requests)

*** Supported Glossary Languages
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-supported-glossary-languages
:END:
#+vindex: tlon-deepl-supported-glossary-languages
+ ~tlon-deepl-supported-glossary-languages~ :: A list of language codes for which DeepL currently supports glossaries.

*** Internal State Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-state-vars
:END:
These variables store temporary state during API requests.
#+vindex: tlon-deepl-glossaries
+ ~tlon-deepl-glossaries~ :: A list holding the glossary data retrieved from the DeepL API via ~tlon-deepl-get-glossaries~. Initialized to nil and populated by the callback.
#+vindex: tlon-deepl-source-language
+ ~tlon-deepl-source-language~ :: Stores the source language code for the current translation request.
#+vindex: tlon-deepl-target-language
+ ~tlon-deepl-target-language~ :: Stores the target language code for the current translation or glossary creation request.
#+vindex: tlon-deepl-text
+ ~tlon-deepl-text~ :: Stores the text to be translated in the current request.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-commands
:END:

This section details the interactive commands provided by =tlon-deepl.el=.

*** Translation
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-translation-commands
:END:

#+findex: tlon-deepl-translate
+ ~tlon-deepl-translate~ :: Translates text using the DeepL API.
  1. Prompts for source language (defaulting to "en") using ~tlon-select-language~.
  2. Prompts for target language using ~tlon-select-language~ (excluding the source language).
  3. Prompts for the text to translate, defaulting to the active region or the word at point.
  4. Sets the internal state variables (~tlon-deepl-text~, ~tlon-deepl-source-language~, ~tlon-deepl-target-language~).
  5. Calls ~tlon-deepl-request-wrapper~ with the =translate= type.
  6. Uses a default callback that prints the translation and copies it to the kill ring (~tlon-deepl-print-translation 'copy~). Allows specifying a custom =CALLBACK=.
  7. Handles glossary lookup (~tlon-deepl-get-language-glossary~) and prompts for confirmation if no suitable glossary is found (unless =NO-GLOSSARY-OK= is non-nil).

#+findex: tlon-deepl-translate-abstract
+ ~tlon-deepl-translate-abstract~ :: Translates the =abstract= field of a BibTeX entry into all ~tlon-project-target-languages~.
  1. Determines the BibTeX =KEY= (from Ebib or BibTeX mode, or argument).
  2. Extracts the =abstract= text from the current buffer or BibTeX entry.
  3. Determines the =SOURCE-LANG= from the entry's =langid= field.
  4. If interactive or confirmed by the user, iterates through ~tlon-project-target-languages~:
     - Skips translation if target language is the same as source.
     - Calls ~tlon-deepl-translate~ with the abstract text, target language, source language, and a specific callback (~tlon-translate-abstract-callback~) to update the BibTeX entry directly. Passes =no-glossary-ok= to avoid prompts.

*** Glossaries
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-glossary-commands
:END:

#+findex: tlon-deepl-select-glossary
+ ~tlon-deepl-select-glossary~ :: Interactively selects a DeepL glossary from the locally cached list (~tlon-deepl-glossaries~). Uses ~completing-read~ with formatted glossary names (generated by ~tlon-deepl-get-list-of-glossaries~). Returns the selected glossary ID.

#+findex: tlon-deepl-get-glossaries
+ ~tlon-deepl-get-glossaries~ :: Retrieves the list of available glossaries from the DeepL API. Calls ~tlon-deepl-request-wrapper~ with the =glossary-get= type. The callback (~tlon-deepl-glossary-get-callback~) updates the ~tlon-deepl-glossaries~ variable. This command is also called automatically after glossary creation or deletion, and on module load.

#+findex: tlon-deepl-glossary-create
+ ~tlon-deepl-glossary-create~ :: Creates a new DeepL glossary for a specified language.
  1. Prompts for the target =LANGUAGE= using ~tlon-select-language~.
  2. Extracts the glossary data for that language into the appropriate format (TSV for DeepL API) using ~tlon-extract-glossary~.
  3. Sets the internal ~tlon-deepl-target-language~ variable.
  4. Calls ~tlon-deepl-request-wrapper~ with the =glossary-create= type. The callback (~tlon-deepl-glossary-create-callback~) refreshes the local glossary list and messages the API response.

#+findex: tlon-deepl-glossary-delete
+ ~tlon-deepl-glossary-delete~ :: Deletes a DeepL glossary.
  1. Calls ~tlon-deepl-request-wrapper~ with the =glossary-delete= type.
  2. The URL formatter (~tlon-deepl-glossary-delete-formatter~) prompts the user to select the glossary to delete using ~tlon-deepl-select-glossary~ and constructs the specific API endpoint URL.
  3. The callback (~tlon-deepl-glossary-delete-callback~) refreshes the local glossary list and messages confirmation.

*** Utility Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-utility-commands
:END:

#+findex: tlon-deepl-diff
+ ~tlon-deepl-diff~ :: Runs an =ediff= session to compare a local translation file with its corresponding DeepL-generated translation file. Prompts for the DeepL file path if not provided. Defaults to the current buffer's file for the local translation.

#+findex: tlon-deepl-fix-encoding-persistent
+ ~tlon-deepl-fix-encoding-persistent~ :: Attempts to fix common UTF-8 misinterpretation issues (where UTF-8 bytes are treated as ISO-8859-1) within the current buffer (must be BibTeX or JSON mode). Performs a series of search-and-replace operations based on a predefined list of common misinterpretations.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-menu
:END:
#+findex: tlon-deepl-menu
The command ~tlon-deepl-menu~ activates a =transient= menu interface for DeepL operations.

It provides the following groups and commands:
+ *Translate*:
  + =t= :: Translate text (~tlon-deepl-translate~)
  + =a= :: Translate abstract (~tlon-deepl-translate-abstract~)
+ *Glossaries*:
  + =l= :: List/Select glossary (~tlon-deepl-select-glossary~)
  + =g= :: Retrieve glossaries from API (~tlon-deepl-get-glossaries~)
  + =c= :: Create glossary (~tlon-deepl-glossary-create~)
  + =d= :: Delete glossary (~tlon-deepl-glossary-delete~)
+ *Other*:
  + =e= :: Ediff translations (~tlon-deepl-diff~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-internals
:END:

This section lists non-interactive functions and variables used internally or potentially useful for advanced customization.

*** API Request Handling
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-api-internals
:END:

#+findex: tlon-deepl-request-wrapper
+ ~tlon-deepl-request-wrapper~ :: The core function for making DeepL API calls. Takes the API call =TYPE=, an optional =CALLBACK= function, and an optional =NO-GLOSSARY-OK= flag.
  1. Retrieves parameters (method, URL suffix/function, default callback, encoding function) from ~tlon-deepl-parameters~ based on =TYPE=.
  2. Constructs the full API =URL=.
  3. If an encoding function exists, calls it to generate the JSON =PAYLOAD= (passing =NO-GLOSSARY-OK=). Writes the payload to a temporary file.
  4. Builds the =curl= command string including method, URL, headers (Content-Type, Authorization with ~tlon-deepl-key~), and payload data if applicable.
  5. Executes the =curl= command using =shell-command-to-string= to get the =RESPONSE=.
  6. Deletes the temporary payload file if created.
  7. Inserts the response into a temporary buffer, positions point at the start of the JSON/list, and calls the specified =CALLBACK= function.

*** Callbacks
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-callbacks
:END:

#+findex: tlon-deepl-print-translation
+ ~tlon-deepl-print-translation~ :: Default callback for translation requests. Parses the JSON response, extracts the translated text, decodes it as UTF-8, and either messages it or copies it to the kill ring if =COPY= is non-nil.

#+findex: tlon-deepl-glossary-create-callback
+ ~tlon-deepl-glossary-create-callback~ :: Callback for glossary creation. Resets ~tlon-deepl-target-language~, refreshes the local glossary list using ~tlon-deepl-get-glossaries~, and messages the API response.

#+findex: tlon-deepl-glossary-get-callback
+ ~tlon-deepl-glossary-get-callback~ :: Callback for glossary retrieval. Parses the JSON response and updates the ~tlon-deepl-glossaries~ variable. Messages confirmation.

#+findex: tlon-deepl-glossary-delete-callback
+ ~tlon-deepl-glossary-delete-callback~ :: Callback for glossary deletion. Refreshes the local glossary list using ~tlon-deepl-get-glossaries~ and messages confirmation.

*** Payload Encoders & Formatters
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-encoders
:END:

#+findex: tlon-deepl-translate-encode
+ ~tlon-deepl-translate-encode~ :: Generates the JSON payload for a translation request. Includes the text (as a vector), source language, target language, and the relevant glossary ID (retrieved via ~tlon-deepl-get-language-glossary~). Handles the =NO-GLOSSARY-OK= logic and potential user abortion if no glossary is found and confirmation is denied.

#+findex: tlon-deepl-glossary-create-encode
+ ~tlon-deepl-glossary-create-encode~ :: Generates the JSON payload for creating a glossary. Determines the glossary file path (~tlon-glossary-make-file~), reads its content (UTF-8 encoded TSV), and includes the glossary name, source language ("en"), target language, entries, and format ("tsv") in the JSON object.

#+findex: tlon-deepl-glossary-delete-formatter
+ ~tlon-deepl-glossary-delete-formatter~ :: Function used by ~tlon-deepl-request-wrapper~ to generate the specific URL for deleting a glossary. It calls ~tlon-deepl-select-glossary~ to get the ID and appends it to the base glossaries endpoint.

*** Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-deepl-helpers
:END:

#+findex: tlon-deepl-get-list-of-glossaries
+ ~tlon-deepl-get-list-of-glossaries~ :: Formats the data in ~tlon-deepl-glossaries~ into a list of strings suitable for display in ~completing-read~ (used by ~tlon-deepl-select-glossary~). Each string includes name, languages, entry count, and ID. Returns a cons cell =(DISPLAY-STRING . ID)=.

#+findex: tlon-deepl-get-language-glossary
+ ~tlon-deepl-get-language-glossary~ :: Finds the glossary ID for a specific target =LANGUAGE= from the cached ~tlon-deepl-glossaries~ list. Returns nil if the source language is not "en" (as current glossaries are EN -> X). Uses ~tlon-lookup~.

#+findex: tlon-deepl-fix-encoding
+ ~tlon-deepl-fix-encoding~ :: Corrects a specific encoding misinterpretation where a UTF-8 string is read as ISO-8859-1. Takes the misencoded =STRING=, re-encodes it as ISO-8859-1, and then decodes it correctly as UTF-8.

* Color Palette Management (=tlon-color.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-color
:END:

This module provides functions to manage color palettes for the Tlön frontend projects (specifically =uqbar-front=). It allows loading predefined palettes into CSS and JavaScript files, storing palettes derived from CSS, deleting palettes, and interactively manipulating color values (hue, saturation, lightness) within the CSS file.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-dependencies
:END:

+ =tlon-core=
+ =transient=
+ =color-extras= (external package, likely required for color manipulation and conversion)

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-options
:END:

#+vindex: tlon-color-format-in-frontend-files
+ ~tlon-color-format-in-frontend-files~ :: Specifies the preferred color format ("hex" or "hsl") to use when writing color values to the frontend CSS file (~globals.css~). Defaults to "hex". Note: The JavaScript file (~theme-colors.js~) currently always uses "hsl".

#+vindex: tlon-colors-change-step
+ ~tlon-colors-change-step~ :: The default step value (integer) used when increasing or decreasing hue, saturation, or lightness using the interactive commands. Defaults to 1.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-commands
:END:

This section details the interactive commands provided by =tlon-color.el=.

*** Open Global CSS File
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-open-globals-file
:END:
#+findex: tlon-color-open-globals-file
The command ~tlon-color-open-globals-file~ simply opens the main CSS file (~globals.css~) where color palettes are defined for the frontend.

*** Load Color Palette
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-load-palette
:END:
#+findex: tlon-color-load-palette
The command ~tlon-color-load-palette~ loads a specified, previously stored color =PALETTE= into the frontend files.

1. Prompts the user to select a =PALETTE= name from the list stored in ~tlon-color-palettes~.
2. Optionally takes a =LANGUAGE= argument (`css` or `js`). If nil, it loads the palette into both the CSS and JS files.
3. For each specified language:
   - Removes the existing color sections using ~tlon-color-remove-colors-section~.
   - Inserts the new color sections for the selected =PALETTE= using ~tlon-color-insert-colors-section~.

*** Save Frontend Files
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-save-frontend-files
:END:
#+findex: tlon-color-save-frontend-files
The command ~tlon-color-save-frontend-files~ is a convenience command designed to synchronize color changes made in the CSS file with the JavaScript file.

1. Saves the current state of the ~globals.css~ buffer.
2. Parses the current colors in ~globals.css~ and temporarily stores them under the name "temp-palette" using ~tlon-color-store-palette~ (overwriting if it exists).
3. Loads this "temp-palette" into the ~theme-colors.js~ file using ~tlon-color-load-palette~ with the `js` language argument.

*** Store Color Palette
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-store-palette
:END:
#+findex: tlon-color-store-palette
The command ~tlon-color-store-palette~ parses the current color definitions in ~globals.css~ and saves them as a named palette in the ~tlon-color-palettes~ variable and persists them to ~tlon-color-palette-file~.

1. Prompts the user for a =PALETTE-NAME=.
2. Parses the CSS file using ~tlon-color-parse-css~ to extract light and dark theme colors.
3. Checks if a palette with the given name already exists.
4. If it exists, asks for confirmation to overwrite (unless the optional =OVERWRITE= argument is non-nil). Updates the existing entry.
5. If it doesn't exist, adds the new palette to ~tlon-color-palettes~.
6. Saves the updated ~tlon-color-palettes~ list to ~tlon-color-palette-file~ using ~tlon-color-save-palettes-to-file~.
7. Messages the user about the success (added or updated).

*** Delete Color Palette
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-delete-palette
:END:
#+findex: tlon-color-delete-palette
The command ~tlon-color-delete-palette~ removes a stored color palette.

1. Prompts the user to select a =PALETTE= name from the existing palettes in ~tlon-color-palettes~.
2. Removes all entries matching the selected name from the ~tlon-color-palettes~ list.
3. Saves the updated list back to ~tlon-color-palette-file~ using ~tlon-color-save-palettes-to-file~.
4. Messages the user about the successful removal.

*** Color Manipulation Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-manipulation-commands
:END:
These commands allow interactive modification of color values (HSL) directly within the ~globals.css~ file. They operate on the color string at point, replace it with the modified value, and then call ~tlon-color-save-frontend-files~ to synchronize the change with the JS file. They rely on functions from the =color-extras= package.

+ *Hue*:
  #+findex: tlon-color-increase-hue-at-point
  + ~tlon-color-increase-hue-at-point~ :: Increases hue by ~tlon-colors-change-step~.
  #+findex: tlon-color-decrease-hue-at-point
  + ~tlon-color-decrease-hue-at-point~ :: Decreases hue by ~tlon-colors-change-step~.
  #+findex: tlon-color-change-hue-at-point
  + ~tlon-color-change-hue-at-point~ :: Prompts for a change amount (e.g., "+5", "-10") and applies it to the hue.
+ *Saturation*:
  #+findex: tlon-color-increase-saturation-at-point
  + ~tlon-color-increase-saturation-at-point~ :: Increases saturation by ~tlon-colors-change-step~.
  #+findex: tlon-color-decrease-saturation-at-point
  + ~tlon-color-decrease-saturation-at-point~ :: Decreases saturation by ~tlon-colors-change-step~.
  #+findex: tlon-color-change-saturation-at-point
  + ~tlon-color-change-saturation-at-point~ :: Prompts for a change amount and applies it to the saturation.
+ *Lightness*:
  #+findex: tlon-color-increase-lightness-at-point
  + ~tlon-color-increase-lightness-at-point~ :: Increases lightness by ~tlon-colors-change-step~.
  #+findex: tlon-color-decrease-lightness-at-point
  + ~tlon-color-decrease-lightness-at-point~ :: Decreases lightness by ~tlon-colors-change-step~.
  #+findex: tlon-color-change-lightness-at-point
  + ~tlon-color-change-lightness-at-point~ :: Prompts for a change amount and applies it to the lightness.

*** Color Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-menu
:END:
#+findex: tlon-color-menu
The command ~tlon-color-menu~ activates a =transient= menu interface providing access to most of the color management and manipulation commands.

It includes sections for:
+ *Change colors*: Access to the hue, saturation, and lightness increase/decrease/change commands. Includes an option to set the change step.
+ *Palette*: Access to load, store, and delete palettes. Includes commands to open the CSS file, save frontend files, and invoke color conversion/contrast functions from =color-extras=. Includes an option to set the frontend format preference.

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-internals
:END:

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization.

*** Constants and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-constants-vars
:END:

#+vindex: tlon-color-palettes
+ ~tlon-color-palettes~ :: The central variable holding the list of defined color palettes. It's an alist where the key is the palette name (string) and the value is another alist representing the colors. Each color entry is =(CSS-VARIABLE . (LIGHT-VALUE . DARK-VALUE))=. Loaded from and saved to ~tlon-color-palette-file~.
#+vindex: tlon-color-palette-file
+ ~tlon-color-palette-file~ :: Path to the Elisp file where ~tlon-color-palettes~ is persisted.
#+vindex: tlon-color-globals-css-file
+ ~tlon-color-globals-css-file~ :: Path to the main CSS file in the =uqbar-front= repository.
#+vindex: tlon-color-theme-colors-js-file
+ ~tlon-color-theme-colors-js-file~ :: Path to the JavaScript theme colors file in the =uqbar-front= repository.
#+vindex: tlon-color-globals-css-header
+ ~tlon-color-globals-css-header~ :: Format string for the start of a theme section in CSS.
#+vindex: tlon-color-globals-css-footer
+ ~tlon-color-globals-css-footer~ :: String marking the end of a theme section in CSS.
#+vindex: tlon-color-globals-css-remove-pattern
+ ~tlon-color-globals-css-remove-pattern~ :: Regex pattern used to remove entire theme sections from the CSS file.
#+vindex: tlon-color-theme-colors-js-header
+ ~tlon-color-theme-colors-js-header~ :: Format string for the start of a theme section in JS.
#+vindex: tlon-color-theme-colors-js-footer
+ ~tlon-color-theme-colors-js-footer~ :: String marking the end of a theme section in JS.

*** Helper Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-helpers
:END:

#+findex: tlon-color-read-palette
+ ~tlon-color-read-palette~ :: Prompts the user to select an existing palette name using completion based on ~tlon-color-palettes~. Returns the selected name as a list (for interactive use).
#+findex: tlon-color-load-palettes
+ ~tlon-color-load-palettes~ :: Loads the palettes from ~tlon-color-palette-file~ into the ~tlon-color-palettes~ variable if the file exists. Called automatically when =tlon-color.el= is loaded.
#+findex: tlon-color-save-palettes-to-file
+ ~tlon-color-save-palettes-to-file~ :: Saves the current value of ~tlon-color-palettes~ to ~tlon-color-palette-file~ in Elisp format.
#+findex: tlon-color-remove-colors-section
+ ~tlon-color-remove-colors-section~ :: Removes the color definition sections from the specified =LANGUAGE= file (CSS or JS) using the appropriate patterns.
#+findex: tlon-color-insert-colors-section
+ ~tlon-color-insert-colors-section~ :: Inserts the color definitions for a given =PALETTE= into the specified =LANGUAGE= file. It encodes the palette using ~tlon-color-encode~, inserts the result, converts colors to the desired format using =color-extras-convert-all= (respecting ~tlon-color-format-in-frontend-files~ for CSS, forcing HSL for JS), and saves the buffer.
#+findex: tlon-color-encode
+ ~tlon-color-encode~ :: Top-level function to encode a =PALETTE= for a specific =LANGUAGE=. Calls the appropriate CSS or JS encoding function for both light and dark themes and concatenates the results.
#+findex: tlon-color-encode-globals-css
+ ~tlon-color-encode-globals-css~ :: Generates the CSS string for a specific =THEME= (light/dark) of a =PALETTE=. Uses ~tlon-color-encode-frontend-variables~.
#+findex: tlon-color-encode-theme-colors-js
+ ~tlon-color-encode-theme-colors-js~ :: Generates the JS string for a specific =THEME= (light/dark) of a =PALETTE=. Uses ~tlon-color-encode-frontend-variables~.
#+findex: tlon-color-encode-frontend-variables
+ ~tlon-color-encode-frontend-variables~ :: Iterates through the color definitions in a =PALETTE=, extracts the correct value for the given =THEME=, and formats it as a CSS variable declaration or a JS key-value pair based on the =LANGUAGE=.
#+findex: tlon-color-parse-css
+ ~tlon-color-parse-css~ :: Parses the ~globals.css~ file to extract the current color definitions for both light and dark themes. Calls ~tlon-color-parse-css-theme~ for each theme and combines the results into the standard palette alist format.
#+findex: tlon-color-parse-css-theme
+ ~tlon-color-parse-css-theme~ :: Parses a specific =THEME= section within the =CSS-BUFFER=. It temporarily converts all colors in the buffer to hex format using =color-extras-convert-all=, finds the theme section, extracts all CSS variable definitions (=--variable: #value;=), and returns them as an alist.
#+findex: tlon-color-change-value-at-point
+ ~tlon-color-change-value-at-point~ :: Core function for interactive color manipulation. Takes the =COMPONENT= ("h", "s", or "l"), =DIRECTION= ("+" or "-"), and optional =STEP=. Finds the color at point, calls the appropriate =ct-edit-hsluv-*= function from =color-extras=, inserts the result, and calls ~tlon-color-save-frontend-files~.

*** Transient Infix Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-color-transient-infixes
:END:
These functions define the behavior of the options within the ~tlon-color-menu~.

#+findex: tlon-color-format-in-frontend-files-infix
+ ~tlon-color-format-in-frontend-files-infix~ :: Reads the desired format ("hex" or "hsl") from the user to set the local value of ~tlon-color-format-in-frontend-files~ for the current menu invocation.
#+findex: tlon-color-change-step-infix
+ ~tlon-color-change-step-infix~ :: Reads a number from the user to set the local value of ~tlon-colors-change-step~ for the current menu invocation.

* Indices
:PROPERTIES:
:CUSTOM_ID: h:indices
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:fn-index
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:vr-index
:END:

** Concept index
:PROPERTIES:
:INDEX: cp
:CUSTOM_ID: h:cp-index
:END:

* local variables                                                  :noexport:
(Note that the local variables below will still be exported to the ~info~ file, unfortunately. It looks like they are not considered part of this heading.)

# Local Variables:
# eval: (add-hook 'before-save-hook 'org-texinfo-export-to-info nil t)
# End:
