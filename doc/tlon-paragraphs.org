#+title: tlon - Paragraph Functionality
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying
* Paragraph Functionality (=tlon-paragraphs.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-paragraph
:END:

This module provides paragraph-related functionality, such as aligning the number of paragraphs between a file and its counterpart using an AI agent.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-paragraph-dependencies
:END:

+ =tlon-ai=
+ =tlon-counterpart=
+ =transient=

** User options
:PROPERTIES:
:CUSTOM_ID: h:tlon-paragraphs-options
:END:

#+vindex: tlon-paragraphs-align-with-ai-model
+ =tlon-paragraphs-align-with-ai-model= :: Specifies the model to use for aligning paragraphs. The value is a cons cell where the CAR is the backend (e.g., "ChatGPT") and the CDR is the model name (e.g., =gpt-4.5-preview=). If =nil=, the default model is used.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-paragraphs-commands
:END:

This section details the interactive commands provided by =tlon-paragraph.el=.

*** AI-Powered Paragraph Alignment
:PROPERTIES:
:CUSTOM_ID: h:tlon-paragraph-ai-commands
:END:

#+findex: tlon-paragraphs-align-with-ai
+ ~tlon-paragraphs-align-with-ai~ :: (Autoloaded) Checks for paragraph count mismatch between a file and its counterpart and uses an AI agent to fix it. It prompts for a file, finds its counterpart, and compares the number of paragraphs. If they differ, it provides the AI agent with a paragraph-by-paragraph comparison and instructs it to edit the translation file to match the paragraph count of the original. The AI is equipped with the =edit_file= tool to apply changes directly. If the paragraph counts match, it simply reports this to the user.

*** Counting Paragraphs  
#+findex: tlon-count-paragraphs
+ ~tlon-count-paragraphs~ :: Interactively counts paragraphs in the active region. If no region is active, it prompts for a file and counts the paragraphs in it. Programmatically, it can also count between specified =START= and =END= positions. Uses ~tlon-get-number-of-paragraphs~.

*** Going to a Paragraph
:PROPERTIES:
:CUSTOM_ID: h:tlon-goto-paragraph
:END:
#+findex: tlon-goto-paragraph
+ ~tlon-goto-paragraph~ :: Prompts for a paragraph number (defaulting to the
  current one) and moves point to the beginning of that paragraph. Paragraphs
  are counted within the main content area only.

*** Displaying Corresponding Paragraphs  
#+findex: tlon-display-corresponding-paragraphs
+ ~tlon-display-corresponding-paragraphs~ :: Displays pairs of corresponding paragraphs from a file and its counterpart in a dedicated buffer ("/Paragraph Pairs/").
  1. Takes =PAIRS-OR-FN= as input. If it's a function (interactively defaults to ~tlon-get-corresponding-paragraphs~), calls it to get the pairs. Otherwise, assumes it's already a list of pairs.
  2. Creates or clears the "/Paragraph Pairs/" buffer.
  3. Iterates through the pairs, inserting "Original:\n[paragraph]\n\nTranslation:\n[paragraph]\n\n----\n\n". Handles missing paragraphs gracefully.
  4. Displays the buffer. Catches =user-error= (like paragraph mismatch from ~tlon-get-corresponding-paragraphs~) and still displays the buffer containing the comparison up to the point of error.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-paragraph-menu-cmd
:END:
#+findex: tlon-paragraphs-menu
The command ~tlon-paragraphs-menu~ (Autoloaded) activates a =transient= menu interface for paragraph-related operations.

It provides the following groups and commands:
+ *Commands*:
  + =a= :: Align paragraphs (~tlon-paragraphs-align-with-ai~)
  + =c= :: Count paragraphs (~tlon-count-paragraphs~)
  + =g= :: Go to paragraph (~tlon-goto-paragraph~)
  + =d= :: Display corresponding paragraphs (~tlon-display-corresponding-paragraphs~)
+ *Options*:
  + =t= :: Toggle paragraphs in mode line (~tlon-paragraphs-mode-line-mode~)
  + =m= :: Select the AI model for aligning paragraphs.

** Mode line indicator
:PROPERTIES:
:CUSTOM_ID: h:tlon-paragraphs-mode-line
:END:

#+findex: tlon-paragraphs-mode-line-mode
#+vindex: tlon-paragraphs-mode-line-format
- ~tlon-paragraphs-mode-line-mode~ :: Minor mode that shows “¶ N/M” in the mode
  line for the current buffer, where N is the paragraph at point and M is the
  total number of paragraphs in the main content. The count excludes YAML front
  matter and the local variables section. The indicator is hidden when point is
  outside the main content. Toggle with ~M-x tlon-paragraphs-mode-line-mode~,
  or enable automatically, e.g., by adding it to ~markdown-mode-hook~.
- ~tlon-paragraphs-mode-line-format~ :: Format string for the indicator. It
  receives two integers: the current paragraph and the total.

If you use =doom-modeline=, enabling ~tlon-paragraphs-mode-line-mode~ will
automatically add a custom segment with the indicator and switch the current
buffer to a modeline layout that includes it. No extra setup is required.
Disabling the mode restores the default =doom-modeline= layout for the buffer.

*** Lazy doom-modeline integration
To include the =tlon-paragraph= segment in your modeline without loading
=tlon-paragraphs= at startup, define a lightweight shim in your config:

#+begin_src emacs-lisp
(with-eval-after-load 'doom-modeline
  (unless (fboundp 'doom-modeline-segment-tlon-paragraph)
    (doom-modeline-def-segment tlon-paragraph
      (when (and (featurep 'tlon-paragraphs)
                 (bound-and-true-p tlon-paragraphs-mode-line-mode)
                 (fboundp 'tlon-paragraphs-mode-line-string))
        (tlon-paragraphs-mode-line-string))))))
#+end_src

Then you can safely add =tlon-paragraph= to your =doom-modeline-def-modeline=
spec. The segment will remain empty until =tlon-paragraphs= is loaded and the
minor mode is enabled.
