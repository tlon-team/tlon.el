#+title: tlon - Text-to-Speech
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying
* Text-to-Speech (=tlon-tts.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts
:END:

This module provides comprehensive text-to-speech (TTS) functionality, integrating with multiple cloud-based TTS engines (Microsoft Azure, Google Cloud, Amazon Polly, OpenAI, ElevenLabs). It handles text preparation (including SSML generation and listener cues), API requests, audio chunking and merging, and file management.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-dependencies
:END:

+ =tlon-core=
+ =tlon-md=
+ =eieio=
+ =transient=
+ =flycheck= (optional, for staging buffer)
+ =markdown-mode= (optional, for staging buffer)
+ =json-mode= (optional, for ElevenLabs voice listing)
+ External tools: =ffmpeg= (for audio conversion/joining), =curl= (for API requests), =aws= CLI (for Polly), =gcloud= CLI (for Google Cloud token), =jq= (for Google Cloud response parsing).

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-options
:END:

*** General TTS Settings
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-general-options
:END:

#+vindex: tlon-tts-global-engine
+ ~tlon-tts-global-engine~ :: Specifies the default TTS engine to use (e.g., "Microsoft Azure", "Google Cloud", "Amazon Polly", "OpenAI", "ElevenLabs").

#+vindex: tlon-tts-use-alternate-voice
+ ~tlon-tts-use-alternate-voice~ :: Boolean. If non-nil, uses a designated alternate voice (per engine configuration) for reading elements like notes, asides, blockquotes, etc., marked with listener cues.

#+vindex: tlon-tts-delete-file-chunks
+ ~tlon-tts-delete-file-chunks~ :: Boolean. If non-nil, automatically deletes the individual audio chunk files after they have been successfully merged into the final output file. This option is primarily used by the finalization process after narrating a full buffer. The command `tlon-tts-move-file-to-audio-server` will prompt separately whether to delete chunks.

#+vindex: tlon-tts-paragraph-break-duration
+ ~tlon-tts-paragraph-break-duration~ :: String specifying the duration of the pause (SSML =<break time="...">=) inserted after each paragraph (e.g., "0.8s").

#+vindex: tlon-tts-listener-cue-break-duration
+ ~tlon-tts-listener-cue-break-duration~ :: String specifying the duration of the pause inserted before and after listener cues (e.g., "0.5s").

#+vindex: tlon-tts-narrate-sidenotes
+ ~tlon-tts-narrate-sidenotes~ :: Boolean. If non-nil, the content of sidenotes will be read aloud. If nil (the default), sidenotes are removed like footnotes.

#+vindex: tlon-tts-generate-missing-chunks-only
+ ~tlon-tts-generate-missing-chunks-only~ :: Boolean. If non-nil (the default), `tlon-tts-narrate-staged-buffer` will only generate audio for chunks whose corresponding audio file does not already exist. This allows resuming an interrupted process. If nil, all chunks implicated by the full buffer narration will be regenerated. This option does *not* affect `tlon-tts-narrate-staged-chunks`, which always attempts to generate the chunks explicitly selected by the user.
#+vindex: tlon-tts-normalize-audio
+ ~tlon-tts-normalize-audio~ :: Boolean. If non-nil, audio chunks will be normalized using an =ffmpeg= loudness filter before being joined during the final processing stage. If nil (the default), this normalization step is skipped.

*** Engine-Specific Settings
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-engine-options
:END:
Each supported TTS engine has specific configuration options:

+ *Audio Settings*: Variables like ~tlon-microsoft-azure-audio-settings~, ~tlon-google-cloud-audio-settings~, ~tlon-amazon-polly-audio-settings~, ~tlon-openai-audio-settings~, ~tlon-elevenlabs-audio-settings~ define the default audio output format (e.g., MP3 bitrate, PCM sample rate) and the corresponding file extension for each engine. These are cons cells =("FORMAT_NAME" . "extension")=.
+ *Model Selection* (where applicable):
  #+vindex: tlon-openai-model
  + ~tlon-openai-model~ :: Specifies the OpenAI TTS model to use (e.g., "gpt-4o-mini-tts", "tts-1", "tts-1-hd").
  #+vindex: tlon-elevenlabs-model
  + ~tlon-elevenlabs-model~ :: Specifies the ElevenLabs model (e.g., "eleven_multilingual_v2", "eleven_turbo_v2_5"). Voice-specific parameters like =stability=, =similarity_boost=, =style=, =use_speaker_boost=, and =speed= defined in ~tlon-elevenlabs-voices~ are automatically included in the API request.
+ *Region* (Amazon Polly):
  #+vindex: tlon-amazon-polly-region
  + ~tlon-amazon-polly-region~ :: Specifies the AWS region for Amazon Polly requests (e.g., "us-east-1").

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-commands
:END:

This section details the interactive commands provided by =tlon-tts.el=.

*** Core Workflow
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-core-workflow-cmds
:END:

#+findex: tlon-tts-stage-content
+ ~tlon-tts-stage-content~ :: (Autoloaded) Prepares content for narration. Reads the content (from region, specified file, or current buffer), creates a dedicated staging buffer (e.g., =*TTS: filename*=), copies the content, sets up necessary file-local variables (source, language, engine, voice, etc.), runs the preparation pipeline (~tlon-tts-prepare-staging-buffer~), and attempts to place the cursor in the staging buffer at the paragraph corresponding to the cursor's position in the original buffer.

#+findex: tlon-tts-narrate-staged-buffer
+ ~tlon-tts-narrate-staged-buffer~ :: (Autoloaded) Narrates the content currently prepared in the staging buffer.
  1. Ensures the current buffer is a staging buffer.
  2. Breaks the prepared text into chunks based on engine character limits and voice changes (~tlon-tts-calculate-chunks~). This populates the internal `tlon-tts-chunks` list.
  3. Inserts `<!-- Chunk N -->` comments into the staging buffer based on the prepared chunks (~tlon-tts-insert-chunk-comments~).
  4. Iterates through the chunks, calling the appropriate engine's request function (~tlon-tts-generate-audio~) for each chunk, saving the audio to files named by chunk number (e.g., =filename-chunk-001.mp3=).
  5. Monitors the asynchronous audio generation processes.
  6. Once all chunks are generated:
     - Appends silence to chunks if needed (e.g., for ElevenLabs).
     - Optionally normalizes (if ~tlon-tts-normalize-audio~ is non-nil) and then joins the audio chunks into a single output file.
     - Optionally deletes the chunk files (~tlon-tts-delete-chunks-of-file~).
     - Opens the directory containing the final audio file in Dired.
     - Opens the final audio file using the system's default player.

#+findex: tlon-tts-narrate-staged-chunks
+ ~tlon-tts-narrate-staged-chunks~ :: Asynchronously generates audio for specific chunk(s) in the TTS staging buffer. If a region is active, it generates audio for all chunks starting within that region. Otherwise, it generates audio for the chunk at the current cursor position. This command *always attempts* to generate the selected chunks, overwriting existing audio files if necessary. It identifies chunks by reading the number =N= from the =<!-- Chunk N -->= comment. *Important:* This command only generates the individual chunk audio files; it does *not* perform the final silence appending, normalization, or joining steps. Use ~tlon-tts-finalize-audio-processing~ for that.

*** Audio File Management
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-audio-mgmt-cmds
:END:

#+findex: tlon-tts-finalize-audio-processing
+ ~tlon-tts-finalize-audio-processing~ :: (Autoloaded) Manually triggers the final audio processing steps for a given base audio file. This includes appending silence (if applicable for the engine), optionally normalizing chunk audio files (if ~tlon-tts-normalize-audio~ is non-nil), and joining them into the final output file (e.g., =filename.mp3=). It also handles deleting original chunk files if ~tlon-tts-delete-file-chunks~ is set, and opens Dired and the final audio file. This command is useful after selectively regenerating chunks with ~tlon-tts-narrate-staged-chunks~.

#+findex: tlon-tts-delete-chunks-of-file
+ ~tlon-tts-delete-chunks-of-file~ :: Deletes all audio chunk files associated with a base filename (e.g., =file-chunk-*.mp3=). Also kills the corresponding staging buffer if it exists. Operates on the file at point in Dired or prompts for a file.

#+findex: tlon-tts-truncate-audio-file
+ ~tlon-tts-truncate-audio-file~ :: Removes a specified number of milliseconds from the *end* of an audio file using =mp3splt=. Prompts for the file and the duration to remove.

#+findex: tlon-tts-move-file-to-audio-server
+ ~tlon-tts-move-file-to-audio-server~ :: (Autoloaded) Moves a generated audio file to the designated audio repository directory, under a path like =uqbar-audio/lang/bare-dir/filename.ext=. The language and `bare-dir` (e.g., "articulos", "temas") are inferred from the source audio file's path. It then prompts the user whether to stage, commit (with a message like "Add lang/bare-dir/filename.ext"), and push the change. If audio chunks for the moved file exist, it will also prompt whether to delete them. Prompts for the file to move.

#+findex: tlon-tts-open-audio-directory
+ ~tlon-tts-open-audio-directory~ :: (Autoloaded) Opens the audio repository directory for the current language (or prompts for one) in Dired.

*** Reporting and Data Editing
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-report-edit-cmds
:END:

#+findex: tlon-tts-generate-report
+ ~tlon-tts-generate-report~ :: Generates a report buffer ("*TTS Report*") highlighting potential issues in the *current staging buffer* that might affect TTS quality. It checks for:
  - Missing acronym definitions (acronyms present in the staging buffer but not defined globally or locally).
  - Potential chemical symbols.
  - Unprocessed emphasis markers.
  - Unprocessed en dashes.
  - Numbers lacking thousands separators.

#+findex: tlon-tts-edit-global-abbreviations
+ ~tlon-tts-edit-global-abbreviations~ :: (Autoloaded) Interactively edits the global abbreviations list stored in =tlon-file-global-abbreviations=.

#+findex: tlon-tts-edit-global-phonetic-replacements
+ ~tlon-tts-edit-global-phonetic-replacements~ :: (Autoloaded) Interactively edits the global phonetic replacements list stored in =tlon-file-global-phonetic-replacements=.

#+findex: tlon-tts-edit-global-phonetic-transcriptions
+ ~tlon-tts-edit-global-phonetic-transcriptions~ :: (Autoloaded) Interactively edits the global phonetic transcriptions list stored in =tlon-file-global-phonetic-transcriptions=.

#+findex: tlon-add-local-abbreviation
+ ~tlon-add-local-abbreviation~ :: (Autoloaded) Adds a file-local abbreviation to the =tlon-local-abbreviations= variable in the current buffer's local variables section.

#+findex: tlon-add-local-replacement
+ ~tlon-add-local-replacement~ :: (Autoloaded) Adds a file-local phonetic replacement to the =tlon-local-replacements= variable in the current buffer's local variables section.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-menu-cmd
:END:
#+findex: tlon-tts-menu
The command ~tlon-tts-menu~ (Autoloaded) activates a =transient= menu interface for TTS operations.

It provides the following groups and commands:
+ *Narration*:
  + =s= :: Stage content (~tlon-tts-stage-content~)
  + =b= :: Narrate buffer (~tlon-tts-narrate-staged-buffer~)
  + =c= :: Narrate chunks (~tlon-tts-narrate-staged-chunks~)
  + =e= :: Generate report (~tlon-tts-generate-report~)
  + *Narration options*: (These set the corresponding user options temporarily for the menu session)
    + =-b= :: Paragraph break duration (~tlon-tts-paragraph-break-duration-infix~)
    + =-p= :: Prompt (Currently unused) (~tlon-tts-menu-infix-set-prompt~)
    + =-s= :: Narrate sidenotes (~tlon-tts-menu-infix-toggle-narrate-sidenotes~)
    + =-v= :: Use alternate voice (~tlon-tts-menu-infix-toggle-alternate-voice~)
    + ""
    + =-e= :: Engine (~tlon-tts-menu-infix-set-engine~)
    + =-t= :: Engine settings (~tlon-tts-menu-infix-set-engine-settings~)
    + ""
    + =-D= :: Debug mode (~tlon-menu-infix-toggle-debug~)
+ *File processing*:
  + =F= :: Finalize audio processing (~tlon-tts-finalize-audio-processing~)
  + =d= :: Delete file chunks (~tlon-tts-delete-chunks-of-file~)
  + =x= :: Truncate audio file (~tlon-tts-truncate-audio-file~)
  + *Audio repo*:
    + =o= :: Open audio directory (~tlon-tts-open-audio-directory~)
    + =m= :: Move file to audio server (~tlon-tts-move-file-to-audio-server~)
  + *File processing options*:
    + =-m= :: Generate missing chunks only (for narrate buffer) (~tlon-tts-menu-infix-toggle-generate-missing-chunks-only~)
    + =-n= :: Normalize audio during finalization (~tlon-tts-menu-infix-toggle-normalize-audio~)
    + =-d= :: Delete chunks after finalizing (~tlon-tts-menu-infix-toggle-delete-file-chunks-after-finalizing~)
+ *Edit*:
  + *global*:
    + =a= :: Abbreviation (~tlon-tts-edit-global-abbreviations~)
    + =r= :: Replacement (~tlon-tts-edit-global-phonetic-replacements~)
    + =t= :: Transcription (~tlon-tts-edit-global-phonetic-transcriptions~)
  + *local*:
    + =A= :: Abbreviation (~tlon-add-local-abbreviation~)
    + =R= :: Replacement (~tlon-add-local-replacement~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-internals
:END:

This section lists key non-interactive functions, variables, and constants used internally.

*** Configuration and Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-config-internals
:END:
#+vindex: tlon-tts-engines
+ ~tlon-tts-engines~ :: Central alist defining properties for each supported TTS engine (name, voice variable, audio settings variable, request function, character limit, internal property key).
#+vindex: tlon-microsoft-azure-voices
#+vindex: tlon-google-cloud-voices
#+vindex: tlon-amazon-polly-voices
#+vindex: tlon-openai-voices
#+vindex: tlon-elevenlabs-voices
+ Voice Lists (e.g., ~tlon-microsoft-azure-voices~) :: Alists defining preferred voices for each engine, including ID, language, gender, and optional role (main/alternate).
#+vindex: tlon-microsoft-azure-audio-choices
#+vindex: tlon-google-cloud-audio-choices
#+vindex: tlon-amazon-polly-audio-choices
#+vindex: tlon-openai-audio-choices
#+vindex: tlon-elevenlabs-audio-choices
+ Audio Choices (e.g., ~tlon-microsoft-azure-audio-choices~) :: Alists defining available audio formats and extensions for each engine, used for completion in the transient menu.
#+vindex: tlon-microsoft-azure-request
#+vindex: tlon-google-cloud-request
#+vindex: tlon-amazon-polly-request
#+vindex: tlon-openai-tts-request
#+vindex: tlon-elevenlabs-tts-url
+ Request Formats (e.g., ~tlon-microsoft-azure-request~) :: Format strings for the =curl= or =aws= commands used to make API requests for each engine.
#+vindex: tlon-microsoft-azure-char-limit
#+vindex: tlon-google-cloud-char-limit
#+vindex: tlon-amazon-polly-char-limit
#+vindex: tlon-openai-char-limit
#+vindex: tlon-elevenlabs-char-limit
+ Character Limits (e.g., ~tlon-microsoft-azure-char-limit~) :: Maximum number of characters allowed per request for each engine. Used for chunking.
#+vindex: tlon-microsoft-azure-key
#+vindex: tlon-google-cloud-key
#+vindex: tlon-openai-key
#+vindex: tlon-elevenlabs-key
+ API Keys (e.g., ~tlon-microsoft-azure-key~) :: Variables holding the API keys for each service, typically retrieved from =auth-source=.
#+vindex: tlon-tts-supported-tags
+ ~tlon-tts-supported-tags~ :: Alist defining SSML tags, their support status across engines, and how to handle them if unsupported (remove, chunkify).
#+vindex: tlon-tts-listener-cues
+ ~tlon-tts-listener-cues~ :: Alist defining the start and end cue text for different content types (aside, blockquote, etc.) in various languages.
#+vindex: tlon-tts-listener-cue-patterns
+ ~tlon-tts-listener-cue-patterns~ :: Alist mapping content types to the regex patterns used to identify them in the text.

*** Staging Buffer and Preparation
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-staging-internals
:END:
#+findex: tlon-tts-get-staging-buffer-name
+ ~tlon-tts-get-staging-buffer-name~ :: Generates the name for the staging buffer based on the source filename.
#+findex: tlon-tts-set-file-local-vars
+ ~tlon-tts-set-file-local-vars~ :: Sets file-local variables in the staging buffer (source, language, engine, audio format, voice, locale).
#+findex: tlon-tts-prepare-staging-buffer
+ ~tlon-tts-prepare-staging-buffer~ :: The main function that orchestrates the text preparation pipeline within the staging buffer. It calls numerous helper functions to:
  - Generate the initial report.
  - Ensure images/tables have alt text.
  - Process notes (footnotes/sidenotes).
  - Remove unwanted sections (e.g., "Further reading").
  - Remove horizontal lines.
  - Replace BibTeX keys with citations.
  - Add listener cues.
  - Process links.
  - Remove formatting (bold, italics, etc.).
  - Add paragraph breaks.
  - Process currencies and numerals.
  - Process abbreviations (local and global).
  - Process phonetic replacements and transcriptions.
  - Handle unsupported SSML tags.
  - Clean up extra newlines.
  - (Potentially) Escape XML special characters.

*** Chunking and Processing
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-chunking-internals
:END:
#+findex: tlon-tts-calculate-chunks
+ ~tlon-tts-calculate-chunks~ :: Calculates chunk boundaries and populates the `tlon-tts-chunks` data structure. It analyzes the current buffer content and determines how to split it into chunks based on engine limits and voice changes. For any engine, if its `*-char-limit` (e.g., ~tlon-elevenlabs-char-limit~) is nil, it will chunk by paragraph regardless of size to work around voice degradation issues for longer texts. This function ensures that chunking logic operates on text free of pre-existing `<!-- Chunk N -->` comments by temporarily removing them before analysis.
#+findex: tlon-tts-ensure-chunks-calculated
+ ~tlon-tts-ensure-chunks-calculated~ :: Ensures ~tlon-tts-chunks~ is populated, calling ~tlon-tts-calculate-chunks~ if necessary.
#+findex: tlon-tts-ensure-chunks-ready
+ ~tlon-tts-ensure-chunks-ready~ :: Ensures chunks are calculated and chunk comments are inserted in the buffer.
#+findex: tlon-tts-ensure-chunk-comments-inserted
+ ~tlon-tts-ensure-chunk-comments-inserted~ :: Ensures chunk comments are present in the buffer, inserting them if missing.
#+findex: tlon-tts-read-into-chunks
+ ~tlon-tts-read-into-chunks~ :: Reads the staging buffer content (excluding local variables section) and splits it into chunks using ~tlon-tts-break-into-chunks~.
#+findex: tlon-tts-break-into-chunks
+ ~tlon-tts-break-into-chunks~ :: Core logic for splitting text into chunks based on paragraph boundaries, engine character limits, and voice changes specified by =tlon-tts-voice-chunks=. It assigns a 1-based chunk number to each generated chunk and stores this in the chunk data. This chunk number is then used for filenames.
#+findex: tlon-tts-insert-chunk-comments
+ ~tlon-tts-insert-chunk-comments~ :: After chunks are calculated by ~tlon-tts-calculate-chunks~ (which calls ~tlon-tts-break-into-chunks~), this function is called by ~tlon-tts-narrate-staged-buffer~. It first removes any pre-existing `<!-- Chunk N -->` comments, then iterates through the `tlon-tts-chunks` list and inserts new `<!-- Chunk N -->` comments at the beginning of each chunk's text in the staging buffer, using the `begin-marker` and `chunk-number` stored in each chunk's data.
#+findex: tlon-tts-process-chunks
+ ~tlon-tts-process-chunks~ :: Iterates through the generated ~tlon-tts-chunks~, calling ~tlon-tts-generate-audio~ for each, potentially skipping existing files based on ~tlon-tts-generate-missing-chunks-only~.
#+findex: tlon-tts-generate-audio
+ ~tlon-tts-generate-audio~ :: Constructs the API request command using the appropriate engine-specific function (e.g., ~tlon-tts-microsoft-azure-make-request~) and starts the asynchronous process for a specific chunk index. Sets up the process sentinel (~tlon-tts-process-chunk-sentinel~) to handle completion.
#+findex: tlon-tts-process-chunk-sentinel
+ ~tlon-tts-process-chunk-sentinel~ :: The sentinel function called when an audio generation process for a chunk finishes. It parses the response (including the request ID for ElevenLabs), updates the chunk status, stores the request ID, and triggers the next chunk's generation or finalizes processing (normalization, joining, cleanup) if all chunks are done.
#+findex: tlon-tts--generate-single-chunk-by-number
+ ~tlon-tts--generate-single-chunk-by-number~ :: Internal function called by ~tlon-tts-narrate-staged-chunks~. Takes a 1-based chunk number (read from the `<!-- Chunk N -->` comment), retrieves the corresponding chunk data from `tlon-tts-chunks` (using `chunk-number - 1` as the list index), and calls ~tlon-tts-execute-generation-request~ to generate the audio for that specific chunk's text.

*** Engine Request Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-engine-request-internals
:END:
#+findex: tlon-tts-microsoft-azure-make-request
#+findex: tlon-tts-google-cloud-make-request
#+findex: tlon-tts-amazon-polly-make-request
#+findex: tlon-tts-openai-make-request
#+findex: tlon-tts-elevenlabs-make-request
+ Engine Request Functions (e.g., ~tlon-tts-microsoft-azure-make-request~) :: Functions responsible for constructing the specific =curl=, =aws=, or other command-line request for each TTS engine, incorporating the text (wrapped in SSML), API key, selected voice, locale, audio format, and output destination.

*** SSML and Text Processing Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-ssml-text-internals
:END:
#+findex: tlon-tts-process-unsupported-ssml-tags
+ ~tlon-tts-process-unsupported-ssml-tags~ :: Determines which SSML tags are unsupported by the current engine and either removes them (~tlon-tts-remove-unsupported-ssml-tags~) or prepares for chunking based on them (~tlon-tts-chunkify-unsupported-ssml-tags~).
#+findex: tlon-tts-process-listener-cues
+ ~tlon-tts-process-listener-cues~ :: Iterates through defined content types (tables, quotes, asides, etc.) and calls ~tlon-tts-add-listener-cues~ for each.
#+findex: tlon-tts-add-listener-cues
+ ~tlon-tts-add-listener-cues~ :: Finds occurrences of a specific content type using regex patterns and replaces the matched text with the content wrapped in appropriate listener cues and potentially alternate voice tags (~tlon-tts-listener-cue-full-enclose~).
#+findex: tlon-tts-process-notes
+ ~tlon-tts-process-notes~ :: Handles footnotes, replacing references with content (for sidenotes) or removing them, adding listener cues.
#+findex: tlon-tts-process-formatting
+ ~tlon-tts-process-formatting~ :: Calls individual functions to remove various formatting tags (bold, italics, sup, sub, etc.).
#+findex: tlon-tts-process-numerals
+ ~tlon-tts-process-numerals~ :: Calls functions to handle number formatting (powers, Roman numerals, thousands separators).
#+findex: tlon-tts-process-abbreviations
+ ~tlon-tts-process-abbreviations~ :: Core logic for replacing abbreviations (local or global) with their expansions.
#+findex: tlon-tts-process-terms
+ ~tlon-tts-process-terms~ :: Generic function for replacing terms based on a list (used for phonetic replacements and transcriptions).

*** Audio File Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-audio-internals
:END:
#+findex: tlon-tts-finish-processing
+ ~tlon-tts-finish-processing~ :: Finalizes the TTS process after all API chunks are generated. It appends silence if needed (synchronously), then asynchronously normalizes (if enabled) and joins the chunks. Handles cleanup of temporary files and opens the final audio file.
#+findex: tlon-tts-get-chunk-name
+ ~tlon-tts-get-chunk-name~ :: Generates the filename for an audio chunk based on the original filename and the 1-based chunk number (e.g., =basename-chunk-XXX.ext=). This number is assigned sequentially as chunks are created.
#+findex: tlon-tts-get-list-of-chunks
+ ~tlon-tts-get-list-of-chunks~ :: Finds all chunk files matching a base filename pattern (e.g., =basename-chunk-*.ext=) and sorts them numerically by chunk number.
#+findex: tlon-tts-get-base-audio-file-interactive
+ ~tlon-tts-get-base-audio-file-interactive~ :: Prompts for or determines the base audio file path for operations like finalization or chunk deletion. If a chunk filename is provided, it derives the base name.
#+findex: tlon-tts-create-list-of-chunks
+ ~tlon-tts-create-list-of-chunks~ :: Creates a temporary text file listing chunk filenames (typically normalized temporary files), required by =ffmpeg= for concatenation. This is used internally by the asynchronous joining process.
#+findex: tlon-tts-append-silence-to-chunks
+ ~tlon-tts-append-silence-to-chunks~ :: Appends silence to each chunk file using =ffmpeg=, necessary for some engines like ElevenLabs. This is called synchronously by ~tlon-tts-finish-processing~ before the asynchronous normalization and joining steps. Returns a list of paths to the new temporary files with silence appended.
#+findex: tlon-tts-append-silence-to-chunks-p
+ ~tlon-tts-append-silence-to-chunks-p~ :: Determines if silence should be appended based on the TTS engine used for the file.
#+findex: tlon-tts-async-start-normalization
+ ~tlon-tts-async-start-normalization~ :: Asynchronously normalizes a list of audio files to temporary output files using =ffmpeg=. Chains commands with `&&`.
#+findex: tlon-tts-normalization-sentinel
+ ~tlon-tts-normalization-sentinel~ :: Sentinel function for the asynchronous normalization process. Triggers joining after successful normalization or handles errors, including cleanup of temporary normalized files.
#+findex: tlon-tts-async-start-joining
+ ~tlon-tts-async-start-joining~ :: Asynchronously joins a list of audio files into a final output file using =ffmpeg= concatenation.
#+findex: tlon-tts-joining-sentinel
+ ~tlon-tts-joining-sentinel~ :: Sentinel function for the asynchronous joining process. Handles cleanup of temporary files (including the ffmpeg list file and potentially the input files if they were temporary) and opens the final audio file on success.

** Testing
:PROPERTIES:
:CUSTOM_ID: h:tlon-tts-testing
:INDEX: test @tlon-tts-break-into-chunks-paragraph-mode @tlon-tts-break-into-chunks-char-limit @tlon-tts-break-into-chunks-with-voice-change @tlon-tts-break-into-chunks-voice-change-at-start @tlon-tts-break-into-chunks-ssml-break-boundary @tlon-tts-break-into-chunks-empty-input @tlon-tts-break-into-chunks-single-large-paragraph
:END:

The file =tlon-tts-tests.el= contains unit tests for the TTS functionality, particularly focusing on the text chunking logic in ~tlon-tts-break-into-chunks~. These tests use the Emacs Lisp Regression Testing framework (=ert=).

To run the tests:

+ *Interactively*:
  1. Ensure =tlon-tts-tests.el= is loaded (e.g., =M-x load-file RET tlon-tts-tests.el RET=). *Make sure all dependencies of =tlon.el= and =tlon-tts.el= are also loaded or available in the `load-path`.*
  2. Run the command =M-x ert-run-tests-interactively RET=.
  3. At the "Run tests matching selector:" prompt, type =t= and press =RET= to run all loaded tests. Alternatively, type =tlon-tts= and =RET= to run only the tests defined in this specific suite.

+ *From the Command Line (Batch Mode)*: This is suitable for automated checks (e.g., in scripts or CI pipelines). Use a single =--eval= argument containing a =progn= block to set up the `load-path`, load the necessary files (`tlon.el` first, then the test file), and finally run the tests. Use full paths for loaded files. Run the command as a single line to avoid shell interpretation issues. *Ensure all dependencies are correctly specified in the `load-path`.*
  #+begin_src shell
  emacs --batch --eval '(progn (add-to-list (quote load-path) "/path/to/tlon/directory/") (add-to-list (quote load-path) "/path/to/parent/repos/directory/") (load-file "/path/to/tlon/directory/tlon.el") (load-file "/path/to/tlon/directory/tlon-tts-tests.el") (ert-run-tests-batch-and-exit))'
  #+end_src
  Replace =/path/to/tlon/directory/= with the full path to the specific `tlon` package checkout (e.g., =/Users/user/.emacs.d/elpaca/repos/tlon/=). Replace =/path/to/parent/repos/directory/= with the full path to the directory containing *all* package checkouts (e.g., =/Users/user/.emacs.d/elpaca/repos/=). Emacs will exit with status 0 if all tests pass, and non-zero otherwise.

These tests help verify that chunking behaves correctly under various conditions, including different engine character limits, paragraph-based chunking (for ElevenLabs), the presence of voice change markers, and handling of SSML break tags. Adding more tests, especially for edge cases encountered during development, is encouraged to improve robustness.

