#+title: tlon - File Translation
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

* File Translation (=tlon-translate.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-translate
:END:

This module provides functions for translating entire files using various translation engines.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-translate-dependencies
:END:

+ =tlon-core=
+ =tlon-counterpart=
+ =tlon-deepl=
+ =transient=
+ =bibtex=

** Configuration
:PROPERTIES:
:CUSTOM_ID: h:tlon-translate-config
:END:

#+vindex: tlon-translation-engine
+ ~tlon-translation-engine~ :: Specifies the translation engine to use. Supported values are ='deepl= (DeepL API) and ='ai= (LLM via gptel).
#+vindex: tlon-translate-spot-errors-model
+ ~tlon-translate-spot-errors-model~ :: Model to use for spotting errors in translations.
#+vindex: tlon-translate-improve-flow-model
+ ~tlon-translate-improve-flow-model~ :: Model to use for improving the flow of translations.
#+vindex: tlon-translate-revise-commit-changes
+ ~tlon-translate-revise-commit-changes~ :: Whether to commit changes after an AI revision.
#+vindex: tlon-translate-revise-chunk-size
+ ~tlon-translate-revise-chunk-size~ :: Number of aligned paragraphs to send per AI revision request (default 10).
#+vindex: tlon-translate-revise-max-parallel
+ ~tlon-translate-revise-max-parallel~ :: Maximum number of paragraph-chunk revision requests to dispatch concurrently (default 3).
+ ~tlon-translate-restrict-revision-to-paragraphs~ :: When non-nil, restrict AI revision to the inclusive paragraph range =(START . END)=.  Nil (default) means revise the whole file.
+ ~tlon-translate-revise-stream~ :: When non-nil, AI responses are streamed; when nil (default) each chunk triggers a single callback on completion.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-translate-commands
:END:

#+findex: tlon-translate-file
+ ~tlon-translate-file~ :: Translates a file into a specified language.
  - Prompts for the source =FILE= and the target =LANG= (two-letter code).
  - Resolves the output path, preferring an existing counterpart if present (asking before overwriting). Otherwise proposes a default path based on the file category, determined by ~(tlon-get-bare-dir FILE t)~:
    - Articles: requires a DB translation entry for the selected language; if none exists, an error is raised. The default filename is derived from the DB translation entry's title (slugified). After writing the translation, the YAML ~key~ is set to the DB translation key, translated tags are inserted, the buffer is saved, and associated images are copied.
    - Tags/authors: the default filename is derived by translating the YAML ~title~ and slugifying it. After writing, the YAML ~title~ is overwritten with the translated title, the buffer is saved, and ~tlon-yaml-guess-english-counterpart~ is run on the new file.
    - Other: falls back to the previous behavior (title-based default naming if available; otherwise a slugified basename) and writes the translated content.
  - The content of the source file is read, translated with the selected engine, and then written to the target file, which is opened.

#+findex: tlon-translate-missing-abstracts
+ ~tlon-translate-missing-abstracts~ :: Translate abstracts that are missing from two sources:
  - (I) Internal DB translations: iterate over =db.bib= and, for any translation entry (non-empty ~translation~ field) lacking an ~abstract~, translate the original entry's abstract and set it as the ~abstract~ of the translation entry. If the original has no abstract, a message is logged and the entry is skipped.
  - (II) External works: across the =fluid= and =stable= bibliographies (and =db.bib= originals), if a cited work does not have a DB translation entry, create missing abstract translations in =abstract-translations.json=. For each selected target language, if a translated abstract already exists in the JSON store, it is not re-created.

  When both the source and target languages are in =tlon-project-languages=, a glossary must be present; if either language lies outside that set, the abstract is translated immediately without requiring a glossary.

#+findex: tlon-translate-abstract-here
+ ~tlon-translate-abstract-here~ :: Translate the abstract of the entry at point. If the entry is a DB translation missing an abstract, the original’s abstract is translated into the entry’s language and written into =db.bib=. Otherwise, the current abstract is translated into a user-selected language and stored in =abstract-translations.json=. When both the source and target are in =tlon-project-languages=, a glossary is required; otherwise the translation proceeds without one.

#+findex: tlon-translate-remove-duplicate-abstract-translations
+ ~tlon-translate-remove-duplicate-abstract-translations~ :: Remove per-language abstract translations from =abstract-translations.json= when a corresponding translation entry exists in =db.bib= (detected via the =translation= and =langid= fields). Only the relevant language’s JSON entry is deleted; originals with no remaining languages are dropped. Reports how many items were pruned and emits progress logs during the scan.

*** Revision
:PROPERTIES:
:CUSTOM_ID: h:tlon-translate-revision
:END:

#+findex: tlon-translate-spot-errors
+ ~tlon-translate-spot-errors~ :: Use an AI agent to spot errors in a translation. The agent is instructed to compare the translation with the original and correct any errors found, such as missing content, corrupted code, or inconsistent use of abbreviations.

#+findex: tlon-translate-improve-flow
+ ~tlon-translate-improve-flow~ :: Use an AI agent to improve the flow of a translation. The agent is instructed to make the translation less literal, while respecting the terminology in the relevant glossary.

#+findex: tlon-translate-spot-errors-in-range
+ ~tlon-translate-spot-errors-in-range~ :: Spot errors but only within a user-specified inclusive paragraph range.

#+findex: tlon-translate-improve-flow-in-range
+ ~tlon-translate-improve-flow-in-range~ :: Improve the flow only within a user-specified inclusive paragraph range.

#+findex: tlon-translate-revise-abort
+ ~tlon-translate-revise-abort~ :: Abort all ongoing revision requests, immediately stopping any remaining AI jobs.

The revision log buffer is updated in the background and is not auto-displayed
when chunks finish. Use ~tlon-translate-show-log~ or the “Show log” menu command
to view it when you want.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-translate-menu
:END:
#+findex: tlon-translate-menu
The command ~tlon-translate-menu~ activates a =transient= menu for file translation operations.

It provides the following groups and commands:
+ *Translate*:
  + =f= :: Translate file (~tlon-translate-file~)
+ *Revise*:
  + =e= :: Spot errors (~tlon-translate-spot-errors~)
  + =f= :: Improve flow (~tlon-translate-improve-flow~)
  + =E= :: Spot errors in range (~tlon-translate-spot-errors-in-range~)
  + =F= :: Improve flow in range (~tlon-translate-improve-flow-in-range~)
+ *Options*:
  + =c= :: Commit changes after revision (~tlon-translate-infix-toggle-commit-changes~)
  + =n= :: Paragraph chunk size (~tlon-translate-infix-set-chunk-size~)
  + =e= :: Select Engine (~tlon-translation-engine-infix~) - Select the translation engine (e.g., 'deepl).
  + =d= :: DeepL model (~tlon-deepl-model-type-infix~)
  + =a= :: AI model (~tlon-ai-infix-select-translation-model~)
  + =m -e= :: Revise errors model (~tlon-translate-infix-select-spot-errors-model~)
  + =m -f= :: Revise flow model (~tlon-translate-infix-select-improve-flow-model~)

** Internal Functions
:PROPERTIES:
:CUSTOM_ID: h:tlon-translate-internals
:END:

#+findex: tlon-translate--do-translate
+ ~tlon-translate--do-translate~ :: Handles the actual translation process. It reads the source file, calls the selected translation engine's function, writes the result to the target file, and opens it.
#+findex: tlon-translate--external-abstracts
+ ~tlon-translate--external-abstracts~ :: Implements case (II): finds and translates missing abstracts for non-DB works into the JSON store.
#+findex: tlon-translate--internal-abstracts
+ ~tlon-translate--internal-abstracts~ :: Implements case (I): scans =db.bib= for translation entries missing an ~abstract~, translates from the original entry's abstract, and writes the result into =db.bib=.
#+findex: tlon-translate--db-set-abstract
+ ~tlon-translate--db-set-abstract~ :: Helper to write/update the ~abstract~ field of a DB entry directly in =db.bib=.

#+findex: tlon-translate--get-translation-from-original
+ ~tlon-translate--get-translation-from-original~ :: A helper that, given an original file, finds its translation for a specific =LANG-CODE=. It checks metadata and falls back to constructing a path in a counterpart directory if no metadata entry is found.

#+findex: tlon-translate--get-deepl-translation-from-buffer
+ ~tlon-translate--get-deepl-translation-from-buffer~ :: A callback function used with ~tlon-deepl-translate~ to parse the JSON response from the DeepL API and extract the translated text string.

#+findex: tlon-translate--revise-common
+ ~tlon-translate--revise-common~ :: A helper function that handles the common logic for both revision commands. It prompts for the translation file, finds its original, prepares the prompt and tools, and makes the AI request.

#+findex: tlon-translate--revise-callback
+ ~tlon-translate--revise-callback~ :: The callback function for the revision commands. After the AI agent finishes, it commits the changes to the file with an appropriate message.

#+findex: tlon-translation-engine-infix
+ ~tlon-translation-engine-infix~ :: The transient infix command for selecting the translation engine via ~tlon-translation-engine~.

#+findex: tlon-translate-infix-select-spot-errors-model
+ ~tlon-translate-infix-select-spot-errors-model~ :: The transient infix command for selecting the AI model for spotting errors.

#+findex: tlon-translate-infix-select-improve-flow-model
+ ~tlon-translate-infix-select-improve-flow-model~ :: The transient infix command for selecting the AI model for improving flow.

#+findex: tlon-translate-infix-toggle-commit-changes
+ ~tlon-translate-infix-toggle-commit-changes~ :: The transient infix command for toggling whether to commit changes after an AI revision.
