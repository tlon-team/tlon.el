#+title: tlon - Forge Integration
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

* Forge Integration (=tlon-forg.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg
:END:

This module provides integration between =forge= (Emacs interface for Git forges like GitHub) and Org mode. It allows capturing GitHub issues as Org TODO items, keeping their state synchronized, navigating between the issue and its corresponding TODO, and managing related metadata like assignees and labels (which map to Org status and tags). TODO items are stored in a main generic file, a jobs-specific file, or potentially in repository-specific Org files.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-dependencies
:END:

+ =forge=
+ =org=
+ =shut-up=
+ =tlon-core=
+ =tlon-dispatch=
+ =forge-extras= (for GitHub Project integration and other Forge enhancements)
+ =org-extras= (optional, for some job-related refiling)
+ =ghub= (for creating issues)
+ =magit= (for creating issues)
+ =closql= (underlying =forge= dependency)
+ =transient= (for the menu)

** User Options
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-options
:END:

#+vindex: tlon-when-assignee-is-nil
+ ~tlon-when-assignee-is-nil~ :: Controls behavior when capturing an issue with no assignee. Options:
  + =prompt= (default): Ask user if they want to be assigned.
  + =change=: Assign to the current user automatically.
  + =warn=: Capture as-is, but log a warning.
  + =capture=: Capture as-is, no warning.
  + =no-capture= (or any other value): Do not capture the issue.
  Can be set temporarily via ~tlon-forg-menu~.

#+vindex: tlon-when-assignee-is-someone-else
+ ~tlon-when-assignee-is-someone-else~ :: Controls behavior when capturing an issue assigned to someone else. Options are the same as ~tlon-when-assignee-is-nil~. Note: This option is ignored (treated as =no-capture=) when using ~tlon-capture-all-issues~. Can be set temporarily via ~tlon-forg-menu~.

#+vindex: tlon-forg-when-syncing
+ ~tlon-forg-when-syncing~ :: Controls behavior when ~tlon-sync-issue-and-todo~ finds discrepancies between the issue and its TODO. Options:
  + =prompt= (default): Ask user whether to keep the issue's state or the TODO's state.
  + =issue=: Automatically update the TODO to match the issue.
  + =todo=: Automatically update the issue to match the TODO (Note: Currently not fully implemented).
  Can be set temporarily via ~tlon-forg-menu~.

#+vindex: tlon-forg-include-archived
+ ~tlon-forg-include-archived~ :: Boolean flag. If non-nil, archived issues/TODOs are included in capture and sync operations. Defaults to nil. Can be toggled temporarily via ~tlon-forg-menu~.

#+vindex: tlon-forg-enforce-user
+ ~tlon-forg-enforce-user~ :: String or nil. If non-nil, forces Tlön to consider this string as the current user's GitHub login, primarily for testing purposes. Defaults to nil.
#+vindex: tlon-forg-archive-todo-on-close
+ ~tlon-forg-archive-todo-on-close~ :: Boolean flag. If non-nil, ~tlon-close-issue-and-todo~ will archive the corresponding Org TODO item after marking it as "DONE". Defaults to nil. Can be toggled temporarily via ~tlon-forg-menu~.
  The GitHub Project owner, number, and various Node IDs (for the project, status field, and status options) are now configured via `defcustom` variables in =forge-extras.el= (e.g., ~forge-extras-project-owner~, ~forge-extras-project-number~, ~forge-extras-project-node-id~, etc.). Please refer to =forge-extras.el= for their configuration.

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-commands
:END:

This section details the interactive commands provided by =tlon-forg.el=.

*** Visiting Issues and TODOs
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-visit-cmds
:END:

#+findex: tlon-visit-issue
+ ~tlon-visit-issue~ :: Visits the GitHub issue associated with the current context. If point is on an =orgit-topic:= link, follows it. Otherwise, tries to extract the issue number and repository from the current Org heading.

#+findex: tlon-visit-todo
+ ~tlon-visit-todo~ :: Visits an Org TODO item.
  If called with a =POS-FILE= argument (a cons cell of =POSITION . FILE-PATH=), it navigates directly to that location.
  Otherwise, if an =ISSUE= object is provided (or defaults to the issue at point), it uses ~tlon-get-todo-position-from-issue~ to find the TODO's location and then visits it.
  Signals an error if no TODO can be found.

#+findex: tlon-visit-todo-or-capture
+ ~tlon-visit-todo-or-capture~ :: Visits the Org TODO associated with the current issue. If no TODO exists yet, it calls ~tlon-capture-issue~ first.

*** Capturing Issues as TODOs
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-capture-cmds
:END:

#+findex: tlon-capture-issue
+ ~tlon-capture-issue~ :: (Autoloaded) Creates a new Org TODO item based on the specified =ISSUE= or one selected interactively.
  1. If =ISSUE= is provided, uses it. Otherwise, attempts to get the issue from the current context (e.g., a Forge buffer).
  2. If no issue can be determined from context (e.g., when called from an Org buffer not associated with a repository), it prompts the user to select a repository (from Tlön's known repos or by listing from GitHub via `gh` CLI for ~tlon-forg-project-owner~) and then an issue from that repository.
  3. Checks if the selected/provided issue is open.
  4. Handles the assignee based on ~tlon-when-assignee-is-nil~ and ~tlon-when-assignee-is-someone-else~, potentially changing the assignee on GitHub or skipping capture.
  5. If the issue's title starts with "Job: ":
     - Ensures it has a valid phase label (prompting if necessary via ~tlon-capture-handle-phase~).
     - Stores or refiles the job TODO under its master job heading using ~tlon-store-or-refile-job-todo~.
  6. If it's a generic issue:
     - Stores the TODO in the generic file using ~tlon-store-todo~ with the "tbG" template.
  Only captures if a TODO doesn't already exist for the issue.

#+findex: tlon-capture-all-issues-in-repo
+ ~tlon-capture-all-issues-in-repo~ :: (Autoloaded) Captures all open issues in a selected repository that are not assigned to another user (behavior depends on ~tlon-when-assignee-is-someone-else~, which defaults to `no-capture` effectively in bulk mode).
  1. If a repository cannot be inferred from the current context, the user is prompted to select one (from Tlön's known repos or by listing from GitHub via `gh` CLI for ~tlon-forg-project-owner~).
  2. Performs a silent =forge-pull= for the selected repository first (unless called with a prefix argument) to ensure local data is up-to-date. The window configuration active before the command is called will be restored upon completion.
  3. Iterates through all open issues in the selected repository (~tlon-get-issues~).
  4. For each issue, if a TODO doesn't already exist (~tlon-get-todo-position-from-issue~), it calls ~tlon-capture-issue~ for that issue.
  5. Clears the =org-refile= cache upon completion.

#+findex: tlon-capture-all-issues-in-project
+ ~tlon-capture-all-issues-in-project~ :: (Autoloaded) Captures all open issues in the GitHub Project configured in =forge-extras.el= (via ~forge-extras-project-owner~ and ~forge-extras-project-number~) that are not assigned to another user.
  1. Fetches all items from the configured GitHub Project using ~forge-extras-list-project-items-ordered~.
  2. Groups the issues by repository and checks if each repository is locally available.
  3. For each repository containing issues in the project:
     a. Performs a silent =forge-pull= first (unless called with a prefix argument) to ensure local data is up-to-date.
     b. Calls ~tlon-capture-all-issues-in-repo-after-pull~ to capture all issues in that repository.
  4. Restores the original window configuration and clears the =org-refile= cache upon completion.

*** Syncing Issues and TODOs
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-sync-cmds
:END:

#+findex: tlon-sync-issue-and-todo
+ ~tlon-sync-issue-and-todo~ :: (Autoloaded) Synchronizes the state (title, status, tags, and estimate) between the current issue and its associated Org TODO, or vice versa. Works whether point is in the issue buffer or on the TODO heading.
  For title, status, and tags:
  1. Determines the issue and TODO based on the current context.
  2. Generates the expected TODO heading string based on the current issue state (~tlon-make-todo-name-from-issue~).
  3. Compares this with the actual TODO heading string.
  4. If they differ, it applies the behavior defined by ~tlon-forg-when-syncing~:
     - =prompt=: Asks the user whether to update the TODO or the issue.
     - =issue=: Updates the TODO heading to match the issue state (~tlon-update-todo-from-issue~).
     - =todo=: Updates the issue state to match the TODO (~tlon-update-issue-from-todo~).
  For estimate (GitHub Project "Estimate" field vs. Org "Effort" property):
  - If only one has an estimate (and the other is none or zero), the other is updated silently.
  - If both have estimates and they differ, behavior is controlled by ~tlon-forg-when-syncing~:
    - =prompt=: Asks whether to use the GitHub estimate or the Org estimate.
    - =issue=: Updates the Org TODO "Effort" to match the GitHub "Estimate".
    - =todo=: Updates the GitHub "Estimate" to match the Org TODO "Effort".

#+findex: tlon-sync-all-issues-in-repo
+ ~tlon-sync-all-issues-in-repo~ :: (Autoloaded) Syncs all Org TODOs with their corresponding GitHub issues in a selected repository, including their estimates.
  1. If a repository cannot be inferred from the current context, the user is prompted to select one (from Tlön's known repos or by listing from GitHub via `gh` CLI for ~tlon-forg-project-owner~).
  2. Performs a silent =forge-pull= for the selected repository first (unless called with a prefix argument) to ensure local data is up-to-date. The window configuration active before the command is called will be restored upon completion.
  3. Iterates through all headings in all detected TODO files. These include the generic file (~tlon-get-todos-generic-file~), the jobs file (~tlon-get-todos-jobs-file~), and any repository-specific =*.org= files found in the directory specified by =paths-dir-tlon-todos=.
  4. For each heading, finds the associated issue (~tlon-get-issue~) and checks if it belongs to the selected repository.
  5. If an issue is found, belongs to the selected repository, and the TODO is not archived (or ~tlon-forg-include-archived~ is non-nil), calls ~tlon-sync-issue-and-todo-from-issue~ (which handles name, status, tags, and estimate).
  6. Clears the =org-refile= cache upon completion.

#+findex: tlon-sync-all-issues-in-project
+ ~tlon-sync-all-issues-in-project~ :: (Autoloaded) Syncs all Org TODOs with their corresponding GitHub issues in the GitHub Project configured in =forge-extras.el= (via ~forge-extras-project-owner~ and ~forge-extras-project-number~), including their estimates.
  1. Fetches all items from the configured GitHub Project using ~forge-extras-list-project-items-ordered~.
  2. Groups the issues by repository and checks if each repository is locally available.
  3. For each repository containing issues in the project:
     a. Performs a silent =forge-pull= first (unless called with a prefix argument) to ensure local data is up-to-date.
     b. Calls ~tlon-sync-all-issues-in-repo-after-pull~ to sync all issues in that repository.
  4. Restores the original window configuration and clears the =org-refile= cache upon completion.


*** Counterpart Navigation
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-counterpart-cmds
:END:

#+findex: tlon-visit-counterpart
+ ~tlon-visit-counterpart~ :: (Autoloaded) Navigates between an issue and its corresponding TODO. If in an issue buffer, visits the TODO (~tlon-visit-todo~). If on a TODO heading, visits the issue (~tlon-visit-issue~).

#+findex: tlon-visit-counterpart-or-capture
+ ~tlon-visit-counterpart-or-capture~ :: (Autoloaded) Similar to ~tlon-visit-counterpart~, but if navigating from an issue to a non-existent TODO, it captures the issue first (~tlon-visit-todo-or-capture~).

*** Creating Issues and TODOs
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-create-cmds
:END:

#+findex: tlon-create-issue-from-todo
+ ~tlon-create-issue-from-todo~ :: (Autoloaded) Creates a new GitHub issue based on the Org heading at point.
  1. Ensures the heading doesn't already have an issue number.
  2. Determines the repository:
     a. First, by checking for a repository tag in the Org heading.
     b. If not found, by checking if the current buffer's filename (sans extension) matches a known repository name. If a match is found and the heading does not already contain the repository tag, the tag is inserted into the heading.
     c. If still not found, prompts the user to select a repository, which is then added to the heading (~tlon-set-repo-in-heading~).
  3. Extracts the title (from the heading, after the repository tag), status, and tags from the heading.
  4. Creates the issue on GitHub using ~tlon-create-issue~ (passing the determined repository, so no further prompting for repo occurs there).
  5. Pulls changes from the repository until the new issue appears locally.
  6. Sets the issue number in the Org heading (~tlon-set-issue-number-in-heading~).
  7. Visits the new issue.
  8. Sets the assignee to the current user and applies the status and tags from the Org heading as labels on GitHub (~tlon-set-assignee~, ~tlon-set-labels~).
  9. Updates the Org heading to include the =orgit-topic:= link using ~tlon-make-todo-name-from-issue~.

#+findex: tlon-create-issue-or-todo
+ ~tlon-create-issue-or-todo~ :: Creates the counterpart if it doesn't exist. If on an Org heading without an issue, calls ~tlon-create-issue-from-todo~. If in an issue buffer without a corresponding TODO, calls ~tlon-capture-issue~.

*** Closing Issues and TODOs
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-close-cmds
:END:

#+findex: tlon-close-issue-and-todo
+ ~tlon-close-issue-and-todo~ :: (Autoloaded) Closes both the GitHub issue and its associated Org TODO. Works from either context.
  1. Finds the issue number and repository.
  2. Closes the GitHub issue using ~tlon-close-issue-number~ (which visits the issue and calls ~tlon-close-issue~).
  3. Visits the corresponding Org TODO (~tlon-visit-todo~).
  4. Sets the TODO state to "DONE" using =org-todo=.
  5. If ~tlon-forg-archive-todo-on-close~ is non-nil, archives the Org TODO subtree using =org-archive-subtree=.
  6. Saves the Org buffer.

*** Sorting Org Entries
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-sort-cmds
:END:

#+findex: tlon-forg-sort-by-tag
+ ~tlon-forg-sort-by-tag~ :: (Autoloaded) Sorts Org entries in the current buffer based on the first tag that matches the pattern defined in ~tlon-forg-sort-by-tags-regexp~. Uses =org-sort-entries= with a custom sorter function (~tlon-forg-tag-sorter~). Entries without a matching tag are sorted to the end.

#+findex: tlon-forg-sort-by-status-and-project-order
+ ~tlon-forg-sort-by-status-and-project-order~ :: (Autoloaded) Sorts Org entries in the current buffer first by their TODO status and then by their order in the GitHub Project.
  Status order is based on the sequence in ~tlon-todo-statuses~ (e.g., "DOING", "NEXT", "LATER", "SOMEDAY"), followed by any other active Org TODO states, then "DONE" state, and finally items with no status.
  Project order is determined by the list returned by ~forge-extras-list-project-items-ordered~.
  Entries not linked to a GitHub issue, or issues not found in the project list, are sorted to the end. Uses =org-sort-entries= with a custom sorter function (~tlon-forg-status-and-project-order-sorter~).

*** File Handling (Associated with Issues)
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-file-cmds
:END:

#+findex: tlon-open-forge-file
+ ~tlon-open-forge-file~ :: (Autoloaded) Opens the file associated with the current issue. Assumes the issue title contains a BibTeX-like key (e.g., "Job: `key`") and uses ~tlon-get-file-from-issue~ (which calls ~tlon-get-file-from-key~) to find the corresponding file path.

#+findex: tlon-open-forge-counterpart
+ ~tlon-open-forge-counterpart~ :: (Autoloaded) Opens the *counterpart* file associated with the current issue. Finds the issue's file path using ~tlon-get-file-from-issue~ and then calls ~tlon-open-counterpart~ on that path.

*** Miscellaneous
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-misc-cmds
:END:

#+findex: tlon-report-bug
+ ~tlon-report-bug~ :: (Autoloaded) Creates a new bug report issue specifically in the =tlon.el= repository. Uses ~tlon-create-issue-in-dir~ and prepopulates the buffer with a template using ~tlon-prepopulate-bug-report-buffer~.

#+findex: tlon-list-all-todos
+ ~tlon-list-all-todos~ :: (Autoloaded) Uses =org-roam-extras= to list all Org files within the directory specified by =paths-dir-tlon-todos=.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-menu-cmd
:END:
#+findex: tlon-forg-menu
The command ~tlon-forg-menu~ (Autoloaded) activates a =transient= menu interface for =tlon-forg= operations.

It provides the following groups and commands:
+ *Actions*:
  + =y= :: dwim (visit counterpart or capture) (~tlon-visit-counterpart-or-capture~)
  + =v= :: visit counterpart (~tlon-visit-counterpart~)
  + =p= :: post (create issue from todo) (~tlon-create-issue-from-todo~)
  + =x= :: close issue and todo (~tlon-close-issue-and-todo~)
  + =o= :: sort by tag (~tlon-forg-sort-by-tag~)
  + =O= :: sort by status & project order (~tlon-forg-sort-by-status-and-project-order~)
+ *Capture*:
  + =c= :: capture issue (~tlon-capture-issue~)
  + =C= :: capture all issues (~tlon-capture-all-issues~)
+ *Sync*:
  + =s= :: sync issue and todo (~tlon-sync-issue-and-todo~)
  + =S= :: sync all issues and todos (~tlon-sync-all-issues-and-todos~)
+ *Options*: (These set the corresponding user options temporarily for the session)
  + =-A= :: Archive TODO on close (~tlon-infix-toggle-archive-todo-on-close~)
  + =-a= :: Include archived (~tlon-infix-toggle-include-archived~)
  + =-s= :: When syncing (~tlon-forg-when-syncing-infix~)
  + =-n= :: When assignee is nil (~tlon-when-assignee-is-nil-infix~)
  + =-e= :: When assignee is someone else (~tlon-when-assignee-is-someone-else-infix~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-internals
:END:

This section lists non-interactive functions, variables, and constants used internally or potentially useful for advanced customization.

*** Constants
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-constants
:END:
#+vindex: tlon-todo-statuses
+ ~tlon-todo-statuses~ :: Alist mapping GitHub Project item statuses (car) to Org TODO keywords (cdr). For example, `("Doing" . "DOING")`. The `cdr` values should be present in `org-todo-keywords`.
#+vindex: tlon-todo-tags
+ ~tlon-todo-tags~ :: List of valid Org tags used by Tlön (e.g., "PendingReview", "Later").
#+vindex: tlon-forg-sort-by-tags-regexp
+ ~tlon-forg-sort-by-tags-regexp~ :: Regexp used by ~tlon-forg-sort-by-tag~ to identify sortable tags.
  GitHub Project related constants (like project owner, number, node IDs for project, status field, and status options, as well as GraphQL queries) are now primarily managed within =forge-extras.el=. Functions in =tlon-forg.el= that interact with GitHub Projects now call helper functions from =forge-extras.el= and rely on its configuration (e.g., ~forge-extras-project-owner~, ~forge-extras-project-node-id~).

*** File Path Management
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-file-paths
:END:
#+vindex: tlon-todos-jobs-file
+ ~tlon-todos-jobs-file~ :: Variable holding the path to the Org file containing job-related TODOs. Set dynamically via ~tlon-get-todos-jobs-file~.
#+vindex: tlon-todos-generic-file
+ ~tlon-todos-generic-file~ :: Variable holding the path to the Org file containing generic TODOs. Set dynamically via ~tlon-get-todos-generic-file~.

*** Repository and Issue Selection Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-repo-issue-selection-helpers
:END:
#+findex: tlon-forg--get-repo-specific-todo-file
+ ~tlon-forg--get-repo-specific-todo-file~ :: Returns the full path to the repo-specific Org TODO file for an =ISSUE= (e.g., =REPO-NAME.org= inside =paths-dir-tlon-todos=).
#+findex: tlon-forg-get-or-select-repository
+ ~tlon-forg-get-or-select-repository~ :: Returns a `forge-repository` object.
  Priority:
  1. If the current buffer is an Org file whose name (e.g., =REPO.org=) corresponds to a known Tlön repository, that repository is used.
  2. Otherwise, it tries to get the repository from the current `default-directory` using `forge-get-repository :tracked`.
  3. If that fails, it prompts the user to select from known Tlön repositories (via ~tlon-get-repo~).
  4. If that also fails or is skipped, it lists repositories from the GitHub organization specified by ~forge-extras-project-owner~ (using the `gh` CLI) and prompts for selection.
  The selected repository must be locally configured in Tlön for its path to be found by name.
#+findex: tlon-forg-select-issue-from-repo
+ ~tlon-forg-select-issue-from-repo~ :: Prompts the user to select an open issue from a `forge-repository` object after ensuring its topics are fetched.

*** File Path Management
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-file-paths
:END:
#+findex: tlon-get-todos-jobs-file
+ ~tlon-get-todos-jobs-file~ :: Retrieves the path to the jobs TODO file using its Org ID (=paths-tlon-todos-jobs-id=) and caches it.
#+findex: tlon-get-todos-generic-file
+ ~tlon-get-todos-generic-file~ :: Retrieves the path to the generic TODO file using its Org ID (=paths-tlon-todos-generic-id=) and caches it.
#+findex: tlon-get-todos-file-from-issue
+ ~tlon-get-todos-file-from-issue~ :: Returns the appropriate TODO file path (jobs or generic) based on whether the =ISSUE= is a job (~tlon-issue-is-job-p~). This typically determines the initial capture location for a new TODO.
  Generic issues are initially captured to the file returned by ~tlon-get-todos-generic-file~. However, they may be subsequently moved to repository-specific Org files located in the directory specified by the variable =paths-dir-tlon-todos=. These files are typically named after the repository (e.g., =foo-bar.org= for a repository named =foo-bar=). Functions like ~tlon-get-todo-position-from-issue~ are aware of this structure and will search these locations to find existing TODOs.
#+findex: tlon-get-todo-position
+ ~tlon-get-todo-position~ :: Finds the starting position of a heading matching =STRING= in =FILE=. If =SUBSTRING= is non-nil, matches anywhere in the heading; otherwise, requires an exact match. Uses ~org-find-exact-headline-in-buffer~ or ~tlon-find-headline-substring-in-file~.
#+findex: tlon-find-headline-substring-in-file
+ ~tlon-find-headline-substring-in-file~ :: Helper to find the position of a heading containing =TODO= as a substring within =FILE=.
#+findex: tlon-get-todo-position-from-issue
+ ~tlon-get-todo-position-from-issue~ :: Finds the position and file of the TODO associated with =ISSUE=. Returns a cons cell =(POSITION . FILE-PATH)= if found, otherwise nil.
  - For job issues, it searches for the heading name (derived from the issue title) in the jobs file (~tlon-get-todos-jobs-file~).
  - For generic (non-job) issues, it searches for the =orgit-topic:ID= link as a substring:
    1. First, in the repository-specific Org file (e.g., =REPO-NAME.org=) located within the directory defined by =paths-dir-tlon-todos=.
    2. If not found there, it searches in the main generic TODOs file (~tlon-get-todos-generic-file~).

*** Pandoc Conversion Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-pandoc-helpers
:END:
#+findex: tlon-forg--pandoc-convert
+ ~tlon-forg--pandoc-convert~ :: Converts =TEXT= between markup formats =FROM= → =TO= using Pandoc.
#+findex: tlon-forg-md->org
+ ~tlon-forg-md->org~ :: Converts =TEXT= from Markdown to Org format.
#+findex: tlon-forg-org->md
+ ~tlon-forg-org->md~ :: Converts =TEXT= from Org to Markdown format using Emacs's built-in Org export engine (`org-export-string-as`).

*** Issue and TODO Data Retrieval
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-data-retrieval
:END:
#+findex: tlon-get-issue
+ ~tlon-get-issue~ :: Retrieves the =forge-topic= object for an issue specified by =NUMBER= and =REPO=, or by extracting these from the current Org heading.
#+findex: tlon-get-issue-buffer
+ ~tlon-get-issue-buffer~ :: Returns the buffer visiting the specified issue (or the one at point/heading). Uses ~tlon-visit-issue~ internally.
#+findex: tlon-get-element-from-heading
+ ~tlon-get-element-from-heading~ :: Extracts text matching =REGEXP= from the Org heading at point.
#+findex: tlon-get-issue-number-from-heading
+ ~tlon-get-issue-number-from-heading~ :: Extracts the issue number (e.g., #123) from the heading.
#+findex: tlon-get-repo-from-heading
+ ~tlon-get-repo-from-heading~ :: Extracts the repository abbreviation (e.g., [repo-abbrev]) from the heading and looks up the full directory path.
#+findex: tlon-get-issue-number-from-open-issues
+ ~tlon-get-issue-number-from-open-issues~ :: Prompts the user to select an open issue from the current repository using completion and returns its number.
#+findex: tlon-get-issues
+ ~tlon-get-issues~ :: Returns a list of all open =forge-issue= objects for the specified =REPO= (or current repo).
#+findex: tlon-get-latest-issue
+ ~tlon-get-latest-issue~ :: Returns the number and title of the most recently created open issue in the =REPO=.
#+findex: tlon-count-issues
+ ~tlon-count-issues~ :: Returns the count of open issues in the =REPO=.
#+findex: tlon-get-labels-of-type
+ ~tlon-get-labels-of-type~ :: Returns labels of a specific =TYPE= ('tag or 'phase) from an =ISSUE=.
#+findex: tlon-get-status-in-issue
+ ~tlon-get-status-in-issue~ :: Returns the GitHub Project status of an =ISSUE=, mapped to an Org TODO keyword (e.g., "DOING", "NEXT"). It uses ~forge-extras-gh-get-issue-fields~ and ~forge-extras-gh-parse-issue-fields~ (from =forge-extras.el=) to fetch and parse the 'Status' field from the project configured in =forge-extras.el= (via ~forge-extras-project-number~, ~forge-extras-project-owner~, etc.). If the project status cannot be determined or the issue is not in the specified project, it falls back to a status based on the issue's open/closed state (e.g., "TODO", "DONE").
#+findex: tlon-get-status-in-todo
+ ~tlon-get-status-in-todo~ :: Returns the Org TODO state (e.g., "doing") if it's one of the `cdr` values in ~tlon-todo-statuses~.
#+findex: tlon-get-phase-in-labels
+ ~tlon-get-phase-in-labels~ :: Finds the unique valid phase label within a list of =LABELS=.
#+findex: tlon-get-phase-in-issue
+ ~tlon-get-phase-in-issue~ :: Returns the unique valid job phase label for an =ISSUE=.
#+findex: tlon-get-assignee
+ ~tlon-get-assignee~ :: Returns the login name of the first assignee of an =ISSUE=.
#+findex: tlon-forg-get-labels
+ ~tlon-forg-get-labels~ :: Returns a list of all label names for an =ISSUE=.
#+findex: tlon-get-tags-in-todo
+ ~tlon-get-tags-in-todo~ :: Returns the valid Org tags (from ~tlon-todo-tags~) on the heading at point.
#+findex: tlon-get-element
+ ~tlon-get-element~ :: Generic function to get an =ELEMENT= (slot) from an =ISSUE= object.
#+findex: tlon-get-first-element
+ ~tlon-get-first-element~ :: Gets the first item from an =ELEMENT= (slot) that holds a list (like assignees, labels).
#+findex: tlon-get-first-label
+ ~tlon-get-first-label~ :: Returns the name of the first label of an =ISSUE=.
#+findex: tlon-get-state
+ ~tlon-get-state~ :: Returns the state symbol ('open or 'completed) of an =ISSUE=.
#+findex: tlon-get-issue-name
+ ~tlon-get-issue-name~ :: Formats the issue name as "#NUMBER TITLE".
#+findex: tlon-get-issue-link
+ ~tlon-get-issue-link~ :: Creates an Org link string (=orgit-topic:ID=) for an =ISSUE=.
#+findex: tlon-make-todo-name-from-issue
+ ~tlon-make-todo-name-from-issue~ :: Constructs the full Org heading string for an =ISSUE=, including status, repo abbreviation, optional job action, the issue link, and tags. Handles =NO-ACTION= and =NO-STATUS= flags.
#+findex: tlon-get-file-from-issue
+ ~tlon-get-file-from-issue~ :: Extracts a key from the issue name and finds the corresponding file path using ~tlon-get-file-from-key~.
#+findex: tlon-get-parent-todo
+ ~tlon-get-parent-todo~ :: Finds the parent heading of a given =TODO= name within the jobs file.
#+findex: tlon-forg--org-heading-title
+ ~tlon-forg--org-heading-title~ :: Returns the issue title encoded in the Org heading at point, stripping repo tags, orgit-links, and issue number prefixes.
#+findex: tlon-forg--org-heading-components
+ ~tlon-forg--org-heading-components~ :: Returns a plist =(:title TITLE :tags TAGS :todo TODO)= for the Org heading at point.

*** Issue and TODO Modification
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-modification
:END:
#+findex: tlon-set-repo-in-heading
+ ~tlon-set-repo-in-heading~ :: Prompts the user to select a repository and inserts its abbreviation tag (e.g., [repo-abbrev]) into the Org heading if not already present.
#+findex: tlon-set-issue-number-in-heading
+ ~tlon-set-issue-number-in-heading~ :: Inserts the =ISSUE-NUMBER= (e.g., #123) into the Org heading if not already present.
#+findex: tlon-close-issue
+ ~tlon-close-issue~ :: Sets the state of an =ISSUE= to 'completed using =forge--set-topic-state=.
#+findex: tlon-close-issue-number
+ ~tlon-close-issue-number~ :: Visits the issue specified by =ISSUE-NUMBER= and =REPO= and then closes it using ~tlon-close-issue~.
#+findex: tlon-set-labels
+ ~tlon-set-labels~ :: Sets the labels for an =ISSUE=. Can optionally replace existing labels of a specific =TYPE= (status or phase) or simply append new labels. Uses =forge--set-topic-labels=.
#+findex: tlon-set-job-label
+ ~tlon-set-job-label~ :: Prompts the user to select a valid job label from ~tlon-job-labels~.
#+findex: tlon-set-status
+ ~tlon-set-status~ :: Prompts the user to select a valid TODO status from ~tlon-todo-statuses~.
#+findex: tlon-set-assignee
+ ~tlon-set-assignee~ :: Sets the assignee for an =ISSUE= using =forge--set-topic-assignees=. Takes the =ASSIGNEE= login string.
#+findex: tlon-select-assignee
+ ~tlon-select-assignee~ :: Prompts the user to select a GitHub user (from ~tlon-user-lookup-all~) to be the assignee.
#+findex: tlon-set-initial-label-and-assignee
+ ~tlon-set-initial-label-and-assignee~ :: Sets the issue label to "Awaiting processing" and assigns it to the current user. Used when creating master job TODOs.
#+findex: tlon-update-todo-from-issue
+ ~tlon-update-todo-from-issue~ :: Replaces the current Org heading line with the provided =ISSUE-NAME= string during reconciliation.
#+findex: tlon-update-issue-from-todo
+ ~tlon-update-issue-from-todo~ :: Updates the GitHub issue (title, labels, project status) to match the Org TODO heading at point. It uses functions from =forge-extras.el= (like ~forge-extras-gh-get-issue-fields~, ~forge-extras-gh-parse-issue-fields~, ~forge-extras-gh-add-issue-to-project~, and ~forge-extras-gh-update-project-item-status-field~) for GitHub Project interactions. If the issue is not in the target project (configured in =forge-extras.el= via ~forge-extras-project-number~, ~forge-extras-project-node-id~, etc.), it prompts to add it before setting the status. Configuration of project IDs should be done in =forge-extras.el=.
#+findex: tlon-mark-todo-done
+ ~tlon-mark-todo-done~ :: Finds the =TODO= heading in =FILE= and sets its state to "DONE".
#+findex: tlon-forg--set-github-project-estimate
+ ~tlon-forg--set-github-project-estimate~ :: Sets the GitHub Project "Estimate" field for an =ISSUE= to =ESTIMATE-VALUE= (float hours).
#+findex: tlon-forg--set-github-project-status
+ ~tlon-forg--set-github-project-status~ :: Sets the GitHub Project status for an =ISSUE= based on an =ORG-STATUS-KEYWORD=.
#+findex: tlon-forg--org-effort-to-hours
+ ~tlon-forg--org-effort-to-hours~ :: Converts an Org "Effort" property string to float hours.
#+findex: tlon-forg--set-org-effort
+ ~tlon-forg--set-org-effort~ :: Sets the Org "Effort" property from float =EFFORT-HOURS=.

*** Capture and Reconciliation Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-capture-helpers
:END:
#+findex: tlon-pull-silently
+ ~tlon-pull-silently~ :: Performs a =forge--pull= operation for the given =REPO= (or the current one if =REPO= is nil), suppressing output messages. Optionally displays a custom =MESSAGE=. If a =CALLBACK= function is provided, it is executed after the pull completes, and the window configuration active before the pull is restored afterwards.
#+findex: tlon-forg--pull-sync
+ ~tlon-forg--pull-sync~ :: Runs `forge--pull` on `FORGE-REPO` synchronously and quietly.
#+findex: tlon-forg--wait-for-issue
+ ~tlon-forg--wait-for-issue~ :: Returns an =ISSUE= by =NUMBER= in =REPO-DIR=, waiting and pulling =FORGE-REPO= until it exists locally or times out. Signals a `user-error` if the issue cannot be found in time.
#+findex: tlon-capture-all-issues-after-pull
+ ~tlon-capture-all-issues-after-pull~ :: Callback function for ~tlon-capture-all-issues~ that initiates the capture process for the specified =REPO= after the initial pull completes.
#+findex: tlon-store-todo
+ ~tlon-store-todo~ :: Uses =org-capture= with a specific =TEMPLATE= ("tbG" or "tbJ") to store a new TODO for the =ISSUE=, unless one already exists. Handles master job TODO creation.
#+findex: tlon-capture-handle-assignee
+ ~tlon-capture-handle-assignee~ :: Implements the logic defined by ~tlon-when-assignee-is-nil~ and ~tlon-when-assignee-is-someone-else~ during issue capture. Returns =t= if capture should proceed, =nil= otherwise. May call ~tlon-forg-change-assignee~.
#+findex: tlon-forg-change-assignee
+ ~tlon-forg-change-assignee~ :: Changes the assignee of the =ISSUE= to the current user and waits (pulling silently) until the change is reflected locally.
#+findex: tlon-capture-handle-phase
+ ~tlon-capture-handle-phase~ :: Ensures an =ISSUE= being captured as a job has a valid phase label, prompting the user to select one if missing.
#+findex: tlon-issue-is-job-p
+ ~tlon-issue-is-job-p~ :: Returns =t= if the =ISSUE= title starts with "Job: ".
#+findex: tlon-create-job-todo-from-issue
+ ~tlon-create-job-todo-from-issue~ :: Handles phase checking and calls ~tlon-store-or-refile-job-todo~ for job issues.
#+findex: tlon-store-master-job-todo
+ ~tlon-store-master-job-todo~ :: Creates the main parent heading for a job if it doesn't exist. Optionally sets the initial issue label and assignee.
#+findex: tlon-store-or-refile-job-todo
+ ~tlon-store-or-refile-job-todo~ :: Creates a new job TODO using ~tlon-store-todo~ and then refiles it under its corresponding master job heading (found using ~tlon-get-todo-position~). If the master heading doesn't exist, prompts to create it via ~tlon-store-master-job-todo~. Uses =org-extras= functions for refiling.
#+findex: tlon-sync-all-issues-and-todos-after-pull
+ ~tlon-sync-all-issues-and-todos-after-pull~ :: Callback function for ~tlon-sync-all-issues-and-todos~ that initiates the sync process after the initial pull completes.
#+findex: tlon-sync-issue-and-todo-from-issue
+ ~tlon-sync-issue-and-todo-from-issue~ :: Core sync logic called by ~tlon-sync-issue-and-todo~. Compares expected and actual TODO names and calls ~tlon-sync-issue-and-todo-prompt~ if they differ. Also syncs estimates.
#+findex: tlon-sync-estimate-from-issue
+ ~tlon-sync-estimate-from-issue~ :: Syncs the estimate for an =ISSUE= and its associated TODO. Handles cases where only one has an estimate or if they differ, based on ~tlon-forg-when-syncing~.
#+findex: tlon-sync-issue-and-todo-prompt
+ ~tlon-sync-issue-and-todo-prompt~ :: Handles the user interaction or automatic action based on ~tlon-forg-when-syncing~ when a discrepancy is found. Calls either ~tlon-update-todo-from-issue~ or ~tlon-update-issue-from-todo~.
#+findex: tlon-forg--select-with-completing-read
+ ~tlon-forg--select-with-completing-read~ :: Prompts user via `completing-read` which value of an element to keep during sync.
#+findex: tlon-forg--prompt-element-diff
+ ~tlon-forg--prompt-element-diff~ :: Determines sync action based on `tlon-forg-when-syncing` or user choice for a differing element.
#+findex: tlon-forg--sync-title
+ ~tlon-forg--sync-title~ :: Reconciles the issue title with the Org heading at point.
#+findex: tlon-forg--sync-status
+ ~tlon-forg--sync-status~ :: Reconciles the status between an issue and the Org heading.
#+findex: tlon-forg--sync-tags
+ ~tlon-forg--sync-tags~ :: Reconciles the tags between an issue and the Org heading.
#+findex: tlon-forg--diff-issue-and-todo
+ ~tlon-forg--diff-issue-and-todo~ :: Returns a list of symbols (`title`, `status`, `tags`) whose values differ between an issue and the Org heading.
#+findex: tlon-forg--report-diff
+ ~tlon-forg--report-diff~ :: Returns a human-readable string summarizing differences.
#+findex: tlon-forg--get-all-todo-files
+ ~tlon-forg--get-all-todo-files~ :: Returns a list of all Org TODO files to be processed (generic, jobs, and repo-specific). It combines the paths from ~tlon-get-todos-generic-file~, ~tlon-get-todos-jobs-file~, and all `.org` files found in the directory specified by `paths-dir-tlon-todos`. Ensures paths are absolute and unique.

*** Validation and Checks
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-validation
:END:
#+findex: tlon-assignee-is-current-user-p
+ ~tlon-assignee-is-current-user-p~ :: Returns =t= if the =ISSUE='s assignee matches the current user (or ~tlon-forg-enforce-user~).
#+findex: tlon-todo-has-valid-status-p
+ ~tlon-todo-has-valid-status-p~ :: Returns =t= if the Org heading at point has a TODO state listed in ~tlon-todo-statuses~.
#+findex: tlon-check-label-and-assignee
+ ~tlon-check-label-and-assignee~ :: Checks if the label and assignee of the issue associated with the currently clocked task match the clocked action and the current user. Used before starting a job phase.

*** GitHub Project Integration
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-gh-project
:END:
The direct integration with GitHub Projects (V2) using the `gh` command-line tool and GraphQL has been largely moved to =forge-extras.el=. Functions within =tlon-forg.el=, such as ~tlon-get-status-in-issue~ and ~tlon-update-issue-from-todo~, now call helper functions provided by =forge-extras.el= (e.g., ~forge-extras-gh-get-issue-fields~, ~forge-extras-gh-parse-issue-fields~, ~forge-extras-gh-add-issue-to-project~, ~forge-extras-gh-update-project-item-status-field~).

Configuration for GitHub Project integration (like project owner, project number, and various Node IDs) should now be done via the `defcustom` variables in =forge-extras.el= (e.g., ~forge-extras-project-owner~, ~forge-extras-project-number~, ~forge-extras-project-node-id~, ~forge-extras-status-field-node-id~, ~forge-extras-status-option-ids-alist~). The command ~tlon-forg-discover-project-node-ids~, which helps in discovering these IDs, is also part of =forge-extras.el=.

*** Miscellaneous Helpers
:PROPERTIES:
:CUSTOM_ID: h:tlon-forg-misc-helpers
:END:
#+findex: tlon-open-todo
+ ~tlon-open-todo~ :: Helper function to open =FILE= and go to =POSITION=.
#+findex: tlon-todo-issue-funcall
+ ~tlon-todo-issue-funcall~ :: Calls =TODO-FUN= if in Org mode at a heading, or =ISSUE-FUN= if in a Forge buffer with an issue context. Used by counterpart and sync commands.
#+findex: tlon-forg-tag-sorter
+ ~tlon-forg-tag-sorter~ :: The custom comparison function used by ~tlon-forg-sort-by-tag~. Extracts the first tag matching ~tlon-forg-sort-by-tags-regexp~ or returns "~" for sorting unmatched entries last.
#+findex: tlon-forg-status-and-project-order-sorter
+ ~tlon-forg-status-and-project-order-sorter~ :: The custom comparison function used by ~tlon-forg-sort-by-status-and-project-order~. It takes a list of project items (pre-fetched by the main command) and returns a sort key for the Org entry at point. The key is a list `(STATUS-PRIORITY PROJECT-POSITION ISSUE-NUMBER)`.
  - =STATUS-PRIORITY= is a number based on the Org TODO keyword (lower is earlier; "DOING" < "NEXT" < ... < "DONE" < no status).
  - =PROJECT-POSITION= is the index of the issue in the provided project items list (lower is earlier). Issues not in the list get a high position.
  - =ISSUE-NUMBER= serves as a final tie-breaker.
  Entries not linked to a GitHub issue receive a sort key that places them at the end.
#+findex: tlon-create-issue
+ ~tlon-create-issue~ :: Creates a GitHub issue using =ghub-post=.
#+findex: tlon-create-issue-in-dir
+ ~tlon-create-issue-in-dir~ :: Helper for ~tlon-report-bug~, sets up Magit and calls =forge-create-issue=.
#+findex: tlon-prepopulate-bug-report-buffer
+ ~tlon-prepopulate-bug-report-buffer~ :: Inserts a template into the buffer created by ~tlon-report-bug~.
#+findex: tlon-symbol-reader
+ ~tlon-symbol-reader~ :: Helper for transient menus to read a symbol choice using completion.
#+findex: tlon-when-assignee-is-nil-infix
+ ~tlon-when-assignee-is-nil-infix~ :: Transient infix command to set ~tlon-when-assignee-is-nil~.
#+findex: tlon-when-assignee-is-someone-else-infix
+ ~tlon-when-assignee-is-someone-else-infix~ :: Transient infix command to set ~tlon-when-assignee-is-someone-else~.
#+findex: tlon-forg-when-syncing-infix
+ ~tlon-forg-when-syncing-infix~ :: Transient infix command to set ~tlon-forg-when-syncing~.
#+findex: tlon-infix-toggle-include-archived
+ ~tlon-infix-toggle-include-archived~ :: Transient infix command to toggle ~tlon-forg-include-archived~.
#+findex: tlon-infix-toggle-archive-todo-on-close
+ ~tlon-infix-toggle-archive-todo-on-close~ :: Transient infix command to toggle ~tlon-forg-archive-todo-on-close~.
