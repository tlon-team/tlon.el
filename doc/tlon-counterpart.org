#+title: tlon - Counterpart Navigation and Comparison
#+author: Pablo Stafforini
#+EXCLUDE_TAGS: noexport
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+texinfo_header: @set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon,maintainer webpage}
#+texinfo_header: @set MAINTAINER Pablo Stafforini
#+texinfo_header: @set MAINTAINEREMAIL @email{pablo@tlon.team}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
#+texinfo: @insertcopying

* Counterpart Navigation and Comparison (=tlon-counterpart.el=)
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart
:END:

This module provides functionality for finding, opening, and comparing "counterpart" files. In the Tlön context, a counterpart is typically the original version of a translated document, or a translation in a specific language if the current file is the original. It also includes tools for working with paragraphs within these files.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-dependencies
:END:

+ =tlon-core=
+ =tlon-md=
+ =tlon-yaml=
+ =files-extras=
+ =transient=
+ =dired= (optional, for Dired integration)

** Commands
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-commands
:END:

*** Finding Counterparts
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-finding-cmds
:END:

#+findex: tlon-get-counterpart
+ ~tlon-get-counterpart~ :: (Autoloaded) Calculates and returns the full path to the counterpart file of =FILE= (or the current buffer's file).
  - If the file is in a repository marked as =translations= (based on its =:subtype= property), it interprets the YAML =key= as the translation BibTeX key and maps it to the original key via the bibliography. It then searches across all repos with =:language= "en" and =:subtype= 'originals and opens the unique match, prompting only to disambiguate when multiple matches are found.
  - If the file is in a repository marked as =originals=, it prompts the user to select a target language, enumerates all repos with that =:language= and =:subtype= 'translations, and resolves the translation by mapping each translation file’s YAML =key= (a translation BibTeX key) back to its original via the bibliography. It opens the unique match, prompting only if multiple remain.
  - Signals an error if the repository subtype is neither =originals= nor =translations=, or if necessary metadata is missing.

#+findex: tlon-get-counterpart-dir
+ ~tlon-get-counterpart-dir~ :: Calculates and returns the directory path where the counterpart of =FILE= (or the current buffer's file) should reside. It determines the counterpart repository (~tlon-get-counterpart-repo~) and translates the relative directory structure within the source repository to the equivalent structure in the target repository using ~tlon-get-bare-dir-translation~. For counterpart repositories not in the "uqbar" subproject, this function returns the repository root.

#+findex: tlon-get-counterpart-repo
+ ~tlon-get-counterpart-repo~ :: Returns the full path to the repository directory containing the counterpart of =FILE= (or the current buffer's file). It identifies the source repository, its subproject, determines the counterpart language (~tlon-get-counterpart-language~), and looks up the repository matching the subproject and counterpart language using ~tlon-repo-lookup~.

#+findex: tlon-get-counterpart-language
+ ~tlon-get-counterpart-language~ :: Determines the language code of the counterpart for a given =REPO= (or the current repository).
  - If the repository language is "en" (English), it prompts the user to select a target language from ~tlon-project-target-languages~ using completion.
  - If the repository language is one of the target languages, it returns "en".
  - Signals an error if the repository language is not recognized.

#+findex: tlon-get-content-subtype
+ ~tlon-get-content-subtype~ :: Returns the =:subtype= property ('originals or 'translations) of the repository containing =FILE= (or the current buffer's file). Ensures the repository's =:type= is 'content.

*** Opening Counterparts
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-opening-cmds
:END:

#+findex: tlon-open-counterpart
+ ~tlon-open-counterpart~ :: (Autoloaded) Opens the counterpart of =FILE= (or the current buffer's file) and attempts to position the cursor at the corresponding paragraph.
  1. Saves the current buffer if no =FILE= argument is given.
  2. Finds the counterpart file using ~tlon-get-counterpart~.
  3. Calculates the number of paragraphs before the current point using ~tlon-get-number-of-paragraphs~.
  4. Determines if point is exactly between paragraphs using ~tlon-is-between-paragraphs-p~ to apply an offset.
  5. Opens the counterpart file using =find-file= (or =find-file-other-window= if =OTHER-WIN= or prefix argument is non-nil).
  6. In the counterpart buffer, moves past the YAML front matter.
  7. Moves forward the calculated number of paragraphs (minus the offset).
  8. Moves point one character forward (typically to the start of the paragraph content).

#+findex: tlon-open-counterpart-in-dired
+ ~tlon-open-counterpart-in-dired~ :: Opens Dired to the directory containing the counterpart of =FILE= (or the file at point in Dired). Uses ~tlon-get-counterpart~ to find the file and =dired-jump= to open Dired. Supports opening in another window with a prefix argument.

#+findex: tlon-open-counterpart-dwim
+ ~tlon-open-counterpart-dwim~ :: (Autoloaded) "Do What I Mean" command for opening counterparts.
  - If called in =markdown-mode=, behaves like ~tlon-open-counterpart~.
  - If called in =dired-mode=, behaves like ~tlon-open-counterpart-in-dired~.
  - Supports opening in another window with a prefix argument.

#+findex: tlon-open-counterpart-in-other-window-dwim
+ ~tlon-open-counterpart-in-other-window-dwim~ :: (Autoloaded) Convenience command that calls ~tlon-open-counterpart-dwim~ with the =OTHER-WIN= argument set to =t=, forcing the counterpart to open in another window.

*** Reporting
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-reporting
:END:

#+findex: tlon-counterpart-report-missing
+ ~tlon-counterpart-report-missing~ :: (Autoloaded) Prompts for an entity
  type (one of “articles”, “authors” or “tags”) and two languages, then
  scans the current subproject’s repositories for those languages and
  reports files of the selected type that have no counterpart in the
  other language. The scan includes Markdown files in the repository
  root and in immediate subdirectories only (non-recursive). The results
  are shown in a dedicated buffer with two lists:
  - Missing in LANG-B: files in LANG-A with no counterpart in LANG-B.
  - Missing in LANG-A: files in LANG-B with no counterpart in LANG-A.

*** Transient Menu
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-menu-cmd
:END:
#+findex: tlon-counterpart-menu
The command ~tlon-counterpart-menu~ activates a =transient= menu interface for counterpart operations.

It provides the following groups and commands:
+ *Navigation*:
  + =u= :: Visit counterpart (~tlon-open-counterpart-dwim~)
  + =H-u= :: Visit counterpart other window (~tlon-open-counterpart-in-other-window-dwim~)
  + =U= :: Open counterpart in Dired (~tlon-open-counterpart-in-dired~)
+ *Links*:
  + =l= :: translate relative links (~tlon-translate-relative-links~)
  + =L= :: translate relative links in marked files (~tlon-translate-relative-links-in-dired~)
+ *Metadata*:
  + =o= :: Set ‘original_path’ (~tlon-yaml-insert-original-path~)

** Internal Functions and Variables
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-internals
:END:

This section lists non-interactive functions used internally or potentially useful for advanced customization.

*** Counterpart Finding Logic
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-finding-internals
:END:

#+findex: tlon-get-counterpart-in-translations
+ ~tlon-get-counterpart-in-translations~ :: For a translation file, it interprets YAML =key= as the translation BibTeX key, maps it to the original key via the bibliography, and searches across all repos with =:language= "en" and =:subtype= 'originals, prompting only when more than one candidate remains.

#+findex: tlon-get-counterpart-in-originals
+ ~tlon-get-counterpart-in-originals~ :: For an original file, it enumerates all repos with the selected target language and =:subtype= 'translations, treating YAML =key= in translations as the translation BibTeX key and mapping it back to the original via the bibliography; it returns the unique matching translation or prompts to disambiguate when several candidates remain.

*** Link Handling Logic
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-link-internals
:END:

#+findex: tlon-translate-relative-links
+ ~tlon-translate-relative-links~ :: Scans the current Markdown buffer for relative links beginning with =./= or of the form =../bare-dir/filename.md= that do not resolve to an existing local file. For each such link, it constructs the corresponding English path in the =uqbar-en= repo using the appropriate bare directory mapping, obtains the counterpart with =tlon-get-counterpart=, and rewrites the link to point to the translated relative path, preserving anchors.

#+findex: tlon-replace-internal-links
+ ~tlon-replace-internal-links~ :: (Autoloaded) Interactively replaces internal Markdown links (like =[text](./file.md)= or =[text](../dir/file.md)=) with their corresponding counterpart links.
  - If a region is active, it processes links only within that region. Otherwise, it processes the entire buffer.
  - It searches for the pattern =\\[[^]]*\\](\\s-*\\(\\([.]\\{1,2\\}/\\)?[^):]+\\.md\\)\\s-*)=.
  - For each match, it extracts the relative link path (group 1).
  - It skips links that are just ="./"= or ="../"=.
  - It calls ~tlon-get-counterpart-link~ to find the corresponding counterpart path.
  - If a counterpart path is found and is different from the original:
    - It replaces the original link path with the counterpart path.
    - It preserves a leading ="./"= if the original link had one.
    - Increments a counter for successful replacements.
  - If no counterpart path is found or it's the same as the original, it skips the replacement. If not found, increments an error counter.
  - After processing, it displays a message summarizing the number of replacements and errors.

#+findex: tlon-translate-relative-links-in-dired
+ ~tlon-translate-relative-links-in-dired~ :: When invoked in Dired with one or more files marked, applies ~tlon-translate-relative-links~ to each marked Markdown file. It skips non-Markdown files and, after processing, displays a summary indicating how many files were processed and how many errors occurred, and opens a buffer listing the individual error messages (one per line) when any errors are encountered.

*** Paragraph Handling Logic
:PROPERTIES:
:CUSTOM_ID: h:tlon-counterpart-paragraph-internals
:END:

#+findex: tlon-is-between-paragraphs-p
+ ~tlon-is-between-paragraphs-p~ :: Returns non-nil if point is exactly between two paragraphs (i.e., moving one character forward changes the paragraph count). Uses ~tlon-get-number-of-paragraphs~.

#+findex: tlon-with-paragraphs
+ ~tlon-with-paragraphs~ :: Iterates through each paragraph in =FILE= (or current buffer) and executes =FN= for each.
  1. Finds the file and switches to its buffer.
  2. Moves past the YAML front matter.
  3. Determines the end of the content (before local variables).
  4. Loops while point is before the content end:
     - Records the start position.
     - Moves forward one paragraph using =markdown-forward-paragraph=.
     - Records the end position (capped at content end).
     - If the region between start and end is non-empty and contains non-whitespace characters:
       - If =RETURN-POSITIONS= is non-nil, pushes =(start . end)= to the result list.
       - Otherwise, calls =FN= with start and end positions and pushes its result to the list.
  5. Returns the reversed list of results or positions.

#+findex: tlon-get-number-of-paragraphs
+ ~tlon-get-number-of-paragraphs~ :: Calculates the number of paragraphs between optional =START= and =END= positions. Calls ~tlon-with-paragraphs~ with =RETURN-POSITIONS= set to =t= and counts the resulting position pairs that fall within the specified range.

#+findex: tlon-get-corresponding-paragraphs
+ ~tlon-get-corresponding-paragraphs~ :: Returns a list of corresponding paragraph pairs =((orig-para-1 . trans-para-1) (orig-para-2 . trans-para-2) ...)= between =FILE= (or current buffer) and its =COUNTERPART= (inferred if nil).
  1. Finds the counterpart file.
  2. Uses ~tlon-with-paragraphs~ to get lists of paragraph text for both the original and translation files.
  3. Checks if the number of paragraphs is different. If so:
     - Creates the "/Paragraph Pairs/" buffer.
     - Inserts an error message detailing the mismatch.
     - Inserts all paragraph pairs found so far (padding with "[Missing paragraph]" if one list is shorter).
     - Displays the buffer.
     - Signals a =user-error= "Paragraph number mismatch".
  4. If paragraph counts match, pairs up the paragraphs and returns the list.

